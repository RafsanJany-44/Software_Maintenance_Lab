{"traceEvents": [{"ph": "M", "pid": 30344, "tid": 30344, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 30344, "tid": 1437611, "name": "thread_name", "args": {"name": "Thread-1"}}, {"ph": "M", "pid": 30344, "tid": 1437522, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 30344, "tid": 1437522, "ts": 541043184069.0, "dur": 1.0, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184075.0, "dur": 1.0, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184068.0, "dur": 8.02, "name": "currentframe (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:1507)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184082.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184081.0, "dur": 2.0, "name": "lru_cache (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:458)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184087.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184088.0, "dur": 0.02, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184089.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184089.04, "dur": 0.02, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184090.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184090.04, "dur": 0.02, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184090.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184091.02, "dur": 0.02, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184092.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184092.04, "dur": 0.96, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184093.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184094.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184095.0, "dur": 1.0, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184086.0, "dur": 10.02, "name": "update_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184084.0, "dur": 13.0, "name": "decorating_function (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:492)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184098.0, "dur": 0.02, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184111.0, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184112.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184110.0, "dur": 3.0, "name": "static_folder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:259)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184114.0, "dur": 1.0, "name": "static_url_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:290)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184117.02, "dur": 0.98, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184118.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184120.0, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184120.06, "dur": 0.94, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184121.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184121.02, "dur": 1.0, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184122.04, "dur": 0.96, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184120.04, "dur": 2.98, "name": "isabs (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:64)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184123.06, "dur": 0.94, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184124.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184124.06, "dur": 0.94, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184125.02, "dur": 0.98, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184126.02, "dur": 0.98, "name": "str.split", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184128.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184129.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184129.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184130.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184130.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184131.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184131.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184132.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184132.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184136.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184136.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184137.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184123.04, "dur": 14.96, "name": "normpath (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:338)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184119.0, "dur": 19.02, "name": "abspath (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:376)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184139.02, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184140.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184140.0, "dur": 0.06, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184141.0, "dur": 0.02, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184142.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184142.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184139.0, "dur": 4.02, "name": "dirname (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:154)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184117.0, "dur": 26.04, "name": "get_root_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:705)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184154.0, "dur": 2.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py:838)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184152.0, "dur": 10.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py:1166)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184150.0, "dur": 14.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py:1461)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184147.0, "dur": 18.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py:1788)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184108.0, "dur": 67.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:92)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184178.0, "dur": 0.02, "name": "str.partition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184182.02, "dur": 0.98, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184182.0, "dur": 2.0, "name": "find_spec (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/importlib/util.py:73)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184189.02, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184190.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184190.0, "dur": 0.06, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184191.0, "dur": 0.02, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184192.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184192.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184189.0, "dur": 4.02, "name": "dirname (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:154)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184193.06, "dur": 0.94, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184194.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184194.02, "dur": 0.06, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184194.1, "dur": 0.9, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184195.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184196.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184193.04, "dur": 3.0, "name": "dirname (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:154)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184179.0, "dur": 17.06, "name": "_find_package_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:784)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184200.0, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184200.06, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184201.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184201.0, "dur": 0.06, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184201.08, "dur": 0.92, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184200.04, "dur": 1.98, "name": "isabs (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:64)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184203.0, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184203.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184203.08, "dur": 0.92, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184204.02, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184205.0, "dur": 1.0, "name": "str.split", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184209.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184210.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184210.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184211.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184211.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184212.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184212.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184213.0, "dur": 0.02, "name": "list.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184214.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184202.04, "dur": 12.96, "name": "normpath (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:338)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184199.0, "dur": 16.02, "name": "abspath (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:376)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184215.04, "dur": 0.96, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184177.0, "dur": 39.02, "name": "find_package (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:836)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184227.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184228.0, "dur": 1.0, "name": "name (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:525)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184225.0, "dur": 5.0, "name": "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/utils.py:90)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184220.0, "dur": 11.0, "name": "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:772)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184232.02, "dur": 0.98, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184233.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184233.02, "dur": 0.98, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184235.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184235.04, "dur": 0.96, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184236.02, "dur": 0.98, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184237.02, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184232.0, "dur": 6.0, "name": "join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:75)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184176.0, "dur": 62.02, "name": "auto_find_instance_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:630)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184252.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184253.0, "dur": 1.0, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184251.0, "dur": 3.02, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184250.0, "dur": 6.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184248.0, "dur": 10.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:657)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184246.0, "dur": 12.02, "name": "get_env (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184262.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184262.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184262.0, "dur": 1.02, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184261.0, "dur": 3.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184260.02, "dur": 4.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:657)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184267.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184267.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184266.02, "dur": 1.06, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184266.0, "dur": 2.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184265.02, "dur": 3.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:657)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184265.0, "dur": 4.02, "name": "get_env (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:29)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184260.0, "dur": 9.04, "name": "get_debug_flag (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184272.0, "dur": 4.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/config.py:72)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184240.0, "dur": 36.02, "name": "make_config (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:613)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184292.0, "dur": 1.0, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184301.0, "dur": 2.0, "name": "copy (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/datastructures.py:1611)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184287.0, "dur": 17.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1464)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184306.0, "dur": 1.0, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184310.02, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184311.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184311.0, "dur": 1.0, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184313.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184313.04, "dur": 0.96, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184310.0, "dur": 4.02, "name": "join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:75)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184308.02, "dur": 6.98, "name": "static_folder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184308.0, "dur": 7.02, "name": "has_static_folder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:266)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184319.04, "dur": 0.96, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184320.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184320.02, "dur": 0.06, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184321.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184322.0, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184319.02, "dur": 3.02, "name": "join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:75)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184319.0, "dur": 4.0, "name": "static_folder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184324.04, "dur": 0.96, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184325.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184325.02, "dur": 0.06, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184326.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184326.04, "dur": 0.96, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184324.02, "dur": 3.0, "name": "join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:75)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184324.0, "dur": 3.04, "name": "static_folder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184328.02, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184329.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184329.0, "dur": 0.06, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184329.08, "dur": 0.92, "name": "str.rfind", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184328.0, "dur": 3.0, "name": "basename (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:144)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184331.02, "dur": 0.98, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184318.0, "dur": 14.02, "name": "static_url_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:274)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184339.0, "dur": 1.0, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184335.0, "dur": 6.0, "name": "_is_setup_finished (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:522)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184344.0, "dur": 0.02, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184345.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184346.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184348.0, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184347.0, "dur": 2.0, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1061)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184349.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184353.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184354.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184359.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184360.0, "dur": 1.0, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184364.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184366.02, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184369.0, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184366.0, "dur": 4.0, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:715)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184371.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184358.0, "dur": 15.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:681)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184376.0, "dur": 1.0, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184388.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184387.0, "dur": 3.0, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184386.0, "dur": 5.0, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184391.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184392.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184393.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184394.0, "dur": 5.0, "name": "re.Pattern.match", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184400.0, "dur": 3.0, "name": "re.Match.groupdict", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184393.0, "dur": 11.0, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184407.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184410.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184413.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184412.0, "dur": 1.04, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184415.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184415.0, "dur": 0.06, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184419.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184421.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184418.0, "dur": 4.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184424.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:76)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184429.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184428.0, "dur": 1.04, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184431.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184435.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184434.0, "dur": 2.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184437.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184438.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184438.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184439.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184439.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184442.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184441.0, "dur": 1.04, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184444.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184443.0, "dur": 1.04, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184445.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184446.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184445.0, "dur": 2.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184448.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184448.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184449.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184449.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184450.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184450.0, "dur": 4.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184455.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184455.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184456.02, "dur": 0.98, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184458.0, "dur": 0.02, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184460.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184460.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184459.0, "dur": 1.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184464.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184464.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184430.0, "dur": 35.02, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184466.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184467.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184466.04, "dur": 1.98, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184469.02, "dur": 0.98, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184471.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184471.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184473.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184473.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184474.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184474.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184476.02, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184476.0, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184477.02, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184478.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184479.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184479.06, "dur": 0.94, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184479.04, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184482.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184483.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184481.0, "dur": 2.04, "name": "_uniq (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:408)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184483.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184485.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184484.0, "dur": 1.04, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184486.02, "dur": 1.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184486.0, "dur": 2.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184489.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184489.0, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184491.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184490.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184492.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184493.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184491.06, "dur": 1.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184494.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184494.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184495.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184495.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184499.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184499.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184500.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184500.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184501.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184502.0, "dur": 0.02, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184503.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184503.02, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184503.0, "dur": 1.0, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184505.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184505.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184469.0, "dur": 37.04, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184507.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184507.04, "dur": 0.96, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184508.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184509.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184510.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184510.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184511.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184511.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184512.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184512.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184513.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184513.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184515.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184514.02, "dur": 1.02, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184514.0, "dur": 1.06, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184516.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184515.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184517.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184517.0, "dur": 1.02, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184427.0, "dur": 91.04, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184519.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184519.0, "dur": 2.0, "name": "fix_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:903)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184417.0, "dur": 104.02, "name": "parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:919)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184529.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184531.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184528.0, "dur": 3.04, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184544.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184545.02, "dur": 0.98, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184526.0, "dur": 20.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184547.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184548.02, "dur": 0.02, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184552.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184553.02, "dur": 0.98, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184551.0, "dur": 3.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184560.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184561.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184549.0, "dur": 13.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184562.02, "dur": 0.98, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184563.02, "dur": 0.02, "name": "builtins.max", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184564.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184565.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184525.0, "dur": 41.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184570.0, "dur": 1.0, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184569.0, "dur": 3.0, "name": "_get_literal_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:461)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184575.0, "dur": 0.02, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184577.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184577.0, "dur": 1.02, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184579.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184578.04, "dur": 1.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184573.0, "dur": 7.02, "name": "_get_charset_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:492)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184581.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184582.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184582.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184582.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184583.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184584.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184585.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184585.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184524.0, "dur": 62.0, "name": "_compile_info (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:536)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184591.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184592.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184593.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184596.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184596.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184600.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184600.0, "dur": 1.02, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184599.02, "dur": 2.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184602.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184602.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184599.0, "dur": 5.0, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184604.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184605.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184605.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184606.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184606.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184609.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184609.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184611.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184611.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184612.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184612.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184608.0, "dur": 11.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184619.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184620.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184621.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184621.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184594.0, "dur": 29.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184623.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184624.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184624.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184624.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184625.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184625.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184626.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184629.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184628.0, "dur": 2.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184632.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184632.0, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184631.02, "dur": 2.0, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184634.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184633.04, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184631.0, "dur": 4.0, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184635.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184636.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184636.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184636.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184637.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184639.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184639.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184641.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184641.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184642.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184642.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184638.0, "dur": 5.02, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184643.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184644.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184645.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184645.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184627.0, "dur": 19.02, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184647.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184647.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184647.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184648.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184648.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184649.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184650.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184650.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184588.0, "dur": 63.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184656.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184522.0, "dur": 134.04, "name": "_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:598)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184659.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184659.0, "dur": 1.0, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184661.0, "dur": 0.02, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184664.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184664.0, "dur": 1.02, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184666.0, "dur": 3.0, "name": "_sre.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184414.0, "dur": 255.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:759)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184678.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184686.0, "dur": 2.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184682.0, "dur": 6.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184690.0, "dur": 1.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184689.0, "dur": 2.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184676.0, "dur": 15.04, "name": "__and__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:836)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184692.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184406.0, "dur": 287.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184694.0, "dur": 5.0, "name": "re.Pattern.finditer", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184405.0, "dur": 294.02, "name": "finditer (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:225)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184702.0, "dur": 1.0, "name": "re.Match.group", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184703.02, "dur": 0.98, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184704.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184705.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184707.0, "dur": 1.0, "name": "re.Match.group", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184708.02, "dur": 0.98, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184709.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184712.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184713.0, "dur": 3.0, "name": "str.translate", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184711.0, "dur": 5.02, "name": "escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:252)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184716.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184717.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184718.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184720.0, "dur": 0.02, "name": "re.Match.group", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184720.04, "dur": 0.96, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184721.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184722.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184726.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184724.0, "dur": 2.04, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184733.0, "dur": 2.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1195)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184728.0, "dur": 7.02, "name": "get_converter (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:801)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184737.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184738.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184739.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184741.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184743.0, "dur": 0.02, "name": "re.Match.end", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184742.0, "dur": 2.0, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184392.04, "dur": 356.96, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184765.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184766.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184767.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184768.0, "dur": 1.0, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184764.0, "dur": 5.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184771.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184772.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184773.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184773.04, "dur": 0.96, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184774.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184774.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184789.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184792.0, "dur": 1.0, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184770.0, "dur": 24.0, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184795.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184797.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184798.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184799.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184799.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184797.0, "dur": 3.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184801.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184802.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184803.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184803.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184804.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184804.04, "dur": 0.96, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184811.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184812.02, "dur": 0.98, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184813.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184814.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184814.04, "dur": 0.96, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184815.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184816.0, "dur": 1.0, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184801.0, "dur": 16.02, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184818.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184820.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184821.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184822.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184822.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184820.0, "dur": 3.0, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184824.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184824.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184825.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184825.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184826.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184827.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184837.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184839.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184823.02, "dur": 16.02, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184840.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184842.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184856.0, "dur": 1.0, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184854.0, "dur": 3.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184861.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184861.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184868.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184869.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184869.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184871.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184866.0, "dur": 6.0, "name": "_type_check (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:113)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184865.0, "dur": 7.02, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:772)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184874.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184874.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184875.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184876.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184873.0, "dur": 3.04, "name": "_type_check (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:113)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184872.04, "dur": 4.96, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:772)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184877.02, "dur": 0.02, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:772)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184886.02, "dur": 0.98, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184886.0, "dur": 1.02, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184885.0, "dur": 6.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184893.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184892.02, "dur": 1.02, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184892.0, "dur": 3.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184896.04, "dur": 0.96, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184896.02, "dur": 1.0, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184896.0, "dur": 2.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184899.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184900.04, "dur": 0.96, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184901.02, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184900.02, "dur": 1.98, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184900.0, "dur": 3.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184905.0, "dur": 1.0, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:613)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184906.02, "dur": 0.02, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:613)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184906.06, "dur": 0.94, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:613)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184908.04, "dur": 0.96, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184909.02, "dur": 0.98, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184908.02, "dur": 2.0, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184908.0, "dur": 3.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184913.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184914.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184914.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184919.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184912.0, "dur": 8.0, "name": "_collect_type_vars (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:165)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184922.02, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184923.0, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184922.0, "dur": 1.04, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184921.0, "dur": 4.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184926.04, "dur": 0.96, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184927.02, "dur": 0.98, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184926.02, "dur": 2.0, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184926.0, "dur": 3.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184883.0, "dur": 47.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:603)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184879.0, "dur": 52.0, "name": "copy_with (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:633)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184859.0, "dur": 72.02, "name": "__getitem_inner__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:760)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184852.0, "dur": 81.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184848.0, "dur": 86.0, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184938.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184936.0, "dur": 3.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184940.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184939.02, "dur": 1.98, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184943.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184948.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184949.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184951.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184951.0, "dur": 1.0, "name": "__eq__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:317)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184952.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184954.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184953.02, "dur": 1.02, "name": "__eq__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:655)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184955.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184955.0, "dur": 1.02, "name": "__eq__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:655)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184957.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184958.0, "dur": 0.02, "name": "builtins.callable", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184947.0, "dur": 11.04, "name": "_type_check (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:113)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184946.0, "dur": 13.0, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:629)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184959.02, "dur": 0.02, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:629)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184961.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184962.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184960.0, "dur": 2.04, "name": "_check_generic (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:199)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184963.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184966.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198982.0, "dur": 2.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198981.0, "dur": 4.0, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198980.0, "dur": 10.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198991.02, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198991.0, "dur": 1.0, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198990.02, "dur": 2.98, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198994.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198993.04, "dur": 1.0, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198993.02, "dur": 11.98, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199005.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199007.02, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199008.0, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199007.0, "dur": 1.04, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199006.02, "dur": 2.98, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199012.0, "dur": 0.02, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:613)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199012.04, "dur": 0.96, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:613)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199015.02, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199015.06, "dur": 0.94, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199015.0, "dur": 1.02, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199014.0, "dur": 3.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199018.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199020.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199021.0, "dur": 1.0, "name": "<listcomp> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:176)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199022.02, "dur": 0.02, "name": "list.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199018.0, "dur": 5.0, "name": "_collect_type_vars (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:165)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199024.04, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199025.0, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199024.02, "dur": 1.02, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199024.0, "dur": 3.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199027.06, "dur": 0.94, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199028.02, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199027.04, "dur": 1.02, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199027.02, "dur": 1.98, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198979.0, "dur": 51.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:603)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043198974.0, "dur": 57.0, "name": "copy_with (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:633)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184963.0, "dur": 14068.02, "name": "_subs_tvars (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:180)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184942.0, "dur": 14090.0, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:621)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184935.0, "dur": 14098.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199040.0, "dur": 1.0, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199039.0, "dur": 2.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199043.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199047.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199047.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199048.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199049.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199045.02, "dur": 4.02, "name": "_type_check (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:113)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199045.0, "dur": 4.06, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:629)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199049.08, "dur": 0.92, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:629)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199051.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199052.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199051.0, "dur": 1.06, "name": "_check_generic (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:199)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199053.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199056.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199060.06, "dur": 0.94, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199060.04, "dur": 3.96, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199060.02, "dur": 4.98, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199066.04, "dur": 0.96, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199066.02, "dur": 1.0, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199066.0, "dur": 1.04, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199068.04, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199068.02, "dur": 0.98, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199068.0, "dur": 1.02, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199070.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199070.08, "dur": 0.92, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199071.02, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199070.06, "dur": 1.0, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199070.04, "dur": 1.96, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199073.0, "dur": 0.02, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:613)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199073.04, "dur": 0.96, "name": "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:613)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199075.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199075.04, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199074.04, "dur": 1.04, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199074.02, "dur": 1.98, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199077.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199078.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199077.0, "dur": 1.06, "name": "_collect_type_vars (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:165)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199079.04, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199080.0, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199079.02, "dur": 1.02, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199079.0, "dur": 2.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199082.02, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199082.06, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199082.0, "dur": 1.0, "name": "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199081.02, "dur": 2.0, "name": "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199060.0, "dur": 24.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:603)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199058.0, "dur": 26.02, "name": "copy_with (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:633)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199053.0, "dur": 31.04, "name": "_subs_tvars (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:180)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199041.04, "dur": 43.96, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:621)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199037.0, "dur": 48.02, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199089.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199088.0, "dur": 7.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199100.0, "dur": 5.0, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199108.0, "dur": 56.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199107.0, "dur": 58.0, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199168.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199175.0, "dur": 1.0, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199176.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199177.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199174.0, "dur": 3.04, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199180.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199183.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199182.0, "dur": 5.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199188.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199181.02, "dur": 7.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199189.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199188.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199190.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199191.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199191.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199191.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199192.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199193.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199193.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199188.06, "dur": 5.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199181.0, "dur": 13.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199170.0, "dur": 25.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199195.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199196.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199198.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199197.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199199.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199197.02, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199200.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199199.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199200.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199201.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199201.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199201.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199202.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199199.06, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199203.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199202.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199197.0, "dur": 6.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199196.02, "dur": 7.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199204.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199205.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199206.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199205.08, "dur": 1.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199207.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199205.06, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199208.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199207.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199208.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199207.08, "dur": 1.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199209.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199209.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199210.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199209.04, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199213.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199213.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199205.04, "dur": 8.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199204.06, "dur": 9.96, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199214.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199215.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199216.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199216.0, "dur": 1.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199215.08, "dur": 1.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199215.02, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199217.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199218.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199219.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199219.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199220.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199218.1, "dur": 1.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199221.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199220.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199221.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199222.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199222.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199222.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199223.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199220.08, "dur": 2.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199223.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199223.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199218.08, "dur": 5.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199218.02, "dur": 6.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199224.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199225.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199226.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199226.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199227.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199226.0, "dur": 1.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199228.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199228.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199225.08, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199225.02, "dur": 3.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199229.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199229.08, "dur": 0.92, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199230.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199230.04, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199230.02, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199229.06, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199231.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199232.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199236.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199235.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199236.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199237.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199237.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199237.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199238.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199235.02, "dur": 3.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199239.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199239.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199235.0, "dur": 4.08, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199232.02, "dur": 7.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199240.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199242.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199242.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199242.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199242.04, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199241.0, "dur": 2.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199244.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199244.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199245.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199245.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199246.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199246.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199247.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199245.02, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199245.0, "dur": 2.08, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199244.04, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199248.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199248.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199249.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199249.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199249.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199248.04, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199250.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199251.02, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199106.0, "dur": 145.06, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199099.0, "dur": 157.0, "name": "_convert (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:999)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199096.0, "dur": 161.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199258.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199259.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199261.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199261.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199263.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199264.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199095.02, "dur": 169.02, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199270.02, "dur": 0.98, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199270.0, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199269.0, "dur": 2.04, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199274.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199274.0, "dur": 1.0, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199275.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199275.02, "dur": 2.98, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199281.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199283.0, "dur": 1.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199289.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199291.0, "dur": 26.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199290.02, "dur": 27.0, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199318.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199322.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199322.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199323.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199321.0, "dur": 2.04, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199325.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199326.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199326.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199327.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199328.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199329.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199328.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199329.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199325.06, "dur": 4.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199330.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199330.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199331.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199331.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199332.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199330.02, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199333.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199333.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199334.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199334.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199335.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199334.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199335.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199336.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199336.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199332.08, "dur": 4.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199325.04, "dur": 11.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199320.0, "dur": 17.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199337.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199338.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199342.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199339.02, "dur": 4.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199345.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199345.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199346.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199346.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199347.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199347.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199347.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199347.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199348.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199349.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199349.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199349.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199350.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199350.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199351.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199351.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199352.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199352.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199353.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199352.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199353.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199354.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199354.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199339.0, "dur": 15.1, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199338.08, "dur": 16.92, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199338.02, "dur": 17.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199355.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199356.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199357.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199357.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199357.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199356.02, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199358.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199359.02, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199290.0, "dur": 69.06, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199365.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199367.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199369.02, "dur": 5.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199369.0, "dur": 6.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199377.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199378.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199378.06, "dur": 0.94, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199377.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199380.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199382.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199381.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199385.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199386.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199386.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199381.02, "dur": 6.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199387.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199387.04, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199381.0, "dur": 7.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199376.0, "dur": 12.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199389.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199390.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199390.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199391.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199392.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199392.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199392.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199393.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199390.02, "dur": 3.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199394.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199394.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199395.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199395.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199395.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199393.1, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199396.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199396.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199397.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199397.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199398.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199398.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199399.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199399.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199399.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199396.04, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199390.0, "dur": 10.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199389.0, "dur": 11.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199402.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199403.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199402.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199403.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199404.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199404.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199402.06, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199405.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199405.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199406.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199406.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199409.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199409.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199410.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199409.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199410.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199411.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199411.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199411.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199412.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199412.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199413.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199413.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199413.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199405.08, "dur": 8.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199414.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199414.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199415.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199415.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199416.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199414.04, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199402.04, "dur": 14.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199401.0, "dur": 16.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199417.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199419.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199418.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199419.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199418.02, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199420.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199420.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199418.0, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199417.02, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199422.02, "dur": 0.98, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199424.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199423.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199424.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199425.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199425.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199425.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199426.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199426.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199427.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199423.04, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199423.02, "dur": 4.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199422.0, "dur": 6.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199429.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199430.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199430.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199433.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199434.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199434.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199434.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199435.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199435.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199435.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199430.02, "dur": 6.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199430.0, "dur": 6.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199429.0, "dur": 7.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199437.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199438.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199438.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199439.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199439.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199440.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199440.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199441.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199441.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199441.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199438.02, "dur": 3.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199438.0, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199437.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199443.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199444.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199444.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199445.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199445.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199446.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199443.08, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199446.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199446.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199447.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199447.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199448.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199447.04, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199449.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199448.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199443.06, "dur": 6.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199443.0, "dur": 6.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199451.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199452.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199452.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199453.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199453.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199453.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199451.08, "dur": 4.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199451.06, "dur": 4.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199451.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199457.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199459.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199458.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199459.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199460.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199460.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199458.02, "dur": 2.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199461.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199461.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199462.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199461.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199458.0, "dur": 4.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199457.0, "dur": 5.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199464.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199465.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199464.06, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199464.04, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199463.0, "dur": 2.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199466.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199467.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199467.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199468.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199468.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199469.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199467.02, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199467.0, "dur": 2.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199466.0, "dur": 3.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199470.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199471.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199471.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199472.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199471.02, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199473.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199473.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199474.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199474.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199474.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199472.1, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199475.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199475.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199476.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199476.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199477.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199475.04, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199471.0, "dur": 8.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199470.0, "dur": 10.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199481.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199482.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199482.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199483.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199481.06, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199484.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199483.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199484.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199485.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199485.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199485.04, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199486.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199483.06, "dur": 2.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199486.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199486.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199481.04, "dur": 6.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199480.02, "dur": 7.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199488.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199489.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199489.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199490.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199490.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199491.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199491.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199492.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199489.02, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199492.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199492.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199489.0, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199488.0, "dur": 5.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199494.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199495.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199495.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199496.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199495.0, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199497.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199496.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199497.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199496.08, "dur": 1.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199498.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199498.04, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199499.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199498.02, "dur": 1.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199499.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199499.06, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199494.06, "dur": 7.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199494.0, "dur": 8.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199503.02, "dur": 0.98, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199504.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199504.04, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199504.02, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199503.0, "dur": 2.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199506.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199507.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199506.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199506.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199506.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199508.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199509.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199509.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199510.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199509.0, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199511.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199510.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199511.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199512.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199512.08, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199512.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199513.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199510.08, "dur": 2.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199513.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199513.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199508.08, "dur": 5.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199508.02, "dur": 6.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199515.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199516.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199516.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199517.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199516.0, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199517.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199517.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199515.06, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199515.0, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199519.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199520.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199519.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199519.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199519.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199521.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199522.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199522.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199525.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199525.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199526.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199526.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199527.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199522.0, "dur": 5.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199527.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199527.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199521.08, "dur": 6.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199521.02, "dur": 7.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199529.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199530.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199529.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199529.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199529.0, "dur": 1.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199531.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199532.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199532.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199533.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199533.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199534.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199532.0, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199531.06, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199531.0, "dur": 3.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199535.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199536.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199536.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199536.0, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199535.0, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199537.04, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199538.0, "dur": 94.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199635.0, "dur": 1.0, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199634.02, "dur": 2.0, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199634.0, "dur": 3.0, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184756.0, "dur": 14881.02, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199649.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199650.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199651.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199651.04, "dur": 1.96, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199649.0, "dur": 4.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199654.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199655.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199655.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199656.02, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199656.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199657.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199678.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199680.0, "dur": 1.0, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199654.0, "dur": 28.0, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199683.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199685.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199685.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199686.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199686.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199684.0, "dur": 3.0, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199687.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199688.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199688.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199689.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199689.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199689.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199697.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199698.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199698.06, "dur": 0.94, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199699.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199699.06, "dur": 0.94, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199700.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199701.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199687.02, "dur": 14.02, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199702.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199703.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199704.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199704.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199705.02, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199703.0, "dur": 2.06, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199706.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199706.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199707.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199707.06, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199708.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199708.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199712.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199713.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199706.0, "dur": 8.0, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199714.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199715.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199721.0, "dur": 1.0, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199720.02, "dur": 2.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199720.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199718.0, "dur": 5.02, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199725.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199724.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199726.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199725.06, "dur": 3.94, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199724.0, "dur": 6.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199731.02, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199731.0, "dur": 0.06, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199730.02, "dur": 1.98, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199733.02, "dur": 0.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199733.0, "dur": 3.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199740.02, "dur": 2.98, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199744.02, "dur": 22.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199744.0, "dur": 23.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199768.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199771.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199772.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199772.04, "dur": 0.96, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199771.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199774.0, "dur": 1.0, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199776.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199776.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199777.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199775.04, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199778.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199778.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199779.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199779.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199780.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199780.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199781.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199781.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199782.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199778.02, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199775.02, "dur": 7.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199769.0, "dur": 14.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199783.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199784.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199785.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199785.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199786.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199784.08, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199787.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199787.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199788.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199788.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199788.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199788.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199789.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199786.08, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199793.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199793.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199784.06, "dur": 9.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199784.0, "dur": 10.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199794.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199795.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199796.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199796.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199797.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199795.06, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199797.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199797.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199798.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199797.06, "dur": 1.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199799.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199799.04, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199800.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199799.02, "dur": 1.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199800.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199800.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199795.04, "dur": 5.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199794.06, "dur": 6.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199801.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199802.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199803.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199802.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199802.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199802.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199804.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199804.08, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199806.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199805.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199806.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199805.02, "dur": 1.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199807.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199807.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199808.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199808.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199809.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199808.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199809.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199807.0, "dur": 2.1, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199810.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199810.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199805.0, "dur": 5.08, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199804.06, "dur": 6.94, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199811.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199814.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199815.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199815.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199816.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199814.06, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199816.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199816.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199814.04, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199813.0, "dur": 4.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199817.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199818.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199819.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199818.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199818.08, "dur": 0.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199818.02, "dur": 1.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199820.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199820.08, "dur": 0.92, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199822.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199821.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199822.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199823.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199823.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199823.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199824.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199821.04, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199824.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199824.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199821.02, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199820.06, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199825.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199827.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199828.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199827.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199827.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199827.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199829.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199829.08, "dur": 0.92, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199831.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199830.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199831.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199832.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199832.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199830.04, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199830.02, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199829.06, "dur": 3.96, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199833.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199834.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199837.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199836.02, "dur": 1.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199836.0, "dur": 1.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199833.08, "dur": 4.92, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199838.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199838.06, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199743.02, "dur": 95.98, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199740.0, "dur": 102.0, "name": "_convert (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:999)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199737.02, "dur": 105.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199844.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199844.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199846.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199846.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199848.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199848.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199737.0, "dur": 112.02, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199850.0, "dur": 0.02, "name": "list.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199852.02, "dur": 0.98, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199852.0, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199851.0, "dur": 2.04, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199855.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199854.0, "dur": 1.04, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199856.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199856.0, "dur": 1.0, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199859.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199860.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199861.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199863.02, "dur": 10.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199863.0, "dur": 12.0, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199876.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199878.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199879.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199879.04, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199878.0, "dur": 2.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199881.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199882.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199882.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199883.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199884.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199884.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199884.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199885.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199882.0, "dur": 3.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199886.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199886.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199887.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199890.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199891.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199886.0, "dur": 5.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199892.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199892.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199893.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199893.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199894.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199894.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199895.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199895.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199895.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199891.08, "dur": 4.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199881.04, "dur": 15.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199877.0, "dur": 19.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199897.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199897.06, "dur": 0.94, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199899.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199898.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199899.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199900.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199900.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199900.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199901.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199901.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199902.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199902.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199903.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199903.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199904.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199903.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199904.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199905.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199905.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199905.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199906.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199906.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199907.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199907.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199908.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199908.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199908.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199898.04, "dur": 10.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199898.02, "dur": 11.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199897.04, "dur": 12.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199909.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199910.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199913.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199913.02, "dur": 1.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199913.0, "dur": 1.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199910.02, "dur": 4.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199915.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199915.04, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199862.0, "dur": 53.08, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199919.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199920.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199923.02, "dur": 3.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199923.0, "dur": 4.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199929.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199930.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199930.06, "dur": 0.94, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199929.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199932.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199933.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199933.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199934.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199935.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199935.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199932.06, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199936.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199935.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199932.04, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199928.0, "dur": 9.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199937.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199938.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199938.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199939.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199940.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199940.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199940.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199941.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199938.02, "dur": 3.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199942.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199942.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199943.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199943.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199943.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199941.1, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199944.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199944.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199945.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199945.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199946.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199949.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199950.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199949.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199950.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199951.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199951.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199945.0, "dur": 6.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199938.0, "dur": 14.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199937.02, "dur": 15.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199953.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199954.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199954.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199955.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199956.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199956.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199954.02, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199957.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199956.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199957.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199957.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199958.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199958.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199959.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199959.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199960.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199960.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199961.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199960.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199961.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199962.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199962.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199962.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199963.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199957.06, "dur": 6.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199964.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199963.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199964.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199965.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199965.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199963.08, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199954.0, "dur": 12.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199953.0, "dur": 13.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199966.06, "dur": 0.94, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199968.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199967.06, "dur": 1.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199969.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199967.04, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199972.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199972.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199973.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199974.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199974.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199972.0, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199975.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199975.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199976.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199976.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199977.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199977.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199978.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199975.1, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199978.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199978.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199967.02, "dur": 12.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199966.04, "dur": 13.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199981.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199982.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199982.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199983.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199981.08, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199983.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199983.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199981.06, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199981.0, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199985.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199986.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199986.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199987.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199988.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199988.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199988.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199989.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199989.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199990.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199986.02, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199986.0, "dur": 4.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199985.0, "dur": 5.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199991.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199992.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199992.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199993.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199993.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199994.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199994.02, "dur": 2.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199997.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199997.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199998.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199992.02, "dur": 6.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199992.0, "dur": 6.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199991.0, "dur": 7.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199999.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200001.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200000.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200001.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200002.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200002.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200002.04, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200003.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200003.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200003.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200000.02, "dur": 4.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200000.0, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199999.0, "dur": 5.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200005.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200006.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200006.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200007.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200007.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200008.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200008.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200009.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200005.08, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200009.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200009.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200005.06, "dur": 4.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200005.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200011.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200012.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200012.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200013.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200014.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200014.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200011.08, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200015.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200015.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200016.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200015.0, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200016.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200016.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200011.06, "dur": 5.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200011.0, "dur": 8.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200020.02, "dur": 0.98, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200022.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200021.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200022.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200023.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200023.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200021.04, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200024.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200024.04, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200025.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200024.02, "dur": 1.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200025.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200025.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200021.02, "dur": 5.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200020.0, "dur": 6.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200027.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200028.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200028.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200029.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200029.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200030.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200028.0, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200030.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200030.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200031.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200031.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200032.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200031.02, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200032.1, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200032.08, "dur": 0.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200027.06, "dur": 5.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200027.0, "dur": 6.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200034.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200035.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200035.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200036.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200036.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200037.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200034.08, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200037.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200037.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200038.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200038.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200039.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200038.02, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200042.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200041.0, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200034.06, "dur": 8.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200034.0, "dur": 8.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200043.02, "dur": 0.98, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200044.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200044.04, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200044.02, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200043.0, "dur": 2.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200046.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200047.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200047.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200048.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200048.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200051.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200051.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200052.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200046.08, "dur": 5.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200052.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200052.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200046.06, "dur": 6.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200046.0, "dur": 7.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200054.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200055.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200055.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200056.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200057.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200057.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200055.02, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200055.0, "dur": 2.1, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200054.0, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200058.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200060.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200059.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200060.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200061.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200061.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200061.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200062.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200059.04, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200062.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200062.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200059.02, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200058.02, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200064.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200065.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200065.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200068.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200064.08, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200069.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200069.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200070.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200070.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200071.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200068.06, "dur": 2.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200071.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200071.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200072.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200072.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200073.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200071.06, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200064.06, "dur": 9.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200064.0, "dur": 10.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200075.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200076.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200075.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200076.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200077.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200077.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200077.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200078.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200075.06, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200079.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200078.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200075.04, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200074.02, "dur": 5.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200080.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200081.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200081.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200082.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200082.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200083.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200083.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200083.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200081.02, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200084.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200084.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200081.0, "dur": 4.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200080.0, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200086.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200087.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200086.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200087.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200090.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200090.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200086.06, "dur": 4.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200086.04, "dur": 4.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200085.04, "dur": 6.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200092.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200093.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200093.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200094.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200094.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200094.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200092.08, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200092.06, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200092.0, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200096.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200097.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200097.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200098.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200098.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200099.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200097.0, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200100.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200099.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200100.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200100.06, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200101.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200101.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200101.1, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200101.08, "dur": 0.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200096.06, "dur": 5.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200096.0, "dur": 6.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200103.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200104.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200104.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200103.06, "dur": 1.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200103.0, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200105.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200106.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200106.02, "dur": 1.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200106.0, "dur": 1.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200105.04, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200108.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200109.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200108.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200108.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200108.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200110.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200114.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200113.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200114.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200113.02, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200115.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200115.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200116.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200116.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200117.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200117.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200118.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200115.04, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200118.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200118.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200113.0, "dur": 6.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200110.02, "dur": 9.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200120.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200121.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200121.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200122.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200122.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200123.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200122.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200123.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200121.0, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200124.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200124.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200120.06, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200120.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200125.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200126.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200126.04, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200126.02, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200125.02, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200128.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200128.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200128.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200128.04, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200127.06, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200130.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200131.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200131.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200132.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200132.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200132.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200130.08, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200130.06, "dur": 2.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200130.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200136.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200137.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200137.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200138.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200137.0, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200139.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200138.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200139.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200140.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200140.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200138.08, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200141.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200141.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200142.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200142.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200142.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200141.0, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200136.06, "dur": 6.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200136.0, "dur": 7.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200144.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200145.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200145.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200146.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200146.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200147.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200146.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200147.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200145.0, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200148.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200148.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200144.06, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200144.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200149.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200151.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200150.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200151.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200152.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200152.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200152.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200153.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200150.04, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200153.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200153.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200150.02, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200149.02, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200157.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200158.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200158.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200159.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200159.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200160.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200160.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200161.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200158.02, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200161.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200161.06, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200158.0, "dur": 4.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200157.0, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200163.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200163.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200163.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200163.04, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200162.04, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200165.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200166.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200165.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200165.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200165.0, "dur": 1.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200167.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200168.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200168.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200169.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200168.0, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200170.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200169.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200170.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200171.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200171.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200171.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200172.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200169.08, "dur": 2.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200172.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200172.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200167.06, "dur": 5.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200167.0, "dur": 6.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200174.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200175.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200175.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200176.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200176.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200177.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200176.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200179.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200174.08, "dur": 5.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200180.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200180.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200174.06, "dur": 6.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200174.0, "dur": 7.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200182.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200183.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200182.06, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200182.04, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200181.04, "dur": 2.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200184.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200185.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200184.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200184.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200184.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200186.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200187.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200187.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200187.0, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200186.02, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200188.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200189.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200189.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200190.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200189.02, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200191.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200191.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200191.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200190.1, "dur": 1.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200192.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200192.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200193.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200192.04, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200194.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200193.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200189.0, "dur": 5.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200188.04, "dur": 6.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200195.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200196.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200196.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200196.0, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200195.0, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200197.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200198.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200198.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200198.0, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200197.04, "dur": 3.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200202.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200203.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200203.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200204.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200202.08, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200205.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200204.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200205.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200206.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200206.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200206.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200207.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200204.08, "dur": 2.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200207.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200207.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200202.06, "dur": 5.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200202.0, "dur": 6.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200209.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200210.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200210.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200211.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200210.0, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200211.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200211.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200209.06, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200209.0, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200213.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200214.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200213.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200213.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200213.0, "dur": 1.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200215.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200216.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200216.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200217.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200217.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200218.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200218.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200218.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200216.0, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200219.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200219.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200215.06, "dur": 4.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200215.0, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200220.06, "dur": 0.94, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200224.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200223.02, "dur": 1.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200223.0, "dur": 1.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200220.04, "dur": 4.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200225.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200226.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200226.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200227.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200227.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200227.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200226.0, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200225.06, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200225.0, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200229.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200230.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200230.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200229.06, "dur": 1.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200229.0, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200231.04, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200232.0, "dur": 80.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200315.0, "dur": 0.02, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200314.0, "dur": 1.04, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200313.0, "dur": 3.0, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043199645.0, "dur": 671.02, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200325.0, "dur": 1.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200329.02, "dur": 1.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200335.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200337.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200337.0, "dur": 1.02, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200339.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200339.02, "dur": 1.0, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200343.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200346.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200343.0, "dur": 5.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200349.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:76)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200354.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200353.0, "dur": 2.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200357.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200360.02, "dur": 1.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200360.0, "dur": 2.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200365.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200364.0, "dur": 1.04, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200367.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200366.0, "dur": 1.04, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200369.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200370.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200376.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200377.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200368.0, "dur": 9.04, "name": "_escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:343)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200378.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200378.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200379.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200379.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200381.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200381.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200381.04, "dur": 0.96, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200382.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200382.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200384.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200384.0, "dur": 1.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200386.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200386.0, "dur": 1.02, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200388.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200389.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200387.04, "dur": 2.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200391.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200391.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200392.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200391.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200393.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200393.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200394.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200394.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200396.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200395.04, "dur": 1.98, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200398.0, "dur": 1.0, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200400.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200399.02, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200401.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200401.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200401.04, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200403.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200402.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200404.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200405.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200404.04, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200406.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200405.06, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200407.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200407.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200407.04, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200408.06, "dur": 0.94, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200408.04, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200412.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200413.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200412.04, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200414.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200413.06, "dur": 1.94, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200415.02, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200416.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200415.06, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200417.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200416.06, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200418.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200418.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200418.04, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200420.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200419.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200421.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200421.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200421.04, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200422.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200422.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200424.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200424.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200425.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200425.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200426.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200427.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200426.0, "dur": 2.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200428.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200428.04, "dur": 0.98, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200429.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200429.04, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200430.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200430.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200431.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200431.02, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200433.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200432.04, "dur": 1.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200434.0, "dur": 0.02, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200435.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200435.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200437.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200437.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200438.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200438.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200440.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200439.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200443.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200443.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200445.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200446.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200448.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200449.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200450.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200451.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200452.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200453.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200454.02, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200445.0, "dur": 10.0, "name": "getuntil (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:267)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200456.0, "dur": 0.02, "name": "str.isidentifier", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200459.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200459.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200460.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200460.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200460.04, "dur": 0.98, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200461.04, "dur": 0.96, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200458.0, "dur": 4.02, "name": "opengroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:84)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200465.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200465.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200467.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200469.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200468.0, "dur": 1.04, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200470.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200470.0, "dur": 1.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200472.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200471.02, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200473.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200473.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200474.04, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200475.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200476.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200477.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200476.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200479.0, "dur": 1.0, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200480.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200478.0, "dur": 2.06, "name": "_uniq (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:408)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200481.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200482.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200482.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200483.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200483.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200485.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200485.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200486.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200486.0, "dur": 3.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200490.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200490.0, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200492.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200491.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200493.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200494.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200492.06, "dur": 1.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200495.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200495.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200496.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200496.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200497.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200497.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200498.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200498.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200499.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200499.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200501.0, "dur": 0.02, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200502.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200502.02, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200502.0, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200506.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200506.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200507.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200507.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200466.0, "dur": 42.02, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200509.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200509.04, "dur": 0.96, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200510.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200464.0, "dur": 46.06, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200511.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200511.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200518.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200519.02, "dur": 0.98, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200516.0, "dur": 4.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200522.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200522.04, "dur": 0.96, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200514.0, "dur": 9.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200513.0, "dur": 11.0, "name": "closegroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200525.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200524.02, "dur": 1.02, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200526.0, "dur": 2.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200525.06, "dur": 2.96, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200530.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200530.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200534.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200534.02, "dur": 0.98, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200534.0, "dur": 1.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200536.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200536.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200538.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200538.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200539.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200539.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200540.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200540.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200541.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200541.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200542.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200542.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200543.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200542.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200544.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200543.06, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200545.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200544.06, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200545.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200545.06, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200546.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200546.04, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200547.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200547.04, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200356.0, "dur": 192.02, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200549.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200549.04, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200550.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200352.0, "dur": 198.04, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200552.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200551.0, "dur": 2.0, "name": "fix_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:903)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200341.0, "dur": 212.02, "name": "parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:919)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200560.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200561.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200559.0, "dur": 2.06, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200566.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200566.04, "dur": 0.96, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200565.0, "dur": 2.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200568.0, "dur": 0.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200570.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200570.04, "dur": 0.96, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200557.0, "dur": 14.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200573.02, "dur": 0.98, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200573.0, "dur": 2.0, "name": "_get_literal_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:461)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200580.0, "dur": 0.02, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200578.0, "dur": 2.04, "name": "_get_charset_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:492)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200581.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200581.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200582.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200582.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200583.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200583.04, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200584.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200584.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200556.0, "dur": 29.0, "name": "_compile_info (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:536)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200588.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200589.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200590.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200590.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200590.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200593.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200593.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200592.02, "dur": 1.06, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200594.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200594.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200592.0, "dur": 3.04, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200596.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200596.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200596.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200597.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200597.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200599.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200599.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200600.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200601.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200601.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200601.04, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200598.0, "dur": 5.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200603.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200603.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200604.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200604.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200605.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200605.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200605.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200606.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200606.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200606.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200607.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200607.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200608.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200610.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200612.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200612.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200611.02, "dur": 1.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200613.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200613.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200611.0, "dur": 3.02, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200614.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200614.08, "dur": 0.92, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200615.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200615.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200615.1, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200617.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200617.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200618.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200618.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200618.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200618.08, "dur": 0.94, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200616.0, "dur": 3.04, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200620.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200620.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200621.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200621.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200622.02, "dur": 0.98, "name": "_combine_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:65)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200624.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200624.02, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200625.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200626.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200626.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200626.04, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200628.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200628.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200627.04, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200629.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200629.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200627.02, "dur": 2.98, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200630.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200630.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200630.1, "dur": 0.9, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200631.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200631.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200633.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200632.02, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200633.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200634.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200634.02, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200632.0, "dur": 36.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200669.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200669.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200670.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200670.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200624.0, "dur": 47.02, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200671.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200672.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200673.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200674.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200674.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200586.0, "dur": 89.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200675.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200555.0, "dur": 121.0, "name": "_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:598)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200677.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200677.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200678.0, "dur": 1.0, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200681.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200681.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200682.0, "dur": 3.0, "name": "_sre.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200339.0, "dur": 346.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:759)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200691.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200696.0, "dur": 1.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200694.0, "dur": 4.0, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200699.02, "dur": 0.98, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200699.0, "dur": 1.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200689.0, "dur": 11.04, "name": "__and__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:836)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200701.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200329.0, "dur": 373.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200328.0, "dur": 375.0, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:232)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184380.0, "dur": 16323.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:824)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184378.0, "dur": 16327.0, "name": "bind (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:784)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200706.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200707.0, "dur": 0.02, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200707.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200708.0, "dur": 0.02, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184374.0, "dur": 16335.0, "name": "add (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1533)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200710.0, "dur": 1.0, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184343.0, "dur": 16368.02, "name": "add_url_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184334.0, "dur": 16378.0, "name": "wrapper_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:45)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200721.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200720.0, "dur": 2.0, "name": "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/utils.py:90)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200715.0, "dur": 8.0, "name": "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:772)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184104.0, "dur": 16620.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:384)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200726.0, "dur": 3.0, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200731.0, "dur": 2.0, "name": "route (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:413)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200734.02, "dur": 0.98, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200742.0, "dur": 0.02, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200741.0, "dur": 2.0, "name": "_is_setup_finished (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:522)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200745.0, "dur": 1.0, "name": "_endpoint_from_view_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200746.02, "dur": 0.02, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200747.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200748.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200749.02, "dur": 0.98, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200749.0, "dur": 1.02, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1061)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200751.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200752.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200753.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200756.02, "dur": 0.98, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200758.0, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200760.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200761.02, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200762.0, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200761.0, "dur": 1.04, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:715)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200763.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200756.0, "dur": 8.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:681)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200767.0, "dur": 0.02, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200773.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200772.0, "dur": 2.0, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200771.0, "dur": 4.0, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200775.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200776.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200777.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200778.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200778.02, "dur": 1.0, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200778.0, "dur": 1.04, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200780.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200783.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200784.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200785.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200785.04, "dur": 0.96, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200783.0, "dur": 3.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200787.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200788.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200788.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200788.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200789.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200789.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200802.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200803.0, "dur": 1.0, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200787.0, "dur": 17.02, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200805.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200811.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200810.0, "dur": 4.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200809.0, "dur": 6.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200808.0, "dur": 7.02, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200817.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200816.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200818.02, "dur": 0.98, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200818.0, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200816.0, "dur": 3.04, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200821.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200820.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200820.0, "dur": 1.06, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200823.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200822.0, "dur": 4.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200827.0, "dur": 1.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200826.02, "dur": 2.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200830.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200829.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200829.0, "dur": 1.06, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200832.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200831.0, "dur": 1.04, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200833.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200832.06, "dur": 0.98, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200835.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200836.02, "dur": 0.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200837.02, "dur": 0.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200839.02, "dur": 15.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200839.0, "dur": 16.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200856.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200860.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200860.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200861.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200859.0, "dur": 3.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200863.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200865.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200865.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200866.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200867.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200868.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200867.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200868.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200864.02, "dur": 5.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200869.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200869.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200870.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200871.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200871.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200869.04, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200875.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200875.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200876.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200876.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200877.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200877.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200878.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200878.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200878.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200874.0, "dur": 5.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200864.0, "dur": 15.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200857.0, "dur": 23.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200880.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200881.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200882.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200882.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200883.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200884.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200884.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200884.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200885.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200885.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200886.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200886.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200887.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200887.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200888.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200887.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200888.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200889.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200889.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200889.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200890.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200890.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200891.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200890.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200891.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200892.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200892.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200882.0, "dur": 11.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200881.08, "dur": 11.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200881.02, "dur": 12.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200893.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200894.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200895.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200895.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200894.08, "dur": 3.92, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200894.02, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200898.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200899.02, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200838.02, "dur": 61.04, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200903.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200906.02, "dur": 4.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200906.0, "dur": 5.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200914.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200914.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200915.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200913.0, "dur": 2.04, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200916.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200918.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200917.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200919.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200919.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200919.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200917.02, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200920.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200920.04, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200917.0, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200912.0, "dur": 9.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200922.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200923.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200923.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200924.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200924.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200925.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200925.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200926.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200923.0, "dur": 3.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200927.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200926.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200927.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200928.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200928.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200926.06, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200929.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200929.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200929.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200930.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200930.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200930.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200931.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200931.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200932.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200928.1, "dur": 6.9, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200922.06, "dur": 12.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200922.0, "dur": 13.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200937.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200938.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200938.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200939.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200939.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200939.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200937.06, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200940.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200940.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200941.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200941.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200942.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200942.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200943.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200943.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200944.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200943.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200944.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200944.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200945.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200945.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200946.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200940.04, "dur": 6.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200947.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200946.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200947.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200948.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200948.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200946.08, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200937.04, "dur": 11.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200936.0, "dur": 13.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200949.06, "dur": 0.94, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200951.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200950.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200951.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200950.04, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200952.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200952.04, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200950.02, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200949.04, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200954.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200955.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200955.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200959.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200959.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200960.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200959.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200960.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200961.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200961.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200955.0, "dur": 6.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200954.06, "dur": 7.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200954.0, "dur": 8.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200963.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200964.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200964.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200965.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200965.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200966.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200965.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200966.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200967.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200967.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200963.08, "dur": 4.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200963.06, "dur": 4.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200963.0, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200968.06, "dur": 0.94, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200970.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200969.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200971.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200971.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200971.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200969.04, "dur": 2.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200972.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200972.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200973.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200973.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200974.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200973.0, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200974.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200974.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200969.02, "dur": 6.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200968.04, "dur": 7.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200976.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200977.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200977.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200978.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200978.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200979.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200977.0, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200976.06, "dur": 5.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200976.0, "dur": 6.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200983.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200984.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200984.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200984.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200985.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200985.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200983.06, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200983.04, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200982.04, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200987.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200988.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200987.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200987.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200987.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200989.02, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200990.0, "dur": 33.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201025.02, "dur": 0.98, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201025.0, "dur": 1.02, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201024.0, "dur": 2.04, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200781.0, "dur": 246.0, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201034.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201034.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201035.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201035.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201033.0, "dur": 3.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201037.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201038.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201038.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201039.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201039.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201040.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201047.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201049.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201037.0, "dur": 12.04, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201050.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201055.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201054.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201054.0, "dur": 2.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201052.0, "dur": 4.02, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201058.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201057.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201059.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201058.06, "dur": 0.98, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201057.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201065.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201064.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201064.0, "dur": 1.06, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201067.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201066.0, "dur": 3.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201070.02, "dur": 0.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201070.0, "dur": 2.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201072.02, "dur": 0.02, "name": "list.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201074.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201073.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201073.0, "dur": 1.06, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201076.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201075.0, "dur": 1.04, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201077.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201077.0, "dur": 1.0, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201080.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201081.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201082.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201083.02, "dur": 11.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201083.0, "dur": 12.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201097.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201099.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201100.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201100.04, "dur": 0.96, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201099.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201102.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201104.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201103.04, "dur": 1.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201105.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201105.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201106.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201106.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201107.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201103.02, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201108.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201107.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201108.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201109.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201109.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201107.06, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201110.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201110.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201111.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201111.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201112.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201112.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201112.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201116.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201116.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201110.0, "dur": 7.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201103.0, "dur": 14.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201098.0, "dur": 19.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201117.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201118.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201119.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201119.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201120.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201121.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201121.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201121.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201122.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201122.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201123.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201123.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201124.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201124.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201124.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201124.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201125.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201126.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201126.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201126.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201127.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201127.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201128.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201127.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201128.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201129.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201129.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201119.02, "dur": 10.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201119.0, "dur": 11.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201118.02, "dur": 12.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201130.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201131.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201131.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201131.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201131.04, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201130.08, "dur": 1.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201133.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201133.04, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201082.04, "dur": 51.96, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201137.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201139.02, "dur": 3.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201139.0, "dur": 5.0, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201148.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201149.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201149.04, "dur": 0.96, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201148.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201151.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201152.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201152.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201153.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201153.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201154.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201151.06, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201155.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201154.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201151.04, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201147.0, "dur": 8.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201156.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201157.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201157.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201158.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201158.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201159.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201159.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201160.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201157.02, "dur": 3.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201161.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201160.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201161.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201162.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201162.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201160.08, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201163.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201163.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201164.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201163.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201164.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201165.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201165.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201165.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201166.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201166.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201167.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201163.08, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201157.0, "dur": 10.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201156.0, "dur": 11.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201169.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201170.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201169.08, "dur": 3.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201173.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201173.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201174.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201169.06, "dur": 5.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201175.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201175.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201175.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201176.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201176.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201176.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201177.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201177.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201178.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201178.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201178.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201179.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201179.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201179.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201180.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201174.08, "dur": 6.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201181.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201181.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201182.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201182.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201182.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201180.1, "dur": 2.9, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201169.04, "dur": 13.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201168.0, "dur": 15.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201184.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201185.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201185.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201186.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201184.08, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201187.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201187.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201188.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201188.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201188.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201187.0, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201189.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201189.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201190.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201190.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201191.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201191.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201192.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201190.0, "dur": 4.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201194.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201194.02, "dur": 1.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201184.06, "dur": 10.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201184.0, "dur": 11.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201196.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201198.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201197.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201198.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201197.02, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201199.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201199.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201197.0, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201196.0, "dur": 4.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201201.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201202.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201202.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201203.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201203.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201204.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201204.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201204.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201205.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201205.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201201.08, "dur": 4.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201201.06, "dur": 4.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201201.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201207.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201208.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201208.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201209.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201209.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201209.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201209.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201210.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201210.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201211.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201207.08, "dur": 3.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201207.06, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201207.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201212.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201214.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201213.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201214.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201215.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201215.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201215.04, "dur": 2.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201218.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201213.04, "dur": 5.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201219.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201219.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201213.02, "dur": 6.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201212.02, "dur": 7.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201221.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201222.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201221.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201223.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201223.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201223.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201221.06, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201224.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201224.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201225.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201224.02, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201226.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201225.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201221.04, "dur": 5.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201220.02, "dur": 6.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201227.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201228.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201228.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201229.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201229.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201230.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201228.02, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201231.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201230.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201231.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201230.08, "dur": 1.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201232.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201232.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201228.0, "dur": 5.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201227.0, "dur": 6.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201234.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201235.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201234.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201235.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201236.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201236.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201234.06, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201237.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201237.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201238.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201237.1, "dur": 2.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201241.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201237.08, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201241.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201241.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201234.04, "dur": 7.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201233.04, "dur": 9.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201243.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201244.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201244.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201245.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201245.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201246.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201243.08, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201246.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201246.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201247.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201247.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201248.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201247.02, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201248.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201248.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201243.06, "dur": 5.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201243.0, "dur": 6.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201250.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201251.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201251.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201250.06, "dur": 1.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201250.0, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201252.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201254.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201253.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201254.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201255.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201255.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201255.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201256.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201253.02, "dur": 3.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201256.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201256.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201253.0, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201252.04, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201258.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201259.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201259.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201260.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201262.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201262.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201259.0, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201258.06, "dur": 4.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201258.0, "dur": 5.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201264.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201265.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201265.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201266.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201266.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201267.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201267.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201268.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201265.02, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201268.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201268.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201265.0, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201264.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201270.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201271.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201271.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201272.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201270.08, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201273.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201272.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201273.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201274.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201274.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201272.08, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201275.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201275.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201276.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201276.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201277.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201274.12, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201270.06, "dur": 7.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201270.0, "dur": 7.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201278.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201279.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201279.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201280.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201280.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201281.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201281.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201282.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201279.02, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201282.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201282.06, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201279.0, "dur": 6.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201278.0, "dur": 7.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201286.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201287.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201287.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201288.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201288.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201289.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201289.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201289.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201287.0, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201290.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201290.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201286.06, "dur": 4.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201286.0, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201292.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201293.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201292.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201293.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201294.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201294.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201292.06, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201292.04, "dur": 2.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201291.04, "dur": 3.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201296.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201297.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201297.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201297.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201298.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201298.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201296.06, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201296.04, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201295.04, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201300.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201301.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201301.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201302.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201302.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201302.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201300.06, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201303.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201303.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201304.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201304.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201304.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201304.08, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201300.04, "dur": 6.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201299.06, "dur": 7.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201308.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201309.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201309.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201309.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201308.0, "dur": 2.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201311.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201311.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201311.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201311.04, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201310.06, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201313.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201314.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201313.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201313.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201313.0, "dur": 1.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201315.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201316.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201316.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201317.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201316.0, "dur": 1.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201318.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201318.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201319.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201319.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201320.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201319.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201320.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201317.1, "dur": 3.9, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201321.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201321.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201315.06, "dur": 6.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201315.0, "dur": 7.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201323.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201324.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201324.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201324.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201325.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201325.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201325.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201326.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201323.06, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201327.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201326.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201323.04, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201322.02, "dur": 6.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201330.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201331.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201331.02, "dur": 1.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201331.0, "dur": 1.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201330.0, "dur": 2.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201333.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201334.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201333.06, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201333.04, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201332.08, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201335.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201336.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201336.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201337.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201337.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201337.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201335.08, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201335.06, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201335.0, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201339.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201340.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201340.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201341.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201341.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201342.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201341.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201342.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201340.0, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201343.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201343.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201339.06, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201339.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201344.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201346.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201345.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201346.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201347.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201347.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201347.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201348.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201345.04, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201348.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201348.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201345.02, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201344.02, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201352.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201353.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201353.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201354.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201354.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201355.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201354.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201355.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201352.08, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201356.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201356.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201352.06, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201352.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201357.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201358.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201358.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201358.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201357.02, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201360.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201360.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201360.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201360.04, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201359.06, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201362.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201363.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201362.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201362.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201362.0, "dur": 1.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201364.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201365.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201364.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201364.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201364.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201366.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201367.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201367.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201366.08, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201366.02, "dur": 1.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201368.02, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201369.0, "dur": 72.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201443.02, "dur": 0.98, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201443.0, "dur": 1.02, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201442.0, "dur": 3.0, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201031.0, "dur": 414.02, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201450.0, "dur": 1.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201452.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201456.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201461.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201460.0, "dur": 1.04, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201463.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201462.02, "dur": 1.02, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201465.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201466.0, "dur": 2.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201464.0, "dur": 4.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201469.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:76)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201472.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201472.0, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201474.02, "dur": 0.98, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201477.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201476.0, "dur": 2.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201480.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201480.0, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201482.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201481.02, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201483.02, "dur": 0.98, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201484.02, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201486.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201486.04, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201483.0, "dur": 4.0, "name": "_escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:343)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201487.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201487.02, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201489.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201488.04, "dur": 1.96, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201491.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201490.02, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201492.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201492.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201493.06, "dur": 0.94, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201493.04, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201495.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201495.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201497.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201497.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201499.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201499.02, "dur": 0.98, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201501.02, "dur": 0.98, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201503.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201503.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201504.04, "dur": 0.96, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201505.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201505.02, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201507.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201507.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201506.02, "dur": 1.06, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201513.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201513.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201501.0, "dur": 14.0, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201515.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201516.02, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201517.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201499.0, "dur": 18.04, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201518.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201518.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201520.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201520.0, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201521.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201521.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201523.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201523.0, "dur": 1.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201524.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201524.02, "dur": 1.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201526.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201525.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201527.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201527.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201529.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201530.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201531.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201532.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201533.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201534.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201535.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201536.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201537.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201538.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201539.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201528.04, "dur": 11.98, "name": "getuntil (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:267)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201541.0, "dur": 0.02, "name": "str.isidentifier", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201542.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201542.02, "dur": 1.0, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201543.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201544.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201544.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201545.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201542.0, "dur": 3.04, "name": "opengroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:84)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201547.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201547.0, "dur": 1.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201549.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201551.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201550.0, "dur": 1.04, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201555.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201555.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201555.04, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201557.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201556.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201558.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201558.0, "dur": 1.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201559.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201559.02, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201561.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201562.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201560.04, "dur": 2.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201563.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201563.02, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201564.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201564.04, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201565.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201565.02, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201567.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201566.04, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201567.06, "dur": 0.94, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201569.0, "dur": 0.02, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201570.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201570.02, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201570.0, "dur": 0.1, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201572.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201572.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201548.02, "dur": 25.0, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201573.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201574.02, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201574.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201546.0, "dur": 29.0, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201576.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201575.02, "dur": 1.98, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201580.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201582.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201579.0, "dur": 4.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201584.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201584.04, "dur": 0.96, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201577.04, "dur": 7.98, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201577.02, "dur": 8.02, "name": "closegroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201587.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201586.0, "dur": 1.04, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201588.0, "dur": 4.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201587.06, "dur": 4.96, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201594.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201594.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201598.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201598.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201597.0, "dur": 2.0, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201600.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201600.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201602.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201602.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201603.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201603.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201604.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201604.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201605.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201605.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201474.0, "dur": 131.08, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201606.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201607.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201607.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201471.0, "dur": 137.0, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201609.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201609.0, "dur": 1.0, "name": "fix_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:903)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201463.06, "dur": 147.94, "name": "parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:919)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201616.0, "dur": 0.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201617.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201618.02, "dur": 0.98, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201613.0, "dur": 6.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201621.0, "dur": 0.02, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201620.0, "dur": 2.0, "name": "_get_literal_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:461)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201624.0, "dur": 0.02, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201623.0, "dur": 2.0, "name": "_get_charset_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:492)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201625.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201626.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201626.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201626.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201627.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201627.04, "dur": 0.96, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201628.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201628.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201612.02, "dur": 16.98, "name": "_compile_info (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:536)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201631.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201632.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201633.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201633.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201633.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201634.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201635.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201635.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201640.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201641.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201639.0, "dur": 2.04, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201642.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201644.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201644.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201645.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201645.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201646.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201646.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201643.0, "dur": 4.02, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201648.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201648.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201649.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201650.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201650.04, "dur": 0.96, "name": "_combine_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:65)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201652.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201652.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201655.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201654.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201654.02, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201656.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201655.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201654.0, "dur": 2.06, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201657.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201657.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201657.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201658.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201658.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201660.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201659.02, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201660.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201661.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201661.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201661.04, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201659.0, "dur": 3.02, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201662.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201662.08, "dur": 0.92, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201663.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201663.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201651.02, "dur": 13.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201664.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201665.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201666.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201667.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201667.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201629.02, "dur": 38.06, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201671.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201612.0, "dur": 59.04, "name": "_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:598)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201672.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201672.0, "dur": 1.0, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201673.02, "dur": 0.02, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201675.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201675.0, "dur": 1.02, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201676.04, "dur": 2.96, "name": "_sre.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201462.0, "dur": 217.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:759)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201683.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201687.0, "dur": 1.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201685.0, "dur": 3.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201690.0, "dur": 0.02, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201689.0, "dur": 2.0, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201682.0, "dur": 9.02, "name": "__and__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:836)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201691.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201452.02, "dur": 240.98, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201452.0, "dur": 241.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:232)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200769.0, "dur": 925.0, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:824)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200767.04, "dur": 927.96, "name": "bind (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:784)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201696.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201697.0, "dur": 0.02, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201697.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201698.02, "dur": 0.02, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200766.0, "dur": 933.0, "name": "add (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1533)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201700.0, "dur": 1.0, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200744.0, "dur": 957.02, "name": "add_url_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200740.0, "dur": 962.0, "name": "wrapper_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:45)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043200734.0, "dur": 969.0, "name": "decorator (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:437)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201706.0, "dur": 1.0, "name": "route (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:413)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201709.02, "dur": 0.98, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201713.0, "dur": 1.0, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201712.0, "dur": 2.02, "name": "_is_setup_finished (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:522)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201716.02, "dur": 0.98, "name": "_endpoint_from_view_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201718.0, "dur": 0.02, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201719.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201720.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201722.0, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201721.0, "dur": 2.0, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1061)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201723.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201725.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201725.04, "dur": 0.96, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201730.0, "dur": 1.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201732.0, "dur": 0.02, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201735.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201737.0, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201743.0, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201736.0, "dur": 8.0, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:715)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201745.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201729.0, "dur": 18.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:681)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201750.0, "dur": 0.02, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201758.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201758.0, "dur": 2.0, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201756.0, "dur": 4.02, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201761.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201761.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201762.02, "dur": 0.98, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201764.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201764.04, "dur": 3.96, "name": "re.Pattern.match", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201763.04, "dur": 6.96, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201772.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201772.0, "dur": 2.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201774.02, "dur": 2.98, "name": "re.Pattern.finditer", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201771.0, "dur": 6.02, "name": "finditer (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:225)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201780.0, "dur": 0.02, "name": "re.Match.group", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201781.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201782.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201782.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201783.0, "dur": 1.0, "name": "re.Match.group", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201784.02, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201785.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201786.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201786.04, "dur": 1.96, "name": "str.translate", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201785.04, "dur": 2.98, "name": "escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:252)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201788.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201789.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201790.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201792.0, "dur": 0.02, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201763.02, "dur": 29.02, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201793.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201797.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201797.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201798.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201798.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201796.0, "dur": 3.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201801.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201802.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201802.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201803.02, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201804.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201804.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201815.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201818.0, "dur": 1.0, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201800.0, "dur": 23.0, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201825.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201828.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201829.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201829.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201829.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201827.0, "dur": 3.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201831.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201831.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201832.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201832.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201832.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201833.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201838.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201839.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201839.04, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201840.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201840.04, "dur": 0.96, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201830.04, "dur": 10.98, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201842.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201843.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201844.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201844.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201845.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201843.0, "dur": 2.04, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201846.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201846.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201846.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201847.02, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201847.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201848.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201852.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201853.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201845.06, "dur": 7.98, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201854.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201859.0, "dur": 1.0, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201858.02, "dur": 2.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201858.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201856.0, "dur": 5.02, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201862.04, "dur": 0.96, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201862.02, "dur": 1.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201864.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201863.04, "dur": 1.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201862.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201866.02, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201866.0, "dur": 0.06, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201865.02, "dur": 4.98, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201872.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201871.0, "dur": 4.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201876.0, "dur": 2.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201879.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201879.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201881.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201881.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201875.02, "dur": 7.98, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201885.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201884.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201884.0, "dur": 2.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201887.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201887.0, "dur": 1.0, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201888.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201888.02, "dur": 0.06, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201891.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201892.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201893.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201895.02, "dur": 15.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201895.0, "dur": 16.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201913.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201916.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201917.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201917.04, "dur": 0.96, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201916.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201920.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201922.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201921.02, "dur": 1.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201923.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201924.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201924.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201924.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201925.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201921.0, "dur": 4.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201926.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201926.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201927.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201927.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201928.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201926.0, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201929.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201928.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201929.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201930.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201930.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201930.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201934.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201935.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201935.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201928.06, "dur": 7.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201920.04, "dur": 15.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201914.0, "dur": 23.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201937.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201938.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201939.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201939.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201940.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201941.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201941.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201941.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201942.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201942.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201943.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201943.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201944.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201944.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201945.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201944.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201945.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201946.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201946.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201946.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201947.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201947.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201948.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201948.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201948.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201949.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201949.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201939.0, "dur": 11.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201938.06, "dur": 11.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201938.0, "dur": 12.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201950.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201951.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201952.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201952.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201951.08, "dur": 1.92, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201951.02, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201953.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201953.08, "dur": 0.92, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201894.0, "dur": 60.02, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201958.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201964.0, "dur": 5.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201963.0, "dur": 6.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201971.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201972.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201972.06, "dur": 0.94, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201971.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201974.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201976.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201975.02, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201976.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201977.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201977.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201975.0, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201978.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201978.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201974.04, "dur": 4.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201970.0, "dur": 9.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201980.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201981.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201981.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201982.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201982.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201983.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201983.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201983.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201980.08, "dur": 3.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201984.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201984.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201985.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201985.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201986.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201984.04, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201987.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201986.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201987.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201988.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201988.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201988.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201989.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201989.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201990.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201986.08, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201980.06, "dur": 10.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201980.0, "dur": 10.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201992.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201993.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201992.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201996.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201997.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201997.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201992.06, "dur": 5.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201998.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201998.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201999.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201999.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202000.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201999.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202000.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202001.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202001.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202001.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202002.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202002.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202003.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202002.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202003.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201998.0, "dur": 6.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202004.08, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202004.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202005.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202005.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202006.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202004.04, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201992.04, "dur": 14.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201991.0, "dur": 15.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202007.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202008.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202008.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202009.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202008.02, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202010.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202010.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202008.0, "dur": 2.1, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202007.0, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202012.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202013.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202013.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202014.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202014.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202015.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202015.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202016.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202016.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202016.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202012.08, "dur": 6.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202012.06, "dur": 6.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202012.0, "dur": 7.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202020.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202021.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202021.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202022.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202022.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202023.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202023.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202024.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202024.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202024.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202021.02, "dur": 3.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202021.0, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202020.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202026.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202027.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202027.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202028.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202028.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202029.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202026.08, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202029.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202029.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202030.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202030.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202031.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202030.04, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202032.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202032.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202026.06, "dur": 6.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202026.0, "dur": 6.1, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202033.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202035.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202034.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202035.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202036.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202036.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202034.02, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202034.0, "dur": 2.1, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202033.0, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202037.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202039.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202038.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202039.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202042.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202042.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202038.04, "dur": 4.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202038.02, "dur": 4.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202037.02, "dur": 6.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202044.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202045.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202044.06, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202044.04, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202043.04, "dur": 2.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202046.0, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202046.04, "dur": 33.96, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202083.0, "dur": 0.02, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202082.0, "dur": 2.0, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202081.0, "dur": 3.02, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201794.0, "dur": 290.04, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202092.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202093.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202093.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202093.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202092.0, "dur": 2.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202095.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202096.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202096.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202097.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202097.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202097.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202104.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202106.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202095.0, "dur": 11.04, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202107.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202109.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202109.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202110.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202110.06, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202108.0, "dur": 3.0, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202111.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202112.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202112.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202113.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202113.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202113.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202118.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202118.04, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202119.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202119.04, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202120.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202111.02, "dur": 12.98, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202125.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202126.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202127.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202127.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202128.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202126.0, "dur": 2.04, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202129.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202130.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202130.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202130.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202131.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202131.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202137.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202138.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202129.0, "dur": 9.04, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202139.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202144.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202143.0, "dur": 1.04, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202142.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202141.0, "dur": 4.02, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202147.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202146.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202148.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202147.06, "dur": 0.98, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202146.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202150.04, "dur": 0.96, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202150.02, "dur": 1.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202150.0, "dur": 1.04, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202153.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202152.0, "dur": 3.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202156.0, "dur": 2.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202159.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202160.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202161.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202162.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202155.02, "dur": 7.98, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202164.0, "dur": 0.02, "name": "list.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202166.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202165.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202165.0, "dur": 1.06, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202168.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202168.0, "dur": 0.06, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202169.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202169.0, "dur": 1.0, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202172.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202176.0, "dur": 1.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202177.02, "dur": 0.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202179.02, "dur": 12.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202179.0, "dur": 13.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202193.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202196.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202197.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202197.04, "dur": 0.96, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202196.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202199.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202201.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202200.04, "dur": 1.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202202.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202202.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202203.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202203.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202204.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202200.02, "dur": 4.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202205.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202205.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202205.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202206.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202206.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202204.08, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202207.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202207.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202208.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202208.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202209.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202209.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202210.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202210.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202210.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202207.02, "dur": 4.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202200.0, "dur": 11.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202195.0, "dur": 17.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202212.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202212.08, "dur": 0.92, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202214.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202213.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202215.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202215.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202216.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202215.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202216.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202217.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202217.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202217.04, "dur": 3.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202221.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202221.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202222.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202222.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202223.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202223.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202224.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202223.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202224.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202225.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202225.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202225.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202226.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202226.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202227.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202213.04, "dur": 14.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202213.02, "dur": 14.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202212.06, "dur": 15.94, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202228.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202229.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202229.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202229.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202229.04, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202228.06, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202231.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202231.04, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202178.02, "dur": 53.98, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202235.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202238.0, "dur": 4.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202237.0, "dur": 5.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202245.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202245.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202246.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202244.0, "dur": 2.04, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202247.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202249.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202248.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202249.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202250.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202250.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202248.02, "dur": 2.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202251.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202251.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202248.0, "dur": 4.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202243.0, "dur": 9.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202256.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202257.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202257.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202258.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202258.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202259.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202259.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202259.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202256.06, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202260.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202260.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202261.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202261.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202262.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202260.04, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202263.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202262.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202263.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202263.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202264.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202264.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202265.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202265.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202266.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202266.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202266.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202263.06, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202256.04, "dur": 11.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202255.0, "dur": 12.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202268.02, "dur": 0.98, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202270.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202269.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202270.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202271.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202271.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202269.04, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202272.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202272.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202273.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202273.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202274.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202273.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202274.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202275.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202275.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202275.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202276.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202278.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202279.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202279.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202280.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202272.0, "dur": 8.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202281.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202280.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202281.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202282.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202282.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202280.08, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202269.02, "dur": 13.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202268.0, "dur": 15.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202284.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202285.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202284.08, "dur": 1.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202286.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202284.06, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202287.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202287.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202288.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202288.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202288.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202286.08, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202289.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202289.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202290.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202290.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202291.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202291.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202291.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202289.1, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202292.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202292.04, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202284.04, "dur": 8.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202283.04, "dur": 10.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202294.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202295.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202295.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202296.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202294.08, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202296.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202296.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202294.06, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202294.0, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202298.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202302.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202301.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202303.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202303.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202304.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202303.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202304.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202305.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202305.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202301.02, "dur": 4.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202301.0, "dur": 5.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202298.0, "dur": 8.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202307.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202308.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202308.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202309.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202309.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202309.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202309.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202310.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202310.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202311.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202307.06, "dur": 4.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202307.04, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202306.04, "dur": 5.96, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202312.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202314.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202313.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202314.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202315.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202315.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202315.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202316.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202313.04, "dur": 3.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202317.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202316.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202313.02, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202312.02, "dur": 5.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202318.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202319.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202319.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202320.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202321.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202321.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202319.02, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202322.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202322.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202325.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202322.0, "dur": 3.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202326.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202325.06, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202319.0, "dur": 7.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202318.0, "dur": 8.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202327.02, "dur": 0.98, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202329.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202328.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202329.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202330.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202330.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202328.04, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202331.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202331.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202332.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202330.1, "dur": 1.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202332.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202332.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202328.02, "dur": 5.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202327.0, "dur": 6.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202334.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202335.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202335.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202336.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202336.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202336.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202334.08, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202337.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202337.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202338.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202338.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202339.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202337.12, "dur": 1.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202339.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202339.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202334.06, "dur": 5.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202334.0, "dur": 6.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202341.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202342.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202342.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202343.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202343.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202343.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202341.08, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202344.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202344.04, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202347.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202347.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202348.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202347.02, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202349.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202348.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202341.06, "dur": 8.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202341.0, "dur": 9.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202350.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202351.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202351.04, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202351.02, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202350.02, "dur": 2.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202353.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202354.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202354.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202355.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202355.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202356.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202355.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202356.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202353.08, "dur": 3.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202357.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202357.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202353.06, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202353.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202358.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202360.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202359.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202360.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202361.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202361.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202359.04, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202359.02, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202358.02, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202363.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202364.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202363.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202364.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202365.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202365.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202365.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202366.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202363.06, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202367.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202366.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202363.04, "dur": 6.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202362.04, "dur": 7.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202371.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202372.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202372.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202373.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202371.06, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202374.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202373.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202374.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202375.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202375.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202373.08, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202376.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202376.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202377.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202377.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202378.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202376.0, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202371.04, "dur": 7.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202370.04, "dur": 8.96, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202379.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202381.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202380.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202381.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202382.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202382.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202382.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202383.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202380.02, "dur": 3.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202383.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202383.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202380.0, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202379.02, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202385.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202386.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202386.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202387.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202387.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202388.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202387.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202388.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202385.08, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202389.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202389.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202385.06, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202385.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202393.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202394.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202393.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202394.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202395.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202395.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202393.06, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202393.04, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202392.0, "dur": 4.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202397.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202398.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202398.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202398.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202399.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202399.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202397.08, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202397.06, "dur": 2.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202397.0, "dur": 3.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202401.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202402.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202402.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202403.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202403.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202404.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202401.08, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202404.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202404.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202405.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202405.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202406.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202405.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202401.06, "dur": 5.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202401.0, "dur": 5.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202407.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202408.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202408.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202408.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202407.0, "dur": 2.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202409.08, "dur": 0.92, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202410.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202410.04, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202410.02, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202409.06, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202412.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202413.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202412.06, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202412.04, "dur": 2.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202411.08, "dur": 3.94, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202416.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202417.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202417.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202418.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202417.0, "dur": 1.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202419.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202419.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202420.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202420.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202421.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202420.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202421.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202418.1, "dur": 3.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202422.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202422.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202416.06, "dur": 6.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202416.0, "dur": 7.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202424.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202425.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202425.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202425.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202426.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202426.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202426.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202427.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202424.06, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202428.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202427.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202424.04, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202423.04, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202429.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202430.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202430.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202430.0, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202429.0, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202431.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202432.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202432.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202432.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202431.04, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202434.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202435.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202434.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202435.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202436.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202438.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202434.06, "dur": 4.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202434.04, "dur": 4.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202433.06, "dur": 5.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202440.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202441.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202441.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202441.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202442.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202442.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202442.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202443.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202440.06, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202444.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202443.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202440.04, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202439.06, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202445.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202446.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202446.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202447.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202447.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202448.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202448.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202449.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202446.02, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202449.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202449.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202446.0, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202445.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202451.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202452.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202452.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202452.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202453.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202453.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202453.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202454.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202451.08, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202455.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202454.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202451.06, "dur": 4.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202451.0, "dur": 4.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202456.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202457.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202457.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202457.0, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202456.0, "dur": 4.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202461.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202462.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202461.06, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202461.04, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202460.04, "dur": 2.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202463.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202464.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202463.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202463.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202463.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202465.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202466.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202466.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202465.08, "dur": 1.92, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202465.02, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202467.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202468.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202468.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202468.0, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202467.04, "dur": 1.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202469.04, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202470.0, "dur": 60.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202532.0, "dur": 0.02, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202531.02, "dur": 1.98, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202531.0, "dur": 2.02, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202090.0, "dur": 443.04, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202539.0, "dur": 1.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202542.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202545.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202547.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202546.0, "dur": 1.04, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202548.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202548.02, "dur": 1.0, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202551.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202553.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202551.0, "dur": 3.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202555.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:76)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202558.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202558.0, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202561.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202563.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202563.0, "dur": 2.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202567.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202566.0, "dur": 1.04, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202568.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202568.0, "dur": 4.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202573.02, "dur": 0.98, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202574.02, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202576.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202577.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202573.0, "dur": 4.04, "name": "_escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:343)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202578.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202578.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202579.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202579.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202580.04, "dur": 0.96, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202581.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202581.02, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202582.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202582.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202584.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202584.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202586.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202585.0, "dur": 1.04, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202587.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202588.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202586.06, "dur": 2.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202590.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202589.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202590.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202590.06, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202592.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202592.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202593.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202593.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202595.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202594.02, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202596.0, "dur": 1.0, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202597.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202597.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202599.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202599.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202599.04, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202600.06, "dur": 0.94, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202600.04, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202601.04, "dur": 0.96, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202602.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202602.02, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202603.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202603.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202604.04, "dur": 0.96, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202608.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202608.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202609.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202608.08, "dur": 1.92, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202610.02, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202611.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202610.06, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202612.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202611.06, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202613.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202613.0, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202615.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202614.04, "dur": 1.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202616.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202616.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202618.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202617.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202620.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202619.0, "dur": 1.04, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202621.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202621.02, "dur": 1.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202623.02, "dur": 0.98, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202625.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202625.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202627.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202627.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202627.04, "dur": 0.96, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202629.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202628.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202628.02, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202632.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202632.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202623.0, "dur": 10.02, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202634.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202634.04, "dur": 0.96, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202635.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202621.0, "dur": 14.06, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202637.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202636.0, "dur": 2.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202638.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202638.02, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202640.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202639.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202641.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202641.0, "dur": 1.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202642.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202642.02, "dur": 1.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202646.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202646.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202648.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202647.04, "dur": 1.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202649.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202651.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202652.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202653.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202654.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202655.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202656.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202657.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202658.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202659.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202660.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202649.0, "dur": 12.0, "name": "getuntil (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:267)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202661.02, "dur": 0.98, "name": "str.isidentifier", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202663.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202663.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202664.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202665.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202664.04, "dur": 1.0, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202665.06, "dur": 0.94, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202662.02, "dur": 4.0, "name": "opengroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:84)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202668.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202668.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202670.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202671.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202671.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202673.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202673.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202673.04, "dur": 0.96, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202674.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202674.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202676.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202676.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202677.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202677.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202678.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202679.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202678.0, "dur": 2.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202681.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202680.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202681.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202681.06, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202682.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202682.04, "dur": 2.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202686.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202686.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202687.02, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202688.0, "dur": 0.02, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202690.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202689.02, "dur": 1.02, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202689.0, "dur": 1.06, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202692.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202691.0, "dur": 1.04, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202669.0, "dur": 23.06, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202693.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202693.04, "dur": 0.96, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202694.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202667.0, "dur": 27.06, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202695.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202695.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202700.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202701.02, "dur": 0.98, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202699.0, "dur": 3.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202703.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202704.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202697.02, "dur": 7.98, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202697.0, "dur": 8.02, "name": "closegroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202706.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202706.0, "dur": 1.02, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202708.0, "dur": 2.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202707.04, "dur": 2.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202711.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202711.0, "dur": 1.02, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202713.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202713.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202712.04, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202715.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202715.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202716.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202716.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202717.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202717.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202718.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202718.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202719.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202719.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202720.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202720.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202721.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202721.02, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202725.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202725.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202726.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202726.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202727.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202726.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202560.0, "dur": 167.06, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202728.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202728.04, "dur": 0.96, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202729.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202557.0, "dur": 172.06, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202731.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202730.0, "dur": 2.0, "name": "fix_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:903)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202550.0, "dur": 183.0, "name": "parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:919)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202738.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202739.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202737.0, "dur": 3.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202743.0, "dur": 0.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202744.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202745.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202735.0, "dur": 11.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202748.0, "dur": 0.02, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202747.0, "dur": 2.0, "name": "_get_literal_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:461)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202750.02, "dur": 0.98, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202750.0, "dur": 1.02, "name": "_get_charset_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:492)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202752.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202752.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202752.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202753.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202753.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202754.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202754.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202755.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202734.02, "dur": 21.02, "name": "_compile_info (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:536)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202758.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202759.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202760.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202760.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202760.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202763.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202762.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202762.02, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202764.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202764.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202762.0, "dur": 3.0, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202765.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202768.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202768.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202769.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202769.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202772.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202771.0, "dur": 1.04, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202773.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202773.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202773.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202773.08, "dur": 0.94, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202770.0, "dur": 5.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202775.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202775.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202776.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202776.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202777.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202777.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202778.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202778.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202778.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202779.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202779.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202780.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202780.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202782.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202783.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202781.0, "dur": 3.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202784.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202785.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202785.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202786.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202786.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202787.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202787.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202784.06, "dur": 3.94, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202788.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202788.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202789.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202790.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202790.04, "dur": 0.96, "name": "_combine_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:65)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202792.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202792.02, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202794.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202794.04, "dur": 0.98, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202794.02, "dur": 1.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202795.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202795.06, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202794.0, "dur": 5.0, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202799.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202799.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202800.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202800.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202800.1, "dur": 0.9, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202802.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202802.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202803.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202803.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202804.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202804.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202801.02, "dur": 3.98, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202805.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202805.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202806.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202806.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202792.0, "dur": 15.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202807.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202807.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202808.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202809.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202809.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202756.0, "dur": 54.02, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202810.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202734.0, "dur": 77.0, "name": "_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:598)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202812.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202812.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202813.0, "dur": 0.02, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202815.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202815.0, "dur": 1.02, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202817.0, "dur": 2.0, "name": "_sre.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202548.0, "dur": 271.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:759)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202823.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202827.0, "dur": 1.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202825.0, "dur": 3.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202830.0, "dur": 0.02, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202829.0, "dur": 2.0, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202822.0, "dur": 9.02, "name": "__and__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:836)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202831.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202541.02, "dur": 291.98, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202541.0, "dur": 292.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:232)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201753.0, "dur": 1080.04, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:824)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201751.0, "dur": 1083.0, "name": "bind (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:784)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202835.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202835.04, "dur": 0.96, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202836.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202839.0, "dur": 0.02, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201749.0, "dur": 1091.0, "name": "add (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1533)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202841.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201716.0, "dur": 1125.04, "name": "add_url_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201711.0, "dur": 1131.0, "name": "wrapper_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:45)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043201709.0, "dur": 1134.0, "name": "decorator (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:437)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202845.0, "dur": 1.0, "name": "route (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:413)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202848.0, "dur": 0.02, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202851.0, "dur": 0.02, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202850.0, "dur": 2.0, "name": "_is_setup_finished (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:522)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202853.02, "dur": 0.98, "name": "_endpoint_from_view_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202854.02, "dur": 0.02, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202855.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202856.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202857.02, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202857.0, "dur": 1.0, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1061)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202858.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202859.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202860.02, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202863.0, "dur": 1.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202864.02, "dur": 0.98, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202866.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202868.0, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202868.04, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202867.02, "dur": 1.06, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:715)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202869.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202862.0, "dur": 8.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:681)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202872.02, "dur": 0.98, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202878.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202877.02, "dur": 1.98, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202877.0, "dur": 2.02, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202880.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202880.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202881.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202882.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202883.0, "dur": 3.0, "name": "re.Pattern.match", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202882.02, "dur": 4.98, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202889.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202888.02, "dur": 1.98, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202890.02, "dur": 1.98, "name": "re.Pattern.finditer", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202888.0, "dur": 4.02, "name": "finditer (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:225)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202894.0, "dur": 0.02, "name": "re.Match.group", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202895.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202895.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202896.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202897.0, "dur": 0.02, "name": "re.Match.group", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202901.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202902.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202903.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202904.0, "dur": 1.0, "name": "str.translate", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202903.0, "dur": 2.02, "name": "escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:252)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202905.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202906.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202907.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202908.0, "dur": 0.02, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202882.0, "dur": 27.0, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202909.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202913.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202914.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202914.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202915.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202912.0, "dur": 4.0, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202917.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202917.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202918.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202918.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202918.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202919.02, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202927.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202928.0, "dur": 1.0, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202916.02, "dur": 13.0, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202930.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202931.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202932.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202932.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202933.02, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202931.0, "dur": 2.06, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202934.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202934.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202935.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202935.06, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202935.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202936.02, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202940.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202941.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202941.06, "dur": 0.94, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202942.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202942.06, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202943.0, "dur": 1.0, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202934.0, "dur": 10.02, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202944.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202946.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202946.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202949.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202950.02, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202945.02, "dur": 5.04, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202951.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202951.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202952.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202952.06, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202953.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202953.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202957.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202958.02, "dur": 0.98, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202951.0, "dur": 8.02, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202959.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202964.02, "dur": 0.98, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202964.0, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202963.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202962.0, "dur": 4.02, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202968.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202967.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202969.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202968.06, "dur": 0.98, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202967.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202971.02, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202971.0, "dur": 0.06, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202970.02, "dur": 1.98, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202973.02, "dur": 0.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202973.0, "dur": 3.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202977.02, "dur": 1.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202980.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202980.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202982.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202982.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202977.0, "dur": 7.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202986.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202985.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202985.0, "dur": 1.06, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202988.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202988.0, "dur": 0.06, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202989.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202989.0, "dur": 0.06, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202991.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202992.02, "dur": 0.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202994.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202995.04, "dur": 14.96, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202995.02, "dur": 15.0, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203011.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203018.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203019.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203019.04, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203018.0, "dur": 2.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203021.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203023.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203023.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203024.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203025.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203026.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203025.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203026.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203022.02, "dur": 5.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203027.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203027.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203028.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203028.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203029.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203027.04, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203030.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203030.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203031.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203031.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203032.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203031.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203032.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203033.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203033.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203029.08, "dur": 4.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203022.0, "dur": 12.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203016.0, "dur": 19.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203035.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203036.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203037.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203037.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203038.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203038.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203039.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203039.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203040.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203040.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203040.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203040.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203041.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203041.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203042.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203042.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203045.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203046.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203046.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203046.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203047.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203047.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203048.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203048.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203049.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203049.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203049.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203036.06, "dur": 13.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203036.04, "dur": 13.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203035.06, "dur": 14.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203051.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203051.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203052.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203052.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203052.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203051.04, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203053.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203054.02, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202995.0, "dur": 59.06, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203058.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203061.0, "dur": 5.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203060.0, "dur": 6.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203068.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203069.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203069.04, "dur": 0.96, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203068.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203071.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203072.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203072.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203073.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203074.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203074.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203072.0, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203075.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203075.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203071.04, "dur": 4.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203067.0, "dur": 9.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203077.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203078.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203078.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203079.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203079.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203083.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203082.0, "dur": 1.04, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203083.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203077.08, "dur": 6.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203084.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203084.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203085.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203085.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203086.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203084.04, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203087.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203087.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203088.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203088.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203088.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203088.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203089.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203089.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203090.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203086.08, "dur": 3.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203077.06, "dur": 13.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203077.0, "dur": 14.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203092.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203093.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203093.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203094.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203094.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203095.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203093.0, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203096.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203095.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203096.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203097.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203097.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203097.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203098.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203098.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203099.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203099.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203099.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203100.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203100.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203100.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203101.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203095.08, "dur": 6.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203102.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203102.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203105.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203105.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203105.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203101.1, "dur": 4.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203092.06, "dur": 13.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203092.0, "dur": 14.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203107.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203108.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203108.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203109.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203108.0, "dur": 1.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203110.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203109.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203107.06, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203107.0, "dur": 3.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203112.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203113.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203112.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203114.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203114.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203114.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203114.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203115.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203116.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203116.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203112.06, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203112.04, "dur": 4.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203111.0, "dur": 6.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203118.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203119.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203118.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203119.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203120.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203120.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203120.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203121.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203121.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203122.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203118.06, "dur": 3.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203118.04, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203117.04, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203123.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203124.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203124.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203125.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203126.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203128.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203124.02, "dur": 5.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203129.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203129.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203130.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203130.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203131.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203130.0, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203131.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203131.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203124.0, "dur": 8.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203123.0, "dur": 9.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203133.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203134.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203134.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203135.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203135.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203136.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203134.02, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203134.0, "dur": 2.08, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203133.0, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203137.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203139.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203138.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203139.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203140.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203140.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203138.04, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203138.02, "dur": 2.08, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203137.02, "dur": 3.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203141.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203142.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203142.04, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203142.02, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203141.02, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203143.06, "dur": 0.94, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203144.02, "dur": 28.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203175.02, "dur": 0.98, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203175.0, "dur": 1.02, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203174.0, "dur": 3.0, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202910.02, "dur": 267.0, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203184.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203185.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203186.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203186.04, "dur": 0.96, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203184.0, "dur": 3.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203188.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203191.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203192.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203192.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203193.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203193.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203200.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203202.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203187.04, "dur": 15.0, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203203.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203205.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203205.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203206.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203206.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203204.0, "dur": 3.0, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203207.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203208.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203208.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203208.1, "dur": 0.9, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203209.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203209.06, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203214.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203214.04, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203215.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203215.04, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203215.08, "dur": 0.92, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203216.02, "dur": 0.98, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203207.02, "dur": 10.0, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203218.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203219.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203219.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203220.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203220.06, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203219.0, "dur": 2.0, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203221.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203222.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203222.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203222.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203223.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203223.06, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203227.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203228.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203221.02, "dur": 7.02, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203229.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203233.02, "dur": 0.98, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203233.0, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203232.0, "dur": 2.04, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203231.0, "dur": 6.0, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203239.02, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203239.0, "dur": 1.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203240.04, "dur": 0.96, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203240.02, "dur": 1.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203238.0, "dur": 3.04, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203242.04, "dur": 0.96, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203242.02, "dur": 1.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203242.0, "dur": 1.04, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203245.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203244.0, "dur": 3.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203248.02, "dur": 1.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203251.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203251.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203253.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203253.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203248.0, "dur": 6.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203255.0, "dur": 1.0, "name": "list.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203257.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203256.04, "dur": 1.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203256.02, "dur": 1.98, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203259.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203259.0, "dur": 0.06, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203260.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203260.0, "dur": 1.0, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203263.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203264.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203265.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203267.0, "dur": 12.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203266.02, "dur": 13.0, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203280.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203283.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203284.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203284.04, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203283.0, "dur": 2.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203286.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203288.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203287.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203289.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203289.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203290.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203290.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203291.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203287.02, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203292.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203291.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203292.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203296.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203299.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203291.06, "dur": 7.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203300.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203299.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203300.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203301.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203301.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203301.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203302.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203302.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203303.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203299.06, "dur": 4.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203287.0, "dur": 17.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203281.0, "dur": 23.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203304.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203305.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203306.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203306.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203307.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203307.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203308.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203308.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203309.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203309.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203310.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203309.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203310.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203311.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203311.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203311.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203312.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203312.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203313.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203313.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203314.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203314.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203315.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203314.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203315.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203316.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203316.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203306.0, "dur": 10.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203305.08, "dur": 11.92, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203305.02, "dur": 12.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203317.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203318.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203321.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203321.0, "dur": 1.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203320.0, "dur": 2.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203318.0, "dur": 4.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203322.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203323.0, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203266.0, "dur": 57.04, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203327.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203329.02, "dur": 4.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203329.0, "dur": 5.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203336.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203337.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203337.04, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203336.0, "dur": 2.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203339.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203340.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203340.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203341.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203342.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203342.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203339.06, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203343.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203342.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203339.04, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203335.0, "dur": 9.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203344.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203346.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203345.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203346.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203347.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203347.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203347.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203348.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203345.04, "dur": 3.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203349.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203349.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203349.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203350.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203350.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203348.1, "dur": 2.9, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203351.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203351.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203352.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203352.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203352.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203353.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203356.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203356.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203357.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203358.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203358.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203351.1, "dur": 6.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203345.02, "dur": 13.08, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203344.02, "dur": 14.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203360.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203361.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203361.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203362.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203362.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203363.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203360.08, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203363.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203363.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203364.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203365.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203365.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203365.04, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203366.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203366.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203367.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203366.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203367.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203368.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203368.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203368.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203369.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203363.06, "dur": 6.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203370.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203370.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203370.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203371.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203371.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203369.08, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203360.06, "dur": 11.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203360.0, "dur": 12.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203372.06, "dur": 0.94, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203374.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203373.06, "dur": 1.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203375.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203373.04, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203376.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203376.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203376.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203380.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203380.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203375.08, "dur": 5.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203381.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203380.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203381.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203381.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203382.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203383.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203383.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203381.06, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203384.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203384.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203373.02, "dur": 11.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203372.04, "dur": 12.96, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203386.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203387.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203387.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203388.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203386.06, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203388.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203388.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203386.04, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203385.02, "dur": 4.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203390.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203391.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203391.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203392.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203392.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203393.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203393.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203394.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203394.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203394.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203391.02, "dur": 4.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203391.0, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203390.0, "dur": 5.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203396.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203397.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203397.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203398.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203398.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203399.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203399.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203399.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203400.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203402.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203397.0, "dur": 6.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203396.06, "dur": 6.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203396.0, "dur": 7.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203404.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203405.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203405.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203406.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203406.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203407.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203407.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203408.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203405.02, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203408.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203408.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203405.0, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203404.0, "dur": 5.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203410.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203411.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203411.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203412.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203412.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203413.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203411.0, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203414.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203413.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203414.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203413.08, "dur": 1.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203415.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203415.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203410.06, "dur": 5.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203410.0, "dur": 6.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203417.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203418.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203418.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203419.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203419.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203419.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203417.06, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203420.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203420.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203421.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203420.02, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203421.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203421.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203417.04, "dur": 5.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203416.04, "dur": 6.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203425.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203426.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203426.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203427.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203427.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203428.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203426.02, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203428.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203428.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203429.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203429.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203430.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203429.04, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203431.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203430.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203426.0, "dur": 5.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203425.0, "dur": 6.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203432.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203433.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203433.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203434.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203435.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203435.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203433.02, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203436.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203435.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203436.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203436.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203437.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203436.06, "dur": 1.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203438.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203437.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203433.0, "dur": 5.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203432.0, "dur": 6.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203439.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203440.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203440.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203440.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203439.0, "dur": 2.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203442.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203443.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203442.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203443.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203444.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203444.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203444.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203447.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203442.06, "dur": 5.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203448.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203448.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203442.04, "dur": 6.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203441.06, "dur": 7.96, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203450.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203451.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203450.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203451.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203452.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203452.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203450.06, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203450.04, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203449.04, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203454.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203455.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203455.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203455.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203456.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203456.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203456.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203457.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203454.08, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203458.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203457.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203454.06, "dur": 4.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203454.0, "dur": 4.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203459.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203460.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203460.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203461.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203460.02, "dur": 1.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203462.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203462.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203463.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203463.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203463.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203462.0, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203464.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203464.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203465.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203466.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203466.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203464.04, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203460.0, "dur": 7.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203459.0, "dur": 8.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203470.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203471.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203471.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203472.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203472.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203473.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203473.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203473.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203471.0, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203474.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203474.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203470.06, "dur": 4.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203470.0, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203476.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203477.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203476.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203477.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203478.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203478.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203478.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203479.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203476.06, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203479.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203479.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203476.04, "dur": 4.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203475.04, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203481.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203482.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203482.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203483.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203483.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203483.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203481.08, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203481.06, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203481.0, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203485.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203486.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203486.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203487.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203487.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203487.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203486.0, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203485.06, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203485.0, "dur": 3.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203489.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203490.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203490.02, "dur": 2.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203493.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203494.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203494.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203490.0, "dur": 5.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203495.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203495.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203496.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203495.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203496.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203496.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203489.06, "dur": 7.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203489.0, "dur": 8.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203498.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203499.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203498.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203498.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203498.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203500.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203501.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203501.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203501.0, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203500.02, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203502.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203503.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203503.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203503.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203502.04, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203505.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203506.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203505.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203507.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203505.06, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203507.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203507.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203508.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203509.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203509.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203509.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203510.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203507.06, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203510.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203510.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203505.04, "dur": 6.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203504.06, "dur": 7.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203512.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203513.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203513.04, "dur": 2.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203516.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203517.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203517.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203517.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203518.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203513.02, "dur": 5.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203518.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203518.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203513.0, "dur": 6.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203512.0, "dur": 7.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203520.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203521.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203521.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203520.06, "dur": 1.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203520.0, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203522.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203523.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203523.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203523.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203522.04, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203524.08, "dur": 0.92, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203526.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203525.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203526.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203527.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203527.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203525.04, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203525.02, "dur": 2.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203524.06, "dur": 3.96, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203528.06, "dur": 0.94, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203530.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203529.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203530.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203531.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203531.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203531.04, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203532.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203529.04, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203532.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203532.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203529.02, "dur": 4.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203528.04, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203534.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203535.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203535.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203538.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203538.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203539.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203539.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203540.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203534.08, "dur": 5.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203540.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203540.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203534.06, "dur": 6.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203534.0, "dur": 7.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203542.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203543.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203543.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203544.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203544.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203545.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203544.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203545.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203542.08, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203546.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203546.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203542.06, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203542.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203547.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203548.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203548.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203548.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203547.02, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203549.08, "dur": 0.92, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203550.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203550.04, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203550.02, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203549.06, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203552.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203552.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203552.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203552.04, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203551.08, "dur": 1.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203554.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203555.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203554.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203554.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203554.0, "dur": 1.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203556.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203557.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203557.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203556.06, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203556.0, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203560.02, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203561.0, "dur": 61.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203624.0, "dur": 1.0, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203623.02, "dur": 2.0, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203623.0, "dur": 2.04, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203182.0, "dur": 444.0, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203631.0, "dur": 1.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203634.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203637.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203639.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203638.0, "dur": 1.04, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203640.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203640.02, "dur": 0.06, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203642.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203644.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203642.0, "dur": 3.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203646.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:76)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203650.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203649.0, "dur": 1.04, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203651.02, "dur": 0.98, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203654.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203653.0, "dur": 2.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203657.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203657.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203658.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203658.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203660.02, "dur": 0.98, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203661.02, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203662.0, "dur": 1.0, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203663.02, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203660.0, "dur": 4.0, "name": "_escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:343)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203664.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203664.02, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203666.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203665.02, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203667.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203668.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203667.04, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203669.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203668.06, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203670.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203670.0, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203672.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203672.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203673.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203674.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203673.0, "dur": 5.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203679.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203679.0, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203680.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203680.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203682.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203681.02, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203683.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203683.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203684.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203684.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203686.0, "dur": 0.02, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203687.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203687.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203688.04, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203689.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203689.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203690.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203690.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203691.04, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203692.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203692.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203693.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203693.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203694.04, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203695.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203695.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203696.02, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203696.0, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203697.02, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203698.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203697.06, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203699.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203698.06, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203700.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203700.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203700.04, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203701.06, "dur": 0.94, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203701.04, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203703.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203703.0, "dur": 1.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203704.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203704.02, "dur": 1.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203706.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203705.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203707.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203707.0, "dur": 3.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203712.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203711.0, "dur": 1.04, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203714.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203713.02, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203716.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203718.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203717.0, "dur": 1.04, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203719.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203719.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203719.04, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203721.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203721.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203720.04, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203724.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203724.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203715.0, "dur": 10.04, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203726.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203726.04, "dur": 0.96, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203727.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203713.0, "dur": 14.06, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203729.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203728.0, "dur": 2.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203730.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203730.02, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203732.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203731.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203734.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203733.0, "dur": 1.04, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203735.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203734.06, "dur": 0.98, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203736.02, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203736.0, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203737.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203737.02, "dur": 1.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203739.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203740.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203741.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203743.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203744.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203745.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203746.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203747.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203748.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203749.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203750.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203738.04, "dur": 12.0, "name": "getuntil (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:267)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203753.0, "dur": 1.0, "name": "str.isidentifier", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203755.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203755.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203756.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203757.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203756.04, "dur": 1.0, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203757.06, "dur": 0.94, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203754.02, "dur": 4.0, "name": "opengroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:84)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203760.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203760.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203761.02, "dur": 0.98, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203763.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203763.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203764.04, "dur": 0.96, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203765.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203765.02, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203766.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203766.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203768.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203768.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203769.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203769.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203770.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203771.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203770.0, "dur": 2.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203772.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203772.02, "dur": 0.98, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203773.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203773.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203774.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203774.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203775.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203775.02, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203776.04, "dur": 0.96, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203777.02, "dur": 0.98, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203779.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203778.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203778.02, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203781.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203781.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203761.0, "dur": 21.0, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203782.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203783.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203783.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203759.0, "dur": 24.08, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203784.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203784.0, "dur": 4.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203792.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203793.02, "dur": 0.98, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203791.0, "dur": 3.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203795.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203796.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203789.0, "dur": 8.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203788.02, "dur": 9.0, "name": "closegroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203798.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203798.0, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203799.04, "dur": 2.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203799.02, "dur": 3.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203803.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203803.0, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203805.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203804.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203804.02, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203807.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203807.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203808.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203808.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203809.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203809.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203810.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203810.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203811.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203811.02, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203812.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203812.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203813.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203813.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203814.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203814.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203815.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203815.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203816.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203816.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203817.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203816.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203651.0, "dur": 166.06, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203818.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203818.04, "dur": 0.96, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203819.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203648.0, "dur": 171.06, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203820.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203820.0, "dur": 2.0, "name": "fix_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:903)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203641.0, "dur": 181.02, "name": "parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:919)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203831.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203832.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203830.0, "dur": 2.04, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203836.0, "dur": 0.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203837.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203838.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203827.02, "dur": 11.98, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203840.02, "dur": 0.98, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203840.0, "dur": 2.0, "name": "_get_literal_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:461)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203843.0, "dur": 0.02, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203842.02, "dur": 1.98, "name": "_get_charset_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:492)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203844.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203845.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203845.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203845.1, "dur": 0.9, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203846.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203846.06, "dur": 0.94, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203847.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203847.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203827.0, "dur": 21.0, "name": "_compile_info (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:536)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203850.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203851.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203852.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203852.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203853.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203855.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203854.04, "dur": 1.0, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203854.02, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203856.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203855.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203854.0, "dur": 3.0, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203857.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203857.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203858.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203858.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203858.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203861.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203860.0, "dur": 1.04, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203862.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203862.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203862.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203862.08, "dur": 0.94, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203859.0, "dur": 5.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203864.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203864.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203865.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203868.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203869.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203869.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203869.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203870.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203870.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203870.1, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203871.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203871.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203872.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203872.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203872.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203874.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203875.02, "dur": 0.98, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203873.02, "dur": 3.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203876.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203878.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203878.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203879.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203879.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203880.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203879.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203877.0, "dur": 3.06, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203881.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203881.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203882.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203882.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203883.0, "dur": 1.0, "name": "_combine_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:65)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203885.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203885.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203887.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203887.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203886.02, "dur": 1.06, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203888.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203888.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203886.0, "dur": 3.0, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203889.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203889.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203890.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203890.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203891.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203892.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203892.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203893.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203893.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203894.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203893.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203891.04, "dur": 4.96, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203897.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203897.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203898.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203898.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203884.02, "dur": 14.98, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203899.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203899.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203900.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203901.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203902.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203848.02, "dur": 54.02, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203903.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203826.0, "dur": 77.04, "name": "_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:598)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203904.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203904.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203905.0, "dur": 0.02, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203907.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203907.0, "dur": 1.02, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203909.0, "dur": 1.0, "name": "_sre.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203640.0, "dur": 271.0, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:759)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203915.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203919.0, "dur": 1.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203917.0, "dur": 3.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203922.0, "dur": 0.02, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203921.0, "dur": 1.04, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203914.0, "dur": 9.0, "name": "__and__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:836)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203923.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203633.02, "dur": 290.98, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203633.0, "dur": 292.0, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:232)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202875.0, "dur": 1050.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:824)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202873.02, "dur": 1052.98, "name": "bind (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:784)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203927.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203927.04, "dur": 0.96, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203928.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203928.06, "dur": 0.94, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202872.0, "dur": 1057.02, "name": "add (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1533)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203930.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202853.0, "dur": 1077.04, "name": "add_url_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202849.0, "dur": 1082.0, "name": "wrapper_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:45)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043202847.0, "dur": 1085.0, "name": "decorator (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:437)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203934.0, "dur": 1.0, "name": "route (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:413)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203936.02, "dur": 0.98, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203939.0, "dur": 0.02, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203938.02, "dur": 1.98, "name": "_is_setup_finished (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:522)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203941.02, "dur": 0.98, "name": "_endpoint_from_view_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203945.0, "dur": 0.02, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203946.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203946.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203948.02, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203948.0, "dur": 1.0, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1061)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203949.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203950.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203951.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203953.02, "dur": 0.98, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203955.0, "dur": 1.0, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203957.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203958.02, "dur": 0.02, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203958.06, "dur": 0.94, "name": "str.upper", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203958.0, "dur": 1.02, "name": "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:715)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203960.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203953.0, "dur": 8.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:681)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203963.0, "dur": 0.02, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203968.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203968.0, "dur": 1.0, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203967.0, "dur": 3.0, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203970.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203971.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203971.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203973.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203973.06, "dur": 2.94, "name": "re.Pattern.match", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203973.0, "dur": 4.0, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203979.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203979.0, "dur": 1.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203981.0, "dur": 1.0, "name": "re.Pattern.finditer", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203978.0, "dur": 5.0, "name": "finditer (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:225)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203984.0, "dur": 0.02, "name": "re.Match.group", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203985.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203986.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203986.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203987.0, "dur": 0.02, "name": "re.Match.group", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203988.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203988.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203990.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203990.04, "dur": 1.96, "name": "str.translate", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203989.02, "dur": 3.0, "name": "escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:252)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203992.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203993.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203993.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203995.0, "dur": 0.02, "name": "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203972.02, "dur": 23.02, "name": "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203996.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203999.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204003.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204004.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204004.04, "dur": 0.96, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203999.0, "dur": 6.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204006.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204007.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204007.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204007.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204008.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204008.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204016.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204018.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204006.0, "dur": 12.04, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204019.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204021.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204021.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204022.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204022.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204020.0, "dur": 2.08, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204023.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204024.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204024.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204024.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204025.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204025.06, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204030.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204030.04, "dur": 0.96, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204031.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204031.06, "dur": 0.94, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204032.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204032.06, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204033.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204033.04, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204033.08, "dur": 0.92, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204034.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204035.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204023.0, "dur": 12.04, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204036.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204037.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204038.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204038.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204039.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204037.0, "dur": 2.04, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204040.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204040.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204040.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204044.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204044.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204044.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204049.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204050.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204039.06, "dur": 10.98, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204051.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204056.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204055.0, "dur": 1.04, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204054.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204053.0, "dur": 5.0, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204059.02, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204059.0, "dur": 0.06, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204060.02, "dur": 0.98, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204060.0, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204058.02, "dur": 3.02, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204063.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204062.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204062.0, "dur": 1.06, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204065.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204064.0, "dur": 3.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204068.02, "dur": 1.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204071.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204072.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204073.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204074.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204068.0, "dur": 7.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204077.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204076.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204076.0, "dur": 1.06, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204079.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204079.0, "dur": 0.06, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204080.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204080.0, "dur": 0.06, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204082.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204083.02, "dur": 0.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204085.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204086.04, "dur": 14.96, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204086.02, "dur": 15.0, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204102.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204105.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204106.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204107.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204105.0, "dur": 2.04, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204109.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204111.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204110.02, "dur": 1.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204115.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204116.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204117.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204116.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204117.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204110.0, "dur": 8.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204118.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204118.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204119.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204120.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204120.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204118.04, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204121.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204121.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204122.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204122.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204123.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204123.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204124.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204124.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204124.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204121.0, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204109.04, "dur": 16.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204103.02, "dur": 22.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204126.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204127.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204128.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204128.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204129.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204129.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204130.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204130.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204131.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204131.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204132.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204131.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204132.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204133.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204133.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204133.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204134.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204134.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204135.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204135.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204136.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204136.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204136.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204136.08, "dur": 2.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204139.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204140.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204140.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204127.06, "dur": 13.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204127.04, "dur": 13.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204126.06, "dur": 14.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204142.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204142.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204143.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204143.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204143.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204142.04, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204144.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204145.02, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204086.0, "dur": 59.06, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204149.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204152.0, "dur": 5.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204151.0, "dur": 6.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204159.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204160.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204160.04, "dur": 0.96, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204159.0, "dur": 2.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204162.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204164.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204163.02, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204164.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204165.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204165.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204163.0, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204194.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204192.0, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204162.04, "dur": 32.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204158.0, "dur": 37.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204197.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204199.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204198.04, "dur": 1.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204201.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204201.04, "dur": 18.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204225.0, "dur": 2.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204223.0, "dur": 5.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204229.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204198.02, "dur": 32.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204231.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204231.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204233.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204251.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204253.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204231.0, "dur": 23.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204255.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204255.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204256.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204257.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204258.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204258.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204259.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204260.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204261.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204254.02, "dur": 7.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204198.0, "dur": 65.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204196.0, "dur": 68.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204269.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204273.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204272.0, "dur": 2.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204274.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204275.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204275.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204271.0, "dur": 5.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204277.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204276.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204278.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204278.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204279.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204279.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204280.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204281.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204282.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204281.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204283.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204283.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204299.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204284.0, "dur": 17.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204302.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204276.04, "dur": 26.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204303.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204303.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204304.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204305.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204305.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204303.0, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204270.0, "dur": 36.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204268.0, "dur": 39.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204308.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204315.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204314.04, "dur": 1.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204316.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204314.02, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204317.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204317.04, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204314.0, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204307.02, "dur": 11.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204320.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204321.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204321.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204322.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204322.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204323.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204323.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204324.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204324.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204324.08, "dur": 0.92, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204321.0, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204320.06, "dur": 4.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204320.0, "dur": 5.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204326.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204327.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204327.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204328.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204328.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204329.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204329.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204329.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204330.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204330.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204327.02, "dur": 3.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204327.0, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204326.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204332.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204333.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204333.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204334.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204334.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204335.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204332.08, "dur": 2.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204335.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204335.06, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204336.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204336.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204337.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204336.04, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204340.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204340.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204332.06, "dur": 8.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204332.0, "dur": 9.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204342.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204343.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204343.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204344.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204344.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204345.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204343.0, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204342.06, "dur": 3.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204342.0, "dur": 3.1, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204346.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204347.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204347.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204348.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204348.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204349.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204347.02, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204347.0, "dur": 2.08, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204346.0, "dur": 4.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204350.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204351.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204351.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204351.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204350.02, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204352.06, "dur": 0.94, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204353.02, "dur": 45.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204401.0, "dur": 1.0, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204400.02, "dur": 2.0, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204400.0, "dur": 3.0, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203997.0, "dur": 406.02, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204412.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204412.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204413.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204413.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204411.0, "dur": 3.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204415.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204416.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204416.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204417.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204417.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204418.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204425.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204427.0, "dur": 1.0, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204415.0, "dur": 16.0, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204432.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204434.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204434.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204435.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204435.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204433.0, "dur": 3.02, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204436.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204437.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204437.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204438.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204438.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204438.08, "dur": 0.92, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204443.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204443.04, "dur": 0.96, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204444.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204444.06, "dur": 0.94, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204445.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204445.06, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204446.0, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204446.04, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204446.08, "dur": 0.92, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204447.02, "dur": 0.02, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204448.0, "dur": 0.02, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204436.04, "dur": 12.96, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204449.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204451.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204451.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204452.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204452.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204450.02, "dur": 2.06, "name": "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204453.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204453.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204454.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204454.06, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204455.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204455.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204459.0, "dur": 1.0, "name": "bytearray.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204460.02, "dur": 0.98, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204453.0, "dur": 8.02, "name": "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204461.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204467.02, "dur": 0.98, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204467.0, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204466.0, "dur": 3.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204464.0, "dur": 5.02, "name": "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204470.04, "dur": 0.96, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204470.02, "dur": 3.98, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204475.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204474.02, "dur": 1.02, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204470.0, "dur": 6.0, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204477.02, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204477.0, "dur": 0.06, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204476.02, "dur": 1.98, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204479.02, "dur": 0.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204479.0, "dur": 3.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204483.02, "dur": 1.98, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204486.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204487.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204489.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204489.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204483.0, "dur": 7.0, "name": "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204491.0, "dur": 1.0, "name": "list.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204493.0, "dur": 0.02, "name": "builtins.hash", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204492.04, "dur": 1.0, "name": "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204492.02, "dur": 1.98, "name": "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204495.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204495.0, "dur": 1.0, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204496.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204496.02, "dur": 0.98, "name": "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204500.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204501.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204502.0, "dur": 0.02, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204504.02, "dur": 15.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204504.0, "dur": 17.0, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204522.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204525.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204526.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204526.04, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204525.0, "dur": 2.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204528.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204530.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204529.04, "dur": 1.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204531.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204532.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204532.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204532.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204533.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204529.02, "dur": 4.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204534.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204534.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204535.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204535.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204535.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204533.1, "dur": 5.9, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204540.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204539.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204540.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204541.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204541.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204541.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204542.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204543.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204543.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204539.02, "dur": 4.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204529.0, "dur": 15.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204523.0, "dur": 21.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204545.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204545.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204547.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204546.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204547.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204548.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204548.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204548.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204549.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204549.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204550.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204550.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204551.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204551.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204552.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204551.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204552.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204553.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204553.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204553.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204554.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204554.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204555.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204555.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204556.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204556.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204556.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204546.02, "dur": 10.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204546.0, "dur": 11.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204545.04, "dur": 12.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204557.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204558.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204559.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204559.0, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204558.08, "dur": 3.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204558.02, "dur": 4.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204563.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204563.04, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204503.0, "dur": 61.0, "name": "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204567.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204570.02, "dur": 4.98, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204570.0, "dur": 5.02, "name": "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204577.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204578.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204578.04, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204577.0, "dur": 2.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204580.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204581.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204581.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204582.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204583.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204583.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204580.06, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204584.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204583.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204580.04, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204576.0, "dur": 9.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204585.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204587.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204586.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204587.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204588.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204588.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204588.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204589.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204586.02, "dur": 3.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204590.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204590.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204590.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204591.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204591.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204589.1, "dur": 2.9, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204592.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204592.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204593.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204593.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204594.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204594.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204594.1, "dur": 0.9, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204594.08, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204598.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204599.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204599.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204592.1, "dur": 7.9, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204586.0, "dur": 14.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204585.02, "dur": 15.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204601.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204603.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204602.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204603.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204604.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204604.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204602.02, "dur": 2.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204605.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204605.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204606.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204606.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204607.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204606.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204607.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204608.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204608.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204608.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204609.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204609.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204610.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204609.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204610.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204605.0, "dur": 6.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204611.08, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204611.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204612.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204612.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204613.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204611.04, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204602.0, "dur": 11.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204601.0, "dur": 12.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204614.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204616.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204615.02, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204616.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204615.0, "dur": 2.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204617.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204617.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204618.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204618.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204621.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204617.04, "dur": 4.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204622.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204622.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204623.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204623.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204624.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204624.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204624.1, "dur": 0.9, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204622.1, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204625.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204625.04, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204614.06, "dur": 11.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204614.0, "dur": 12.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204627.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204628.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204628.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204629.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204628.0, "dur": 1.08, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204630.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204629.1, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204627.06, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204627.0, "dur": 3.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204631.02, "dur": 0.98, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204633.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204632.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204633.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204634.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204634.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204634.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204635.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204635.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204636.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204632.04, "dur": 4.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204632.02, "dur": 4.06, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204631.0, "dur": 6.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204637.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204639.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204638.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204639.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204640.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204640.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204640.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204641.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204641.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204642.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204638.04, "dur": 4.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204638.02, "dur": 5.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204637.02, "dur": 7.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204645.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204647.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204646.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204647.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204648.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204648.08, "dur": 0.92, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204648.06, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204649.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204646.04, "dur": 3.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204650.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204650.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204646.02, "dur": 4.08, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204645.02, "dur": 5.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204652.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204653.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204653.02, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204654.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204654.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204655.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204653.0, "dur": 2.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204656.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204655.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204656.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204655.08, "dur": 1.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204657.06, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204657.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204652.06, "dur": 5.94, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204652.0, "dur": 6.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204659.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204660.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204660.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204661.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204661.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204661.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204659.08, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204662.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204662.04, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204663.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204662.02, "dur": 1.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204663.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204663.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204659.06, "dur": 4.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204659.0, "dur": 5.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204665.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204666.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204666.02, "dur": 2.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204669.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204670.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204670.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204666.0, "dur": 4.1, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204671.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204671.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204672.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204671.1, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204672.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204671.08, "dur": 1.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204673.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204673.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204665.06, "dur": 8.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204665.0, "dur": 9.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204675.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204676.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204675.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204677.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204677.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204677.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204675.06, "dur": 2.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204678.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204678.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204679.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204679.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204680.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204678.1, "dur": 1.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204680.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204680.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204675.04, "dur": 5.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204674.02, "dur": 7.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204682.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204683.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204682.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204682.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204682.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204684.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204685.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204685.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204686.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204686.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204687.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204687.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204688.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204685.0, "dur": 3.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204690.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204690.0, "dur": 1.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204684.08, "dur": 6.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204684.02, "dur": 7.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204692.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204693.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204693.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204694.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204694.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204695.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204693.02, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204693.0, "dur": 2.08, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204692.0, "dur": 3.1, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204696.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204697.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204697.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204698.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204699.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204699.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204699.04, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204700.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204697.02, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204700.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204700.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204697.0, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204696.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204702.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204703.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204703.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204704.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204702.08, "dur": 1.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204705.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204705.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204705.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204706.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204706.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204704.08, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204707.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204707.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204708.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204708.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204709.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204707.02, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204702.06, "dur": 7.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204702.0, "dur": 8.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204710.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204712.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204711.06, "dur": 2.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204715.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204715.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204716.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204716.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204716.08, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204711.04, "dur": 5.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204717.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204717.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204711.02, "dur": 6.98, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204710.02, "dur": 8.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204719.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204720.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204719.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204720.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204721.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204721.08, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204721.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204722.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204719.06, "dur": 3.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204722.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204722.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204719.04, "dur": 4.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204718.04, "dur": 5.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204724.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204725.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204725.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204726.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204726.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204727.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204725.0, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204724.06, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204724.0, "dur": 3.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204728.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204729.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204729.02, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204730.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204730.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204731.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204729.0, "dur": 2.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204728.06, "dur": 3.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204728.0, "dur": 3.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204732.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204733.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204733.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204734.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204737.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204737.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204733.02, "dur": 5.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204738.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204738.04, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204739.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204739.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204739.1, "dur": 0.9, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204739.08, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204733.0, "dur": 7.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204732.0, "dur": 8.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204741.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204742.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204742.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204742.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204741.0, "dur": 2.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204743.08, "dur": 0.92, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204744.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204744.04, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204744.02, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204743.06, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204746.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204747.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204746.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204746.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204746.0, "dur": 1.08, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204748.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204749.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204749.0, "dur": 1.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204750.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204748.08, "dur": 2.0, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204751.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204751.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204752.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204752.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204753.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204752.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204753.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204750.1, "dur": 3.9, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204754.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204754.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204748.06, "dur": 6.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204748.0, "dur": 7.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204756.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204757.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204756.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204757.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204760.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204761.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204760.04, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204761.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204756.06, "dur": 5.04, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204762.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204762.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204756.04, "dur": 6.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204755.02, "dur": 7.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204763.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204764.06, "dur": 0.94, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204764.04, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204764.02, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204763.02, "dur": 2.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204766.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204767.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204766.06, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204766.04, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204765.08, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204768.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204769.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204769.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204770.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204770.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204770.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204768.08, "dur": 2.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204768.06, "dur": 2.96, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204768.0, "dur": 3.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204772.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204773.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204773.0, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204774.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204774.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204775.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204774.08, "dur": 0.96, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204775.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204772.08, "dur": 3.92, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204776.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204776.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204772.06, "dur": 4.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204772.0, "dur": 5.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204777.04, "dur": 0.96, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204779.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204778.06, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204779.06, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204780.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204782.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204782.0, "dur": 1.0, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204783.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204778.04, "dur": 5.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204784.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204783.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204778.02, "dur": 6.04, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204777.02, "dur": 7.06, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204785.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204786.06, "dur": 0.94, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204786.04, "dur": 0.98, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204787.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204787.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204788.04, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204788.02, "dur": 0.06, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204789.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204786.02, "dur": 3.02, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204789.08, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204789.06, "dur": 0.94, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204786.0, "dur": 4.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204785.0, "dur": 5.04, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204791.0, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204792.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204791.06, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204791.04, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204790.06, "dur": 2.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204793.02, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204794.0, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204793.08, "dur": 0.96, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204793.06, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204793.0, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204795.04, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204796.02, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204796.0, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204795.08, "dur": 1.92, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204795.02, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204797.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204798.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204798.02, "dur": 0.06, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204798.0, "dur": 1.0, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204797.04, "dur": 1.98, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204799.06, "dur": 0.02, "name": "collections.deque.popleft", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204800.04, "dur": 0.02, "name": "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204800.02, "dur": 0.98, "name": "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204800.0, "dur": 1.02, "name": "collections.deque.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204799.04, "dur": 2.0, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204801.06, "dur": 0.02, "name": "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204804.0, "dur": 61.0, "name": "builtins.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204867.0, "dur": 0.02, "name": "<module> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204866.02, "dur": 1.98, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204866.0, "dur": 2.02, "name": "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204409.0, "dur": 459.04, "name": "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204874.0, "dur": 1.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204877.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204881.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204883.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204883.0, "dur": 1.02, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204885.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204885.0, "dur": 0.06, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204887.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204889.0, "dur": 2.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204887.0, "dur": 4.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204892.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:76)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204895.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204895.0, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204897.02, "dur": 0.98, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204900.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204900.0, "dur": 2.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204904.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204903.0, "dur": 1.04, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204905.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204905.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204907.02, "dur": 0.98, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204909.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204911.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204911.04, "dur": 0.96, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204907.0, "dur": 5.02, "name": "_escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:343)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204913.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204912.04, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204914.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204913.06, "dur": 1.94, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204915.02, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204916.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204916.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204917.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204917.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204919.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204919.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204920.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204920.0, "dur": 1.02, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204922.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204924.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204921.04, "dur": 3.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204929.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204929.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204930.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204929.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204931.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204931.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204932.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204932.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204934.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204933.02, "dur": 1.98, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204936.0, "dur": 0.02, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204937.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204937.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204938.04, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204939.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204939.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204940.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204940.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204941.04, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204942.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204942.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204943.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204943.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204944.04, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204945.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204945.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204946.02, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204946.0, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204947.02, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204948.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204947.06, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204949.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204948.06, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204950.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204950.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204950.04, "dur": 0.96, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204951.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204951.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204953.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204953.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204953.04, "dur": 0.96, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204954.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204954.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204955.04, "dur": 0.96, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204956.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204956.02, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204957.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204957.0, "dur": 3.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204961.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204961.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204961.04, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204962.06, "dur": 0.94, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204962.04, "dur": 0.98, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204964.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204964.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204964.04, "dur": 0.98, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204966.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204965.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204967.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204967.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204967.04, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204968.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204968.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204970.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204970.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204971.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204971.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204973.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204972.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204974.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204974.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204976.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204976.0, "dur": 1.02, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204978.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204978.0, "dur": 1.02, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204980.02, "dur": 0.98, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204982.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204982.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204983.04, "dur": 0.96, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204984.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204984.02, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204986.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204986.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204985.0, "dur": 1.08, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204990.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204989.0, "dur": 1.04, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204980.0, "dur": 11.0, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204991.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204992.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204992.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204977.04, "dur": 15.98, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204994.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204994.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204998.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204998.0, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204999.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204999.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205001.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205001.0, "dur": 1.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205002.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205002.02, "dur": 1.0, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205004.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205003.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205005.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205005.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205007.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205008.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205009.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205010.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205012.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205013.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205014.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205015.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205015.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205016.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205017.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205006.04, "dur": 11.98, "name": "getuntil (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:267)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205019.0, "dur": 1.0, "name": "str.isidentifier", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205021.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205021.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205022.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205022.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205022.04, "dur": 0.98, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205023.04, "dur": 0.96, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205020.02, "dur": 4.0, "name": "opengroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:84)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205026.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205026.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205027.02, "dur": 0.98, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205029.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205029.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205030.04, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205031.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205031.0, "dur": 0.06, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205032.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205032.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205034.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205034.0, "dur": 0.06, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205035.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205035.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205036.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205040.0, "dur": 0.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205036.0, "dur": 4.04, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205041.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205041.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205042.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205042.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205043.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205043.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205044.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205044.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205045.02, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205046.0, "dur": 0.02, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205048.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205047.02, "dur": 1.02, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205047.0, "dur": 1.06, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205050.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205050.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205027.0, "dur": 24.0, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205051.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205052.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205052.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205025.0, "dur": 27.08, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205053.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205053.0, "dur": 1.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205060.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205061.02, "dur": 0.98, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205058.0, "dur": 4.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205063.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205064.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205055.02, "dur": 9.98, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205055.0, "dur": 10.02, "name": "closegroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:96)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205066.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205066.0, "dur": 1.0, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205067.04, "dur": 2.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205067.02, "dur": 3.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205071.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205071.0, "dur": 1.02, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205073.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205073.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205072.04, "dur": 1.04, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205075.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205075.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205076.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205076.02, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205077.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205077.04, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205078.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205078.04, "dur": 3.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205082.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205082.02, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205083.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205083.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205084.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205084.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205085.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205085.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205086.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205086.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205087.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205087.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205088.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205088.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205089.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205089.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205090.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205089.08, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205091.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205090.06, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205091.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205091.06, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205092.06, "dur": 0.94, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205092.04, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204897.0, "dur": 196.04, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205094.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205094.04, "dur": 0.96, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205095.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204894.0, "dur": 201.06, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205096.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205096.0, "dur": 2.0, "name": "fix_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:903)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204886.0, "dur": 212.02, "name": "parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:919)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205104.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205105.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205103.0, "dur": 3.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205111.0, "dur": 0.02, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205112.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205113.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205101.0, "dur": 13.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205116.0, "dur": 0.02, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205115.0, "dur": 2.0, "name": "_get_literal_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:461)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205119.0, "dur": 0.02, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205118.0, "dur": 2.0, "name": "_get_charset_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:492)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205120.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205120.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205123.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205124.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205124.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205125.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205125.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205126.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205100.0, "dur": 26.06, "name": "_compile_info (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:536)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205129.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205130.0, "dur": 1.0, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205131.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205132.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205132.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205134.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205134.0, "dur": 0.06, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205133.02, "dur": 1.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205135.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205135.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205133.0, "dur": 3.02, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205137.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205137.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205137.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205137.12, "dur": 0.88, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205138.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205140.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205140.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205141.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205141.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205142.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205142.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205139.0, "dur": 4.02, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205144.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205144.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205145.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205145.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205146.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205146.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205146.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205146.12, "dur": 0.88, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205147.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205147.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205148.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205148.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205148.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205149.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205149.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205149.1, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205150.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205154.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205154.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205154.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205155.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205155.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205156.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205156.04, "dur": 0.96, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205157.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205159.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205160.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205158.0, "dur": 2.04, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205161.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205162.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205162.0, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205163.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205163.08, "dur": 0.92, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205164.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205164.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205161.04, "dur": 3.98, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205165.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205165.08, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205166.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205167.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205167.04, "dur": 0.96, "name": "_combine_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:65)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205170.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205169.02, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205171.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205171.04, "dur": 0.98, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205171.02, "dur": 1.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205172.08, "dur": 0.92, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205172.06, "dur": 0.96, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205171.0, "dur": 2.04, "name": "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205174.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205174.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205174.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205175.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205175.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205177.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205176.02, "dur": 1.02, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205177.06, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205177.1, "dur": 0.9, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205178.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205178.02, "dur": 0.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205176.0, "dur": 3.02, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205179.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205179.08, "dur": 0.92, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205183.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205183.0, "dur": 0.06, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205169.0, "dur": 15.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205184.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205185.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205185.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205186.02, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205187.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205127.0, "dur": 60.04, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205188.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205099.0, "dur": 89.04, "name": "_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:598)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205189.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205189.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205190.0, "dur": 1.0, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205192.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205192.0, "dur": 1.02, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205194.0, "dur": 2.0, "name": "_sre.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204884.04, "dur": 311.98, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:759)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205200.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205205.0, "dur": 1.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205203.0, "dur": 4.0, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205208.02, "dur": 0.98, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205208.0, "dur": 1.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205199.0, "dur": 10.04, "name": "__and__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:836)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205210.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204877.0, "dur": 334.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043204876.0, "dur": 336.0, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:232)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203965.0, "dur": 1247.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:824)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203964.0, "dur": 1249.0, "name": "bind (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:784)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205214.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205215.0, "dur": 0.02, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205215.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205216.02, "dur": 0.02, "name": "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203962.0, "dur": 1255.0, "name": "add (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1533)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205218.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203941.0, "dur": 1277.04, "name": "add_url_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1037)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203938.0, "dur": 1282.0, "name": "wrapper_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:45)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043203936.0, "dur": 1285.0, "name": "decorator (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:437)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205234.0, "dur": 4.0, "name": "_newname (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:728)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205244.02, "dur": 1.98, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205248.0, "dur": 10.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:216)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205244.0, "dur": 15.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:499)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205266.0, "dur": 1.0, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205264.0, "dur": 3.02, "name": "add (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/_weakrefset.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205230.0, "dur": 37.04, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:763)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205269.0, "dur": 0.02, "name": "is_set (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:507)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205275.0, "dur": 111.0, "name": "_thread.start_new_thread", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205393.0, "dur": 0.02, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205392.0, "dur": 1.04, "name": "__enter__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:240)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205397.0, "dur": 1.0, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205396.0, "dur": 2.02, "name": "_is_owned (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:255)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205398.04, "dur": 0.96, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205399.02, "dur": 0.02, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205400.0, "dur": 0.02, "name": "collections.deque.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205401.02, "dur": 0.02, "name": "_thread.lock.release", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205401.0, "dur": 1.0, "name": "_release_save (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205483.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205484.02, "dur": 3.98, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205483.0, "dur": 6.0, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205481.0, "dur": 10.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205480.0, "dur": 13.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:657)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205498.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205498.04, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205497.02, "dur": 1.98, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205497.0, "dur": 3.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205496.0, "dur": 4.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:657)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205495.0, "dur": 6.0, "name": "get_load_dotenv (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:51)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205402.02, "dur": 112.98, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205521.0, "dur": 1.0, "name": "_thread.lock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205520.0, "dur": 3.0, "name": "_acquire_restore (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:252)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205395.0, "dur": 128.02, "name": "wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:264)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205527.0, "dur": 1.0, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205526.0, "dur": 2.02, "name": "__exit__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:243)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205391.0, "dur": 137.04, "name": "wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205268.0, "dur": 261.0, "name": "start (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:834)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043205535.0, "dur": 0.02, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205505.0, "dur": 66.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205504.0, "dur": 69.0, "name": "isfile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/genericpath.py:27)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205575.0, "dur": 23.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205574.0, "dur": 24.02, "name": "isfile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/genericpath.py:27)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205502.0, "dur": 97.0, "name": "load_dotenv (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/cli.py:610)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205604.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205605.0, "dur": 1.0, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205604.0, "dur": 2.02, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205602.02, "dur": 5.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205602.0, "dur": 6.02, "name": "__contains__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205610.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205611.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205610.0, "dur": 1.04, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205609.02, "dur": 2.98, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205609.0, "dur": 3.02, "name": "__contains__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205618.0, "dur": 1.0, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205617.0, "dur": 2.02, "name": "templates_auto_reload (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:655)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205632.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205639.0, "dur": 0.02, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205638.0, "dur": 1.04, "name": "templates_auto_reload (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:655)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205646.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/templating.py:51)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205644.0, "dur": 3.02, "name": "create_global_jinja_loader (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:709)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205658.0, "dur": 3.0, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205662.0, "dur": 1.0, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205664.0, "dur": 0.02, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205681.0, "dur": 1.0, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205679.0, "dur": 4.0, "name": "_postinit (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/utils.py:512)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205673.0, "dur": 11.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/utils.py:506)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205666.0, "dur": 18.02, "name": "create_cache (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205687.0, "dur": 0.02, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205688.0, "dur": 1.0, "name": "load_extensions (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py:107)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205691.0, "dur": 0.02, "name": "builtins.issubclass", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205690.0, "dur": 2.0, "name": "_environment_config_check (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py:125)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205650.0, "dur": 43.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py:291)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205643.0, "dur": 50.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/templating.py:39)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205697.0, "dur": 2.0, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205635.0, "dur": 65.0, "name": "create_jinja_environment (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:674)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205634.0, "dur": 67.0, "name": "jinja_env (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:594)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205631.0, "dur": 71.0, "name": "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/utils.py:90)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205625.0, "dur": 78.0, "name": "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:772)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205614.0, "dur": 89.02, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:800)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205704.0, "dur": 1.0, "name": "Config.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205706.0, "dur": 1.0, "name": "str.partition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205710.0, "dur": 0.02, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205710.04, "dur": 0.96, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205711.02, "dur": 0.02, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205712.0, "dur": 0.02, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205712.04, "dur": 0.02, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205714.0, "dur": 2.0, "name": "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/config.py:16)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205716.02, "dur": 0.98, "name": "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205720.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205719.0, "dur": 1.04, "name": "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/utils.py:90)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205717.02, "dur": 3.98, "name": "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:772)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205725.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205725.06, "dur": 0.94, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205725.0, "dur": 1.02, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205724.0, "dur": 4.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205723.0, "dur": 5.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:657)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205734.0, "dur": 1.0, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:611)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205743.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205741.0, "dur": 2.04, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py:432)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205747.0, "dur": 1.0, "name": "_get_windows_console_stream (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:570)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205755.0, "dur": 6.0, "name": "_io.TextIOWrapper.write", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205762.0, "dur": 24.0, "name": "_io.TextIOWrapper.write", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205754.0, "dur": 36.0, "name": "_is_binary_writer (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:165)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205792.0, "dur": 1.0, "name": "cast (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:893)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205794.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205794.0, "dur": 2.0, "name": "_is_compat_stream_attr (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:223)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205797.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205797.0, "dur": 1.02, "name": "_is_compat_stream_attr (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:223)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205793.02, "dur": 5.02, "name": "_is_compatible_text_stream (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:232)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205800.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205801.0, "dur": 4.0, "name": "_codecs.lookup", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205800.04, "dur": 5.96, "name": "is_ascii_encoding (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:45)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205799.0, "dur": 7.02, "name": "_stream_is_misconfigured (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:214)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205753.0, "dur": 53.04, "name": "_force_correct_text_stream (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:243)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205749.0, "dur": 58.0, "name": "_force_correct_text_writer (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:305)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205746.0, "dur": 61.02, "name": "get_text_stdout (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205808.0, "dur": 2.0, "name": "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py:408)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205733.0, "dur": 77.02, "name": "func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:592)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205811.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205812.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205813.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205819.0, "dur": 8.0, "name": "get_current_context (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205814.0, "dur": 14.0, "name": "resolve_color_default (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205830.0, "dur": 7.0, "name": "_io.TextIOWrapper.isatty", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205829.0, "dur": 8.02, "name": "isatty (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:580)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205839.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205842.0, "dur": 1.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205838.0, "dur": 5.02, "name": "_is_jupyter_kernel_output (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:497)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205828.02, "dur": 15.02, "name": "should_strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:504)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205846.0, "dur": 4.0, "name": "re.Pattern.sub", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205845.0, "dur": 5.02, "name": "strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:493)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205850.04, "dur": 6.96, "name": "_io.TextIOWrapper.write", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205857.02, "dur": 3.98, "name": "_io.TextIOWrapper.flush", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205732.0, "dur": 129.02, "name": "echo (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/utils.py:204)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205863.02, "dur": 0.98, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:611)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205865.0, "dur": 1.0, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205864.02, "dur": 2.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py:432)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205863.0, "dur": 4.0, "name": "func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:592)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205867.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205868.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205868.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205870.0, "dur": 2.0, "name": "get_current_context (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205869.02, "dur": 3.98, "name": "resolve_color_default (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205874.02, "dur": 4.98, "name": "_io.TextIOWrapper.isatty", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205874.0, "dur": 5.02, "name": "isatty (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:580)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205881.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205882.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205880.0, "dur": 3.0, "name": "_is_jupyter_kernel_output (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:497)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205873.02, "dur": 12.98, "name": "should_strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:504)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205887.02, "dur": 0.98, "name": "re.Pattern.sub", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205887.0, "dur": 1.02, "name": "strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:493)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205889.0, "dur": 5.0, "name": "_io.TextIOWrapper.write", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205894.02, "dur": 0.98, "name": "_io.TextIOWrapper.flush", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205862.0, "dur": 33.02, "name": "echo (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/utils.py:204)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205902.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205905.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205906.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205907.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205906.0, "dur": 4.0, "name": "_interpret_color (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py:474)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205910.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205911.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205912.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205913.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205904.0, "dur": 10.0, "name": "style (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py:487)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205916.0, "dur": 0.02, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:611)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205917.02, "dur": 0.98, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205917.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py:432)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205915.02, "dur": 3.02, "name": "func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:592)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205919.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205919.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205920.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205921.02, "dur": 2.98, "name": "get_current_context (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205921.0, "dur": 3.02, "name": "resolve_color_default (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205925.02, "dur": 4.98, "name": "_io.TextIOWrapper.isatty", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205925.0, "dur": 5.02, "name": "isatty (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:580)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205931.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205932.0, "dur": 1.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205931.0, "dur": 2.02, "name": "_is_jupyter_kernel_output (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:497)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205924.04, "dur": 9.0, "name": "should_strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:504)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205934.02, "dur": 3.98, "name": "re.Pattern.sub", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205934.0, "dur": 5.0, "name": "strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:493)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205939.02, "dur": 4.98, "name": "_io.TextIOWrapper.write", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205944.02, "dur": 0.98, "name": "_io.TextIOWrapper.flush", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205915.0, "dur": 30.02, "name": "echo (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/utils.py:204)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205902.0, "dur": 43.04, "name": "secho (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py:628)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205948.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205949.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205950.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205951.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205951.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205952.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205949.0, "dur": 3.06, "name": "style (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py:487)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205954.0, "dur": 0.02, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:611)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205956.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205955.0, "dur": 1.04, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py:432)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205953.02, "dur": 5.98, "name": "func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:592)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205960.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205960.04, "dur": 0.96, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205961.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205962.02, "dur": 2.98, "name": "get_current_context (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205962.0, "dur": 3.02, "name": "resolve_color_default (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205966.02, "dur": 4.98, "name": "_io.TextIOWrapper.isatty", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205966.0, "dur": 5.02, "name": "isatty (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:580)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205972.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205973.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205971.04, "dur": 2.0, "name": "_is_jupyter_kernel_output (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:497)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205965.04, "dur": 8.96, "name": "should_strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:504)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205974.04, "dur": 4.96, "name": "re.Pattern.sub", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205974.02, "dur": 5.98, "name": "strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:493)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205980.02, "dur": 4.98, "name": "_io.TextIOWrapper.write", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205985.02, "dur": 0.98, "name": "_io.TextIOWrapper.flush", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205953.0, "dur": 33.02, "name": "echo (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/utils.py:204)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205947.0, "dur": 39.04, "name": "secho (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py:628)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205989.0, "dur": 0.02, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:611)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205991.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205990.0, "dur": 1.04, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py:432)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205988.02, "dur": 3.04, "name": "func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:592)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205992.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205992.04, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205993.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205994.02, "dur": 1.98, "name": "get_current_context (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205994.0, "dur": 2.02, "name": "resolve_color_default (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205997.04, "dur": 4.96, "name": "_io.TextIOWrapper.isatty", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205997.02, "dur": 5.0, "name": "isatty (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:580)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206003.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206004.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206002.04, "dur": 2.96, "name": "_is_jupyter_kernel_output (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:497)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205997.0, "dur": 8.02, "name": "should_strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:504)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206006.0, "dur": 1.0, "name": "re.Pattern.sub", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206005.04, "dur": 1.98, "name": "strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:493)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206007.04, "dur": 4.96, "name": "_io.TextIOWrapper.write", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206012.02, "dur": 0.02, "name": "_io.TextIOWrapper.flush", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205988.0, "dur": 25.0, "name": "echo (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/utils.py:204)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043205721.02, "dur": 292.0, "name": "show_server_banner (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/cli.py:667)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206017.02, "dur": 1.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206017.0, "dur": 3.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206023.0, "dur": 0.02, "name": "cast (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:893)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206026.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206032.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206032.04, "dur": 0.96, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206031.0, "dur": 2.02, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206030.0, "dur": 8.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206046.0, "dur": 0.02, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206045.0, "dur": 2.0, "name": "select_address_family (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:608)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206067.02, "dur": 0.98, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206069.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206070.0, "dur": 1.0, "name": "str.isalnum", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206071.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206072.0, "dur": 0.02, "name": "str.isalnum", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206072.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206072.08, "dur": 0.92, "name": "str.isalnum", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206073.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206073.06, "dur": 0.02, "name": "str.isalnum", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206073.1, "dur": 0.9, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206074.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206068.02, "dur": 6.98, "name": "normalize_encoding (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/__init__.py:43)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206075.02, "dur": 0.98, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206076.02, "dur": 0.98, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206077.02, "dur": 0.98, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206084.0, "dur": 1.0, "name": "__init__ (<frozen importlib._bootstrap>:143)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206087.0, "dur": 1.0, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206091.0, "dur": 1.0, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206092.02, "dur": 0.98, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206090.0, "dur": 4.0, "name": "__init__ (<frozen importlib._bootstrap>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206095.0, "dur": 1.0, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206086.02, "dur": 10.0, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206097.02, "dur": 0.98, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206097.0, "dur": 4.0, "name": "acquire (<frozen importlib._bootstrap>:78)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206086.0, "dur": 15.02, "name": "__enter__ (<frozen importlib._bootstrap>:147)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206102.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206103.02, "dur": 0.98, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206108.02, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206108.0, "dur": 1.0, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206110.0, "dur": 0.02, "name": "find_spec (<frozen importlib._bootstrap>:719)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206111.02, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206111.0, "dur": 0.06, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206112.02, "dur": 0.98, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206112.0, "dur": 1.02, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206114.02, "dur": 0.98, "name": "_imp.is_frozen", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206114.0, "dur": 1.02, "name": "find_spec (<frozen importlib._bootstrap>:792)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206116.02, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206116.0, "dur": 0.06, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206117.02, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206117.0, "dur": 0.06, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206121.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206122.0, "dur": 1.0, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206126.0, "dur": 1.0, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206128.02, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206135.0, "dur": 95.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206134.0, "dur": 96.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206234.0, "dur": 1.0, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206242.0, "dur": 1.0, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206243.02, "dur": 0.98, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206241.0, "dur": 3.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206245.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206239.0, "dur": 7.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206248.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206252.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206253.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206252.0, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206254.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206251.0, "dur": 4.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206255.02, "dur": 0.98, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206258.02, "dur": 0.98, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206259.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206258.0, "dur": 1.06, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206260.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206257.0, "dur": 3.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206261.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206264.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206264.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206263.02, "dur": 2.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206265.04, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206263.0, "dur": 3.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206266.02, "dur": 0.98, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206270.0, "dur": 41.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206269.02, "dur": 42.0, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206269.0, "dur": 44.0, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:84)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206268.0, "dur": 46.0, "name": "_path_isfile (<frozen importlib._bootstrap_external>:93)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206317.0, "dur": 2.0, "name": "__init__ (<frozen importlib._bootstrap_external>:884)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206321.0, "dur": 1.0, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206325.0, "dur": 2.0, "name": "__init__ (<frozen importlib._bootstrap>:369)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206320.0, "dur": 9.0, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:574)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206316.0, "dur": 14.0, "name": "_get_spec (<frozen importlib._bootstrap_external>:1351)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206128.0, "dur": 202.02, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206120.0, "dur": 211.0, "name": "_get_spec (<frozen importlib._bootstrap_external>:1240)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206119.0, "dur": 213.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1272)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206333.02, "dur": 0.98, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206333.0, "dur": 1.02, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206106.0, "dur": 230.0, "name": "_find_spec (<frozen importlib._bootstrap>:882)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206337.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206339.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206340.0, "dur": 0.02, "name": "create_module (<frozen importlib._bootstrap_external>:719)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206341.0, "dur": 2.0, "name": "_new_module (<frozen importlib._bootstrap>:35)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206344.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206349.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206350.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206352.0, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206351.0, "dur": 2.0, "name": "parent (<frozen importlib._bootstrap>:416)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206354.0, "dur": 2.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206357.0, "dur": 1.0, "name": "has_location (<frozen importlib._bootstrap>:424)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206358.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206360.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206364.0, "dur": 1.0, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206366.0, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206367.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206368.0, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206367.0, "dur": 1.04, "name": "_path_split (<frozen importlib._bootstrap_external>:62)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206369.0, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206370.0, "dur": 1.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206375.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206375.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206376.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206374.02, "dur": 2.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206376.06, "dur": 0.94, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206374.0, "dur": 3.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206365.02, "dur": 12.02, "name": "cache_from_source (<frozen importlib._bootstrap_external>:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206362.0, "dur": 16.0, "name": "_get_cached (<frozen importlib._bootstrap_external>:369)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206361.02, "dur": 17.0, "name": "cached (<frozen importlib._bootstrap>:403)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206379.0, "dur": 0.02, "name": "cached (<frozen importlib._bootstrap>:403)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206344.0, "dur": 35.04, "name": "_init_module_attrs (<frozen importlib._bootstrap>:504)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206338.02, "dur": 41.98, "name": "module_from_spec (<frozen importlib._bootstrap>:576)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206381.0, "dur": 1.0, "name": "__init__ (<frozen importlib._bootstrap>:307)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206382.02, "dur": 0.98, "name": "__enter__ (<frozen importlib._bootstrap>:311)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206387.0, "dur": 1.0, "name": "get_filename (<frozen importlib._bootstrap_external>:909)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206386.0, "dur": 2.02, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:401)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206389.02, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206390.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206390.06, "dur": 0.94, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206390.0, "dur": 1.02, "name": "_path_split (<frozen importlib._bootstrap_external>:62)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206391.04, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206392.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206394.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206395.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206395.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206394.02, "dur": 1.06, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206396.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206394.0, "dur": 2.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206389.0, "dur": 7.06, "name": "cache_from_source (<frozen importlib._bootstrap_external>:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206398.02, "dur": 21.98, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206398.0, "dur": 22.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206397.0, "dur": 27.0, "name": "path_stats (<frozen importlib._bootstrap_external>:951)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206484.0, "dur": 1184.0, "name": "_io.FileIO.read", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206427.0, "dur": 1549.0, "name": "get_data (<frozen importlib._bootstrap_external>:914)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043207984.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043207987.0, "dur": 2.0, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043207986.0, "dur": 3.02, "name": "_r_long (<frozen importlib._bootstrap_external>:51)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043207981.0, "dur": 9.0, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:438)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043207997.0, "dur": 0.02, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043207996.0, "dur": 1.04, "name": "_r_long (<frozen importlib._bootstrap_external>:51)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043207999.02, "dur": 0.02, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043207999.0, "dur": 1.0, "name": "_r_long (<frozen importlib._bootstrap_external>:51)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043207995.0, "dur": 5.02, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:471)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208003.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208007.0, "dur": 94.0, "name": "marshal.loads", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208103.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208105.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208107.0, "dur": 3.0, "name": "_imp._fix_co_filename", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208006.0, "dur": 104.02, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:523)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206385.0, "dur": 1725.04, "name": "get_code (<frozen importlib._bootstrap_external>:793)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208118.0, "dur": 1.0, "name": "__init__ (<frozen importlib._bootstrap>:143)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208121.0, "dur": 1.0, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208126.0, "dur": 1.0, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208128.0, "dur": 0.02, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208125.0, "dur": 4.0, "name": "__init__ (<frozen importlib._bootstrap>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208132.0, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208120.02, "dur": 12.02, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208134.0, "dur": 0.02, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208133.0, "dur": 5.0, "name": "acquire (<frozen importlib._bootstrap>:78)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208120.0, "dur": 18.02, "name": "__enter__ (<frozen importlib._bootstrap>:147)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208139.0, "dur": 1.0, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208141.02, "dur": 0.98, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208146.0, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208145.0, "dur": 1.04, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208148.0, "dur": 2.0, "name": "_imp.is_builtin", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208147.0, "dur": 3.02, "name": "find_spec (<frozen importlib._bootstrap>:719)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208151.0, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208150.04, "dur": 1.0, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208152.02, "dur": 0.98, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208152.0, "dur": 1.02, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208154.0, "dur": 0.02, "name": "_imp.is_frozen", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208153.04, "dur": 1.96, "name": "find_spec (<frozen importlib._bootstrap>:792)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208155.04, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208155.02, "dur": 0.06, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208156.02, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208156.0, "dur": 1.0, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208160.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208161.0, "dur": 1.0, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208166.0, "dur": 1.0, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208168.02, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208170.0, "dur": 74.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208169.0, "dur": 76.0, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208248.0, "dur": 1.0, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208254.02, "dur": 0.98, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208256.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208254.0, "dur": 3.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208258.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208252.0, "dur": 7.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208260.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208264.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208265.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208263.02, "dur": 2.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208265.06, "dur": 0.94, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208263.0, "dur": 3.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208267.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208270.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208270.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208269.02, "dur": 2.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208271.04, "dur": 0.96, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208269.0, "dur": 3.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208273.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208275.02, "dur": 0.98, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208276.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208275.0, "dur": 2.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208277.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208274.0, "dur": 3.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208278.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208281.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208281.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208280.02, "dur": 1.98, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208282.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208280.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208283.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208168.0, "dur": 116.02, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208286.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208287.0, "dur": 1.0, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208288.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208290.02, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208291.02, "dur": 16.98, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208291.0, "dur": 17.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208309.0, "dur": 1.0, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208312.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208312.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208311.02, "dur": 2.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208317.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208311.0, "dur": 7.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208318.02, "dur": 0.98, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208320.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208321.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208320.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208321.06, "dur": 0.94, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208320.0, "dur": 2.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208322.04, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208324.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208324.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208323.02, "dur": 1.06, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208325.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208323.0, "dur": 2.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208325.06, "dur": 0.94, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208327.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208327.06, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208327.0, "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208328.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208326.02, "dur": 2.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208329.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208330.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208331.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208330.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208331.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208330.0, "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208332.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208290.0, "dur": 43.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208333.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208334.02, "dur": 0.98, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208335.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208335.06, "dur": 0.94, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208336.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208337.04, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208338.02, "dur": 11.98, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208338.0, "dur": 12.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208352.0, "dur": 0.02, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208354.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208355.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208354.0, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208355.06, "dur": 0.94, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208353.0, "dur": 3.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208356.04, "dur": 0.96, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208358.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208359.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208358.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208359.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208358.0, "dur": 5.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208363.02, "dur": 0.98, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208365.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208366.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208365.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208366.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208365.0, "dur": 2.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208367.02, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208369.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208369.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208368.02, "dur": 1.06, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208370.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208368.0, "dur": 2.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208370.06, "dur": 0.94, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208372.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208372.06, "dur": 0.94, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208372.0, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208373.04, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208371.02, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208374.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208337.02, "dur": 37.02, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208375.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208376.0, "dur": 0.02, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208377.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208377.06, "dur": 0.94, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208378.04, "dur": 22.96, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208378.02, "dur": 23.98, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208403.0, "dur": 0.02, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208405.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208406.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208405.02, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208407.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208405.0, "dur": 2.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208408.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208410.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208410.06, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208410.0, "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208411.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208409.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208412.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208413.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208414.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208413.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208414.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208413.0, "dur": 2.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208415.02, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208420.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208420.06, "dur": 0.94, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208420.0, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208421.04, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208419.0, "dur": 2.08, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208422.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208423.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208424.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208423.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208424.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208423.0, "dur": 2.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208425.02, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208377.04, "dur": 48.96, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208427.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208427.04, "dur": 0.96, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208428.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208429.02, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208430.02, "dur": 10.98, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208430.0, "dur": 11.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208442.0, "dur": 0.02, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208444.02, "dur": 0.98, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208445.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208444.0, "dur": 1.06, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208445.08, "dur": 0.92, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208443.0, "dur": 3.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208446.04, "dur": 0.96, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208448.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208449.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208448.02, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208449.08, "dur": 0.92, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208448.0, "dur": 2.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208450.04, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208452.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208452.06, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208452.0, "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208453.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208451.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208454.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208455.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208456.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208455.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208456.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208455.0, "dur": 2.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208457.02, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208460.0, "dur": 21.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208459.02, "dur": 22.98, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208459.0, "dur": 24.0, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:84)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208458.0, "dur": 28.0, "name": "_path_isfile (<frozen importlib._bootstrap_external>:93)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208488.0, "dur": 1.0, "name": "__init__ (<frozen importlib._bootstrap_external>:884)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208491.0, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208493.0, "dur": 2.0, "name": "__init__ (<frozen importlib._bootstrap>:369)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208490.0, "dur": 6.0, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:574)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208487.0, "dur": 10.0, "name": "_get_spec (<frozen importlib._bootstrap_external>:1351)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208429.0, "dur": 68.02, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208159.0, "dur": 339.0, "name": "_get_spec (<frozen importlib._bootstrap_external>:1240)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208157.02, "dur": 341.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1272)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208500.0, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208499.0, "dur": 1.04, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208143.0, "dur": 358.0, "name": "_find_spec (<frozen importlib._bootstrap>:882)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208503.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208505.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208506.0, "dur": 0.02, "name": "create_module (<frozen importlib._bootstrap_external>:719)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208506.04, "dur": 2.96, "name": "_new_module (<frozen importlib._bootstrap>:35)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208510.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208511.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208511.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208513.02, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208513.0, "dur": 1.0, "name": "parent (<frozen importlib._bootstrap>:416)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208515.0, "dur": 3.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208519.0, "dur": 0.02, "name": "has_location (<frozen importlib._bootstrap>:424)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208519.04, "dur": 1.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208521.02, "dur": 0.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208525.0, "dur": 1.0, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208528.0, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208529.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208530.0, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208528.04, "dur": 2.96, "name": "_path_split (<frozen importlib._bootstrap_external>:62)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208531.02, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208532.0, "dur": 1.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208536.02, "dur": 0.98, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208537.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208537.06, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208536.0, "dur": 2.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208538.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208535.0, "dur": 3.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208527.0, "dur": 12.0, "name": "cache_from_source (<frozen importlib._bootstrap_external>:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208524.0, "dur": 15.02, "name": "_get_cached (<frozen importlib._bootstrap_external>:369)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208523.0, "dur": 17.0, "name": "cached (<frozen importlib._bootstrap>:403)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208540.02, "dur": 0.02, "name": "cached (<frozen importlib._bootstrap>:403)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208509.02, "dur": 31.98, "name": "_init_module_attrs (<frozen importlib._bootstrap>:504)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208504.02, "dur": 37.0, "name": "module_from_spec (<frozen importlib._bootstrap>:576)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208542.0, "dur": 1.0, "name": "__init__ (<frozen importlib._bootstrap>:307)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208544.0, "dur": 1.0, "name": "__enter__ (<frozen importlib._bootstrap>:311)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208552.0, "dur": 0.02, "name": "get_filename (<frozen importlib._bootstrap_external>:909)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208551.0, "dur": 2.0, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:401)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208554.0, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208554.06, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208555.0, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208554.04, "dur": 1.0, "name": "_path_split (<frozen importlib._bootstrap_external>:62)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208556.0, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208557.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208559.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208560.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208560.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208559.0, "dur": 1.08, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208561.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208558.0, "dur": 3.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208553.02, "dur": 8.04, "name": "cache_from_source (<frozen importlib._bootstrap_external>:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208563.02, "dur": 12.98, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208563.0, "dur": 13.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208562.0, "dur": 15.0, "name": "path_stats (<frozen importlib._bootstrap_external>:951)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208627.0, "dur": 916.0, "name": "_io.FileIO.read", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208580.0, "dur": 1058.0, "name": "get_data (<frozen importlib._bootstrap_external>:914)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209647.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209650.0, "dur": 1.0, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209649.0, "dur": 3.0, "name": "_r_long (<frozen importlib._bootstrap_external>:51)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209644.0, "dur": 9.0, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:438)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209659.02, "dur": 0.98, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209659.0, "dur": 1.02, "name": "_r_long (<frozen importlib._bootstrap_external>:51)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209662.02, "dur": 0.98, "name": "type.from_bytes", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209662.0, "dur": 1.02, "name": "_r_long (<frozen importlib._bootstrap_external>:51)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209658.0, "dur": 5.04, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:471)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209665.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209669.0, "dur": 158.0, "name": "marshal.loads", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209828.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209829.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209831.0, "dur": 1.0, "name": "_imp._fix_co_filename", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209668.0, "dur": 164.02, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:523)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208549.02, "dur": 1283.98, "name": "get_code (<frozen importlib._bootstrap_external>:793)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209842.0, "dur": 3.0, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209841.0, "dur": 4.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209837.0, "dur": 118.0, "name": "<module> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/stringprep.py:6)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209836.02, "dur": 119.98, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209836.0, "dur": 120.02, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208549.0, "dur": 1408.0, "name": "exec_module (<frozen importlib._bootstrap_external>:722)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209965.0, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap>:321)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209965.04, "dur": 0.96, "name": "<genexpr> (<frozen importlib._bootstrap>:321)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209966.02, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap>:321)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209966.06, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap>:321)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209964.0, "dur": 3.0, "name": "builtins.any", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209972.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209962.0, "dur": 11.0, "name": "__exit__ (<frozen importlib._bootstrap>:318)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208503.0, "dur": 1472.0, "name": "_load_unlocked (<frozen importlib._bootstrap>:663)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208141.0, "dur": 1835.0, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:948)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209979.0, "dur": 1.0, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209978.0, "dur": 6.0, "name": "release (<frozen importlib._bootstrap>:103)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209977.0, "dur": 7.02, "name": "__exit__ (<frozen importlib._bootstrap>:151)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209986.0, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209987.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209988.0, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209985.0, "dur": 3.04, "name": "cb (<frozen importlib._bootstrap>:176)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208117.0, "dur": 1874.0, "name": "_find_and_load (<frozen importlib._bootstrap>:978)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209996.0, "dur": 2.0, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209995.0, "dur": 3.02, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210000.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210005.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210008.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210007.0, "dur": 1.04, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210010.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210009.02, "dur": 1.02, "name": "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210013.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210016.0, "dur": 1.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210013.0, "dur": 4.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:224)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210018.0, "dur": 2.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:76)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210023.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210022.0, "dur": 2.0, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210026.0, "dur": 1.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210029.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210029.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210032.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210031.0, "dur": 1.04, "name": "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210033.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210034.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210034.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210036.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210037.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210037.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210038.04, "dur": 0.96, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210038.02, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210040.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210041.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210041.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210042.02, "dur": 0.98, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210042.0, "dur": 1.02, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210043.04, "dur": 0.96, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210044.02, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210048.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210049.0, "dur": 0.02, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210048.04, "dur": 1.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210050.0, "dur": 0.02, "name": "builtins.ord", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210051.0, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210051.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210052.0, "dur": 2.0, "name": "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210051.08, "dur": 2.94, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210056.0, "dur": 1.0, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210057.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210055.0, "dur": 3.0, "name": "_uniq (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:408)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210058.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210059.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210059.0, "dur": 1.02, "name": "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210062.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210061.0, "dur": 1.04, "name": "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210060.04, "dur": 2.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210066.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210066.0, "dur": 1.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210025.0, "dur": 43.0, "name": "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210068.02, "dur": 0.98, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210069.02, "dur": 0.02, "name": "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210070.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210021.0, "dur": 49.04, "name": "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210072.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210071.0, "dur": 2.0, "name": "fix_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:903)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210012.0, "dur": 62.0, "name": "parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:919)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210080.0, "dur": 1.0, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210082.0, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210077.0, "dur": 6.0, "name": "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210085.0, "dur": 1.0, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210084.0, "dur": 3.0, "name": "_get_literal_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:461)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210089.0, "dur": 0.02, "name": "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210088.0, "dur": 2.0, "name": "_get_charset_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:492)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210091.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210091.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210091.08, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210092.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210092.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210093.02, "dur": 0.02, "name": "builtins.min", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210093.06, "dur": 0.94, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210099.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210118.0, "dur": 2.0, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210120.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210121.0, "dur": 0.02, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210122.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210122.04, "dur": 0.96, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210126.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210127.0, "dur": 0.02, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210127.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210128.02, "dur": 2.98, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210131.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210132.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210310.0, "dur": 2.0, "name": "bytearray.translate", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210315.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210317.0, "dur": 20.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:413)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210309.0, "dur": 29.0, "name": "_mk_bitmap (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:411)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210341.0, "dur": 1.0, "name": "memoryview.cast", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210344.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210344.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210345.0, "dur": 2.0, "name": "memoryview.tolist", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210339.0, "dur": 8.02, "name": "_bytes_to_codes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:416)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210350.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210094.02, "dur": 256.98, "name": "_optimize_charset (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:276)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210355.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210356.0, "dur": 1.0, "name": "list.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210357.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210354.0, "dur": 4.0, "name": "_compile_charset (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210358.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210076.0, "dur": 282.06, "name": "_compile_info (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:536)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210365.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210376.0, "dur": 1.0, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210377.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210378.0, "dur": 0.02, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210378.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210379.0, "dur": 0.02, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210380.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210380.04, "dur": 0.02, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210381.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210381.04, "dur": 1.96, "name": "bytearray.find", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210384.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210384.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210555.0, "dur": 1.0, "name": "bytearray.translate", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210558.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210559.0, "dur": 19.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:413)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210554.0, "dur": 25.0, "name": "_mk_bitmap (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:411)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210580.02, "dur": 0.98, "name": "memoryview.cast", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210582.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210582.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210583.0, "dur": 1.0, "name": "memoryview.tolist", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210580.0, "dur": 4.02, "name": "_bytes_to_codes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:416)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210586.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210363.0, "dur": 224.02, "name": "_optimize_charset (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:276)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210590.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210593.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210593.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210595.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210596.0, "dur": 1.0, "name": "list.extend", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210597.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210594.0, "dur": 3.06, "name": "_compile_charset (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:249)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210598.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210360.0, "dur": 238.04, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210599.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210075.0, "dur": 525.02, "name": "_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:598)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210602.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210602.0, "dur": 1.0, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210603.02, "dur": 0.98, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210606.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210606.0, "dur": 0.06, "name": "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210607.0, "dur": 3.0, "name": "_sre.compile", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210009.0, "dur": 601.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:759)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210616.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210622.0, "dur": 2.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210619.0, "dur": 5.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210626.0, "dur": 1.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210625.0, "dur": 2.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210615.0, "dur": 12.04, "name": "__and__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:836)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210628.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210000.0, "dur": 629.0, "name": "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043209999.0, "dur": 630.02, "name": "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:232)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210634.0, "dur": 1.0, "name": "Codec (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:146)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210632.0, "dur": 22.0, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210656.0, "dur": 1.0, "name": "IncrementalEncoder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:218)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210655.0, "dur": 20.0, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210676.02, "dur": 0.98, "name": "IncrementalDecoder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:253)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210676.0, "dur": 21.0, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210699.0, "dur": 0.02, "name": "StreamWriter (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:292)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210698.0, "dur": 19.0, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210720.02, "dur": 0.02, "name": "StreamReader (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:295)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210720.0, "dur": 18.0, "name": "builtins.__build_class__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208115.0, "dur": 2623.02, "name": "<module> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:3)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208114.02, "dur": 2624.98, "name": "builtins.exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043208114.0, "dur": 2625.02, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206384.0, "dur": 4356.0, "name": "exec_module (<frozen importlib._bootstrap_external>:722)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210744.02, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap>:321)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210745.0, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap>:321)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210745.04, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap>:321)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210746.0, "dur": 0.02, "name": "<genexpr> (<frozen importlib._bootstrap>:321)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210744.0, "dur": 2.04, "name": "builtins.any", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210747.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210742.0, "dur": 11.0, "name": "__exit__ (<frozen importlib._bootstrap>:318)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206337.0, "dur": 4417.0, "name": "_load_unlocked (<frozen importlib._bootstrap>:663)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210756.0, "dur": 1.0, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210757.02, "dur": 2.98, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206103.0, "dur": 4657.02, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:948)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210762.02, "dur": 0.98, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210762.0, "dur": 4.0, "name": "release (<frozen importlib._bootstrap>:103)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210761.0, "dur": 5.02, "name": "__exit__ (<frozen importlib._bootstrap>:151)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210768.0, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210769.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210770.0, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210767.0, "dur": 3.04, "name": "cb (<frozen importlib._bootstrap>:176)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206083.0, "dur": 4689.0, "name": "_find_and_load (<frozen importlib._bootstrap>:978)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210774.0, "dur": 2.0, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210773.0, "dur": 4.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206079.0, "dur": 4698.02, "name": "builtins.__import__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210785.0, "dur": 0.02, "name": "type.__new__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210784.0, "dur": 8.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/codecs.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210779.0, "dur": 14.0, "name": "getregentry (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:300)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210793.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206067.0, "dur": 4733.0, "name": "search_function (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/__init__.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210802.02, "dur": 1.98, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210805.0, "dur": 6.0, "name": "bytes.split", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210812.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210813.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210813.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210814.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210814.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043210802.0, "dur": 12.08, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:147)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206054.0, "dur": 5095.0, "name": "_socket.getaddrinfo", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211161.0, "dur": 3.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211157.0, "dur": 7.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211154.0, "dur": 11.0, "name": "_intenum_converter (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211176.0, "dur": 1.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211174.0, "dur": 3.02, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211173.0, "dur": 5.0, "name": "_intenum_converter (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211179.0, "dur": 1.0, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206053.0, "dur": 5128.0, "name": "getaddrinfo (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:731)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206050.0, "dur": 5133.0, "name": "get_sockaddr (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:618)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211198.0, "dur": 2.0, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211201.0, "dur": 13.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:216)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211197.0, "dur": 18.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:499)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211192.0, "dur": 26.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:200)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211246.0, "dur": 96.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:139)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211363.0, "dur": 17.0, "name": "socket.setsockopt", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211382.0, "dur": 24.0, "name": "socket.bind", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211408.0, "dur": 8.0, "name": "socket.getsockname", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211354.0, "dur": 69.0, "name": "server_bind (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:458)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211429.0, "dur": 1.0, "name": "str.strip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211439.0, "dur": 2.0, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211442.0, "dur": 2.0, "name": "bytes.split", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211446.0, "dur": 1.0, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211448.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211449.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211450.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211450.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211438.0, "dur": 13.0, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:147)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043212319.0, "dur": 1.0, "name": "str.lower", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211431.0, "dur": 924.0, "name": "_socket.gethostbyaddr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212357.0, "dur": 2.0, "name": "list.insert", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211428.0, "dur": 933.0, "name": "getfqdn (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:663)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211351.0, "dur": 1016.0, "name": "server_bind (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/server.py:135)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212373.0, "dur": 12.0, "name": "socket.listen", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212369.0, "dur": 16.02, "name": "server_activate (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:469)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043211190.0, "dur": 1195.04, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:445)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212393.0, "dur": 5.0, "name": "socket.getsockname", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206044.0, "dur": 6357.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:660)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043206040.0, "dur": 6364.0, "name": "make_server (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:765)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212422.0, "dur": 2.0, "name": "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212419.0, "dur": 6.0, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212417.0, "dur": 8.02, "name": "_intenum_converter (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:97)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212414.0, "dur": 11.04, "name": "family (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:432)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212427.0, "dur": 9.0, "name": "socket.getsockname", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212445.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212448.0, "dur": 1.0, "name": "_thread.RLock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212446.02, "dur": 3.98, "name": "_acquireLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212452.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212454.0, "dur": 0.02, "name": "_thread.RLock.release", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212453.02, "dur": 1.02, "name": "_releaseLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:221)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212444.0, "dur": 11.0, "name": "getLogger (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1216)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212441.0, "dur": 14.02, "name": "getLogger (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1925)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212458.0, "dur": 1.0, "name": "getEffectiveLevel (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1600)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212463.0, "dur": 0.02, "name": "<genexpr> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:181)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212462.0, "dur": 2.0, "name": "builtins.any", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212467.0, "dur": 0.02, "name": "<genexpr> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:181)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212466.0, "dur": 1.04, "name": "builtins.any", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212457.0, "dur": 11.0, "name": "_has_level_handler (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:173)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212475.0, "dur": 1.0, "name": "__init__ (<frozen importlib._bootstrap>:143)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212478.0, "dur": 1.0, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212483.02, "dur": 0.98, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212485.0, "dur": 0.02, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212483.0, "dur": 3.0, "name": "__init__ (<frozen importlib._bootstrap>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212489.0, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212477.0, "dur": 18.0, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212497.0, "dur": 0.02, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212496.0, "dur": 6.0, "name": "acquire (<frozen importlib._bootstrap>:78)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212476.02, "dur": 26.0, "name": "__enter__ (<frozen importlib._bootstrap>:147)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212503.0, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212505.0, "dur": 1.0, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212509.02, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212509.0, "dur": 1.0, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212511.02, "dur": 1.98, "name": "_imp.is_builtin", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212511.0, "dur": 2.02, "name": "find_spec (<frozen importlib._bootstrap>:719)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212514.02, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212514.0, "dur": 0.06, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212516.02, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212516.0, "dur": 0.06, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212518.0, "dur": 0.02, "name": "_imp.is_frozen", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212517.0, "dur": 1.04, "name": "find_spec (<frozen importlib._bootstrap>:792)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212519.02, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212519.0, "dur": 0.06, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212520.02, "dur": 0.02, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212520.0, "dur": 0.06, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212524.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212525.02, "dur": 1.98, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212527.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212529.02, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212531.0, "dur": 78.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212530.0, "dur": 80.0, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212614.0, "dur": 1.0, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212622.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212623.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212621.0, "dur": 3.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212624.02, "dur": 0.98, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212619.0, "dur": 6.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212626.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212629.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212630.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212629.02, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212630.08, "dur": 0.92, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212629.0, "dur": 2.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212632.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212633.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212634.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212633.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212634.06, "dur": 0.94, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212633.0, "dur": 2.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212635.04, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212637.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212637.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212636.02, "dur": 4.98, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212641.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212636.0, "dur": 5.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212642.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212644.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212644.06, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212644.0, "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212645.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212643.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212646.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212529.0, "dur": 117.04, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212648.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212649.0, "dur": 0.02, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212650.0, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212651.0, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212652.0, "dur": 19.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212651.04, "dur": 20.96, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212673.0, "dur": 0.02, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212675.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212676.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212675.02, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212677.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212675.0, "dur": 2.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212678.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212680.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212680.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212679.02, "dur": 1.98, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212681.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212679.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212682.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212683.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212684.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212683.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212684.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212683.0, "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212685.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212686.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212687.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212686.02, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212687.08, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212686.0, "dur": 2.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212688.02, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212689.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212690.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212689.02, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212690.08, "dur": 0.92, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212689.0, "dur": 5.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212695.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212650.04, "dur": 45.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212696.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212697.02, "dur": 0.98, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212698.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212699.0, "dur": 0.02, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212699.04, "dur": 0.96, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212700.04, "dur": 0.96, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212702.0, "dur": 13.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212701.02, "dur": 14.0, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212717.0, "dur": 0.02, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212719.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212720.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212719.0, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212720.06, "dur": 0.94, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212718.0, "dur": 3.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212722.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212723.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212724.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212723.02, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212724.08, "dur": 0.92, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212723.0, "dur": 2.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212725.04, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212727.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212727.06, "dur": 0.94, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212727.0, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212728.04, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212726.0, "dur": 2.08, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212729.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212730.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212731.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212730.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212731.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212730.0, "dur": 2.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212732.02, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212733.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212734.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212733.02, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212734.08, "dur": 0.92, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212733.0, "dur": 2.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212735.04, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212700.02, "dur": 35.98, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212737.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212737.04, "dur": 0.96, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212738.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212739.02, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212743.02, "dur": 23.98, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212743.0, "dur": 24.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212768.0, "dur": 0.02, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212771.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212771.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212770.02, "dur": 1.98, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212772.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212770.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212773.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212775.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212775.06, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212775.0, "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212776.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212774.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212777.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212778.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212779.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212778.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212779.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212778.0, "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212780.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212781.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212782.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212781.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212782.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212781.0, "dur": 2.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212783.02, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212785.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212785.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212784.02, "dur": 1.06, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212786.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212784.0, "dur": 2.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212786.06, "dur": 0.94, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212739.0, "dur": 48.02, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212788.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212788.04, "dur": 0.96, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212789.02, "dur": 0.98, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212790.04, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212791.02, "dur": 9.98, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212791.0, "dur": 10.02, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212802.0, "dur": 1.0, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212805.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212805.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212804.02, "dur": 1.98, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212806.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212804.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212810.0, "dur": 1.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212812.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212813.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212812.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212813.06, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212812.0, "dur": 2.0, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212814.02, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212816.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212816.06, "dur": 0.94, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212816.0, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212817.04, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212815.0, "dur": 2.08, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212818.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212819.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212820.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212819.02, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212820.06, "dur": 0.94, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212819.0, "dur": 2.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212821.04, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212823.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212823.06, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212823.0, "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212824.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212822.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212825.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212790.02, "dur": 35.02, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212826.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212827.0, "dur": 1.0, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212828.02, "dur": 0.02, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212829.0, "dur": 0.02, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212830.0, "dur": 10.0, "name": "posix.stat", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212829.04, "dur": 10.98, "name": "_path_stat (<frozen importlib._bootstrap_external>:74)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212841.0, "dur": 0.02, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212844.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212844.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212843.02, "dur": 1.06, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212845.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212843.0, "dur": 2.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212846.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212848.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212848.06, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212848.0, "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212849.02, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212847.0, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212850.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212851.04, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212852.0, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212851.02, "dur": 3.98, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212856.0, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212851.0, "dur": 5.04, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212856.06, "dur": 0.94, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212858.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212858.06, "dur": 0.94, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212858.0, "dur": 1.02, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212859.04, "dur": 0.02, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212857.02, "dur": 2.06, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212860.0, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212861.04, "dur": 0.96, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212862.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212861.02, "dur": 1.04, "name": "<listcomp> (<frozen importlib._bootstrap_external>:58)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212862.08, "dur": 0.92, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212861.0, "dur": 2.02, "name": "_path_join (<frozen importlib._bootstrap_external>:56)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212863.04, "dur": 0.02, "name": "_verbose_message (<frozen importlib._bootstrap>:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212828.06, "dur": 35.94, "name": "find_spec (<frozen importlib._bootstrap_external>:1356)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212866.0, "dur": 2.0, "name": "__init__ (<frozen importlib._bootstrap>:369)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212523.0, "dur": 345.02, "name": "_get_spec (<frozen importlib._bootstrap_external>:1240)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212521.0, "dur": 348.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1272)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212871.02, "dur": 0.98, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212871.0, "dur": 1.02, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212873.02, "dur": 0.98, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212873.0, "dur": 1.02, "name": "__enter__ (<frozen importlib._bootstrap>:855)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212876.0, "dur": 0.02, "name": "find_spec (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/six.py:194)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212877.02, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212877.0, "dur": 0.06, "name": "__exit__ (<frozen importlib._bootstrap>:859)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212506.02, "dur": 371.98, "name": "_find_spec (<frozen importlib._bootstrap>:882)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212879.0, "dur": 3.0, "name": "str.format", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212504.0, "dur": 381.0, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:948)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212888.0, "dur": 0.02, "name": "_thread.get_ident", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212887.02, "dur": 3.98, "name": "release (<frozen importlib._bootstrap>:103)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212887.0, "dur": 4.02, "name": "__exit__ (<frozen importlib._bootstrap>:151)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212892.02, "dur": 0.98, "name": "_imp.acquire_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212893.02, "dur": 0.02, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212894.0, "dur": 0.02, "name": "_imp.release_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212892.0, "dur": 2.04, "name": "cb (<frozen importlib._bootstrap>:176)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212473.0, "dur": 424.0, "name": "_find_and_load (<frozen importlib._bootstrap>:978)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212904.0, "dur": 1.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:716)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212907.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212906.0, "dur": 1.04, "name": "_checkLevel (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:187)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212910.0, "dur": 0.02, "name": "_thread.RLock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212909.02, "dur": 1.02, "name": "_acquireLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212912.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212913.02, "dur": 0.02, "name": "_thread.RLock.release", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212913.0, "dur": 0.06, "name": "_releaseLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:221)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212909.0, "dur": 8.0, "name": "_addHandlerRef (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:783)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212920.0, "dur": 2.0, "name": "RLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:75)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212923.04, "dur": 0.96, "name": "_thread.RLock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212923.02, "dur": 1.0, "name": "_acquireLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212927.0, "dur": 0.02, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212925.0, "dur": 3.0, "name": "add (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/_weakrefset.py:81)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212928.04, "dur": 0.02, "name": "_thread.RLock.release", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212928.02, "dur": 0.98, "name": "_releaseLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:221)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212923.0, "dur": 6.02, "name": "_register_at_fork_reinit_lock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:242)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212918.0, "dur": 11.04, "name": "createLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:831)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212903.0, "dur": 26.06, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:802)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212901.0, "dur": 30.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:991)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212470.0, "dur": 461.02, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:195)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212933.02, "dur": 0.02, "name": "_thread.RLock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212933.0, "dur": 0.06, "name": "_acquireLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212934.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212935.02, "dur": 0.02, "name": "_thread.RLock.release", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212935.0, "dur": 0.06, "name": "_releaseLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:221)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212932.0, "dur": 3.08, "name": "addHandler (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212936.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212937.02, "dur": 0.02, "name": "str.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212942.02, "dur": 0.98, "name": "_thread.RLock.acquire", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212942.0, "dur": 1.02, "name": "_acquireLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:212)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212944.0, "dur": 1.0, "name": "getEffectiveLevel (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1600)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212946.02, "dur": 0.02, "name": "_thread.RLock.release", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212946.0, "dur": 0.06, "name": "_releaseLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:221)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212940.0, "dur": 7.0, "name": "isEnabledFor (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1614)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212939.0, "dur": 8.02, "name": "info (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1368)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212438.0, "dur": 509.04, "name": "_log (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:206)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212406.0, "dur": 542.0, "name": "log_startup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:915)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212958.02, "dur": 0.98, "name": "_thread.lock.__enter__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212958.0, "dur": 1.02, "name": "__enter__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:240)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212960.02, "dur": 0.98, "name": "_thread.lock.__exit__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212960.0, "dur": 1.02, "name": "__exit__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:243)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212957.0, "dur": 4.04, "name": "clear (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:524)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212972.0, "dur": 3.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:63)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212964.0, "dur": 12.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:209)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212977.0, "dur": 1.0, "name": "select.poll", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212963.0, "dur": 15.02, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:347)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212979.0, "dur": 1.0, "name": "__enter__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:199)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212986.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212989.0, "dur": 0.02, "name": "socket.fileno", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212988.0, "dur": 2.0, "name": "fileno (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:485)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212986.0, "dur": 5.0, "name": "_fileobj_to_fd (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:21)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212985.0, "dur": 6.02, "name": "_fileobj_lookup (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:215)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212993.02, "dur": 0.98, "name": "type.__new__", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212993.0, "dur": 1.02, "name": "__new__ (<string>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212982.0, "dur": 17.0, "name": "register (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:234)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043213013.0, "dur": 6.0, "name": "select.poll.register", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043212981.0, "dur": 38.02, "name": "register (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:351)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437611, "ts": 541043213023.0, "dur": 11.0, "name": "math.ceil", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213944.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213945.0, "dur": 1.0, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213943.0, "dur": 4.0, "name": "_encode_idna (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:476)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213965.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213966.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213967.0, "dur": 2.0, "name": "bytes.decode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213964.0, "dur": 5.02, "name": "_to_str (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:131)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213971.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213971.0, "dur": 0.06, "name": "_to_str (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:131)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213972.0, "dur": 1.0, "name": "str.endswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213975.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213975.0, "dur": 0.06, "name": "_to_str (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:131)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213977.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213977.0, "dur": 1.0, "name": "_to_str (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:131)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213979.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213979.0, "dur": 0.06, "name": "_to_str (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:131)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213982.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213981.0, "dur": 1.04, "name": "_to_str (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:131)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213957.0, "dur": 27.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1747)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043212318.0, "dur": 1667.0, "name": "bind (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1545)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043209610.0, "dur": 4375.02, "name": "create_url_adapter (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043209601.0, "dur": 4389.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:228)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043207955.0, "dur": 6035.02, "name": "app_context (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1950)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214378.0, "dur": 1.0, "name": "ContextVar.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214376.0, "dur": 7.0, "name": "__getattr__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214368.0, "dur": 16.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214385.0, "dur": 0.02, "name": "list.copy", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214386.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214390.0, "dur": 0.02, "name": "ContextVar.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214390.04, "dur": 0.96, "name": "dict.copy", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214392.0, "dur": 7.0, "name": "ContextVar.set", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214389.0, "dur": 11.0, "name": "__setattr__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:167)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214366.0, "dur": 35.0, "name": "push (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:231)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043214685.0, "dur": 0.02, "name": "send (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/signals.py:25)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213995.0, "dur": 691.0, "name": "push (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:237)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043213993.0, "dur": 694.0, "name": "__enter__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:256)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215078.02, "dur": 0.98, "name": "ContextVar.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215078.0, "dur": 2.0, "name": "__getattr__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215072.0, "dur": 9.0, "name": "top (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:251)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215085.0, "dur": 0.02, "name": "ContextVar.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215084.0, "dur": 5.0, "name": "__getattr__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215082.0, "dur": 8.0, "name": "top (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:251)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215092.0, "dur": 1.0, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215096.0, "dur": 0.02, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215097.0, "dur": 0.02, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215097.04, "dur": 0.96, "name": "dict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215102.0, "dur": 3.0, "name": "inject_url_defaults (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1793)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215126.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215127.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215123.0, "dur": 5.0, "name": "match_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1132)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215121.0, "dur": 7.02, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1731)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215131.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215131.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215130.0, "dur": 2.0, "name": "match_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1132)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215129.0, "dur": 3.02, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1731)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215134.02, "dur": 0.98, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215135.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215134.0, "dur": 1.06, "name": "match_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1132)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215133.0, "dur": 3.0, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1731)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215138.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215139.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215138.0, "dur": 1.04, "name": "match_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1132)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215137.0, "dur": 2.06, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1731)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215142.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215142.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215141.0, "dur": 2.0, "name": "match_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1132)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215140.0, "dur": 3.02, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1731)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215119.0, "dur": 26.0, "name": "list.sort", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215147.0, "dur": 0.02, "name": "dict.values", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215152.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215152.04, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215151.0, "dur": 2.0, "name": "build_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215150.0, "dur": 3.02, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1733)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215148.0, "dur": 5.04, "name": "list.sort", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215156.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215157.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215156.0, "dur": 1.04, "name": "build_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215155.0, "dur": 2.06, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1733)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215154.0, "dur": 4.0, "name": "list.sort", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215160.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215161.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215160.0, "dur": 1.04, "name": "build_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215159.0, "dur": 2.06, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1733)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215158.02, "dur": 3.06, "name": "list.sort", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215164.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215164.06, "dur": 0.94, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215164.0, "dur": 1.02, "name": "build_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215163.0, "dur": 2.04, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1733)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215162.0, "dur": 3.06, "name": "list.sort", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215171.02, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215172.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215171.0, "dur": 1.04, "name": "build_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215170.0, "dur": 2.06, "name": "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1733)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215169.0, "dur": 4.0, "name": "list.sort", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215115.0, "dur": 59.0, "name": "update (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1720)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215175.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215176.02, "dur": 0.98, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215178.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215186.0, "dur": 1.0, "name": "dict.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215189.0, "dur": 3.0, "name": "suitable_for (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1099)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215677.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215676.0, "dur": 2.02, "name": "_to_str (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:131)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215950.0, "dur": 1.0, "name": "str.rpartition", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215946.0, "dur": 6.0, "name": "parent (<frozen importlib._bootstrap>:416)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215980.0, "dur": 5.0, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215979.0, "dur": 7.0, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1009)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217658.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217660.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217661.0, "dur": 0.02, "name": "dict.items", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217664.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217657.0, "dur": 8.0, "name": "iter_multi_items (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/datastructures.py:23)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217666.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217669.0, "dur": 1.0, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217671.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217671.04, "dur": 0.96, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217681.0, "dur": 3.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217685.0, "dur": 1.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217677.0, "dur": 9.02, "name": "quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:533)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217687.0, "dur": 1.0, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217675.0, "dur": 13.02, "name": "_fast_url_quote_plus (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:543)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217692.0, "dur": 7.0, "name": "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:534)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217699.02, "dur": 0.98, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217691.0, "dur": 9.02, "name": "quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:533)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217701.0, "dur": 0.02, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217690.0, "dur": 11.04, "name": "_fast_url_quote_plus (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:543)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215689.0, "dur": 2013.0, "name": "_url_encode_impl (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:420)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217707.0, "dur": 0.02, "name": "iter_multi_items (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/datastructures.py:23)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217705.0, "dur": 4.0, "name": "_url_encode_impl (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:420)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215682.0, "dur": 2028.0, "name": "str.join", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215669.0, "dur": 2042.0, "name": "url_encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:955)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215237.0, "dur": 2474.02, "name": "_encode_query_vars (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:816)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215234.0, "dur": 2479.0, "name": "<builder:'/file/'> (<werkzeug routing>:1)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215193.0, "dur": 2521.0, "name": "build (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1070)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215185.0, "dur": 2532.0, "name": "_partial_build (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:2162)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215183.0, "dur": 2535.0, "name": "_partial_build (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:2162)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217725.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217725.0, "dur": 9.0, "name": "_to_str (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:131)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217722.0, "dur": 14.0, "name": "get_host (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:2075)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217740.0, "dur": 1.0, "name": "str.lstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215112.0, "dur": 2629.02, "name": "build (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:2203)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043215063.0, "dur": 2680.0, "name": "url_for (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:194)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217767.0, "dur": 0.02, "name": "send (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/signals.py:25)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217760.0, "dur": 7.04, "name": "do_teardown_appcontext (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1925)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217780.0, "dur": 1.0, "name": "ContextVar.get", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217779.0, "dur": 3.0, "name": "__getattr__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:160)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217774.0, "dur": 8.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217783.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217792.0, "dur": 1.0, "name": "ContextVar.set", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217791.0, "dur": 3.0, "name": "__release_local__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:64)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217787.0, "dur": 7.02, "name": "__release_local__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:157)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217785.0, "dur": 9.04, "name": "release_local (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:93)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217773.0, "dur": 22.0, "name": "pop (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:238)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217797.0, "dur": 0.02, "name": "send (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/signals.py:25)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217753.0, "dur": 45.0, "name": "pop (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:243)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043217747.0, "dur": 51.02, "name": "__exit__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:260)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218417.0, "dur": 2.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:642)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218423.0, "dur": 0.02, "name": "str.lower", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218428.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218421.0, "dur": 8.0, "name": "register (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218430.0, "dur": 1.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:642)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218433.0, "dur": 0.02, "name": "str.lower", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218434.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218432.0, "dur": 2.04, "name": "register (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218436.0, "dur": 0.02, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:642)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218438.0, "dur": 0.02, "name": "str.lower", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218438.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218437.0, "dur": 2.0, "name": "register (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218440.0, "dur": 0.02, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:642)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218442.0, "dur": 0.02, "name": "str.lower", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218442.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218441.0, "dur": 2.0, "name": "register (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:22)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219527.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219528.02, "dur": 1.98, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219526.0, "dur": 4.02, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219520.0, "dur": 15.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218958.0, "dur": 579.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:657)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219545.02, "dur": 0.98, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219546.02, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219545.0, "dur": 2.0, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219543.0, "dur": 5.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219541.0, "dur": 8.0, "name": "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:657)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219555.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219563.0, "dur": 0.02, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219555.0, "dur": 8.04, "name": "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219553.0, "dur": 12.0, "name": "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219552.0, "dur": 14.0, "name": "__contains__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:664)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218407.0, "dur": 1160.0, "name": "register_standard_browsers (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:502)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219574.0, "dur": 0.02, "name": "str.lower", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219571.0, "dur": 5.0, "name": "get (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219584.0, "dur": 1.0, "name": "str.replace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219591.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220212.0, "dur": 2.0, "name": "_cleanup (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:226)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220215.0, "dur": 1.0, "name": "_thread.allocate_lock", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220220.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220229.0, "dur": 9.0, "name": "posix.pipe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220227.0, "dur": 12.0, "name": "_get_handles (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1329)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220243.0, "dur": 21.0, "name": "io.open", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220277.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220279.0, "dur": 3.0, "name": "builtins.hasattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220284.0, "dur": 6.0, "name": "posix.pipe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220295.0, "dur": 1.0, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220296.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220297.0, "dur": 1.0, "name": "str.encode", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220294.0, "dur": 4.02, "name": "fsencode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:803)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220760.0, "dur": 0.02, "name": "posix.fspath", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220764.02, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220764.0, "dur": 1.0, "name": "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220766.0, "dur": 2.0, "name": "bytes.rfind", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220770.0, "dur": 0.02, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220771.0, "dur": 1.0, "name": "bytes.rstrip", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220759.0, "dur": 13.02, "name": "dirname (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:154)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220782.0, "dur": 1.0, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220786.0, "dur": 3.0, "name": "builtins.sorted", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220791.0, "dur": 1334.0, "name": "_posixsubprocess.fork_exec", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043222237.0, "dur": 13.0, "name": "posix.close", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043222262.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043222269.0, "dur": 5.0, "name": "posix.close", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043222315.0, "dur": 886.0, "name": "posix.read", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043223211.0, "dur": 8.0, "name": "posix.close", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220276.0, "dur": 2945.0, "name": "_execute_child (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1383)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043220207.0, "dur": 3330.0, "name": "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:656)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043225650.0, "dur": 10.0, "name": "_locale.nl_langinfo", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043225647.0, "dur": 14.0, "name": "getpreferredencoding (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_bootlocale.py:33)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043227626.0, "dur": 50.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/codecs.py:186)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043227812.0, "dur": 58.0, "name": "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:1000)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219590.0, "dur": 8282.0, "name": "popen (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:977)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043227923.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043227922.0, "dur": 2.02, "name": "__getattr__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:1016)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043227925.0, "dur": 6.0, "name": "_io.TextIOWrapper.write", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043227960.0, "dur": 92.0, "name": "_io.TextIOWrapper.close", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043228164.0, "dur": 337023.0, "name": "posix.waitpid", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043228161.0, "dur": 337032.0, "name": "_try_wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1579)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043565233.0, "dur": 3.0, "name": "posix.WIFSIGNALED", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043565236.02, "dur": 0.02, "name": "posix.WIFEXITED", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043565237.0, "dur": 0.02, "name": "posix.WEXITSTATUS", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043565232.0, "dur": 7.0, "name": "_handle_exitstatus (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1526)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043228124.0, "dur": 337119.0, "name": "_wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1592)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043228080.0, "dur": 337166.0, "name": "wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:985)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043227959.0, "dur": 337289.0, "name": "close (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:1003)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043219583.0, "dur": 345667.0, "name": "open (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:645)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043565445.0, "dur": 1.0, "name": "_internal_poll (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1544)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043565397.0, "dur": 50.0, "name": "__del__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:850)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218401.0, "dur": 347072.0, "name": "open (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:71)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043218396.0, "dur": 347090.0, "name": "open_new_tab (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:85)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043184062.0, "dur": 381457.0, "name": "trace (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/heartrate/core.py:64)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043569116.0, "dur": 1.0, "name": "builtins.len", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043571431.0, "dur": 1.0, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043571413.0, "dur": 19.02, "name": "isfunction (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043569114.0, "dur": 2320.0, "name": "no_args_decorator (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py:147)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043571479.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043571478.0, "dur": 1.04, "name": "isfunction (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043571475.0, "dur": 9.0, "name": "iscoroutinefunction (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:179)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043571496.0, "dur": 3.0, "name": "set.add", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577301.0, "dur": 3.0, "name": "wraps (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:67)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577326.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577327.02, "dur": 0.98, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577329.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577329.04, "dur": 0.96, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577330.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577331.0, "dur": 0.02, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577331.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577332.02, "dur": 0.02, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577333.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577333.04, "dur": 0.96, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577334.02, "dur": 2.98, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577338.0, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577339.0, "dur": 1.0, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577324.0, "dur": 18.0, "name": "update_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577345.0, "dur": 1.0, "name": "wraps (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:67)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577349.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577349.06, "dur": 0.94, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577350.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577350.06, "dur": 0.94, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577351.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577351.06, "dur": 0.94, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577357.0, "dur": 1.0, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577358.02, "dur": 0.02, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577358.06, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577359.0, "dur": 0.02, "name": "builtins.setattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577359.04, "dur": 0.96, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577360.02, "dur": 0.02, "name": "builtins.getattr", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577360.06, "dur": 0.94, "name": "dict.update", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577349.0, "dur": 12.02, "name": "update_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577368.0, "dur": 0.02, "name": "builtins.isinstance", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577366.0, "dur": 2.04, "name": "isfunction (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:158)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577365.0, "dur": 6.0, "name": "isgeneratorfunction (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:171)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043571469.0, "dur": 5903.0, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:161)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043567186.0, "dur": 10187.0, "name": "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:126)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577416.0, "dur": 2.0, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577422.0, "dur": 1.0, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577428.0, "dur": 1.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577427.0, "dur": 3.0, "name": "_is_internal_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577432.0, "dur": 3.0, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577437.0, "dur": 0.02, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577437.04, "dur": 0.96, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577439.0, "dur": 0.02, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577408.0, "dur": 31.04, "name": "__enter__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:192)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587765.0, "dur": 1.0, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587768.0, "dur": 2.0, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587786.0, "dur": 2.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587785.0, "dur": 4.0, "name": "_is_internal_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587792.0, "dur": 0.02, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587794.0, "dur": 0.02, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587794.04, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587796.0, "dur": 0.02, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587762.0, "dur": 35.0, "name": "__enter__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:192)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588730.0, "dur": 1.0, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588732.0, "dur": 2.0, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588742.0, "dur": 2.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588741.0, "dur": 3.02, "name": "_is_internal_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588746.0, "dur": 1.0, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588748.0, "dur": 0.02, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588749.0, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588750.0, "dur": 1.0, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588728.0, "dur": 23.02, "name": "__enter__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:192)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589428.0, "dur": 1.0, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589431.0, "dur": 1.0, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589439.0, "dur": 1.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589438.0, "dur": 3.0, "name": "_is_internal_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589443.0, "dur": 0.02, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589444.0, "dur": 1.0, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589445.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589466.0, "dur": 1.0, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589426.0, "dur": 41.02, "name": "__enter__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:192)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590068.0, "dur": 1.0, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590071.0, "dur": 1.0, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590079.0, "dur": 1.0, "name": "str.startswith", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590078.0, "dur": 2.02, "name": "_is_internal_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:222)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590082.0, "dur": 0.02, "name": "dict.setdefault", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590083.0, "dur": 1.0, "name": "sys.gettrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590084.02, "dur": 0.02, "name": "list.append", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590086.0, "dur": 0.02, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590066.0, "dur": 21.0, "name": "__enter__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:192)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590351.0, "dur": 667.0, "name": "factorial (/Users/rafsan/Desktop/pythonProject/main.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591039.0, "dur": 1.0, "name": "list.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591041.0, "dur": 1.0, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591043.0, "dur": 1.0, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591194.0, "dur": 2.0, "name": "_is_traced_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:225)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591207.0, "dur": 1.0, "name": "is_comprehension_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py:61)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591186.0, "dur": 23.0, "name": "trace (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:228)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591211.0, "dur": 1.0, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591214.0, "dur": 1.0, "name": "ArgDefaultDict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591035.0, "dur": 180.02, "name": "__exit__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:209)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043590058.0, "dur": 1164.0, "name": "simple_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:167)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589736.0, "dur": 1899.0, "name": "factorial (/Users/rafsan/Desktop/pythonProject/main.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591647.0, "dur": 0.02, "name": "list.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591648.0, "dur": 1.0, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591650.0, "dur": 1.0, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591663.0, "dur": 2.0, "name": "_is_traced_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:225)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591668.0, "dur": 0.02, "name": "is_comprehension_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py:61)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591660.0, "dur": 8.04, "name": "trace (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:228)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591669.0, "dur": 1.0, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591671.0, "dur": 1.0, "name": "ArgDefaultDict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591645.0, "dur": 27.02, "name": "__exit__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:209)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589418.0, "dur": 2257.0, "name": "simple_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:167)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043589071.0, "dur": 2818.0, "name": "factorial (/Users/rafsan/Desktop/pythonProject/main.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591895.0, "dur": 1.0, "name": "list.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591896.02, "dur": 0.02, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591897.0, "dur": 0.02, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591909.0, "dur": 1.0, "name": "_is_traced_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:225)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591913.0, "dur": 0.02, "name": "is_comprehension_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py:61)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591907.0, "dur": 7.0, "name": "trace (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:228)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591914.02, "dur": 0.98, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591915.02, "dur": 0.98, "name": "ArgDefaultDict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043591894.0, "dur": 22.02, "name": "__exit__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:209)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588716.0, "dur": 3202.0, "name": "simple_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:167)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043588293.0, "dur": 3762.0, "name": "factorial (/Users/rafsan/Desktop/pythonProject/main.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592061.0, "dur": 0.02, "name": "list.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592068.0, "dur": 1.0, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592069.02, "dur": 0.98, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592080.0, "dur": 1.0, "name": "_is_traced_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:225)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592084.0, "dur": 0.02, "name": "is_comprehension_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py:61)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592078.0, "dur": 6.04, "name": "trace (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:228)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592085.0, "dur": 0.02, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592086.0, "dur": 0.02, "name": "ArgDefaultDict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592060.0, "dur": 27.0, "name": "__exit__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:209)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587750.0, "dur": 4339.0, "name": "simple_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:167)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043587130.0, "dur": 5088.0, "name": "factorial (/Users/rafsan/Desktop/pythonProject/main.py:10)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592224.0, "dur": 1.0, "name": "list.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592225.02, "dur": 0.02, "name": "sys.settrace", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592226.0, "dur": 0.02, "name": "sys._getframe", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592233.0, "dur": 1.0, "name": "_is_traced_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:225)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592236.0, "dur": 0.02, "name": "is_comprehension_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py:61)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592232.0, "dur": 5.0, "name": "trace (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:228)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592237.02, "dur": 0.02, "name": "set.discard", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592238.0, "dur": 0.02, "name": "ArgDefaultDict.pop", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592223.0, "dur": 15.04, "name": "__exit__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:209)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043577402.0, "dur": 14838.0, "name": "simple_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:167)", "ph": "X", "cat": "FEE"}, {"pid": 30344, "tid": 1437522, "ts": 541043592241.0, "dur": 15.0, "name": "builtins.print", "ph": "X", "cat": "FEE"}], "viztracer_metadata": {"version": "0.14.2"}, "file_info": {"files": {"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py": ["\"\"\"Get useful information from live Python objects.\n\nThis module encapsulates the interface provided by the internal special\nattributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.\nIt also provides some help for examining source code and class layout.\n\nHere are some of the useful functions provided by this module:\n\n    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n        isroutine() - check object types\n    getmembers() - get members of an object that satisfy a given condition\n\n    getfile(), getsourcefile(), getsource() - find an object's source code\n    getdoc(), getcomments() - get documentation on an object\n    getmodule() - determine the module that an object came from\n    getclasstree() - arrange classes so as to represent their hierarchy\n\n    getargvalues(), getcallargs() - get info about function arguments\n    getfullargspec() - same, with support for Python 3 features\n    formatargvalues() - format an argument spec\n    getouterframes(), getinnerframes() - get info about frames\n    currentframe() - get the current stack frame\n    stack(), trace() - get info about frames on the stack or in a traceback\n\n    signature() - get a Signature object for the callable\n\"\"\"\n\n# This module is in the public domain.  No warranties.\n\n__author__ = ('Ka-Ping Yee <ping@lfw.org>',\n              'Yury Selivanov <yselivanov@sprymix.com>')\n\nimport abc\nimport dis\nimport collections.abc\nimport enum\nimport importlib.machinery\nimport itertools\nimport linecache\nimport os\nimport re\nimport sys\nimport tokenize\nimport token\nimport types\nimport warnings\nimport functools\nimport builtins\nfrom operator import attrgetter\nfrom collections import namedtuple, OrderedDict\n\n# Create constants for the compiler flags in Include/code.h\n# We try to get them from dis to avoid duplication\nmod_dict = globals()\nfor k, v in dis.COMPILER_FLAG_NAMES.items():\n    mod_dict[\"CO_\" + v] = k\n\n# See Include/object.h\nTPFLAGS_IS_ABSTRACT = 1 << 20\n\n# ----------------------------------------------------------- type-checking\ndef ismodule(object):\n    \"\"\"Return true if the object is a module.\n\n    Module objects provide these attributes:\n        __cached__      pathname to byte compiled file\n        __doc__         documentation string\n        __file__        filename (missing for built-in modules)\"\"\"\n    return isinstance(object, types.ModuleType)\n\ndef isclass(object):\n    \"\"\"Return true if the object is a class.\n\n    Class objects provide these attributes:\n        __doc__         documentation string\n        __module__      name of module in which this class was defined\"\"\"\n    return isinstance(object, type)\n\ndef ismethod(object):\n    \"\"\"Return true if the object is an instance method.\n\n    Instance method objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this method was defined\n        __func__        function object containing implementation of method\n        __self__        instance to which this method is bound\"\"\"\n    return isinstance(object, types.MethodType)\n\ndef ismethoddescriptor(object):\n    \"\"\"Return true if the object is a method descriptor.\n\n    But not if ismethod() or isclass() or isfunction() are true.\n\n    This is new in Python 2.2, and, for example, is true of int.__add__.\n    An object passing this test has a __get__ attribute but not a __set__\n    attribute, but beyond that the set of attributes varies.  __name__ is\n    usually sensible, and __doc__ often is.\n\n    Methods implemented via descriptors that also pass one of the other\n    tests return false from the ismethoddescriptor() test, simply because\n    the other tests promise more -- you can, e.g., count on having the\n    __func__ attribute (etc) when an object passes ismethod().\"\"\"\n    if isclass(object) or ismethod(object) or isfunction(object):\n        # mutual exclusion\n        return False\n    tp = type(object)\n    return hasattr(tp, \"__get__\") and not hasattr(tp, \"__set__\")\n\ndef isdatadescriptor(object):\n    \"\"\"Return true if the object is a data descriptor.\n\n    Data descriptors have both a __get__ and a __set__ attribute.  Examples are\n    properties (defined in Python) and getsets and members (defined in C).\n    Typically, data descriptors will also have __name__ and __doc__ attributes\n    (properties, getsets, and members have both of these attributes), but this\n    is not guaranteed.\"\"\"\n    if isclass(object) or ismethod(object) or isfunction(object):\n        # mutual exclusion\n        return False\n    tp = type(object)\n    return hasattr(tp, \"__set__\") and hasattr(tp, \"__get__\")\n\nif hasattr(types, 'MemberDescriptorType'):\n    # CPython and equivalent\n    def ismemberdescriptor(object):\n        \"\"\"Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.\"\"\"\n        return isinstance(object, types.MemberDescriptorType)\nelse:\n    # Other implementations\n    def ismemberdescriptor(object):\n        \"\"\"Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.\"\"\"\n        return False\n\nif hasattr(types, 'GetSetDescriptorType'):\n    # CPython and equivalent\n    def isgetsetdescriptor(object):\n        \"\"\"Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.\"\"\"\n        return isinstance(object, types.GetSetDescriptorType)\nelse:\n    # Other implementations\n    def isgetsetdescriptor(object):\n        \"\"\"Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.\"\"\"\n        return False\n\ndef isfunction(object):\n    \"\"\"Return true if the object is a user-defined function.\n\n    Function objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this function was defined\n        __code__        code object containing compiled function bytecode\n        __defaults__    tuple of any default values for arguments\n        __globals__     global namespace in which this function was defined\n        __annotations__ dict of parameter annotations\n        __kwdefaults__  dict of keyword only parameters with defaults\"\"\"\n    return isinstance(object, types.FunctionType)\n\ndef isgeneratorfunction(object):\n    \"\"\"Return true if the object is a user-defined generator function.\n\n    Generator function objects provide the same attributes as functions.\n    See help(isfunction) for a list of attributes.\"\"\"\n    return bool((isfunction(object) or ismethod(object)) and\n                object.__code__.co_flags & CO_GENERATOR)\n\ndef iscoroutinefunction(object):\n    \"\"\"Return true if the object is a coroutine function.\n\n    Coroutine functions are defined with \"async def\" syntax.\n    \"\"\"\n    return bool((isfunction(object) or ismethod(object)) and\n                object.__code__.co_flags & CO_COROUTINE)\n\ndef isasyncgenfunction(object):\n    \"\"\"Return true if the object is an asynchronous generator function.\n\n    Asynchronous generator functions are defined with \"async def\"\n    syntax and have \"yield\" expressions in their body.\n    \"\"\"\n    return bool((isfunction(object) or ismethod(object)) and\n                object.__code__.co_flags & CO_ASYNC_GENERATOR)\n\ndef isasyncgen(object):\n    \"\"\"Return true if the object is an asynchronous generator.\"\"\"\n    return isinstance(object, types.AsyncGeneratorType)\n\ndef isgenerator(object):\n    \"\"\"Return true if the object is a generator.\n\n    Generator objects provide these attributes:\n        __iter__        defined to support iteration over container\n        close           raises a new GeneratorExit exception inside the\n                        generator to terminate the iteration\n        gi_code         code object\n        gi_frame        frame object or possibly None once the generator has\n                        been exhausted\n        gi_running      set to 1 when generator is executing, 0 otherwise\n        next            return the next item from the container\n        send            resumes the generator and \"sends\" a value that becomes\n                        the result of the current yield-expression\n        throw           used to raise an exception inside the generator\"\"\"\n    return isinstance(object, types.GeneratorType)\n\ndef iscoroutine(object):\n    \"\"\"Return true if the object is a coroutine.\"\"\"\n    return isinstance(object, types.CoroutineType)\n\ndef isawaitable(object):\n    \"\"\"Return true if object can be passed to an ``await`` expression.\"\"\"\n    return (isinstance(object, types.CoroutineType) or\n            isinstance(object, types.GeneratorType) and\n                bool(object.gi_code.co_flags & CO_ITERABLE_COROUTINE) or\n            isinstance(object, collections.abc.Awaitable))\n\ndef istraceback(object):\n    \"\"\"Return true if the object is a traceback.\n\n    Traceback objects provide these attributes:\n        tb_frame        frame object at this level\n        tb_lasti        index of last attempted instruction in bytecode\n        tb_lineno       current line number in Python source code\n        tb_next         next inner traceback object (called by this level)\"\"\"\n    return isinstance(object, types.TracebackType)\n\ndef isframe(object):\n    \"\"\"Return true if the object is a frame object.\n\n    Frame objects provide these attributes:\n        f_back          next outer frame object (this frame's caller)\n        f_builtins      built-in namespace seen by this frame\n        f_code          code object being executed in this frame\n        f_globals       global namespace seen by this frame\n        f_lasti         index of last attempted instruction in bytecode\n        f_lineno        current line number in Python source code\n        f_locals        local namespace seen by this frame\n        f_trace         tracing function for this frame, or None\"\"\"\n    return isinstance(object, types.FrameType)\n\ndef iscode(object):\n    \"\"\"Return true if the object is a code object.\n\n    Code objects provide these attributes:\n        co_argcount         number of arguments (not including *, ** args\n                            or keyword only arguments)\n        co_code             string of raw compiled bytecode\n        co_cellvars         tuple of names of cell variables\n        co_consts           tuple of constants used in the bytecode\n        co_filename         name of file in which this code object was created\n        co_firstlineno      number of first line in Python source code\n        co_flags            bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg\n                            | 16=nested | 32=generator | 64=nofree | 128=coroutine\n                            | 256=iterable_coroutine | 512=async_generator\n        co_freevars         tuple of names of free variables\n        co_kwonlyargcount   number of keyword only arguments (not including ** arg)\n        co_lnotab           encoded mapping of line numbers to bytecode indices\n        co_name             name with which this code object was defined\n        co_names            tuple of names of local variables\n        co_nlocals          number of local variables\n        co_stacksize        virtual machine stack space required\n        co_varnames         tuple of names of arguments and local variables\"\"\"\n    return isinstance(object, types.CodeType)\n\ndef isbuiltin(object):\n    \"\"\"Return true if the object is a built-in function or method.\n\n    Built-in functions and methods provide these attributes:\n        __doc__         documentation string\n        __name__        original name of this function or method\n        __self__        instance to which a method is bound, or None\"\"\"\n    return isinstance(object, types.BuiltinFunctionType)\n\ndef isroutine(object):\n    \"\"\"Return true if the object is any kind of function or method.\"\"\"\n    return (isbuiltin(object)\n            or isfunction(object)\n            or ismethod(object)\n            or ismethoddescriptor(object))\n\ndef isabstract(object):\n    \"\"\"Return true if the object is an abstract base class (ABC).\"\"\"\n    if not isinstance(object, type):\n        return False\n    if object.__flags__ & TPFLAGS_IS_ABSTRACT:\n        return True\n    if not issubclass(type(object), abc.ABCMeta):\n        return False\n    if hasattr(object, '__abstractmethods__'):\n        # It looks like ABCMeta.__new__ has finished running;\n        # TPFLAGS_IS_ABSTRACT should have been accurate.\n        return False\n    # It looks like ABCMeta.__new__ has not finished running yet; we're\n    # probably in __init_subclass__. We'll look for abstractmethods manually.\n    for name, value in object.__dict__.items():\n        if getattr(value, \"__isabstractmethod__\", False):\n            return True\n    for base in object.__bases__:\n        for name in getattr(base, \"__abstractmethods__\", ()):\n            value = getattr(object, name, None)\n            if getattr(value, \"__isabstractmethod__\", False):\n                return True\n    return False\n\ndef getmembers(object, predicate=None):\n    \"\"\"Return all members of an object as (name, value) pairs sorted by name.\n    Optionally, only return members that satisfy a given predicate.\"\"\"\n    if isclass(object):\n        mro = (object,) + getmro(object)\n    else:\n        mro = ()\n    results = []\n    processed = set()\n    names = dir(object)\n    # :dd any DynamicClassAttributes to the list of names if object is a class;\n    # this may result in duplicate entries if, for example, a virtual\n    # attribute with the same name as a DynamicClassAttribute exists\n    try:\n        for base in object.__bases__:\n            for k, v in base.__dict__.items():\n                if isinstance(v, types.DynamicClassAttribute):\n                    names.append(k)\n    except AttributeError:\n        pass\n    for key in names:\n        # First try to get the value via getattr.  Some descriptors don't\n        # like calling their __get__ (see bug #1785), so fall back to\n        # looking in the __dict__.\n        try:\n            value = getattr(object, key)\n            # handle the duplicate key\n            if key in processed:\n                raise AttributeError\n        except AttributeError:\n            for base in mro:\n                if key in base.__dict__:\n                    value = base.__dict__[key]\n                    break\n            else:\n                # could be a (currently) missing slot member, or a buggy\n                # __dir__; discard and move on\n                continue\n        if not predicate or predicate(value):\n            results.append((key, value))\n        processed.add(key)\n    results.sort(key=lambda pair: pair[0])\n    return results\n\nAttribute = namedtuple('Attribute', 'name kind defining_class object')\n\ndef classify_class_attrs(cls):\n    \"\"\"Return list of attribute-descriptor tuples.\n\n    For each name in dir(cls), the return list contains a 4-tuple\n    with these elements:\n\n        0. The name (a string).\n\n        1. The kind of attribute this is, one of these strings:\n               'class method'    created via classmethod()\n               'static method'   created via staticmethod()\n               'property'        created via property()\n               'method'          any other flavor of method or descriptor\n               'data'            not a method\n\n        2. The class which defined this attribute (a class).\n\n        3. The object as obtained by calling getattr; if this fails, or if the\n           resulting object does not live anywhere in the class' mro (including\n           metaclasses) then the object is looked up in the defining class's\n           dict (found by walking the mro).\n\n    If one of the items in dir(cls) is stored in the metaclass it will now\n    be discovered and not have None be listed as the class in which it was\n    defined.  Any items whose home class cannot be discovered are skipped.\n    \"\"\"\n\n    mro = getmro(cls)\n    metamro = getmro(type(cls)) # for attributes stored in the metaclass\n    metamro = tuple(cls for cls in metamro if cls not in (type, object))\n    class_bases = (cls,) + mro\n    all_bases = class_bases + metamro\n    names = dir(cls)\n    # :dd any DynamicClassAttributes to the list of names;\n    # this may result in duplicate entries if, for example, a virtual\n    # attribute with the same name as a DynamicClassAttribute exists.\n    for base in mro:\n        for k, v in base.__dict__.items():\n            if isinstance(v, types.DynamicClassAttribute):\n                names.append(k)\n    result = []\n    processed = set()\n\n    for name in names:\n        # Get the object associated with the name, and where it was defined.\n        # Normal objects will be looked up with both getattr and directly in\n        # its class' dict (in case getattr fails [bug #1785], and also to look\n        # for a docstring).\n        # For DynamicClassAttributes on the second pass we only look in the\n        # class's dict.\n        #\n        # Getting an obj from the __dict__ sometimes reveals more than\n        # using getattr.  Static and class methods are dramatic examples.\n        homecls = None\n        get_obj = None\n        dict_obj = None\n        if name not in processed:\n            try:\n                if name == '__dict__':\n                    raise Exception(\"__dict__ is special, don't want the proxy\")\n                get_obj = getattr(cls, name)\n            except Exception as exc:\n                pass\n            else:\n                homecls = getattr(get_obj, \"__objclass__\", homecls)\n                if homecls not in class_bases:\n                    # if the resulting object does not live somewhere in the\n                    # mro, drop it and search the mro manually\n                    homecls = None\n                    last_cls = None\n                    # first look in the classes\n                    for srch_cls in class_bases:\n                        srch_obj = getattr(srch_cls, name, None)\n                        if srch_obj is get_obj:\n                            last_cls = srch_cls\n                    # then check the metaclasses\n                    for srch_cls in metamro:\n                        try:\n                            srch_obj = srch_cls.__getattr__(cls, name)\n                        except AttributeError:\n                            continue\n                        if srch_obj is get_obj:\n                            last_cls = srch_cls\n                    if last_cls is not None:\n                        homecls = last_cls\n        for base in all_bases:\n            if name in base.__dict__:\n                dict_obj = base.__dict__[name]\n                if homecls not in metamro:\n                    homecls = base\n                break\n        if homecls is None:\n            # unable to locate the attribute anywhere, most likely due to\n            # buggy custom __dir__; discard and move on\n            continue\n        obj = get_obj if get_obj is not None else dict_obj\n        # Classify the object or its descriptor.\n        if isinstance(dict_obj, (staticmethod, types.BuiltinMethodType)):\n            kind = \"static method\"\n            obj = dict_obj\n        elif isinstance(dict_obj, (classmethod, types.ClassMethodDescriptorType)):\n            kind = \"class method\"\n            obj = dict_obj\n        elif isinstance(dict_obj, property):\n            kind = \"property\"\n            obj = dict_obj\n        elif isroutine(obj):\n            kind = \"method\"\n        else:\n            kind = \"data\"\n        result.append(Attribute(name, kind, homecls, obj))\n        processed.add(name)\n    return result\n\n# ----------------------------------------------------------- class helpers\n\ndef getmro(cls):\n    \"Return tuple of base classes (including cls) in method resolution order.\"\n    return cls.__mro__\n\n# -------------------------------------------------------- function helpers\n\ndef unwrap(func, *, stop=None):\n    \"\"\"Get the object wrapped by *func*.\n\n   Follows the chain of :attr:`__wrapped__` attributes returning the last\n   object in the chain.\n\n   *stop* is an optional callback accepting an object in the wrapper chain\n   as its sole argument that allows the unwrapping to be terminated early if\n   the callback returns a true value. If the callback never returns a true\n   value, the last object in the chain is returned as usual. For example,\n   :func:`signature` uses this to stop unwrapping if any object in the\n   chain has a ``__signature__`` attribute defined.\n\n   :exc:`ValueError` is raised if a cycle is encountered.\n\n    \"\"\"\n    if stop is None:\n        def _is_wrapper(f):\n            return hasattr(f, '__wrapped__')\n    else:\n        def _is_wrapper(f):\n            return hasattr(f, '__wrapped__') and not stop(f)\n    f = func  # remember the original func for error reporting\n    # Memoise by id to tolerate non-hashable objects, but store objects to\n    # ensure they aren't destroyed, which would allow their IDs to be reused.\n    memo = {id(f): f}\n    recursion_limit = sys.getrecursionlimit()\n    while _is_wrapper(func):\n        func = func.__wrapped__\n        id_func = id(func)\n        if (id_func in memo) or (len(memo) >= recursion_limit):\n            raise ValueError('wrapper loop when unwrapping {!r}'.format(f))\n        memo[id_func] = func\n    return func\n\n# -------------------------------------------------- source code extraction\ndef indentsize(line):\n    \"\"\"Return the indent size, in spaces, at the start of a line of text.\"\"\"\n    expline = line.expandtabs()\n    return len(expline) - len(expline.lstrip())\n\ndef _findclass(func):\n    cls = sys.modules.get(func.__module__)\n    if cls is None:\n        return None\n    for name in func.__qualname__.split('.')[:-1]:\n        cls = getattr(cls, name)\n    if not isclass(cls):\n        return None\n    return cls\n\ndef _finddoc(obj):\n    if isclass(obj):\n        for base in obj.__mro__:\n            if base is not object:\n                try:\n                    doc = base.__doc__\n                except AttributeError:\n                    continue\n                if doc is not None:\n                    return doc\n        return None\n\n    if ismethod(obj):\n        name = obj.__func__.__name__\n        self = obj.__self__\n        if (isclass(self) and\n            getattr(getattr(self, name, None), '__func__') is obj.__func__):\n            # classmethod\n            cls = self\n        else:\n            cls = self.__class__\n    elif isfunction(obj):\n        name = obj.__name__\n        cls = _findclass(obj)\n        if cls is None or getattr(cls, name) is not obj:\n            return None\n    elif isbuiltin(obj):\n        name = obj.__name__\n        self = obj.__self__\n        if (isclass(self) and\n            self.__qualname__ + '.' + name == obj.__qualname__):\n            # classmethod\n            cls = self\n        else:\n            cls = self.__class__\n    # Should be tested before isdatadescriptor().\n    elif isinstance(obj, property):\n        func = obj.fget\n        name = func.__name__\n        cls = _findclass(func)\n        if cls is None or getattr(cls, name) is not obj:\n            return None\n    elif ismethoddescriptor(obj) or isdatadescriptor(obj):\n        name = obj.__name__\n        cls = obj.__objclass__\n        if getattr(cls, name) is not obj:\n            return None\n    else:\n        return None\n\n    for base in cls.__mro__:\n        try:\n            doc = getattr(base, name).__doc__\n        except AttributeError:\n            continue\n        if doc is not None:\n            return doc\n    return None\n\ndef getdoc(object):\n    \"\"\"Get the documentation string for an object.\n\n    All tabs are expanded to spaces.  To clean up docstrings that are\n    indented to line up with blocks of code, any whitespace than can be\n    uniformly removed from the second line onwards is removed.\"\"\"\n    try:\n        doc = object.__doc__\n    except AttributeError:\n        return None\n    if doc is None:\n        try:\n            doc = _finddoc(object)\n        except (AttributeError, TypeError):\n            return None\n    if not isinstance(doc, str):\n        return None\n    return cleandoc(doc)\n\ndef cleandoc(doc):\n    \"\"\"Clean up indentation from docstrings.\n\n    Any whitespace that can be uniformly removed from the second line\n    onwards is removed.\"\"\"\n    try:\n        lines = doc.expandtabs().split('\\n')\n    except UnicodeError:\n        return None\n    else:\n        # Find minimum indentation of any non-blank lines after first line.\n        margin = sys.maxsize\n        for line in lines[1:]:\n            content = len(line.lstrip())\n            if content:\n                indent = len(line) - content\n                margin = min(margin, indent)\n        # Remove indentation.\n        if lines:\n            lines[0] = lines[0].lstrip()\n        if margin < sys.maxsize:\n            for i in range(1, len(lines)): lines[i] = lines[i][margin:]\n        # Remove any trailing or leading blank lines.\n        while lines and not lines[-1]:\n            lines.pop()\n        while lines and not lines[0]:\n            lines.pop(0)\n        return '\\n'.join(lines)\n\ndef getfile(object):\n    \"\"\"Work out which source or compiled file an object was defined in.\"\"\"\n    if ismodule(object):\n        if getattr(object, '__file__', None):\n            return object.__file__\n        raise TypeError('{!r} is a built-in module'.format(object))\n    if isclass(object):\n        if hasattr(object, '__module__'):\n            module = sys.modules.get(object.__module__)\n            if getattr(module, '__file__', None):\n                return module.__file__\n        raise TypeError('{!r} is a built-in class'.format(object))\n    if ismethod(object):\n        object = object.__func__\n    if isfunction(object):\n        object = object.__code__\n    if istraceback(object):\n        object = object.tb_frame\n    if isframe(object):\n        object = object.f_code\n    if iscode(object):\n        return object.co_filename\n    raise TypeError('module, class, method, function, traceback, frame, or '\n                    'code object was expected, got {}'.format(\n                    type(object).__name__))\n\ndef getmodulename(path):\n    \"\"\"Return the module name for a given file, or None.\"\"\"\n    fname = os.path.basename(path)\n    # Check for paths that look like an actual module file\n    suffixes = [(-len(suffix), suffix)\n                    for suffix in importlib.machinery.all_suffixes()]\n    suffixes.sort() # try longest suffixes first, in case they overlap\n    for neglen, suffix in suffixes:\n        if fname.endswith(suffix):\n            return fname[:neglen]\n    return None\n\ndef getsourcefile(object):\n    \"\"\"Return the filename that can be used to locate an object's source.\n    Return None if no way can be identified to get the source.\n    \"\"\"\n    filename = getfile(object)\n    all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\n    all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\n    if any(filename.endswith(s) for s in all_bytecode_suffixes):\n        filename = (os.path.splitext(filename)[0] +\n                    importlib.machinery.SOURCE_SUFFIXES[0])\n    elif any(filename.endswith(s) for s in\n                 importlib.machinery.EXTENSION_SUFFIXES):\n        return None\n    if os.path.exists(filename):\n        return filename\n    # only return a non-existent filename if the module has a PEP 302 loader\n    if getattr(getmodule(object, filename), '__loader__', None) is not None:\n        return filename\n    # or it is in the linecache\n    if filename in linecache.cache:\n        return filename\n\ndef getabsfile(object, _filename=None):\n    \"\"\"Return an absolute path to the source or compiled file for an object.\n\n    The idea is for each object to have a unique origin, so this routine\n    normalizes the result as much as possible.\"\"\"\n    if _filename is None:\n        _filename = getsourcefile(object) or getfile(object)\n    return os.path.normcase(os.path.abspath(_filename))\n\nmodulesbyfile = {}\n_filesbymodname = {}\n\ndef getmodule(object, _filename=None):\n    \"\"\"Return the module an object was defined in, or None if not found.\"\"\"\n    if ismodule(object):\n        return object\n    if hasattr(object, '__module__'):\n        return sys.modules.get(object.__module__)\n    # Try the filename to modulename cache\n    if _filename is not None and _filename in modulesbyfile:\n        return sys.modules.get(modulesbyfile[_filename])\n    # Try the cache again with the absolute file name\n    try:\n        file = getabsfile(object, _filename)\n    except TypeError:\n        return None\n    if file in modulesbyfile:\n        return sys.modules.get(modulesbyfile[file])\n    # Update the filename to module name cache and check yet again\n    # Copy sys.modules in order to cope with changes while iterating\n    for modname, module in list(sys.modules.items()):\n        if ismodule(module) and hasattr(module, '__file__'):\n            f = module.__file__\n            if f == _filesbymodname.get(modname, None):\n                # Have already mapped this module, so skip it\n                continue\n            _filesbymodname[modname] = f\n            f = getabsfile(module)\n            # Always map to the name the module knows itself by\n            modulesbyfile[f] = modulesbyfile[\n                os.path.realpath(f)] = module.__name__\n    if file in modulesbyfile:\n        return sys.modules.get(modulesbyfile[file])\n    # Check the main module\n    main = sys.modules['__main__']\n    if not hasattr(object, '__name__'):\n        return None\n    if hasattr(main, object.__name__):\n        mainobject = getattr(main, object.__name__)\n        if mainobject is object:\n            return main\n    # Check builtins\n    builtin = sys.modules['builtins']\n    if hasattr(builtin, object.__name__):\n        builtinobject = getattr(builtin, object.__name__)\n        if builtinobject is object:\n            return builtin\n\ndef findsource(object):\n    \"\"\"Return the entire source file and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of all the lines\n    in the file and the line number indexes a line in that list.  An OSError\n    is raised if the source code cannot be retrieved.\"\"\"\n\n    file = getsourcefile(object)\n    if file:\n        # Invalidate cache if needed.\n        linecache.checkcache(file)\n    else:\n        file = getfile(object)\n        # Allow filenames in form of \"<something>\" to pass through.\n        # `doctest` monkeypatches `linecache` module to enable\n        # inspection, so let `linecache.getlines` to be called.\n        if not (file.startswith('<') and file.endswith('>')):\n            raise OSError('source code not available')\n\n    module = getmodule(object, file)\n    if module:\n        lines = linecache.getlines(file, module.__dict__)\n    else:\n        lines = linecache.getlines(file)\n    if not lines:\n        raise OSError('could not get source code')\n\n    if ismodule(object):\n        return lines, 0\n\n    if isclass(object):\n        name = object.__name__\n        pat = re.compile(r'^(\\s*)class\\s*' + name + r'\\b')\n        # make some effort to find the best matching class definition:\n        # use the one with the least indentation, which is the one\n        # that's most probably not inside a function definition.\n        candidates = []\n        for i in range(len(lines)):\n            match = pat.match(lines[i])\n            if match:\n                # if it's at toplevel, it's already the best one\n                if lines[i][0] == 'c':\n                    return lines, i\n                # else add whitespace to candidate list\n                candidates.append((match.group(1), i))\n        if candidates:\n            # this will sort by whitespace, and by line number,\n            # less whitespace first\n            candidates.sort()\n            return lines, candidates[0][1]\n        else:\n            raise OSError('could not find class definition')\n\n    if ismethod(object):\n        object = object.__func__\n    if isfunction(object):\n        object = object.__code__\n    if istraceback(object):\n        object = object.tb_frame\n    if isframe(object):\n        object = object.f_code\n    if iscode(object):\n        if not hasattr(object, 'co_firstlineno'):\n            raise OSError('could not find function definition')\n        lnum = object.co_firstlineno - 1\n        pat = re.compile(r'^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')\n        while lnum > 0:\n            if pat.match(lines[lnum]): break\n            lnum = lnum - 1\n        return lines, lnum\n    raise OSError('could not find code object')\n\ndef getcomments(object):\n    \"\"\"Get lines of comments immediately preceding an object's source code.\n\n    Returns None when source can't be found.\n    \"\"\"\n    try:\n        lines, lnum = findsource(object)\n    except (OSError, TypeError):\n        return None\n\n    if ismodule(object):\n        # Look for a comment block at the top of the file.\n        start = 0\n        if lines and lines[0][:2] == '#!': start = 1\n        while start < len(lines) and lines[start].strip() in ('', '#'):\n            start = start + 1\n        if start < len(lines) and lines[start][:1] == '#':\n            comments = []\n            end = start\n            while end < len(lines) and lines[end][:1] == '#':\n                comments.append(lines[end].expandtabs())\n                end = end + 1\n            return ''.join(comments)\n\n    # Look for a preceding block of comments at the same indentation.\n    elif lnum > 0:\n        indent = indentsize(lines[lnum])\n        end = lnum - 1\n        if end >= 0 and lines[end].lstrip()[:1] == '#' and \\\n            indentsize(lines[end]) == indent:\n            comments = [lines[end].expandtabs().lstrip()]\n            if end > 0:\n                end = end - 1\n                comment = lines[end].expandtabs().lstrip()\n                while comment[:1] == '#' and indentsize(lines[end]) == indent:\n                    comments[:0] = [comment]\n                    end = end - 1\n                    if end < 0: break\n                    comment = lines[end].expandtabs().lstrip()\n            while comments and comments[0].strip() == '#':\n                comments[:1] = []\n            while comments and comments[-1].strip() == '#':\n                comments[-1:] = []\n            return ''.join(comments)\n\nclass EndOfBlock(Exception): pass\n\nclass BlockFinder:\n    \"\"\"Provide a tokeneater() method to detect the end of a code block.\"\"\"\n    def __init__(self):\n        self.indent = 0\n        self.islambda = False\n        self.started = False\n        self.passline = False\n        self.indecorator = False\n        self.decoratorhasargs = False\n        self.last = 1\n\n    def tokeneater(self, type, token, srowcol, erowcol, line):\n        if not self.started and not self.indecorator:\n            # skip any decorators\n            if token == \"@\":\n                self.indecorator = True\n            # look for the first \"def\", \"class\" or \"lambda\"\n            elif token in (\"def\", \"class\", \"lambda\"):\n                if token == \"lambda\":\n                    self.islambda = True\n                self.started = True\n            self.passline = True    # skip to the end of the line\n        elif token == \"(\":\n            if self.indecorator:\n                self.decoratorhasargs = True\n        elif token == \")\":\n            if self.indecorator:\n                self.indecorator = False\n                self.decoratorhasargs = False\n        elif type == tokenize.NEWLINE:\n            self.passline = False   # stop skipping when a NEWLINE is seen\n            self.last = srowcol[0]\n            if self.islambda:       # lambdas always end at the first NEWLINE\n                raise EndOfBlock\n            # hitting a NEWLINE when in a decorator without args\n            # ends the decorator\n            if self.indecorator and not self.decoratorhasargs:\n                self.indecorator = False\n        elif self.passline:\n            pass\n        elif type == tokenize.INDENT:\n            self.indent = self.indent + 1\n            self.passline = True\n        elif type == tokenize.DEDENT:\n            self.indent = self.indent - 1\n            # the end of matching indent/dedent pairs end a block\n            # (note that this only works for \"def\"/\"class\" blocks,\n            #  not e.g. for \"if: else:\" or \"try: finally:\" blocks)\n            if self.indent <= 0:\n                raise EndOfBlock\n        elif self.indent == 0 and type not in (tokenize.COMMENT, tokenize.NL):\n            # any other token on the same indentation level end the previous\n            # block as well, except the pseudo-tokens COMMENT and NL.\n            raise EndOfBlock\n\ndef getblock(lines):\n    \"\"\"Extract the block of code at the top of the given list of lines.\"\"\"\n    blockfinder = BlockFinder()\n    try:\n        tokens = tokenize.generate_tokens(iter(lines).__next__)\n        for _token in tokens:\n            blockfinder.tokeneater(*_token)\n    except (EndOfBlock, IndentationError):\n        pass\n    return lines[:blockfinder.last]\n\ndef getsourcelines(object):\n    \"\"\"Return a list of source lines and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of the lines\n    corresponding to the object and the line number indicates where in the\n    original source file the first line of code was found.  An OSError is\n    raised if the source code cannot be retrieved.\"\"\"\n    object = unwrap(object)\n    lines, lnum = findsource(object)\n\n    if istraceback(object):\n        object = object.tb_frame\n\n    # for module or frame that corresponds to module, return all source lines\n    if (ismodule(object) or\n        (isframe(object) and object.f_code.co_name == \"<module>\")):\n        return lines, 0\n    else:\n        return getblock(lines[lnum:]), lnum + 1\n\ndef getsource(object):\n    \"\"\"Return the text of the source code for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a single string.  An\n    OSError is raised if the source code cannot be retrieved.\"\"\"\n    lines, lnum = getsourcelines(object)\n    return ''.join(lines)\n\n# --------------------------------------------------- class tree extraction\ndef walktree(classes, children, parent):\n    \"\"\"Recursive helper function for getclasstree().\"\"\"\n    results = []\n    classes.sort(key=attrgetter('__module__', '__name__'))\n    for c in classes:\n        results.append((c, c.__bases__))\n        if c in children:\n            results.append(walktree(children[c], children, c))\n    return results\n\ndef getclasstree(classes, unique=False):\n    \"\"\"Arrange the given list of classes into a hierarchy of nested lists.\n\n    Where a nested list appears, it contains classes derived from the class\n    whose entry immediately precedes the list.  Each entry is a 2-tuple\n    containing a class and a tuple of its base classes.  If the 'unique'\n    argument is true, exactly one entry appears in the returned structure\n    for each class in the given list.  Otherwise, classes using multiple\n    inheritance and their descendants will appear multiple times.\"\"\"\n    children = {}\n    roots = []\n    for c in classes:\n        if c.__bases__:\n            for parent in c.__bases__:\n                if not parent in children:\n                    children[parent] = []\n                if c not in children[parent]:\n                    children[parent].append(c)\n                if unique and parent in classes: break\n        elif c not in roots:\n            roots.append(c)\n    for parent in children:\n        if parent not in classes:\n            roots.append(parent)\n    return walktree(roots, children, None)\n\n# ------------------------------------------------ argument list extraction\nArguments = namedtuple('Arguments', 'args, varargs, varkw')\n\ndef getargs(co):\n    \"\"\"Get information about the arguments accepted by a code object.\n\n    Three things are returned: (args, varargs, varkw), where\n    'args' is the list of argument names. Keyword-only arguments are\n    appended. 'varargs' and 'varkw' are the names of the * and **\n    arguments or None.\"\"\"\n    args, varargs, kwonlyargs, varkw = _getfullargs(co)\n    return Arguments(args + kwonlyargs, varargs, varkw)\n\ndef _getfullargs(co):\n    \"\"\"Get information about the arguments accepted by a code object.\n\n    Four things are returned: (args, varargs, kwonlyargs, varkw), where\n    'args' and 'kwonlyargs' are lists of argument names, and 'varargs'\n    and 'varkw' are the names of the * and ** arguments or None.\"\"\"\n\n    if not iscode(co):\n        raise TypeError('{!r} is not a code object'.format(co))\n\n    nargs = co.co_argcount\n    names = co.co_varnames\n    nkwargs = co.co_kwonlyargcount\n    args = list(names[:nargs])\n    kwonlyargs = list(names[nargs:nargs+nkwargs])\n    step = 0\n\n    nargs += nkwargs\n    varargs = None\n    if co.co_flags & CO_VARARGS:\n        varargs = co.co_varnames[nargs]\n        nargs = nargs + 1\n    varkw = None\n    if co.co_flags & CO_VARKEYWORDS:\n        varkw = co.co_varnames[nargs]\n    return args, varargs, kwonlyargs, varkw\n\n\nArgSpec = namedtuple('ArgSpec', 'args varargs keywords defaults')\n\ndef getargspec(func):\n    \"\"\"Get the names and default values of a function's parameters.\n\n    A tuple of four things is returned: (args, varargs, keywords, defaults).\n    'args' is a list of the argument names, including keyword-only argument names.\n    'varargs' and 'keywords' are the names of the * and ** parameters or None.\n    'defaults' is an n-tuple of the default values of the last n parameters.\n\n    This function is deprecated, as it does not support annotations or\n    keyword-only parameters and will raise ValueError if either is present\n    on the supplied callable.\n\n    For a more structured introspection API, use inspect.signature() instead.\n\n    Alternatively, use getfullargspec() for an API with a similar namedtuple\n    based interface, but full support for annotations and keyword-only\n    parameters.\n\n    Deprecated since Python 3.5, use `inspect.getfullargspec()`.\n    \"\"\"\n    warnings.warn(\"inspect.getargspec() is deprecated since Python 3.0, \"\n                  \"use inspect.signature() or inspect.getfullargspec()\",\n                  DeprecationWarning, stacklevel=2)\n    args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, ann = \\\n        getfullargspec(func)\n    if kwonlyargs or ann:\n        raise ValueError(\"Function has keyword-only parameters or annotations\"\n                         \", use getfullargspec() API which can support them\")\n    return ArgSpec(args, varargs, varkw, defaults)\n\nFullArgSpec = namedtuple('FullArgSpec',\n    'args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations')\n\ndef getfullargspec(func):\n    \"\"\"Get the names and default values of a callable object's parameters.\n\n    A tuple of seven things is returned:\n    (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n    'args' is a list of the parameter names.\n    'varargs' and 'varkw' are the names of the * and ** parameters or None.\n    'defaults' is an n-tuple of the default values of the last n parameters.\n    'kwonlyargs' is a list of keyword-only parameter names.\n    'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n    'annotations' is a dictionary mapping parameter names to annotations.\n\n    Notable differences from inspect.signature():\n      - the \"self\" parameter is always reported, even for bound methods\n      - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n    \"\"\"\n\n    try:\n        # Re: `skip_bound_arg=False`\n        #\n        # There is a notable difference in behaviour between getfullargspec\n        # and Signature: the former always returns 'self' parameter for bound\n        # methods, whereas the Signature always shows the actual calling\n        # signature of the passed object.\n        #\n        # To simulate this behaviour, we \"unbind\" bound methods, to trick\n        # inspect.signature to always return their first parameter (\"self\",\n        # usually)\n\n        # Re: `follow_wrapper_chains=False`\n        #\n        # getfullargspec() historically ignored __wrapped__ attributes,\n        # so we ensure that remains the case in 3.3+\n\n        sig = _signature_from_callable(func,\n                                       follow_wrapper_chains=False,\n                                       skip_bound_arg=False,\n                                       sigcls=Signature)\n    except Exception as ex:\n        # Most of the times 'signature' will raise ValueError.\n        # But, it can also raise AttributeError, and, maybe something\n        # else. So to be fully backwards compatible, we catch all\n        # possible exceptions here, and reraise a TypeError.\n        raise TypeError('unsupported callable') from ex\n\n    args = []\n    varargs = None\n    varkw = None\n    kwonlyargs = []\n    defaults = ()\n    annotations = {}\n    defaults = ()\n    kwdefaults = {}\n\n    if sig.return_annotation is not sig.empty:\n        annotations['return'] = sig.return_annotation\n\n    for param in sig.parameters.values():\n        kind = param.kind\n        name = param.name\n\n        if kind is _POSITIONAL_ONLY:\n            args.append(name)\n        elif kind is _POSITIONAL_OR_KEYWORD:\n            args.append(name)\n            if param.default is not param.empty:\n                defaults += (param.default,)\n        elif kind is _VAR_POSITIONAL:\n            varargs = name\n        elif kind is _KEYWORD_ONLY:\n            kwonlyargs.append(name)\n            if param.default is not param.empty:\n                kwdefaults[name] = param.default\n        elif kind is _VAR_KEYWORD:\n            varkw = name\n\n        if param.annotation is not param.empty:\n            annotations[name] = param.annotation\n\n    if not kwdefaults:\n        # compatibility with 'func.__kwdefaults__'\n        kwdefaults = None\n\n    if not defaults:\n        # compatibility with 'func.__defaults__'\n        defaults = None\n\n    return FullArgSpec(args, varargs, varkw, defaults,\n                       kwonlyargs, kwdefaults, annotations)\n\n\nArgInfo = namedtuple('ArgInfo', 'args varargs keywords locals')\n\ndef getargvalues(frame):\n    \"\"\"Get information about arguments passed into a particular frame.\n\n    A tuple of four things is returned: (args, varargs, varkw, locals).\n    'args' is a list of the argument names.\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'locals' is the locals dictionary of the given frame.\"\"\"\n    args, varargs, varkw = getargs(frame.f_code)\n    return ArgInfo(args, varargs, varkw, frame.f_locals)\n\ndef formatannotation(annotation, base_module=None):\n    if getattr(annotation, '__module__', None) == 'typing':\n        return repr(annotation).replace('typing.', '')\n    if isinstance(annotation, type):\n        if annotation.__module__ in ('builtins', base_module):\n            return annotation.__qualname__\n        return annotation.__module__+'.'+annotation.__qualname__\n    return repr(annotation)\n\ndef formatannotationrelativeto(object):\n    module = getattr(object, '__module__', None)\n    def _formatannotation(annotation):\n        return formatannotation(annotation, module)\n    return _formatannotation\n\ndef formatargspec(args, varargs=None, varkw=None, defaults=None,\n                  kwonlyargs=(), kwonlydefaults={}, annotations={},\n                  formatarg=str,\n                  formatvarargs=lambda name: '*' + name,\n                  formatvarkw=lambda name: '**' + name,\n                  formatvalue=lambda value: '=' + repr(value),\n                  formatreturns=lambda text: ' -> ' + text,\n                  formatannotation=formatannotation):\n    \"\"\"Format an argument spec from the values returned by getfullargspec.\n\n    The first seven arguments are (args, varargs, varkw, defaults,\n    kwonlyargs, kwonlydefaults, annotations).  The other five arguments\n    are the corresponding optional formatting functions that are called to\n    turn names and values into strings.  The last argument is an optional\n    function to format the sequence of arguments.\n\n    Deprecated since Python 3.5: use the `signature` function and `Signature`\n    objects.\n    \"\"\"\n\n    from warnings import warn\n\n    warn(\"`formatargspec` is deprecated since Python 3.5. Use `signature` and \"\n         \"the `Signature` object directly\",\n         DeprecationWarning,\n         stacklevel=2)\n\n    def formatargandannotation(arg):\n        result = formatarg(arg)\n        if arg in annotations:\n            result += ': ' + formatannotation(annotations[arg])\n        return result\n    specs = []\n    if defaults:\n        firstdefault = len(args) - len(defaults)\n    for i, arg in enumerate(args):\n        spec = formatargandannotation(arg)\n        if defaults and i >= firstdefault:\n            spec = spec + formatvalue(defaults[i - firstdefault])\n        specs.append(spec)\n    if varargs is not None:\n        specs.append(formatvarargs(formatargandannotation(varargs)))\n    else:\n        if kwonlyargs:\n            specs.append('*')\n    if kwonlyargs:\n        for kwonlyarg in kwonlyargs:\n            spec = formatargandannotation(kwonlyarg)\n            if kwonlydefaults and kwonlyarg in kwonlydefaults:\n                spec += formatvalue(kwonlydefaults[kwonlyarg])\n            specs.append(spec)\n    if varkw is not None:\n        specs.append(formatvarkw(formatargandannotation(varkw)))\n    result = '(' + ', '.join(specs) + ')'\n    if 'return' in annotations:\n        result += formatreturns(formatannotation(annotations['return']))\n    return result\n\ndef formatargvalues(args, varargs, varkw, locals,\n                    formatarg=str,\n                    formatvarargs=lambda name: '*' + name,\n                    formatvarkw=lambda name: '**' + name,\n                    formatvalue=lambda value: '=' + repr(value)):\n    \"\"\"Format an argument spec from the 4 values returned by getargvalues.\n\n    The first four arguments are (args, varargs, varkw, locals).  The\n    next four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.\"\"\"\n    def convert(name, locals=locals,\n                formatarg=formatarg, formatvalue=formatvalue):\n        return formatarg(name) + formatvalue(locals[name])\n    specs = []\n    for i in range(len(args)):\n        specs.append(convert(args[i]))\n    if varargs:\n        specs.append(formatvarargs(varargs) + formatvalue(locals[varargs]))\n    if varkw:\n        specs.append(formatvarkw(varkw) + formatvalue(locals[varkw]))\n    return '(' + ', '.join(specs) + ')'\n\ndef _missing_arguments(f_name, argnames, pos, values):\n    names = [repr(name) for name in argnames if name not in values]\n    missing = len(names)\n    if missing == 1:\n        s = names[0]\n    elif missing == 2:\n        s = \"{} and {}\".format(*names)\n    else:\n        tail = \", {} and {}\".format(*names[-2:])\n        del names[-2:]\n        s = \", \".join(names) + tail\n    raise TypeError(\"%s() missing %i required %s argument%s: %s\" %\n                    (f_name, missing,\n                      \"positional\" if pos else \"keyword-only\",\n                      \"\" if missing == 1 else \"s\", s))\n\ndef _too_many(f_name, args, kwonly, varargs, defcount, given, values):\n    atleast = len(args) - defcount\n    kwonly_given = len([arg for arg in kwonly if arg in values])\n    if varargs:\n        plural = atleast != 1\n        sig = \"at least %d\" % (atleast,)\n    elif defcount:\n        plural = True\n        sig = \"from %d to %d\" % (atleast, len(args))\n    else:\n        plural = len(args) != 1\n        sig = str(len(args))\n    kwonly_sig = \"\"\n    if kwonly_given:\n        msg = \" positional argument%s (and %d keyword-only argument%s)\"\n        kwonly_sig = (msg % (\"s\" if given != 1 else \"\", kwonly_given,\n                             \"s\" if kwonly_given != 1 else \"\"))\n    raise TypeError(\"%s() takes %s positional argument%s but %d%s %s given\" %\n            (f_name, sig, \"s\" if plural else \"\", given, kwonly_sig,\n             \"was\" if given == 1 and not kwonly_given else \"were\"))\n\ndef getcallargs(*func_and_positional, **named):\n    \"\"\"Get the mapping of arguments to values.\n\n    A dict is returned, with keys the function argument names (including the\n    names of the * and ** arguments, if any), and values the respective bound\n    values from 'positional' and 'named'.\"\"\"\n    func = func_and_positional[0]\n    positional = func_and_positional[1:]\n    spec = getfullargspec(func)\n    args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, ann = spec\n    f_name = func.__name__\n    arg2value = {}\n\n\n    if ismethod(func) and func.__self__ is not None:\n        # implicit 'self' (or 'cls' for classmethods) argument\n        positional = (func.__self__,) + positional\n    num_pos = len(positional)\n    num_args = len(args)\n    num_defaults = len(defaults) if defaults else 0\n\n    n = min(num_pos, num_args)\n    for i in range(n):\n        arg2value[args[i]] = positional[i]\n    if varargs:\n        arg2value[varargs] = tuple(positional[n:])\n    possible_kwargs = set(args + kwonlyargs)\n    if varkw:\n        arg2value[varkw] = {}\n    for kw, value in named.items():\n        if kw not in possible_kwargs:\n            if not varkw:\n                raise TypeError(\"%s() got an unexpected keyword argument %r\" %\n                                (f_name, kw))\n            arg2value[varkw][kw] = value\n            continue\n        if kw in arg2value:\n            raise TypeError(\"%s() got multiple values for argument %r\" %\n                            (f_name, kw))\n        arg2value[kw] = value\n    if num_pos > num_args and not varargs:\n        _too_many(f_name, args, kwonlyargs, varargs, num_defaults,\n                   num_pos, arg2value)\n    if num_pos < num_args:\n        req = args[:num_args - num_defaults]\n        for arg in req:\n            if arg not in arg2value:\n                _missing_arguments(f_name, req, True, arg2value)\n        for i, arg in enumerate(args[num_args - num_defaults:]):\n            if arg not in arg2value:\n                arg2value[arg] = defaults[i]\n    missing = 0\n    for kwarg in kwonlyargs:\n        if kwarg not in arg2value:\n            if kwonlydefaults and kwarg in kwonlydefaults:\n                arg2value[kwarg] = kwonlydefaults[kwarg]\n            else:\n                missing += 1\n    if missing:\n        _missing_arguments(f_name, kwonlyargs, False, arg2value)\n    return arg2value\n\nClosureVars = namedtuple('ClosureVars', 'nonlocals globals builtins unbound')\n\ndef getclosurevars(func):\n    \"\"\"\n    Get the mapping of free variables to their current values.\n\n    Returns a named tuple of dicts mapping the current nonlocal, global\n    and builtin references as seen by the body of the function. A final\n    set of unbound names that could not be resolved is also provided.\n    \"\"\"\n\n    if ismethod(func):\n        func = func.__func__\n\n    if not isfunction(func):\n        raise TypeError(\"{!r} is not a Python function\".format(func))\n\n    code = func.__code__\n    # Nonlocal references are named in co_freevars and resolved\n    # by looking them up in __closure__ by positional index\n    if func.__closure__ is None:\n        nonlocal_vars = {}\n    else:\n        nonlocal_vars = {\n            var : cell.cell_contents\n            for var, cell in zip(code.co_freevars, func.__closure__)\n       }\n\n    # Global and builtin references are named in co_names and resolved\n    # by looking them up in __globals__ or __builtins__\n    global_ns = func.__globals__\n    builtin_ns = global_ns.get(\"__builtins__\", builtins.__dict__)\n    if ismodule(builtin_ns):\n        builtin_ns = builtin_ns.__dict__\n    global_vars = {}\n    builtin_vars = {}\n    unbound_names = set()\n    for name in code.co_names:\n        if name in (\"None\", \"True\", \"False\"):\n            # Because these used to be builtins instead of keywords, they\n            # may still show up as name references. We ignore them.\n            continue\n        try:\n            global_vars[name] = global_ns[name]\n        except KeyError:\n            try:\n                builtin_vars[name] = builtin_ns[name]\n            except KeyError:\n                unbound_names.add(name)\n\n    return ClosureVars(nonlocal_vars, global_vars,\n                       builtin_vars, unbound_names)\n\n# -------------------------------------------------- stack frame extraction\n\nTraceback = namedtuple('Traceback', 'filename lineno function code_context index')\n\ndef getframeinfo(frame, context=1):\n    \"\"\"Get information about a frame or traceback object.\n\n    A tuple of five things is returned: the filename, the line number of\n    the current line, the function name, a list of lines of context from\n    the source code, and the index of the current line within that list.\n    The optional second argument specifies the number of lines of context\n    to return, which are centered around the current line.\"\"\"\n    if istraceback(frame):\n        lineno = frame.tb_lineno\n        frame = frame.tb_frame\n    else:\n        lineno = frame.f_lineno\n    if not isframe(frame):\n        raise TypeError('{!r} is not a frame or traceback object'.format(frame))\n\n    filename = getsourcefile(frame) or getfile(frame)\n    if context > 0:\n        start = lineno - 1 - context//2\n        try:\n            lines, lnum = findsource(frame)\n        except OSError:\n            lines = index = None\n        else:\n            start = max(0, min(start, len(lines) - context))\n            lines = lines[start:start+context]\n            index = lineno - 1 - start\n    else:\n        lines = index = None\n\n    return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\n\ndef getlineno(frame):\n    \"\"\"Get the line number from a frame object, allowing for optimization.\"\"\"\n    # FrameType.f_lineno is now a descriptor that grovels co_lnotab\n    return frame.f_lineno\n\nFrameInfo = namedtuple('FrameInfo', ('frame',) + Traceback._fields)\n\ndef getouterframes(frame, context=1):\n    \"\"\"Get a list of records for a frame and all higher (calling) frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.\"\"\"\n    framelist = []\n    while frame:\n        frameinfo = (frame,) + getframeinfo(frame, context)\n        framelist.append(FrameInfo(*frameinfo))\n        frame = frame.f_back\n    return framelist\n\ndef getinnerframes(tb, context=1):\n    \"\"\"Get a list of records for a traceback's frame and all lower frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.\"\"\"\n    framelist = []\n    while tb:\n        frameinfo = (tb.tb_frame,) + getframeinfo(tb, context)\n        framelist.append(FrameInfo(*frameinfo))\n        tb = tb.tb_next\n    return framelist\n\ndef currentframe():\n    \"\"\"Return the frame of the caller or None if this is not possible.\"\"\"\n    return sys._getframe(1) if hasattr(sys, \"_getframe\") else None\n\ndef stack(context=1):\n    \"\"\"Return a list of records for the stack above the caller's frame.\"\"\"\n    return getouterframes(sys._getframe(1), context)\n\ndef trace(context=1):\n    \"\"\"Return a list of records for the stack below the current exception.\"\"\"\n    return getinnerframes(sys.exc_info()[2], context)\n\n\n# ------------------------------------------------ static version of getattr\n\n_sentinel = object()\n\ndef _static_getmro(klass):\n    return type.__dict__['__mro__'].__get__(klass)\n\ndef _check_instance(obj, attr):\n    instance_dict = {}\n    try:\n        instance_dict = object.__getattribute__(obj, \"__dict__\")\n    except AttributeError:\n        pass\n    return dict.get(instance_dict, attr, _sentinel)\n\n\ndef _check_class(klass, attr):\n    for entry in _static_getmro(klass):\n        if _shadowed_dict(type(entry)) is _sentinel:\n            try:\n                return entry.__dict__[attr]\n            except KeyError:\n                pass\n    return _sentinel\n\ndef _is_type(obj):\n    try:\n        _static_getmro(obj)\n    except TypeError:\n        return False\n    return True\n\ndef _shadowed_dict(klass):\n    dict_attr = type.__dict__[\"__dict__\"]\n    for entry in _static_getmro(klass):\n        try:\n            class_dict = dict_attr.__get__(entry)[\"__dict__\"]\n        except KeyError:\n            pass\n        else:\n            if not (type(class_dict) is types.GetSetDescriptorType and\n                    class_dict.__name__ == \"__dict__\" and\n                    class_dict.__objclass__ is entry):\n                return class_dict\n    return _sentinel\n\ndef getattr_static(obj, attr, default=_sentinel):\n    \"\"\"Retrieve attributes without triggering dynamic lookup via the\n       descriptor protocol,  __getattr__ or __getattribute__.\n\n       Note: this function may not be able to retrieve all attributes\n       that getattr can fetch (like dynamically created attributes)\n       and may find attributes that getattr can't (like descriptors\n       that raise AttributeError). It can also return descriptor objects\n       instead of instance members in some cases. See the\n       documentation for details.\n    \"\"\"\n    instance_result = _sentinel\n    if not _is_type(obj):\n        klass = type(obj)\n        dict_attr = _shadowed_dict(klass)\n        if (dict_attr is _sentinel or\n            type(dict_attr) is types.MemberDescriptorType):\n            instance_result = _check_instance(obj, attr)\n    else:\n        klass = obj\n\n    klass_result = _check_class(klass, attr)\n\n    if instance_result is not _sentinel and klass_result is not _sentinel:\n        if (_check_class(type(klass_result), '__get__') is not _sentinel and\n            _check_class(type(klass_result), '__set__') is not _sentinel):\n            return klass_result\n\n    if instance_result is not _sentinel:\n        return instance_result\n    if klass_result is not _sentinel:\n        return klass_result\n\n    if obj is klass:\n        # for types we check the metaclass too\n        for entry in _static_getmro(type(klass)):\n            if _shadowed_dict(type(entry)) is _sentinel:\n                try:\n                    return entry.__dict__[attr]\n                except KeyError:\n                    pass\n    if default is not _sentinel:\n        return default\n    raise AttributeError(attr)\n\n\n# ------------------------------------------------ generator introspection\n\nGEN_CREATED = 'GEN_CREATED'\nGEN_RUNNING = 'GEN_RUNNING'\nGEN_SUSPENDED = 'GEN_SUSPENDED'\nGEN_CLOSED = 'GEN_CLOSED'\n\ndef getgeneratorstate(generator):\n    \"\"\"Get current state of a generator-iterator.\n\n    Possible states are:\n      GEN_CREATED: Waiting to start execution.\n      GEN_RUNNING: Currently being executed by the interpreter.\n      GEN_SUSPENDED: Currently suspended at a yield expression.\n      GEN_CLOSED: Execution has completed.\n    \"\"\"\n    if generator.gi_running:\n        return GEN_RUNNING\n    if generator.gi_frame is None:\n        return GEN_CLOSED\n    if generator.gi_frame.f_lasti == -1:\n        return GEN_CREATED\n    return GEN_SUSPENDED\n\n\ndef getgeneratorlocals(generator):\n    \"\"\"\n    Get the mapping of generator local variables to their current values.\n\n    A dict is returned, with the keys the local variable names and values the\n    bound values.\"\"\"\n\n    if not isgenerator(generator):\n        raise TypeError(\"{!r} is not a Python generator\".format(generator))\n\n    frame = getattr(generator, \"gi_frame\", None)\n    if frame is not None:\n        return generator.gi_frame.f_locals\n    else:\n        return {}\n\n\n# ------------------------------------------------ coroutine introspection\n\nCORO_CREATED = 'CORO_CREATED'\nCORO_RUNNING = 'CORO_RUNNING'\nCORO_SUSPENDED = 'CORO_SUSPENDED'\nCORO_CLOSED = 'CORO_CLOSED'\n\ndef getcoroutinestate(coroutine):\n    \"\"\"Get current state of a coroutine object.\n\n    Possible states are:\n      CORO_CREATED: Waiting to start execution.\n      CORO_RUNNING: Currently being executed by the interpreter.\n      CORO_SUSPENDED: Currently suspended at an await expression.\n      CORO_CLOSED: Execution has completed.\n    \"\"\"\n    if coroutine.cr_running:\n        return CORO_RUNNING\n    if coroutine.cr_frame is None:\n        return CORO_CLOSED\n    if coroutine.cr_frame.f_lasti == -1:\n        return CORO_CREATED\n    return CORO_SUSPENDED\n\n\ndef getcoroutinelocals(coroutine):\n    \"\"\"\n    Get the mapping of coroutine local variables to their current values.\n\n    A dict is returned, with the keys the local variable names and values the\n    bound values.\"\"\"\n    frame = getattr(coroutine, \"cr_frame\", None)\n    if frame is not None:\n        return frame.f_locals\n    else:\n        return {}\n\n\n###############################################################################\n### Function Signature Object (PEP 362)\n###############################################################################\n\n\n_WrapperDescriptor = type(type.__call__)\n_MethodWrapper = type(all.__call__)\n_ClassMethodWrapper = type(int.__dict__['from_bytes'])\n\n_NonUserDefinedCallables = (_WrapperDescriptor,\n                            _MethodWrapper,\n                            _ClassMethodWrapper,\n                            types.BuiltinFunctionType)\n\n\ndef _signature_get_user_defined_method(cls, method_name):\n    \"\"\"Private helper. Checks if ``cls`` has an attribute\n    named ``method_name`` and returns it only if it is a\n    pure python function.\n    \"\"\"\n    try:\n        meth = getattr(cls, method_name)\n    except AttributeError:\n        return\n    else:\n        if not isinstance(meth, _NonUserDefinedCallables):\n            # Once '__signature__' will be added to 'C'-level\n            # callables, this check won't be necessary\n            return meth\n\n\ndef _signature_get_partial(wrapped_sig, partial, extra_args=()):\n    \"\"\"Private helper to calculate how 'wrapped_sig' signature will\n    look like after applying a 'functools.partial' object (or alike)\n    on it.\n    \"\"\"\n\n    old_params = wrapped_sig.parameters\n    new_params = OrderedDict(old_params.items())\n\n    partial_args = partial.args or ()\n    partial_keywords = partial.keywords or {}\n\n    if extra_args:\n        partial_args = extra_args + partial_args\n\n    try:\n        ba = wrapped_sig.bind_partial(*partial_args, **partial_keywords)\n    except TypeError as ex:\n        msg = 'partial object {!r} has incorrect arguments'.format(partial)\n        raise ValueError(msg) from ex\n\n\n    transform_to_kwonly = False\n    for param_name, param in old_params.items():\n        try:\n            arg_value = ba.arguments[param_name]\n        except KeyError:\n            pass\n        else:\n            if param.kind is _POSITIONAL_ONLY:\n                # If positional-only parameter is bound by partial,\n                # it effectively disappears from the signature\n                new_params.pop(param_name)\n                continue\n\n            if param.kind is _POSITIONAL_OR_KEYWORD:\n                if param_name in partial_keywords:\n                    # This means that this parameter, and all parameters\n                    # after it should be keyword-only (and var-positional\n                    # should be removed). Here's why. Consider the following\n                    # function:\n                    #     foo(a, b, *args, c):\n                    #         pass\n                    #\n                    # \"partial(foo, a='spam')\" will have the following\n                    # signature: \"(*, a='spam', b, c)\". Because attempting\n                    # to call that partial with \"(10, 20)\" arguments will\n                    # raise a TypeError, saying that \"a\" argument received\n                    # multiple values.\n                    transform_to_kwonly = True\n                    # Set the new default value\n                    new_params[param_name] = param.replace(default=arg_value)\n                else:\n                    # was passed as a positional argument\n                    new_params.pop(param.name)\n                    continue\n\n            if param.kind is _KEYWORD_ONLY:\n                # Set the new default value\n                new_params[param_name] = param.replace(default=arg_value)\n\n        if transform_to_kwonly:\n            assert param.kind is not _POSITIONAL_ONLY\n\n            if param.kind is _POSITIONAL_OR_KEYWORD:\n                new_param = new_params[param_name].replace(kind=_KEYWORD_ONLY)\n                new_params[param_name] = new_param\n                new_params.move_to_end(param_name)\n            elif param.kind in (_KEYWORD_ONLY, _VAR_KEYWORD):\n                new_params.move_to_end(param_name)\n            elif param.kind is _VAR_POSITIONAL:\n                new_params.pop(param.name)\n\n    return wrapped_sig.replace(parameters=new_params.values())\n\n\ndef _signature_bound_method(sig):\n    \"\"\"Private helper to transform signatures for unbound\n    functions to bound methods.\n    \"\"\"\n\n    params = tuple(sig.parameters.values())\n\n    if not params or params[0].kind in (_VAR_KEYWORD, _KEYWORD_ONLY):\n        raise ValueError('invalid method signature')\n\n    kind = params[0].kind\n    if kind in (_POSITIONAL_OR_KEYWORD, _POSITIONAL_ONLY):\n        # Drop first parameter:\n        # '(p1, p2[, ...])' -> '(p2[, ...])'\n        params = params[1:]\n    else:\n        if kind is not _VAR_POSITIONAL:\n            # Unless we add a new parameter type we never\n            # get here\n            raise ValueError('invalid argument type')\n        # It's a var-positional parameter.\n        # Do nothing. '(*args[, ...])' -> '(*args[, ...])'\n\n    return sig.replace(parameters=params)\n\n\ndef _signature_is_builtin(obj):\n    \"\"\"Private helper to test if `obj` is a callable that might\n    support Argument Clinic's __text_signature__ protocol.\n    \"\"\"\n    return (isbuiltin(obj) or\n            ismethoddescriptor(obj) or\n            isinstance(obj, _NonUserDefinedCallables) or\n            # Can't test 'isinstance(type)' here, as it would\n            # also be True for regular python classes\n            obj in (type, object))\n\n\ndef _signature_is_functionlike(obj):\n    \"\"\"Private helper to test if `obj` is a duck type of FunctionType.\n    A good example of such objects are functions compiled with\n    Cython, which have all attributes that a pure Python function\n    would have, but have their code statically compiled.\n    \"\"\"\n\n    if not callable(obj) or isclass(obj):\n        # All function-like objects are obviously callables,\n        # and not classes.\n        return False\n\n    name = getattr(obj, '__name__', None)\n    code = getattr(obj, '__code__', None)\n    defaults = getattr(obj, '__defaults__', _void) # Important to use _void ...\n    kwdefaults = getattr(obj, '__kwdefaults__', _void) # ... and not None here\n    annotations = getattr(obj, '__annotations__', None)\n\n    return (isinstance(code, types.CodeType) and\n            isinstance(name, str) and\n            (defaults is None or isinstance(defaults, tuple)) and\n            (kwdefaults is None or isinstance(kwdefaults, dict)) and\n            isinstance(annotations, dict))\n\n\ndef _signature_get_bound_param(spec):\n    \"\"\" Private helper to get first parameter name from a\n    __text_signature__ of a builtin method, which should\n    be in the following format: '($param1, ...)'.\n    Assumptions are that the first argument won't have\n    a default value or an annotation.\n    \"\"\"\n\n    assert spec.startswith('($')\n\n    pos = spec.find(',')\n    if pos == -1:\n        pos = spec.find(')')\n\n    cpos = spec.find(':')\n    assert cpos == -1 or cpos > pos\n\n    cpos = spec.find('=')\n    assert cpos == -1 or cpos > pos\n\n    return spec[2:pos]\n\n\ndef _signature_strip_non_python_syntax(signature):\n    \"\"\"\n    Private helper function. Takes a signature in Argument Clinic's\n    extended signature format.\n\n    Returns a tuple of three things:\n      * that signature re-rendered in standard Python syntax,\n      * the index of the \"self\" parameter (generally 0), or None if\n        the function does not have a \"self\" parameter, and\n      * the index of the last \"positional only\" parameter,\n        or None if the signature has no positional-only parameters.\n    \"\"\"\n\n    if not signature:\n        return signature, None, None\n\n    self_parameter = None\n    last_positional_only = None\n\n    lines = [l.encode('ascii') for l in signature.split('\\n')]\n    generator = iter(lines).__next__\n    token_stream = tokenize.tokenize(generator)\n\n    delayed_comma = False\n    skip_next_comma = False\n    text = []\n    add = text.append\n\n    current_parameter = 0\n    OP = token.OP\n    ERRORTOKEN = token.ERRORTOKEN\n\n    # token stream always starts with ENCODING token, skip it\n    t = next(token_stream)\n    assert t.type == tokenize.ENCODING\n\n    for t in token_stream:\n        type, string = t.type, t.string\n\n        if type == OP:\n            if string == ',':\n                if skip_next_comma:\n                    skip_next_comma = False\n                else:\n                    assert not delayed_comma\n                    delayed_comma = True\n                    current_parameter += 1\n                continue\n\n            if string == '/':\n                assert not skip_next_comma\n                assert last_positional_only is None\n                skip_next_comma = True\n                last_positional_only = current_parameter - 1\n                continue\n\n        if (type == ERRORTOKEN) and (string == '$'):\n            assert self_parameter is None\n            self_parameter = current_parameter\n            continue\n\n        if delayed_comma:\n            delayed_comma = False\n            if not ((type == OP) and (string == ')')):\n                add(', ')\n        add(string)\n        if (string == ','):\n            add(' ')\n    clean_signature = ''.join(text)\n    return clean_signature, self_parameter, last_positional_only\n\n\ndef _signature_fromstr(cls, obj, s, skip_bound_arg=True):\n    \"\"\"Private helper to parse content of '__text_signature__'\n    and return a Signature based on it.\n    \"\"\"\n    # Lazy import ast because it's relatively heavy and\n    # it's not used for other than this function.\n    import ast\n\n    Parameter = cls._parameter_cls\n\n    clean_signature, self_parameter, last_positional_only = \\\n        _signature_strip_non_python_syntax(s)\n\n    program = \"def foo\" + clean_signature + \": pass\"\n\n    try:\n        module = ast.parse(program)\n    except SyntaxError:\n        module = None\n\n    if not isinstance(module, ast.Module):\n        raise ValueError(\"{!r} builtin has invalid signature\".format(obj))\n\n    f = module.body[0]\n\n    parameters = []\n    empty = Parameter.empty\n    invalid = object()\n\n    module = None\n    module_dict = {}\n    module_name = getattr(obj, '__module__', None)\n    if module_name:\n        module = sys.modules.get(module_name, None)\n        if module:\n            module_dict = module.__dict__\n    sys_module_dict = sys.modules.copy()\n\n    def parse_name(node):\n        assert isinstance(node, ast.arg)\n        if node.annotation != None:\n            raise ValueError(\"Annotations are not currently supported\")\n        return node.arg\n\n    def wrap_value(s):\n        try:\n            value = eval(s, module_dict)\n        except NameError:\n            try:\n                value = eval(s, sys_module_dict)\n            except NameError:\n                raise RuntimeError()\n\n        if isinstance(value, str):\n            return ast.Str(value)\n        if isinstance(value, (int, float)):\n            return ast.Num(value)\n        if isinstance(value, bytes):\n            return ast.Bytes(value)\n        if value in (True, False, None):\n            return ast.NameConstant(value)\n        raise RuntimeError()\n\n    class RewriteSymbolics(ast.NodeTransformer):\n        def visit_Attribute(self, node):\n            a = []\n            n = node\n            while isinstance(n, ast.Attribute):\n                a.append(n.attr)\n                n = n.value\n            if not isinstance(n, ast.Name):\n                raise RuntimeError()\n            a.append(n.id)\n            value = \".\".join(reversed(a))\n            return wrap_value(value)\n\n        def visit_Name(self, node):\n            if not isinstance(node.ctx, ast.Load):\n                raise ValueError()\n            return wrap_value(node.id)\n\n    def p(name_node, default_node, default=empty):\n        name = parse_name(name_node)\n        if name is invalid:\n            return None\n        if default_node and default_node is not _empty:\n            try:\n                default_node = RewriteSymbolics().visit(default_node)\n                o = ast.literal_eval(default_node)\n            except ValueError:\n                o = invalid\n            if o is invalid:\n                return None\n            default = o if o is not invalid else default\n        parameters.append(Parameter(name, kind, default=default, annotation=empty))\n\n    # non-keyword-only parameters\n    args = reversed(f.args.args)\n    defaults = reversed(f.args.defaults)\n    iter = itertools.zip_longest(args, defaults, fillvalue=None)\n    if last_positional_only is not None:\n        kind = Parameter.POSITIONAL_ONLY\n    else:\n        kind = Parameter.POSITIONAL_OR_KEYWORD\n    for i, (name, default) in enumerate(reversed(list(iter))):\n        p(name, default)\n        if i == last_positional_only:\n            kind = Parameter.POSITIONAL_OR_KEYWORD\n\n    # *args\n    if f.args.vararg:\n        kind = Parameter.VAR_POSITIONAL\n        p(f.args.vararg, empty)\n\n    # keyword-only arguments\n    kind = Parameter.KEYWORD_ONLY\n    for name, default in zip(f.args.kwonlyargs, f.args.kw_defaults):\n        p(name, default)\n\n    # **kwargs\n    if f.args.kwarg:\n        kind = Parameter.VAR_KEYWORD\n        p(f.args.kwarg, empty)\n\n    if self_parameter is not None:\n        # Possibly strip the bound argument:\n        #    - We *always* strip first bound argument if\n        #      it is a module.\n        #    - We don't strip first bound argument if\n        #      skip_bound_arg is False.\n        assert parameters\n        _self = getattr(obj, '__self__', None)\n        self_isbound = _self is not None\n        self_ismodule = ismodule(_self)\n        if self_isbound and (self_ismodule or skip_bound_arg):\n            parameters.pop(0)\n        else:\n            # for builtins, self parameter is always positional-only!\n            p = parameters[0].replace(kind=Parameter.POSITIONAL_ONLY)\n            parameters[0] = p\n\n    return cls(parameters, return_annotation=cls.empty)\n\n\ndef _signature_from_builtin(cls, func, skip_bound_arg=True):\n    \"\"\"Private helper function to get signature for\n    builtin callables.\n    \"\"\"\n\n    if not _signature_is_builtin(func):\n        raise TypeError(\"{!r} is not a Python builtin \"\n                        \"function\".format(func))\n\n    s = getattr(func, \"__text_signature__\", None)\n    if not s:\n        raise ValueError(\"no signature found for builtin {!r}\".format(func))\n\n    return _signature_fromstr(cls, func, s, skip_bound_arg)\n\n\ndef _signature_from_function(cls, func):\n    \"\"\"Private helper: constructs Signature for the given python function.\"\"\"\n\n    is_duck_function = False\n    if not isfunction(func):\n        if _signature_is_functionlike(func):\n            is_duck_function = True\n        else:\n            # If it's not a pure Python function, and not a duck type\n            # of pure function:\n            raise TypeError('{!r} is not a Python function'.format(func))\n\n    Parameter = cls._parameter_cls\n\n    # Parameter information.\n    func_code = func.__code__\n    pos_count = func_code.co_argcount\n    arg_names = func_code.co_varnames\n    positional = tuple(arg_names[:pos_count])\n    keyword_only_count = func_code.co_kwonlyargcount\n    keyword_only = arg_names[pos_count:(pos_count + keyword_only_count)]\n    annotations = func.__annotations__\n    defaults = func.__defaults__\n    kwdefaults = func.__kwdefaults__\n\n    if defaults:\n        pos_default_count = len(defaults)\n    else:\n        pos_default_count = 0\n\n    parameters = []\n\n    # Non-keyword-only parameters w/o defaults.\n    non_default_count = pos_count - pos_default_count\n    for name in positional[:non_default_count]:\n        annotation = annotations.get(name, _empty)\n        parameters.append(Parameter(name, annotation=annotation,\n                                    kind=_POSITIONAL_OR_KEYWORD))\n\n    # ... w/ defaults.\n    for offset, name in enumerate(positional[non_default_count:]):\n        annotation = annotations.get(name, _empty)\n        parameters.append(Parameter(name, annotation=annotation,\n                                    kind=_POSITIONAL_OR_KEYWORD,\n                                    default=defaults[offset]))\n\n    # *args\n    if func_code.co_flags & CO_VARARGS:\n        name = arg_names[pos_count + keyword_only_count]\n        annotation = annotations.get(name, _empty)\n        parameters.append(Parameter(name, annotation=annotation,\n                                    kind=_VAR_POSITIONAL))\n\n    # Keyword-only parameters.\n    for name in keyword_only:\n        default = _empty\n        if kwdefaults is not None:\n            default = kwdefaults.get(name, _empty)\n\n        annotation = annotations.get(name, _empty)\n        parameters.append(Parameter(name, annotation=annotation,\n                                    kind=_KEYWORD_ONLY,\n                                    default=default))\n    # **kwargs\n    if func_code.co_flags & CO_VARKEYWORDS:\n        index = pos_count + keyword_only_count\n        if func_code.co_flags & CO_VARARGS:\n            index += 1\n\n        name = arg_names[index]\n        annotation = annotations.get(name, _empty)\n        parameters.append(Parameter(name, annotation=annotation,\n                                    kind=_VAR_KEYWORD))\n\n    # Is 'func' is a pure Python function - don't validate the\n    # parameters list (for correct order and defaults), it should be OK.\n    return cls(parameters,\n               return_annotation=annotations.get('return', _empty),\n               __validate_parameters__=is_duck_function)\n\n\ndef _signature_from_callable(obj, *,\n                             follow_wrapper_chains=True,\n                             skip_bound_arg=True,\n                             sigcls):\n\n    \"\"\"Private helper function to get signature for arbitrary\n    callable objects.\n    \"\"\"\n\n    if not callable(obj):\n        raise TypeError('{!r} is not a callable object'.format(obj))\n\n    if isinstance(obj, types.MethodType):\n        # In this case we skip the first parameter of the underlying\n        # function (usually `self` or `cls`).\n        sig = _signature_from_callable(\n            obj.__func__,\n            follow_wrapper_chains=follow_wrapper_chains,\n            skip_bound_arg=skip_bound_arg,\n            sigcls=sigcls)\n\n        if skip_bound_arg:\n            return _signature_bound_method(sig)\n        else:\n            return sig\n\n    # Was this function wrapped by a decorator?\n    if follow_wrapper_chains:\n        obj = unwrap(obj, stop=(lambda f: hasattr(f, \"__signature__\")))\n        if isinstance(obj, types.MethodType):\n            # If the unwrapped object is a *method*, we might want to\n            # skip its first parameter (self).\n            # See test_signature_wrapped_bound_method for details.\n            return _signature_from_callable(\n                obj,\n                follow_wrapper_chains=follow_wrapper_chains,\n                skip_bound_arg=skip_bound_arg,\n                sigcls=sigcls)\n\n    try:\n        sig = obj.__signature__\n    except AttributeError:\n        pass\n    else:\n        if sig is not None:\n            if not isinstance(sig, Signature):\n                raise TypeError(\n                    'unexpected object {!r} in __signature__ '\n                    'attribute'.format(sig))\n            return sig\n\n    try:\n        partialmethod = obj._partialmethod\n    except AttributeError:\n        pass\n    else:\n        if isinstance(partialmethod, functools.partialmethod):\n            # Unbound partialmethod (see functools.partialmethod)\n            # This means, that we need to calculate the signature\n            # as if it's a regular partial object, but taking into\n            # account that the first positional argument\n            # (usually `self`, or `cls`) will not be passed\n            # automatically (as for boundmethods)\n\n            wrapped_sig = _signature_from_callable(\n                partialmethod.func,\n                follow_wrapper_chains=follow_wrapper_chains,\n                skip_bound_arg=skip_bound_arg,\n                sigcls=sigcls)\n\n            sig = _signature_get_partial(wrapped_sig, partialmethod, (None,))\n            first_wrapped_param = tuple(wrapped_sig.parameters.values())[0]\n            if first_wrapped_param.kind is Parameter.VAR_POSITIONAL:\n                # First argument of the wrapped callable is `*args`, as in\n                # `partialmethod(lambda *args)`.\n                return sig\n            else:\n                sig_params = tuple(sig.parameters.values())\n                assert (not sig_params or\n                        first_wrapped_param is not sig_params[0])\n                new_params = (first_wrapped_param,) + sig_params\n                return sig.replace(parameters=new_params)\n\n    if isfunction(obj) or _signature_is_functionlike(obj):\n        # If it's a pure Python function, or an object that is duck type\n        # of a Python function (Cython functions, for instance), then:\n        return _signature_from_function(sigcls, obj)\n\n    if _signature_is_builtin(obj):\n        return _signature_from_builtin(sigcls, obj,\n                                       skip_bound_arg=skip_bound_arg)\n\n    if isinstance(obj, functools.partial):\n        wrapped_sig = _signature_from_callable(\n            obj.func,\n            follow_wrapper_chains=follow_wrapper_chains,\n            skip_bound_arg=skip_bound_arg,\n            sigcls=sigcls)\n        return _signature_get_partial(wrapped_sig, obj)\n\n    sig = None\n    if isinstance(obj, type):\n        # obj is a class or a metaclass\n\n        # First, let's see if it has an overloaded __call__ defined\n        # in its metaclass\n        call = _signature_get_user_defined_method(type(obj), '__call__')\n        if call is not None:\n            sig = _signature_from_callable(\n                call,\n                follow_wrapper_chains=follow_wrapper_chains,\n                skip_bound_arg=skip_bound_arg,\n                sigcls=sigcls)\n        else:\n            # Now we check if the 'obj' class has a '__new__' method\n            new = _signature_get_user_defined_method(obj, '__new__')\n            if new is not None:\n                sig = _signature_from_callable(\n                    new,\n                    follow_wrapper_chains=follow_wrapper_chains,\n                    skip_bound_arg=skip_bound_arg,\n                    sigcls=sigcls)\n            else:\n                # Finally, we should have at least __init__ implemented\n                init = _signature_get_user_defined_method(obj, '__init__')\n                if init is not None:\n                    sig = _signature_from_callable(\n                        init,\n                        follow_wrapper_chains=follow_wrapper_chains,\n                        skip_bound_arg=skip_bound_arg,\n                        sigcls=sigcls)\n\n        if sig is None:\n            # At this point we know, that `obj` is a class, with no user-\n            # defined '__init__', '__new__', or class-level '__call__'\n\n            for base in obj.__mro__[:-1]:\n                # Since '__text_signature__' is implemented as a\n                # descriptor that extracts text signature from the\n                # class docstring, if 'obj' is derived from a builtin\n                # class, its own '__text_signature__' may be 'None'.\n                # Therefore, we go through the MRO (except the last\n                # class in there, which is 'object') to find the first\n                # class with non-empty text signature.\n                try:\n                    text_sig = base.__text_signature__\n                except AttributeError:\n                    pass\n                else:\n                    if text_sig:\n                        # If 'obj' class has a __text_signature__ attribute:\n                        # return a signature based on it\n                        return _signature_fromstr(sigcls, obj, text_sig)\n\n            # No '__text_signature__' was found for the 'obj' class.\n            # Last option is to check if its '__init__' is\n            # object.__init__ or type.__init__.\n            if type not in obj.__mro__:\n                # We have a class (not metaclass), but no user-defined\n                # __init__ or __new__ for it\n                if (obj.__init__ is object.__init__ and\n                    obj.__new__ is object.__new__):\n                    # Return a signature of 'object' builtin.\n                    return signature(object)\n                else:\n                    raise ValueError(\n                        'no signature found for builtin type {!r}'.format(obj))\n\n    elif not isinstance(obj, _NonUserDefinedCallables):\n        # An object with __call__\n        # We also check that the 'obj' is not an instance of\n        # _WrapperDescriptor or _MethodWrapper to avoid\n        # infinite recursion (and even potential segfault)\n        call = _signature_get_user_defined_method(type(obj), '__call__')\n        if call is not None:\n            try:\n                sig = _signature_from_callable(\n                    call,\n                    follow_wrapper_chains=follow_wrapper_chains,\n                    skip_bound_arg=skip_bound_arg,\n                    sigcls=sigcls)\n            except ValueError as ex:\n                msg = 'no signature found for {!r}'.format(obj)\n                raise ValueError(msg) from ex\n\n    if sig is not None:\n        # For classes and objects we skip the first parameter of their\n        # __call__, __new__, or __init__ methods\n        if skip_bound_arg:\n            return _signature_bound_method(sig)\n        else:\n            return sig\n\n    if isinstance(obj, types.BuiltinFunctionType):\n        # Raise a nicer error message for builtins\n        msg = 'no signature found for builtin function {!r}'.format(obj)\n        raise ValueError(msg)\n\n    raise ValueError('callable {!r} is not supported by signature'.format(obj))\n\n\nclass _void:\n    \"\"\"A private marker - used in Parameter & Signature.\"\"\"\n\n\nclass _empty:\n    \"\"\"Marker object for Signature.empty and Parameter.empty.\"\"\"\n\n\nclass _ParameterKind(enum.IntEnum):\n    POSITIONAL_ONLY = 0\n    POSITIONAL_OR_KEYWORD = 1\n    VAR_POSITIONAL = 2\n    KEYWORD_ONLY = 3\n    VAR_KEYWORD = 4\n\n    def __str__(self):\n        return self._name_\n\n\n_POSITIONAL_ONLY         = _ParameterKind.POSITIONAL_ONLY\n_POSITIONAL_OR_KEYWORD   = _ParameterKind.POSITIONAL_OR_KEYWORD\n_VAR_POSITIONAL          = _ParameterKind.VAR_POSITIONAL\n_KEYWORD_ONLY            = _ParameterKind.KEYWORD_ONLY\n_VAR_KEYWORD             = _ParameterKind.VAR_KEYWORD\n\n_PARAM_NAME_MAPPING = {\n    _POSITIONAL_ONLY: 'positional-only',\n    _POSITIONAL_OR_KEYWORD: 'positional or keyword',\n    _VAR_POSITIONAL: 'variadic positional',\n    _KEYWORD_ONLY: 'keyword-only',\n    _VAR_KEYWORD: 'variadic keyword'\n}\n\n_get_paramkind_descr = _PARAM_NAME_MAPPING.__getitem__\n\n\nclass Parameter:\n    \"\"\"Represents a parameter in a function signature.\n\n    Has the following public attributes:\n\n    * name : str\n        The name of the parameter as a string.\n    * default : object\n        The default value for the parameter if specified.  If the\n        parameter has no default value, this attribute is set to\n        `Parameter.empty`.\n    * annotation\n        The annotation for the parameter if specified.  If the\n        parameter has no annotation, this attribute is set to\n        `Parameter.empty`.\n    * kind : str\n        Describes how argument values are bound to the parameter.\n        Possible values: `Parameter.POSITIONAL_ONLY`,\n        `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,\n        `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.\n    \"\"\"\n\n    __slots__ = ('_name', '_kind', '_default', '_annotation')\n\n    POSITIONAL_ONLY         = _POSITIONAL_ONLY\n    POSITIONAL_OR_KEYWORD   = _POSITIONAL_OR_KEYWORD\n    VAR_POSITIONAL          = _VAR_POSITIONAL\n    KEYWORD_ONLY            = _KEYWORD_ONLY\n    VAR_KEYWORD             = _VAR_KEYWORD\n\n    empty = _empty\n\n    def __init__(self, name, kind, *, default=_empty, annotation=_empty):\n        try:\n            self._kind = _ParameterKind(kind)\n        except ValueError:\n            raise ValueError(f'value {kind!r} is not a valid Parameter.kind')\n        if default is not _empty:\n            if self._kind in (_VAR_POSITIONAL, _VAR_KEYWORD):\n                msg = '{} parameters cannot have default values'\n                msg = msg.format(_get_paramkind_descr(self._kind))\n                raise ValueError(msg)\n        self._default = default\n        self._annotation = annotation\n\n        if name is _empty:\n            raise ValueError('name is a required attribute for Parameter')\n\n        if not isinstance(name, str):\n            msg = 'name must be a str, not a {}'.format(type(name).__name__)\n            raise TypeError(msg)\n\n        if name[0] == '.' and name[1:].isdigit():\n            # These are implicit arguments generated by comprehensions. In\n            # order to provide a friendlier interface to users, we recast\n            # their name as \"implicitN\" and treat them as positional-only.\n            # See issue 19611.\n            if self._kind != _POSITIONAL_OR_KEYWORD:\n                msg = (\n                    'implicit arguments must be passed as '\n                    'positional or keyword arguments, not {}'\n                )\n                msg = msg.format(_get_paramkind_descr(self._kind))\n                raise ValueError(msg)\n            self._kind = _POSITIONAL_ONLY\n            name = 'implicit{}'.format(name[1:])\n\n        if not name.isidentifier():\n            raise ValueError('{!r} is not a valid parameter name'.format(name))\n\n        self._name = name\n\n    def __reduce__(self):\n        return (type(self),\n                (self._name, self._kind),\n                {'_default': self._default,\n                 '_annotation': self._annotation})\n\n    def __setstate__(self, state):\n        self._default = state['_default']\n        self._annotation = state['_annotation']\n\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def default(self):\n        return self._default\n\n    @property\n    def annotation(self):\n        return self._annotation\n\n    @property\n    def kind(self):\n        return self._kind\n\n    def replace(self, *, name=_void, kind=_void,\n                annotation=_void, default=_void):\n        \"\"\"Creates a customized copy of the Parameter.\"\"\"\n\n        if name is _void:\n            name = self._name\n\n        if kind is _void:\n            kind = self._kind\n\n        if annotation is _void:\n            annotation = self._annotation\n\n        if default is _void:\n            default = self._default\n\n        return type(self)(name, kind, default=default, annotation=annotation)\n\n    def __str__(self):\n        kind = self.kind\n        formatted = self._name\n\n        # Add annotation and default value\n        if self._annotation is not _empty:\n            formatted = '{}: {}'.format(formatted,\n                                       formatannotation(self._annotation))\n\n        if self._default is not _empty:\n            if self._annotation is not _empty:\n                formatted = '{} = {}'.format(formatted, repr(self._default))\n            else:\n                formatted = '{}={}'.format(formatted, repr(self._default))\n\n        if kind == _VAR_POSITIONAL:\n            formatted = '*' + formatted\n        elif kind == _VAR_KEYWORD:\n            formatted = '**' + formatted\n\n        return formatted\n\n    def __repr__(self):\n        return '<{} \"{}\">'.format(self.__class__.__name__, self)\n\n    def __hash__(self):\n        return hash((self.name, self.kind, self.annotation, self.default))\n\n    def __eq__(self, other):\n        if self is other:\n            return True\n        if not isinstance(other, Parameter):\n            return NotImplemented\n        return (self._name == other._name and\n                self._kind == other._kind and\n                self._default == other._default and\n                self._annotation == other._annotation)\n\n\nclass BoundArguments:\n    \"\"\"Result of `Signature.bind` call.  Holds the mapping of arguments\n    to the function's parameters.\n\n    Has the following public attributes:\n\n    * arguments : OrderedDict\n        An ordered mutable mapping of parameters' names to arguments' values.\n        Does not contain arguments' default values.\n    * signature : Signature\n        The Signature object that created this instance.\n    * args : tuple\n        Tuple of positional arguments values.\n    * kwargs : dict\n        Dict of keyword arguments values.\n    \"\"\"\n\n    __slots__ = ('arguments', '_signature', '__weakref__')\n\n    def __init__(self, signature, arguments):\n        self.arguments = arguments\n        self._signature = signature\n\n    @property\n    def signature(self):\n        return self._signature\n\n    @property\n    def args(self):\n        args = []\n        for param_name, param in self._signature.parameters.items():\n            if param.kind in (_VAR_KEYWORD, _KEYWORD_ONLY):\n                break\n\n            try:\n                arg = self.arguments[param_name]\n            except KeyError:\n                # We're done here. Other arguments\n                # will be mapped in 'BoundArguments.kwargs'\n                break\n            else:\n                if param.kind == _VAR_POSITIONAL:\n                    # *args\n                    args.extend(arg)\n                else:\n                    # plain argument\n                    args.append(arg)\n\n        return tuple(args)\n\n    @property\n    def kwargs(self):\n        kwargs = {}\n        kwargs_started = False\n        for param_name, param in self._signature.parameters.items():\n            if not kwargs_started:\n                if param.kind in (_VAR_KEYWORD, _KEYWORD_ONLY):\n                    kwargs_started = True\n                else:\n                    if param_name not in self.arguments:\n                        kwargs_started = True\n                        continue\n\n            if not kwargs_started:\n                continue\n\n            try:\n                arg = self.arguments[param_name]\n            except KeyError:\n                pass\n            else:\n                if param.kind == _VAR_KEYWORD:\n                    # **kwargs\n                    kwargs.update(arg)\n                else:\n                    # plain keyword argument\n                    kwargs[param_name] = arg\n\n        return kwargs\n\n    def apply_defaults(self):\n        \"\"\"Set default values for missing arguments.\n\n        For variable-positional arguments (*args) the default is an\n        empty tuple.\n\n        For variable-keyword arguments (**kwargs) the default is an\n        empty dict.\n        \"\"\"\n        arguments = self.arguments\n        new_arguments = []\n        for name, param in self._signature.parameters.items():\n            try:\n                new_arguments.append((name, arguments[name]))\n            except KeyError:\n                if param.default is not _empty:\n                    val = param.default\n                elif param.kind is _VAR_POSITIONAL:\n                    val = ()\n                elif param.kind is _VAR_KEYWORD:\n                    val = {}\n                else:\n                    # This BoundArguments was likely produced by\n                    # Signature.bind_partial().\n                    continue\n                new_arguments.append((name, val))\n        self.arguments = OrderedDict(new_arguments)\n\n    def __eq__(self, other):\n        if self is other:\n            return True\n        if not isinstance(other, BoundArguments):\n            return NotImplemented\n        return (self.signature == other.signature and\n                self.arguments == other.arguments)\n\n    def __setstate__(self, state):\n        self._signature = state['_signature']\n        self.arguments = state['arguments']\n\n    def __getstate__(self):\n        return {'_signature': self._signature, 'arguments': self.arguments}\n\n    def __repr__(self):\n        args = []\n        for arg, value in self.arguments.items():\n            args.append('{}={!r}'.format(arg, value))\n        return '<{} ({})>'.format(self.__class__.__name__, ', '.join(args))\n\n\nclass Signature:\n    \"\"\"A Signature object represents the overall signature of a function.\n    It stores a Parameter object for each parameter accepted by the\n    function, as well as information specific to the function itself.\n\n    A Signature object has the following public attributes and methods:\n\n    * parameters : OrderedDict\n        An ordered mapping of parameters' names to the corresponding\n        Parameter objects (keyword-only arguments are in the same order\n        as listed in `code.co_varnames`).\n    * return_annotation : object\n        The annotation for the return type of the function if specified.\n        If the function has no annotation for its return type, this\n        attribute is set to `Signature.empty`.\n    * bind(*args, **kwargs) -> BoundArguments\n        Creates a mapping from positional and keyword arguments to\n        parameters.\n    * bind_partial(*args, **kwargs) -> BoundArguments\n        Creates a partial mapping from positional and keyword arguments\n        to parameters (simulating 'functools.partial' behavior.)\n    \"\"\"\n\n    __slots__ = ('_return_annotation', '_parameters')\n\n    _parameter_cls = Parameter\n    _bound_arguments_cls = BoundArguments\n\n    empty = _empty\n\n    def __init__(self, parameters=None, *, return_annotation=_empty,\n                 __validate_parameters__=True):\n        \"\"\"Constructs Signature from the given list of Parameter\n        objects and 'return_annotation'.  All arguments are optional.\n        \"\"\"\n\n        if parameters is None:\n            params = OrderedDict()\n        else:\n            if __validate_parameters__:\n                params = OrderedDict()\n                top_kind = _POSITIONAL_ONLY\n                kind_defaults = False\n\n                for idx, param in enumerate(parameters):\n                    kind = param.kind\n                    name = param.name\n\n                    if kind < top_kind:\n                        msg = (\n                            'wrong parameter order: {} parameter before {} '\n                            'parameter'\n                        )\n                        msg = msg.format(_get_paramkind_descr(top_kind),\n                                         _get_paramkind_descr(kind))\n                        raise ValueError(msg)\n                    elif kind > top_kind:\n                        kind_defaults = False\n                        top_kind = kind\n\n                    if kind in (_POSITIONAL_ONLY, _POSITIONAL_OR_KEYWORD):\n                        if param.default is _empty:\n                            if kind_defaults:\n                                # No default for this parameter, but the\n                                # previous parameter of the same kind had\n                                # a default\n                                msg = 'non-default argument follows default ' \\\n                                      'argument'\n                                raise ValueError(msg)\n                        else:\n                            # There is a default for this parameter.\n                            kind_defaults = True\n\n                    if name in params:\n                        msg = 'duplicate parameter name: {!r}'.format(name)\n                        raise ValueError(msg)\n\n                    params[name] = param\n            else:\n                params = OrderedDict(((param.name, param)\n                                                for param in parameters))\n\n        self._parameters = types.MappingProxyType(params)\n        self._return_annotation = return_annotation\n\n    @classmethod\n    def from_function(cls, func):\n        \"\"\"Constructs Signature for the given python function.\n\n        Deprecated since Python 3.5, use `Signature.from_callable()`.\n        \"\"\"\n\n        warnings.warn(\"inspect.Signature.from_function() is deprecated since \"\n                      \"Python 3.5, use Signature.from_callable()\",\n                      DeprecationWarning, stacklevel=2)\n        return _signature_from_function(cls, func)\n\n    @classmethod\n    def from_builtin(cls, func):\n        \"\"\"Constructs Signature for the given builtin function.\n\n        Deprecated since Python 3.5, use `Signature.from_callable()`.\n        \"\"\"\n\n        warnings.warn(\"inspect.Signature.from_builtin() is deprecated since \"\n                      \"Python 3.5, use Signature.from_callable()\",\n                      DeprecationWarning, stacklevel=2)\n        return _signature_from_builtin(cls, func)\n\n    @classmethod\n    def from_callable(cls, obj, *, follow_wrapped=True):\n        \"\"\"Constructs Signature for the given callable object.\"\"\"\n        return _signature_from_callable(obj, sigcls=cls,\n                                        follow_wrapper_chains=follow_wrapped)\n\n    @property\n    def parameters(self):\n        return self._parameters\n\n    @property\n    def return_annotation(self):\n        return self._return_annotation\n\n    def replace(self, *, parameters=_void, return_annotation=_void):\n        \"\"\"Creates a customized copy of the Signature.\n        Pass 'parameters' and/or 'return_annotation' arguments\n        to override them in the new copy.\n        \"\"\"\n\n        if parameters is _void:\n            parameters = self.parameters.values()\n\n        if return_annotation is _void:\n            return_annotation = self._return_annotation\n\n        return type(self)(parameters,\n                          return_annotation=return_annotation)\n\n    def _hash_basis(self):\n        params = tuple(param for param in self.parameters.values()\n                             if param.kind != _KEYWORD_ONLY)\n\n        kwo_params = {param.name: param for param in self.parameters.values()\n                                        if param.kind == _KEYWORD_ONLY}\n\n        return params, kwo_params, self.return_annotation\n\n    def __hash__(self):\n        params, kwo_params, return_annotation = self._hash_basis()\n        kwo_params = frozenset(kwo_params.values())\n        return hash((params, kwo_params, return_annotation))\n\n    def __eq__(self, other):\n        if self is other:\n            return True\n        if not isinstance(other, Signature):\n            return NotImplemented\n        return self._hash_basis() == other._hash_basis()\n\n    def _bind(self, args, kwargs, *, partial=False):\n        \"\"\"Private method. Don't use directly.\"\"\"\n\n        arguments = OrderedDict()\n\n        parameters = iter(self.parameters.values())\n        parameters_ex = ()\n        arg_vals = iter(args)\n\n        while True:\n            # Let's iterate through the positional arguments and corresponding\n            # parameters\n            try:\n                arg_val = next(arg_vals)\n            except StopIteration:\n                # No more positional arguments\n                try:\n                    param = next(parameters)\n                except StopIteration:\n                    # No more parameters. That's it. Just need to check that\n                    # we have no `kwargs` after this while loop\n                    break\n                else:\n                    if param.kind == _VAR_POSITIONAL:\n                        # That's OK, just empty *args.  Let's start parsing\n                        # kwargs\n                        break\n                    elif param.name in kwargs:\n                        if param.kind == _POSITIONAL_ONLY:\n                            msg = '{arg!r} parameter is positional only, ' \\\n                                  'but was passed as a keyword'\n                            msg = msg.format(arg=param.name)\n                            raise TypeError(msg) from None\n                        parameters_ex = (param,)\n                        break\n                    elif (param.kind == _VAR_KEYWORD or\n                                                param.default is not _empty):\n                        # That's fine too - we have a default value for this\n                        # parameter.  So, lets start parsing `kwargs`, starting\n                        # with the current parameter\n                        parameters_ex = (param,)\n                        break\n                    else:\n                        # No default, not VAR_KEYWORD, not VAR_POSITIONAL,\n                        # not in `kwargs`\n                        if partial:\n                            parameters_ex = (param,)\n                            break\n                        else:\n                            msg = 'missing a required argument: {arg!r}'\n                            msg = msg.format(arg=param.name)\n                            raise TypeError(msg) from None\n            else:\n                # We have a positional argument to process\n                try:\n                    param = next(parameters)\n                except StopIteration:\n                    raise TypeError('too many positional arguments') from None\n                else:\n                    if param.kind in (_VAR_KEYWORD, _KEYWORD_ONLY):\n                        # Looks like we have no parameter for this positional\n                        # argument\n                        raise TypeError(\n                            'too many positional arguments') from None\n\n                    if param.kind == _VAR_POSITIONAL:\n                        # We have an '*args'-like argument, let's fill it with\n                        # all positional arguments we have left and move on to\n                        # the next phase\n                        values = [arg_val]\n                        values.extend(arg_vals)\n                        arguments[param.name] = tuple(values)\n                        break\n\n                    if param.name in kwargs:\n                        raise TypeError(\n                            'multiple values for argument {arg!r}'.format(\n                                arg=param.name)) from None\n\n                    arguments[param.name] = arg_val\n\n        # Now, we iterate through the remaining parameters to process\n        # keyword arguments\n        kwargs_param = None\n        for param in itertools.chain(parameters_ex, parameters):\n            if param.kind == _VAR_KEYWORD:\n                # Memorize that we have a '**kwargs'-like parameter\n                kwargs_param = param\n                continue\n\n            if param.kind == _VAR_POSITIONAL:\n                # Named arguments don't refer to '*args'-like parameters.\n                # We only arrive here if the positional arguments ended\n                # before reaching the last parameter before *args.\n                continue\n\n            param_name = param.name\n            try:\n                arg_val = kwargs.pop(param_name)\n            except KeyError:\n                # We have no value for this parameter.  It's fine though,\n                # if it has a default value, or it is an '*args'-like\n                # parameter, left alone by the processing of positional\n                # arguments.\n                if (not partial and param.kind != _VAR_POSITIONAL and\n                                                    param.default is _empty):\n                    raise TypeError('missing a required argument: {arg!r}'. \\\n                                    format(arg=param_name)) from None\n\n            else:\n                if param.kind == _POSITIONAL_ONLY:\n                    # This should never happen in case of a properly built\n                    # Signature object (but let's have this check here\n                    # to ensure correct behaviour just in case)\n                    raise TypeError('{arg!r} parameter is positional only, '\n                                    'but was passed as a keyword'. \\\n                                    format(arg=param.name))\n\n                arguments[param_name] = arg_val\n\n        if kwargs:\n            if kwargs_param is not None:\n                # Process our '**kwargs'-like parameter\n                arguments[kwargs_param.name] = kwargs\n            else:\n                raise TypeError(\n                    'got an unexpected keyword argument {arg!r}'.format(\n                        arg=next(iter(kwargs))))\n\n        return self._bound_arguments_cls(self, arguments)\n\n    def bind(*args, **kwargs):\n        \"\"\"Get a BoundArguments object, that maps the passed `args`\n        and `kwargs` to the function's signature.  Raises `TypeError`\n        if the passed arguments can not be bound.\n        \"\"\"\n        return args[0]._bind(args[1:], kwargs)\n\n    def bind_partial(*args, **kwargs):\n        \"\"\"Get a BoundArguments object, that partially maps the\n        passed `args` and `kwargs` to the function's signature.\n        Raises `TypeError` if the passed arguments can not be bound.\n        \"\"\"\n        return args[0]._bind(args[1:], kwargs, partial=True)\n\n    def __reduce__(self):\n        return (type(self),\n                (tuple(self._parameters.values()),),\n                {'_return_annotation': self._return_annotation})\n\n    def __setstate__(self, state):\n        self._return_annotation = state['_return_annotation']\n\n    def __repr__(self):\n        return '<{} {}>'.format(self.__class__.__name__, self)\n\n    def __str__(self):\n        result = []\n        render_pos_only_separator = False\n        render_kw_only_separator = True\n        for param in self.parameters.values():\n            formatted = str(param)\n\n            kind = param.kind\n\n            if kind == _POSITIONAL_ONLY:\n                render_pos_only_separator = True\n            elif render_pos_only_separator:\n                # It's not a positional-only parameter, and the flag\n                # is set to 'True' (there were pos-only params before.)\n                result.append('/')\n                render_pos_only_separator = False\n\n            if kind == _VAR_POSITIONAL:\n                # OK, we have an '*args'-like parameter, so we won't need\n                # a '*' to separate keyword-only arguments\n                render_kw_only_separator = False\n            elif kind == _KEYWORD_ONLY and render_kw_only_separator:\n                # We have a keyword-only parameter to render and we haven't\n                # rendered an '*args'-like parameter before, so add a '*'\n                # separator to the parameters list (\"foo(arg1, *, arg2)\" case)\n                result.append('*')\n                # This condition should be only triggered once, so\n                # reset the flag\n                render_kw_only_separator = False\n\n            result.append(formatted)\n\n        if render_pos_only_separator:\n            # There were only positional-only parameters, hence the\n            # flag was not reset to 'False'\n            result.append('/')\n\n        rendered = '({})'.format(', '.join(result))\n\n        if self.return_annotation is not _empty:\n            anno = formatannotation(self.return_annotation)\n            rendered += ' -> {}'.format(anno)\n\n        return rendered\n\n\ndef signature(obj, *, follow_wrapped=True):\n    \"\"\"Get a signature object for the passed callable.\"\"\"\n    return Signature.from_callable(obj, follow_wrapped=follow_wrapped)\n\n\ndef _main():\n    \"\"\" Logic for inspecting an object given at command line \"\"\"\n    import argparse\n    import importlib\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        'object',\n         help=\"The object to be analysed. \"\n              \"It supports the 'module:qualname' syntax\")\n    parser.add_argument(\n        '-d', '--details', action='store_true',\n        help='Display info about the module rather than its source code')\n\n    args = parser.parse_args()\n\n    target = args.object\n    mod_name, has_attrs, attrs = target.partition(\":\")\n    try:\n        obj = module = importlib.import_module(mod_name)\n    except Exception as exc:\n        msg = \"Failed to import {} ({}: {})\".format(mod_name,\n                                                    type(exc).__name__,\n                                                    exc)\n        print(msg, file=sys.stderr)\n        exit(2)\n\n    if has_attrs:\n        parts = attrs.split(\".\")\n        obj = module\n        for part in parts:\n            obj = getattr(obj, part)\n\n    if module.__name__ in sys.builtin_module_names:\n        print(\"Can't get info for builtin modules.\", file=sys.stderr)\n        exit(1)\n\n    if args.details:\n        print('Target: {}'.format(target))\n        print('Origin: {}'.format(getsourcefile(module)))\n        print('Cached: {}'.format(module.__cached__))\n        if obj is module:\n            print('Loader: {}'.format(repr(module.__loader__)))\n            if hasattr(module, '__path__'):\n                print('Submodule search path: {}'.format(module.__path__))\n        else:\n            try:\n                __, lineno = findsource(obj)\n            except Exception:\n                pass\n            else:\n                print('Line: {}'.format(lineno))\n\n        print('\\n')\n    else:\n        print(getsource(obj))\n\n\nif __name__ == \"__main__\":\n    _main()\n", 3145], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py": ["\"\"\"functools.py - Tools for working with functions and callable objects\n\"\"\"\n# Python module wrapper for _functools C module\n# to allow utilities written in Python to be added\n# to the functools module.\n# Written by Nick Coghlan <ncoghlan at gmail.com>,\n# Raymond Hettinger <python at rcn.com>,\n# and \u0141ukasz Langa <lukasz at langa.pl>.\n#   Copyright (C) 2006-2013 Python Software Foundation.\n# See C source code for _functools credits/copyright\n\n__all__ = ['update_wrapper', 'wraps', 'WRAPPER_ASSIGNMENTS', 'WRAPPER_UPDATES',\n           'total_ordering', 'cmp_to_key', 'lru_cache', 'reduce', 'partial',\n           'partialmethod', 'singledispatch']\n\ntry:\n    from _functools import reduce\nexcept ImportError:\n    pass\nfrom abc import get_cache_token\nfrom collections import namedtuple\n# import types, weakref  # Deferred to single_dispatch()\nfrom reprlib import recursive_repr\nfrom _thread import RLock\n\n\n################################################################################\n### update_wrapper() and wraps() decorator\n################################################################################\n\n# update_wrapper() and wraps() are tools to help write\n# wrapper functions that can handle naive introspection\n\nWRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__qualname__', '__doc__',\n                       '__annotations__')\nWRAPPER_UPDATES = ('__dict__',)\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n       functools.WRAPPER_ASSIGNMENTS)\n       updated is a tuple naming the attributes of the wrapper that\n       are updated with the corresponding attribute from the wrapped\n       function (defaults to functools.WRAPPER_UPDATES)\n    \"\"\"\n    for attr in assigned:\n        try:\n            value = getattr(wrapped, attr)\n        except AttributeError:\n            pass\n        else:\n            setattr(wrapper, attr, value)\n    for attr in updated:\n        getattr(wrapper, attr).update(getattr(wrapped, attr, {}))\n    # Issue #17482: set __wrapped__ last so we don't inadvertently copy it\n    # from the wrapped function when updating __dict__\n    wrapper.__wrapped__ = wrapped\n    # Return the wrapper so this can be used as a decorator via partial()\n    return wrapper\n\ndef wraps(wrapped,\n          assigned = WRAPPER_ASSIGNMENTS,\n          updated = WRAPPER_UPDATES):\n    \"\"\"Decorator factory to apply update_wrapper() to a wrapper function\n\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    \"\"\"\n    return partial(update_wrapper, wrapped=wrapped,\n                   assigned=assigned, updated=updated)\n\n\n################################################################################\n### total_ordering class decorator\n################################################################################\n\n# The total ordering functions all invoke the root magic method directly\n# rather than using the corresponding operator.  This avoids possible\n# infinite recursion that could occur when the operator dispatch logic\n# detects a NotImplemented result and then calls a reflected method.\n\ndef _gt_from_lt(self, other, NotImplemented=NotImplemented):\n    'Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).'\n    op_result = self.__lt__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return not op_result and self != other\n\ndef _le_from_lt(self, other, NotImplemented=NotImplemented):\n    'Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).'\n    op_result = self.__lt__(other)\n    return op_result or self == other\n\ndef _ge_from_lt(self, other, NotImplemented=NotImplemented):\n    'Return a >= b.  Computed by @total_ordering from (not a < b).'\n    op_result = self.__lt__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return not op_result\n\ndef _ge_from_le(self, other, NotImplemented=NotImplemented):\n    'Return a >= b.  Computed by @total_ordering from (not a <= b) or (a == b).'\n    op_result = self.__le__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return not op_result or self == other\n\ndef _lt_from_le(self, other, NotImplemented=NotImplemented):\n    'Return a < b.  Computed by @total_ordering from (a <= b) and (a != b).'\n    op_result = self.__le__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return op_result and self != other\n\ndef _gt_from_le(self, other, NotImplemented=NotImplemented):\n    'Return a > b.  Computed by @total_ordering from (not a <= b).'\n    op_result = self.__le__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return not op_result\n\ndef _lt_from_gt(self, other, NotImplemented=NotImplemented):\n    'Return a < b.  Computed by @total_ordering from (not a > b) and (a != b).'\n    op_result = self.__gt__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return not op_result and self != other\n\ndef _ge_from_gt(self, other, NotImplemented=NotImplemented):\n    'Return a >= b.  Computed by @total_ordering from (a > b) or (a == b).'\n    op_result = self.__gt__(other)\n    return op_result or self == other\n\ndef _le_from_gt(self, other, NotImplemented=NotImplemented):\n    'Return a <= b.  Computed by @total_ordering from (not a > b).'\n    op_result = self.__gt__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return not op_result\n\ndef _le_from_ge(self, other, NotImplemented=NotImplemented):\n    'Return a <= b.  Computed by @total_ordering from (not a >= b) or (a == b).'\n    op_result = self.__ge__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return not op_result or self == other\n\ndef _gt_from_ge(self, other, NotImplemented=NotImplemented):\n    'Return a > b.  Computed by @total_ordering from (a >= b) and (a != b).'\n    op_result = self.__ge__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return op_result and self != other\n\ndef _lt_from_ge(self, other, NotImplemented=NotImplemented):\n    'Return a < b.  Computed by @total_ordering from (not a >= b).'\n    op_result = self.__ge__(other)\n    if op_result is NotImplemented:\n        return op_result\n    return not op_result\n\n_convert = {\n    '__lt__': [('__gt__', _gt_from_lt),\n               ('__le__', _le_from_lt),\n               ('__ge__', _ge_from_lt)],\n    '__le__': [('__ge__', _ge_from_le),\n               ('__lt__', _lt_from_le),\n               ('__gt__', _gt_from_le)],\n    '__gt__': [('__lt__', _lt_from_gt),\n               ('__ge__', _ge_from_gt),\n               ('__le__', _le_from_gt)],\n    '__ge__': [('__le__', _le_from_ge),\n               ('__gt__', _gt_from_ge),\n               ('__lt__', _lt_from_ge)]\n}\n\ndef total_ordering(cls):\n    \"\"\"Class decorator that fills in missing ordering methods\"\"\"\n    # Find user-defined comparisons (not those inherited from object).\n    roots = {op for op in _convert if getattr(cls, op, None) is not getattr(object, op, None)}\n    if not roots:\n        raise ValueError('must define at least one ordering operation: < > <= >=')\n    root = max(roots)       # prefer __lt__ to __le__ to __gt__ to __ge__\n    for opname, opfunc in _convert[root]:\n        if opname not in roots:\n            opfunc.__name__ = opname\n            setattr(cls, opname, opfunc)\n    return cls\n\n\n################################################################################\n### cmp_to_key() function converter\n################################################################################\n\ndef cmp_to_key(mycmp):\n    \"\"\"Convert a cmp= function into a key= function\"\"\"\n    class K(object):\n        __slots__ = ['obj']\n        def __init__(self, obj):\n            self.obj = obj\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj) < 0\n        def __gt__(self, other):\n            return mycmp(self.obj, other.obj) > 0\n        def __eq__(self, other):\n            return mycmp(self.obj, other.obj) == 0\n        def __le__(self, other):\n            return mycmp(self.obj, other.obj) <= 0\n        def __ge__(self, other):\n            return mycmp(self.obj, other.obj) >= 0\n        __hash__ = None\n    return K\n\ntry:\n    from _functools import cmp_to_key\nexcept ImportError:\n    pass\n\n\n################################################################################\n### partial() argument application\n################################################################################\n\n# Purely functional, no descriptor behaviour\nclass partial:\n    \"\"\"New function with partial application of the given arguments\n    and keywords.\n    \"\"\"\n\n    __slots__ = \"func\", \"args\", \"keywords\", \"__dict__\", \"__weakref__\"\n\n    def __new__(*args, **keywords):\n        if not args:\n            raise TypeError(\"descriptor '__new__' of partial needs an argument\")\n        if len(args) < 2:\n            raise TypeError(\"type 'partial' takes at least one argument\")\n        cls, func, *args = args\n        if not callable(func):\n            raise TypeError(\"the first argument must be callable\")\n        args = tuple(args)\n\n        if hasattr(func, \"func\"):\n            args = func.args + args\n            tmpkw = func.keywords.copy()\n            tmpkw.update(keywords)\n            keywords = tmpkw\n            del tmpkw\n            func = func.func\n\n        self = super(partial, cls).__new__(cls)\n\n        self.func = func\n        self.args = args\n        self.keywords = keywords\n        return self\n\n    def __call__(*args, **keywords):\n        if not args:\n            raise TypeError(\"descriptor '__call__' of partial needs an argument\")\n        self, *args = args\n        newkeywords = self.keywords.copy()\n        newkeywords.update(keywords)\n        return self.func(*self.args, *args, **newkeywords)\n\n    @recursive_repr()\n    def __repr__(self):\n        qualname = type(self).__qualname__\n        args = [repr(self.func)]\n        args.extend(repr(x) for x in self.args)\n        args.extend(f\"{k}={v!r}\" for (k, v) in self.keywords.items())\n        if type(self).__module__ == \"functools\":\n            return f\"functools.{qualname}({', '.join(args)})\"\n        return f\"{qualname}({', '.join(args)})\"\n\n    def __reduce__(self):\n        return type(self), (self.func,), (self.func, self.args,\n               self.keywords or None, self.__dict__ or None)\n\n    def __setstate__(self, state):\n        if not isinstance(state, tuple):\n            raise TypeError(\"argument to __setstate__ must be a tuple\")\n        if len(state) != 4:\n            raise TypeError(f\"expected 4 items in state, got {len(state)}\")\n        func, args, kwds, namespace = state\n        if (not callable(func) or not isinstance(args, tuple) or\n           (kwds is not None and not isinstance(kwds, dict)) or\n           (namespace is not None and not isinstance(namespace, dict))):\n            raise TypeError(\"invalid partial state\")\n\n        args = tuple(args) # just in case it's a subclass\n        if kwds is None:\n            kwds = {}\n        elif type(kwds) is not dict: # XXX does it need to be *exactly* dict?\n            kwds = dict(kwds)\n        if namespace is None:\n            namespace = {}\n\n        self.__dict__ = namespace\n        self.func = func\n        self.args = args\n        self.keywords = kwds\n\ntry:\n    from _functools import partial\nexcept ImportError:\n    pass\n\n# Descriptor version\nclass partialmethod(object):\n    \"\"\"Method descriptor with partial application of the given arguments\n    and keywords.\n\n    Supports wrapping existing descriptors and handles non-descriptor\n    callables as instance methods.\n    \"\"\"\n\n    def __init__(*args, **keywords):\n        if len(args) >= 2:\n            self, func, *args = args\n        elif not args:\n            raise TypeError(\"descriptor '__init__' of partialmethod \"\n                            \"needs an argument\")\n        elif 'func' in keywords:\n            func = keywords.pop('func')\n            self, *args = args\n        else:\n            raise TypeError(\"type 'partialmethod' takes at least one argument, \"\n                            \"got %d\" % (len(args)-1))\n        args = tuple(args)\n\n        if not callable(func) and not hasattr(func, \"__get__\"):\n            raise TypeError(\"{!r} is not callable or a descriptor\"\n                                 .format(func))\n\n        # func could be a descriptor like classmethod which isn't callable,\n        # so we can't inherit from partial (it verifies func is callable)\n        if isinstance(func, partialmethod):\n            # flattening is mandatory in order to place cls/self before all\n            # other arguments\n            # it's also more efficient since only one function will be called\n            self.func = func.func\n            self.args = func.args + args\n            self.keywords = func.keywords.copy()\n            self.keywords.update(keywords)\n        else:\n            self.func = func\n            self.args = args\n            self.keywords = keywords\n\n    def __repr__(self):\n        args = \", \".join(map(repr, self.args))\n        keywords = \", \".join(\"{}={!r}\".format(k, v)\n                                 for k, v in self.keywords.items())\n        format_string = \"{module}.{cls}({func}, {args}, {keywords})\"\n        return format_string.format(module=self.__class__.__module__,\n                                    cls=self.__class__.__qualname__,\n                                    func=self.func,\n                                    args=args,\n                                    keywords=keywords)\n\n    def _make_unbound_method(self):\n        def _method(*args, **keywords):\n            call_keywords = self.keywords.copy()\n            call_keywords.update(keywords)\n            cls_or_self, *rest = args\n            call_args = (cls_or_self,) + self.args + tuple(rest)\n            return self.func(*call_args, **call_keywords)\n        _method.__isabstractmethod__ = self.__isabstractmethod__\n        _method._partialmethod = self\n        return _method\n\n    def __get__(self, obj, cls):\n        get = getattr(self.func, \"__get__\", None)\n        result = None\n        if get is not None:\n            new_func = get(obj, cls)\n            if new_func is not self.func:\n                # Assume __get__ returning something new indicates the\n                # creation of an appropriate callable\n                result = partial(new_func, *self.args, **self.keywords)\n                try:\n                    result.__self__ = new_func.__self__\n                except AttributeError:\n                    pass\n        if result is None:\n            # If the underlying descriptor didn't do anything, treat this\n            # like an instance method\n            result = self._make_unbound_method().__get__(obj, cls)\n        return result\n\n    @property\n    def __isabstractmethod__(self):\n        return getattr(self.func, \"__isabstractmethod__\", False)\n\n\n################################################################################\n### LRU Cache function decorator\n################################################################################\n\n_CacheInfo = namedtuple(\"CacheInfo\", [\"hits\", \"misses\", \"maxsize\", \"currsize\"])\n\nclass _HashedSeq(list):\n    \"\"\" This class guarantees that hash() will be called no more than once\n        per element.  This is important because the lru_cache() will hash\n        the key multiple times on a cache miss.\n\n    \"\"\"\n\n    __slots__ = 'hashvalue'\n\n    def __init__(self, tup, hash=hash):\n        self[:] = tup\n        self.hashvalue = hash(tup)\n\n    def __hash__(self):\n        return self.hashvalue\n\ndef _make_key(args, kwds, typed,\n             kwd_mark = (object(),),\n             fasttypes = {int, str},\n             tuple=tuple, type=type, len=len):\n    \"\"\"Make a cache key from optionally typed positional and keyword arguments\n\n    The key is constructed in a way that is flat as possible rather than\n    as a nested structure that would take more memory.\n\n    If there is only a single argument and its data type is known to cache\n    its hash value, then that argument is returned without a wrapper.  This\n    saves space and improves lookup speed.\n\n    \"\"\"\n    # All of code below relies on kwds preserving the order input by the user.\n    # Formerly, we sorted() the kwds before looping.  The new way is *much*\n    # faster; however, it means that f(x=1, y=2) will now be treated as a\n    # distinct call from f(y=2, x=1) which will be cached separately.\n    key = args\n    if kwds:\n        key += kwd_mark\n        for item in kwds.items():\n            key += item\n    if typed:\n        key += tuple(type(v) for v in args)\n        if kwds:\n            key += tuple(type(v) for v in kwds.values())\n    elif len(key) == 1 and type(key[0]) in fasttypes:\n        return key[0]\n    return _HashedSeq(key)\n\ndef lru_cache(maxsize=128, typed=False):\n    \"\"\"Least-recently-used cache decorator.\n\n    If *maxsize* is set to None, the LRU features are disabled and the cache\n    can grow without bound.\n\n    If *typed* is True, arguments of different types will be cached separately.\n    For example, f(3.0) and f(3) will be treated as distinct calls with\n    distinct results.\n\n    Arguments to the cached function must be hashable.\n\n    View the cache statistics named tuple (hits, misses, maxsize, currsize)\n    with f.cache_info().  Clear the cache and statistics with f.cache_clear().\n    Access the underlying function with f.__wrapped__.\n\n    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used\n\n    \"\"\"\n\n    # Users should only access the lru_cache through its public API:\n    #       cache_info, cache_clear, and f.__wrapped__\n    # The internals of the lru_cache are encapsulated for thread safety and\n    # to allow the implementation to change (including a possible C version).\n\n    # Early detection of an erroneous call to @lru_cache without any arguments\n    # resulting in the inner function being passed to maxsize instead of an\n    # integer or None.  Negative maxsize is treated as 0.\n    if isinstance(maxsize, int):\n        if maxsize < 0:\n            maxsize = 0\n    elif maxsize is not None:\n        raise TypeError('Expected maxsize to be an integer or None')\n\n    def decorating_function(user_function):\n        wrapper = _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo)\n        return update_wrapper(wrapper, user_function)\n\n    return decorating_function\n\ndef _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo):\n    # Constants shared by all lru cache instances:\n    sentinel = object()          # unique object used to signal cache misses\n    make_key = _make_key         # build a key from the function arguments\n    PREV, NEXT, KEY, RESULT = 0, 1, 2, 3   # names for the link fields\n\n    cache = {}\n    hits = misses = 0\n    full = False\n    cache_get = cache.get    # bound method to lookup a key or return None\n    cache_len = cache.__len__  # get cache size without calling len()\n    lock = RLock()           # because linkedlist updates aren't threadsafe\n    root = []                # root of the circular doubly linked list\n    root[:] = [root, root, None, None]     # initialize by pointing to self\n\n    if maxsize == 0:\n\n        def wrapper(*args, **kwds):\n            # No caching -- just a statistics update\n            nonlocal misses\n            misses += 1\n            result = user_function(*args, **kwds)\n            return result\n\n    elif maxsize is None:\n\n        def wrapper(*args, **kwds):\n            # Simple caching without ordering or size limit\n            nonlocal hits, misses\n            key = make_key(args, kwds, typed)\n            result = cache_get(key, sentinel)\n            if result is not sentinel:\n                hits += 1\n                return result\n            misses += 1\n            result = user_function(*args, **kwds)\n            cache[key] = result\n            return result\n\n    else:\n\n        def wrapper(*args, **kwds):\n            # Size limited caching that tracks accesses by recency\n            nonlocal root, hits, misses, full\n            key = make_key(args, kwds, typed)\n            with lock:\n                link = cache_get(key)\n                if link is not None:\n                    # Move the link to the front of the circular queue\n                    link_prev, link_next, _key, result = link\n                    link_prev[NEXT] = link_next\n                    link_next[PREV] = link_prev\n                    last = root[PREV]\n                    last[NEXT] = root[PREV] = link\n                    link[PREV] = last\n                    link[NEXT] = root\n                    hits += 1\n                    return result\n                misses += 1\n            result = user_function(*args, **kwds)\n            with lock:\n                if key in cache:\n                    # Getting here means that this same key was added to the\n                    # cache while the lock was released.  Since the link\n                    # update is already done, we need only return the\n                    # computed result and update the count of misses.\n                    pass\n                elif full:\n                    # Use the old root to store the new key and result.\n                    oldroot = root\n                    oldroot[KEY] = key\n                    oldroot[RESULT] = result\n                    # Empty the oldest link and make it the new root.\n                    # Keep a reference to the old key and old result to\n                    # prevent their ref counts from going to zero during the\n                    # update. That will prevent potentially arbitrary object\n                    # clean-up code (i.e. __del__) from running while we're\n                    # still adjusting the links.\n                    root = oldroot[NEXT]\n                    oldkey = root[KEY]\n                    oldresult = root[RESULT]\n                    root[KEY] = root[RESULT] = None\n                    # Now update the cache dictionary.\n                    del cache[oldkey]\n                    # Save the potentially reentrant cache[key] assignment\n                    # for last, after the root and links have been put in\n                    # a consistent state.\n                    cache[key] = oldroot\n                else:\n                    # Put result in a new link at the front of the queue.\n                    last = root[PREV]\n                    link = [last, root, key, result]\n                    last[NEXT] = root[PREV] = cache[key] = link\n                    # Use the cache_len bound method instead of the len() function\n                    # which could potentially be wrapped in an lru_cache itself.\n                    full = (cache_len() >= maxsize)\n            return result\n\n    def cache_info():\n        \"\"\"Report cache statistics\"\"\"\n        with lock:\n            return _CacheInfo(hits, misses, maxsize, cache_len())\n\n    def cache_clear():\n        \"\"\"Clear the cache and cache statistics\"\"\"\n        nonlocal hits, misses, full\n        with lock:\n            cache.clear()\n            root[:] = [root, root, None, None]\n            hits = misses = 0\n            full = False\n\n    wrapper.cache_info = cache_info\n    wrapper.cache_clear = cache_clear\n    return wrapper\n\ntry:\n    from _functools import _lru_cache_wrapper\nexcept ImportError:\n    pass\n\n\n################################################################################\n### singledispatch() - single-dispatch generic function decorator\n################################################################################\n\ndef _c3_merge(sequences):\n    \"\"\"Merges MROs in *sequences* to a single MRO using the C3 algorithm.\n\n    Adapted from http://www.python.org/download/releases/2.3/mro/.\n\n    \"\"\"\n    result = []\n    while True:\n        sequences = [s for s in sequences if s]   # purge empty sequences\n        if not sequences:\n            return result\n        for s1 in sequences:   # find merge candidates among seq heads\n            candidate = s1[0]\n            for s2 in sequences:\n                if candidate in s2[1:]:\n                    candidate = None\n                    break      # reject the current head, it appears later\n            else:\n                break\n        if candidate is None:\n            raise RuntimeError(\"Inconsistent hierarchy\")\n        result.append(candidate)\n        # remove the chosen candidate\n        for seq in sequences:\n            if seq[0] == candidate:\n                del seq[0]\n\ndef _c3_mro(cls, abcs=None):\n    \"\"\"Computes the method resolution order using extended C3 linearization.\n\n    If no *abcs* are given, the algorithm works exactly like the built-in C3\n    linearization used for method resolution.\n\n    If given, *abcs* is a list of abstract base classes that should be inserted\n    into the resulting MRO. Unrelated ABCs are ignored and don't end up in the\n    result. The algorithm inserts ABCs where their functionality is introduced,\n    i.e. issubclass(cls, abc) returns True for the class itself but returns\n    False for all its direct base classes. Implicit ABCs for a given class\n    (either registered or inferred from the presence of a special method like\n    __len__) are inserted directly after the last ABC explicitly listed in the\n    MRO of said class. If two implicit ABCs end up next to each other in the\n    resulting MRO, their ordering depends on the order of types in *abcs*.\n\n    \"\"\"\n    for i, base in enumerate(reversed(cls.__bases__)):\n        if hasattr(base, '__abstractmethods__'):\n            boundary = len(cls.__bases__) - i\n            break   # Bases up to the last explicit ABC are considered first.\n    else:\n        boundary = 0\n    abcs = list(abcs) if abcs else []\n    explicit_bases = list(cls.__bases__[:boundary])\n    abstract_bases = []\n    other_bases = list(cls.__bases__[boundary:])\n    for base in abcs:\n        if issubclass(cls, base) and not any(\n                issubclass(b, base) for b in cls.__bases__\n            ):\n            # If *cls* is the class that introduces behaviour described by\n            # an ABC *base*, insert said ABC to its MRO.\n            abstract_bases.append(base)\n    for base in abstract_bases:\n        abcs.remove(base)\n    explicit_c3_mros = [_c3_mro(base, abcs=abcs) for base in explicit_bases]\n    abstract_c3_mros = [_c3_mro(base, abcs=abcs) for base in abstract_bases]\n    other_c3_mros = [_c3_mro(base, abcs=abcs) for base in other_bases]\n    return _c3_merge(\n        [[cls]] +\n        explicit_c3_mros + abstract_c3_mros + other_c3_mros +\n        [explicit_bases] + [abstract_bases] + [other_bases]\n    )\n\ndef _compose_mro(cls, types):\n    \"\"\"Calculates the method resolution order for a given class *cls*.\n\n    Includes relevant abstract base classes (with their respective bases) from\n    the *types* iterable. Uses a modified C3 linearization algorithm.\n\n    \"\"\"\n    bases = set(cls.__mro__)\n    # Remove entries which are already present in the __mro__ or unrelated.\n    def is_related(typ):\n        return (typ not in bases and hasattr(typ, '__mro__')\n                                 and issubclass(cls, typ))\n    types = [n for n in types if is_related(n)]\n    # Remove entries which are strict bases of other entries (they will end up\n    # in the MRO anyway.\n    def is_strict_base(typ):\n        for other in types:\n            if typ != other and typ in other.__mro__:\n                return True\n        return False\n    types = [n for n in types if not is_strict_base(n)]\n    # Subclasses of the ABCs in *types* which are also implemented by\n    # *cls* can be used to stabilize ABC ordering.\n    type_set = set(types)\n    mro = []\n    for typ in types:\n        found = []\n        for sub in typ.__subclasses__():\n            if sub not in bases and issubclass(cls, sub):\n                found.append([s for s in sub.__mro__ if s in type_set])\n        if not found:\n            mro.append(typ)\n            continue\n        # Favor subclasses with the biggest number of useful bases\n        found.sort(key=len, reverse=True)\n        for sub in found:\n            for subcls in sub:\n                if subcls not in mro:\n                    mro.append(subcls)\n    return _c3_mro(cls, abcs=mro)\n\ndef _find_impl(cls, registry):\n    \"\"\"Returns the best matching implementation from *registry* for type *cls*.\n\n    Where there is no registered implementation for a specific type, its method\n    resolution order is used to find a more generic implementation.\n\n    Note: if *registry* does not contain an implementation for the base\n    *object* type, this function may return None.\n\n    \"\"\"\n    mro = _compose_mro(cls, registry.keys())\n    match = None\n    for t in mro:\n        if match is not None:\n            # If *match* is an implicit ABC but there is another unrelated,\n            # equally matching implicit ABC, refuse the temptation to guess.\n            if (t in registry and t not in cls.__mro__\n                              and match not in cls.__mro__\n                              and not issubclass(match, t)):\n                raise RuntimeError(\"Ambiguous dispatch: {} or {}\".format(\n                    match, t))\n            break\n        if t in registry:\n            match = t\n    return registry.get(match)\n\ndef singledispatch(func):\n    \"\"\"Single-dispatch generic function decorator.\n\n    Transforms a function into a generic function, which can have different\n    behaviours depending upon the type of its first argument. The decorated\n    function acts as the default implementation, and additional\n    implementations can be registered using the register() attribute of the\n    generic function.\n    \"\"\"\n    # There are many programs that use functools without singledispatch, so we\n    # trade-off making singledispatch marginally slower for the benefit of\n    # making start-up of such applications slightly faster.\n    import types, weakref\n\n    registry = {}\n    dispatch_cache = weakref.WeakKeyDictionary()\n    cache_token = None\n\n    def dispatch(cls):\n        \"\"\"generic_func.dispatch(cls) -> <function implementation>\n\n        Runs the dispatch algorithm to return the best available implementation\n        for the given *cls* registered on *generic_func*.\n\n        \"\"\"\n        nonlocal cache_token\n        if cache_token is not None:\n            current_token = get_cache_token()\n            if cache_token != current_token:\n                dispatch_cache.clear()\n                cache_token = current_token\n        try:\n            impl = dispatch_cache[cls]\n        except KeyError:\n            try:\n                impl = registry[cls]\n            except KeyError:\n                impl = _find_impl(cls, registry)\n            dispatch_cache[cls] = impl\n        return impl\n\n    def register(cls, func=None):\n        \"\"\"generic_func.register(cls, func) -> func\n\n        Registers a new implementation for the given *cls* on a *generic_func*.\n\n        \"\"\"\n        nonlocal cache_token\n        if func is None:\n            if isinstance(cls, type):\n                return lambda f: register(cls, f)\n            ann = getattr(cls, '__annotations__', {})\n            if not ann:\n                raise TypeError(\n                    f\"Invalid first argument to `register()`: {cls!r}. \"\n                    f\"Use either `@register(some_class)` or plain `@register` \"\n                    f\"on an annotated function.\"\n                )\n            func = cls\n\n            # only import typing if annotation parsing is necessary\n            from typing import get_type_hints\n            argname, cls = next(iter(get_type_hints(func).items()))\n            assert isinstance(cls, type), (\n                f\"Invalid annotation for {argname!r}. {cls!r} is not a class.\"\n            )\n        registry[cls] = func\n        if cache_token is None and hasattr(cls, '__abstractmethods__'):\n            cache_token = get_cache_token()\n        dispatch_cache.clear()\n        return func\n\n    def wrapper(*args, **kw):\n        if not args:\n            raise TypeError(f'{funcname} requires at least '\n                            '1 positional argument')\n\n        return dispatch(args[0].__class__)(*args, **kw)\n\n    funcname = getattr(func, '__name__', 'singledispatch function')\n    registry[object] = func\n    wrapper.register = register\n    wrapper.dispatch = dispatch\n    wrapper.registry = types.MappingProxyType(registry)\n    wrapper._clear_cache = dispatch_cache.clear\n    update_wrapper(wrapper, func)\n    return wrapper\n", 849], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py": ["import importlib.util\nimport os\nimport pkgutil\nimport sys\nimport typing as t\nfrom collections import defaultdict\nfrom functools import update_wrapper\nfrom json import JSONDecoder\nfrom json import JSONEncoder\n\nfrom jinja2 import FileSystemLoader\nfrom werkzeug.exceptions import default_exceptions\nfrom werkzeug.exceptions import HTTPException\n\nfrom .cli import AppGroup\nfrom .globals import current_app\nfrom .helpers import get_root_path\nfrom .helpers import locked_cached_property\nfrom .helpers import send_from_directory\nfrom .templating import _default_template_ctx_processor\nfrom .typing import AfterRequestCallable\nfrom .typing import AppOrBlueprintKey\nfrom .typing import BeforeRequestCallable\nfrom .typing import GenericException\nfrom .typing import TeardownCallable\nfrom .typing import TemplateContextProcessorCallable\nfrom .typing import URLDefaultCallable\nfrom .typing import URLValuePreprocessorCallable\n\nif t.TYPE_CHECKING:\n    from .wrappers import Response\n    from .typing import ErrorHandlerCallable\n\n# a singleton sentinel value for parameter defaults\n_sentinel = object()\n\nF = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])\n\n\ndef setupmethod(f: F) -> F:\n    \"\"\"Wraps a method so that it performs a check in debug mode if the\n    first request was already handled.\n    \"\"\"\n\n    def wrapper_func(self, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        if self._is_setup_finished():\n            raise AssertionError(\n                \"A setup function was called after the first request \"\n                \"was handled. This usually indicates a bug in the\"\n                \" application where a module was not imported and\"\n                \" decorators or other functionality was called too\"\n                \" late.\\nTo fix this make sure to import all your view\"\n                \" modules, database models, and everything related at a\"\n                \" central place before the application starts serving\"\n                \" requests.\"\n            )\n        return f(self, *args, **kwargs)\n\n    return t.cast(F, update_wrapper(wrapper_func, f))\n\n\nclass Scaffold:\n    \"\"\"Common behavior shared between :class:`~flask.Flask` and\n    :class:`~flask.blueprints.Blueprint`.\n\n    :param import_name: The import name of the module where this object\n        is defined. Usually :attr:`__name__` should be used.\n    :param static_folder: Path to a folder of static files to serve.\n        If this is set, a static route will be added.\n    :param static_url_path: URL prefix for the static route.\n    :param template_folder: Path to a folder containing template files.\n        for rendering. If this is set, a Jinja loader will be added.\n    :param root_path: The path that static, template, and resource files\n        are relative to. Typically not set, it is discovered based on\n        the ``import_name``.\n\n    .. versionadded:: 2.0\n    \"\"\"\n\n    name: str\n    _static_folder: t.Optional[str] = None\n    _static_url_path: t.Optional[str] = None\n\n    #: JSON encoder class used by :func:`flask.json.dumps`. If a\n    #: blueprint sets this, it will be used instead of the app's value.\n    json_encoder: t.Optional[t.Type[JSONEncoder]] = None\n\n    #: JSON decoder class used by :func:`flask.json.loads`. If a\n    #: blueprint sets this, it will be used instead of the app's value.\n    json_decoder: t.Optional[t.Type[JSONDecoder]] = None\n\n    def __init__(\n        self,\n        import_name: str,\n        static_folder: t.Optional[t.Union[str, os.PathLike]] = None,\n        static_url_path: t.Optional[str] = None,\n        template_folder: t.Optional[str] = None,\n        root_path: t.Optional[str] = None,\n    ):\n        #: The name of the package or module that this object belongs\n        #: to. Do not change this once it is set by the constructor.\n        self.import_name = import_name\n\n        self.static_folder = static_folder  # type: ignore\n        self.static_url_path = static_url_path\n\n        #: The path to the templates folder, relative to\n        #: :attr:`root_path`, to add to the template loader. ``None`` if\n        #: templates should not be added.\n        self.template_folder = template_folder\n\n        if root_path is None:\n            root_path = get_root_path(self.import_name)\n\n        #: Absolute path to the package on the filesystem. Used to look\n        #: up resources contained in the package.\n        self.root_path = root_path\n\n        #: The Click command group for registering CLI commands for this\n        #: object. The commands are available from the ``flask`` command\n        #: once the application has been discovered and blueprints have\n        #: been registered.\n        self.cli = AppGroup()\n\n        #: A dictionary mapping endpoint names to view functions.\n        #:\n        #: To register a view function, use the :meth:`route` decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.view_functions: t.Dict[str, t.Callable] = {}\n\n        #: A data structure of registered error handlers, in the format\n        #: ``{scope: {code: {class: handler}}}```. The ``scope`` key is\n        #: the name of a blueprint the handlers are active for, or\n        #: ``None`` for all requests. The ``code`` key is the HTTP\n        #: status code for ``HTTPException``, or ``None`` for\n        #: other exceptions. The innermost dictionary maps exception\n        #: classes to handler functions.\n        #:\n        #: To register an error handler, use the :meth:`errorhandler`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.error_handler_spec: t.Dict[\n            AppOrBlueprintKey,\n            t.Dict[\n                t.Optional[int],\n                t.Dict[t.Type[Exception], \"ErrorHandlerCallable[Exception]\"],\n            ],\n        ] = defaultdict(lambda: defaultdict(dict))\n\n        #: A data structure of functions to call at the beginning of\n        #: each request, in the format ``{scope: [functions]}``. The\n        #: ``scope`` key is the name of a blueprint the functions are\n        #: active for, or ``None`` for all requests.\n        #:\n        #: To register a function, use the :meth:`before_request`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.before_request_funcs: t.Dict[\n            AppOrBlueprintKey, t.List[BeforeRequestCallable]\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call at the end of each\n        #: request, in the format ``{scope: [functions]}``. The\n        #: ``scope`` key is the name of a blueprint the functions are\n        #: active for, or ``None`` for all requests.\n        #:\n        #: To register a function, use the :meth:`after_request`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.after_request_funcs: t.Dict[\n            AppOrBlueprintKey, t.List[AfterRequestCallable]\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call at the end of each\n        #: request even if an exception is raised, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the :meth:`teardown_request`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.teardown_request_funcs: t.Dict[\n            AppOrBlueprintKey, t.List[TeardownCallable]\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call to pass extra context\n        #: values when rendering templates, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the :meth:`context_processor`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.template_context_processors: t.Dict[\n            AppOrBlueprintKey, t.List[TemplateContextProcessorCallable]\n        ] = defaultdict(list, {None: [_default_template_ctx_processor]})\n\n        #: A data structure of functions to call to modify the keyword\n        #: arguments passed to the view function, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the\n        #: :meth:`url_value_preprocessor` decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.url_value_preprocessors: t.Dict[\n            AppOrBlueprintKey,\n            t.List[URLValuePreprocessorCallable],\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call to modify the keyword\n        #: arguments when generating URLs, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the :meth:`url_defaults`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.url_default_functions: t.Dict[\n            AppOrBlueprintKey, t.List[URLDefaultCallable]\n        ] = defaultdict(list)\n\n    def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {self.name!r}>\"\n\n    def _is_setup_finished(self) -> bool:\n        raise NotImplementedError\n\n    @property\n    def static_folder(self) -> t.Optional[str]:\n        \"\"\"The absolute path to the configured static folder. ``None``\n        if no static folder is set.\n        \"\"\"\n        if self._static_folder is not None:\n            return os.path.join(self.root_path, self._static_folder)\n        else:\n            return None\n\n    @static_folder.setter\n    def static_folder(self, value: t.Optional[t.Union[str, os.PathLike]]) -> None:\n        if value is not None:\n            value = os.fspath(value).rstrip(r\"\\/\")\n\n        self._static_folder = value\n\n    @property\n    def has_static_folder(self) -> bool:\n        \"\"\"``True`` if :attr:`static_folder` is set.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        return self.static_folder is not None\n\n    @property\n    def static_url_path(self) -> t.Optional[str]:\n        \"\"\"The URL prefix that the static route will be accessible from.\n\n        If it was not configured during init, it is derived from\n        :attr:`static_folder`.\n        \"\"\"\n        if self._static_url_path is not None:\n            return self._static_url_path\n\n        if self.static_folder is not None:\n            basename = os.path.basename(self.static_folder)\n            return f\"/{basename}\".rstrip(\"/\")\n\n        return None\n\n    @static_url_path.setter\n    def static_url_path(self, value: t.Optional[str]) -> None:\n        if value is not None:\n            value = value.rstrip(\"/\")\n\n        self._static_url_path = value\n\n    def get_send_file_max_age(self, filename: t.Optional[str]) -> t.Optional[int]:\n        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n        value for a given file path if it wasn't passed.\n\n        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\n        the configuration of :data:`~flask.current_app`. This defaults\n        to ``None``, which tells the browser to use conditional requests\n        instead of a timed cache, which is usually preferable.\n\n        .. versionchanged:: 2.0\n            The default configuration is ``None`` instead of 12 hours.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        value = current_app.send_file_max_age_default\n\n        if value is None:\n            return None\n\n        return int(value.total_seconds())\n\n    def send_static_file(self, filename: str) -> \"Response\":\n        \"\"\"The view function used to serve files from\n        :attr:`static_folder`. A route is automatically registered for\n        this view at :attr:`static_url_path` if :attr:`static_folder` is\n        set.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if not self.has_static_folder:\n            raise RuntimeError(\"'static_folder' must be set to serve static_files.\")\n\n        # send_file only knows to call get_send_file_max_age on the app,\n        # call it here so it works for blueprints too.\n        max_age = self.get_send_file_max_age(filename)\n        return send_from_directory(\n            t.cast(str, self.static_folder), filename, max_age=max_age\n        )\n\n    @locked_cached_property\n    def jinja_loader(self) -> t.Optional[FileSystemLoader]:\n        \"\"\"The Jinja loader for this object's templates. By default this\n        is a class :class:`jinja2.loaders.FileSystemLoader` to\n        :attr:`template_folder` if it is set.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if self.template_folder is not None:\n            return FileSystemLoader(os.path.join(self.root_path, self.template_folder))\n        else:\n            return None\n\n    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to :attr:`root_path` for\n        reading.\n\n        For example, if the file ``schema.sql`` is next to the file\n        ``app.py`` where the ``Flask`` app is defined, it can be opened\n        with:\n\n        .. code-block:: python\n\n            with app.open_resource(\"schema.sql\") as f:\n                conn.executescript(f.read())\n\n        :param resource: Path to the resource relative to\n            :attr:`root_path`.\n        :param mode: Open the file in this mode. Only reading is\n            supported, valid values are \"r\" (or \"rt\") and \"rb\".\n        \"\"\"\n        if mode not in {\"r\", \"rt\", \"rb\"}:\n            raise ValueError(\"Resources can only be opened for reading.\")\n\n        return open(os.path.join(self.root_path, resource), mode)\n\n    def _method_route(self, method: str, rule: str, options: dict) -> t.Callable:\n        if \"methods\" in options:\n            raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n\n        return self.route(rule, methods=[method], **options)\n\n    def get(self, rule: str, **options: t.Any) -> t.Callable:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"GET\", rule, options)\n\n    def post(self, rule: str, **options: t.Any) -> t.Callable:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"POST\", rule, options)\n\n    def put(self, rule: str, **options: t.Any) -> t.Callable:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"PUT\", rule, options)\n\n    def delete(self, rule: str, **options: t.Any) -> t.Callable:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"DELETE\", rule, options)\n\n    def patch(self, rule: str, **options: t.Any) -> t.Callable:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"PATCH\", rule, options)\n\n    def route(self, rule: str, **options: t.Any) -> t.Callable:\n        \"\"\"Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                return \"Hello, World!\"\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n        ``OPTIONS`` are added automatically.\n\n        :param rule: The URL rule string.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        \"\"\"\n\n        def decorator(f: t.Callable) -> t.Callable:\n            endpoint = options.pop(\"endpoint\", None)\n            self.add_url_rule(rule, endpoint, f, **options)\n            return f\n\n        return decorator\n\n    @setupmethod\n    def add_url_rule(\n        self,\n        rule: str,\n        endpoint: t.Optional[str] = None,\n        view_func: t.Optional[t.Callable] = None,\n        provide_automatic_options: t.Optional[bool] = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Register a rule for routing incoming requests and building\n        URLs. The :meth:`route` decorator is a shortcut to call this\n        with the ``view_func`` argument. These are equivalent:\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                ...\n\n        .. code-block:: python\n\n            def index():\n                ...\n\n            app.add_url_rule(\"/\", view_func=index)\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed. An error\n        will be raised if a function has already been registered for the\n        endpoint.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is\n        always added automatically, and ``OPTIONS`` is added\n        automatically by default.\n\n        ``view_func`` does not necessarily need to be passed, but if the\n        rule should participate in routing an endpoint name must be\n        associated with a view function at some point with the\n        :meth:`endpoint` decorator.\n\n        .. code-block:: python\n\n            app.add_url_rule(\"/\", endpoint=\"index\")\n\n            @app.endpoint(\"index\")\n            def index():\n                ...\n\n        If ``view_func`` has a ``required_methods`` attribute, those\n        methods are added to the passed and automatic methods. If it\n        has a ``provide_automatic_methods`` attribute, it is used as the\n        default if the parameter is not passed.\n\n        :param rule: The URL rule string.\n        :param endpoint: The endpoint name to associate with the rule\n            and view function. Used when routing and building URLs.\n            Defaults to ``view_func.__name__``.\n        :param view_func: The view function to associate with the\n            endpoint name.\n        :param provide_automatic_options: Add the ``OPTIONS`` method and\n            respond to ``OPTIONS`` requests automatically.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        \"\"\"\n        raise NotImplementedError\n\n    def endpoint(self, endpoint: str) -> t.Callable:\n        \"\"\"Decorate a view function to register it for the given\n        endpoint. Used if a rule is added without a ``view_func`` with\n        :meth:`add_url_rule`.\n\n        .. code-block:: python\n\n            app.add_url_rule(\"/ex\", endpoint=\"example\")\n\n            @app.endpoint(\"example\")\n            def example():\n                ...\n\n        :param endpoint: The endpoint name to associate with the view\n            function.\n        \"\"\"\n\n        def decorator(f):\n            self.view_functions[endpoint] = f\n            return f\n\n        return decorator\n\n    @setupmethod\n    def before_request(self, f: BeforeRequestCallable) -> BeforeRequestCallable:\n        \"\"\"Register a function to run before each request.\n\n        For example, this can be used to open a database connection, or\n        to load the logged in user from the session.\n\n        .. code-block:: python\n\n            @app.before_request\n            def load_user():\n                if \"user_id\" in session:\n                    g.user = db.session.get(session[\"user_id\"])\n\n        The function will be called without any arguments. If it returns\n        a non-``None`` value, the value is handled as if it was the\n        return value from the view, and further request handling is\n        stopped.\n        \"\"\"\n        self.before_request_funcs.setdefault(None, []).append(f)\n        return f\n\n    @setupmethod\n    def after_request(self, f: AfterRequestCallable) -> AfterRequestCallable:\n        \"\"\"Register a function to run after each request to this object.\n\n        The function is called with the response object, and must return\n        a response object. This allows the functions to modify or\n        replace the response before it is sent.\n\n        If a function raises an exception, any remaining\n        ``after_request`` functions will not be called. Therefore, this\n        should not be used for actions that must execute, such as to\n        close resources. Use :meth:`teardown_request` for that.\n        \"\"\"\n        self.after_request_funcs.setdefault(None, []).append(f)\n        return f\n\n    @setupmethod\n    def teardown_request(self, f: TeardownCallable) -> TeardownCallable:\n        \"\"\"Register a function to be run at the end of each request,\n        regardless of whether there was an exception or not.  These functions\n        are executed when the request context is popped, even if not an\n        actual request was performed.\n\n        Example::\n\n            ctx = app.test_request_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the request context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Teardown functions must avoid raising exceptions, since they . If they\n        execute code that might fail they\n        will have to surround the execution of these code by try/except\n        statements and log occurring errors.\n\n        When a teardown function was called because of an exception it will\n        be passed an error object.\n\n        The return values of teardown functions are ignored.\n\n        .. admonition:: Debug Note\n\n           In debug mode Flask will not tear down a request on an exception\n           immediately.  Instead it will keep it alive so that the interactive\n           debugger can still access it.  This behavior can be controlled\n           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n        \"\"\"\n        self.teardown_request_funcs.setdefault(None, []).append(f)\n        return f\n\n    @setupmethod\n    def context_processor(\n        self, f: TemplateContextProcessorCallable\n    ) -> TemplateContextProcessorCallable:\n        \"\"\"Registers a template context processor function.\"\"\"\n        self.template_context_processors[None].append(f)\n        return f\n\n    @setupmethod\n    def url_value_preprocessor(\n        self, f: URLValuePreprocessorCallable\n    ) -> URLValuePreprocessorCallable:\n        \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n        \"\"\"\n        self.url_value_preprocessors[None].append(f)\n        return f\n\n    @setupmethod\n    def url_defaults(self, f: URLDefaultCallable) -> URLDefaultCallable:\n        \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n        \"\"\"\n        self.url_default_functions[None].append(f)\n        return f\n\n    @setupmethod\n    def errorhandler(\n        self, code_or_exception: t.Union[t.Type[GenericException], int]\n    ) -> t.Callable[\n        [\"ErrorHandlerCallable[GenericException]\"],\n        \"ErrorHandlerCallable[GenericException]\",\n    ]:\n        \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\n\n        def decorator(\n            f: \"ErrorHandlerCallable[GenericException]\",\n        ) -> \"ErrorHandlerCallable[GenericException]\":\n            self.register_error_handler(code_or_exception, f)\n            return f\n\n        return decorator\n\n    @setupmethod\n    def register_error_handler(\n        self,\n        code_or_exception: t.Union[t.Type[GenericException], int],\n        f: \"ErrorHandlerCallable[GenericException]\",\n    ) -> None:\n        \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        if isinstance(code_or_exception, HTTPException):  # old broken behavior\n            raise ValueError(\n                \"Tried to register a handler for an exception instance\"\n                f\" {code_or_exception!r}. Handlers can only be\"\n                \" registered for exception classes or HTTP error codes.\"\n            )\n\n        try:\n            exc_class, code = self._get_exc_class_and_code(code_or_exception)\n        except KeyError:\n            raise KeyError(\n                f\"'{code_or_exception}' is not a recognized HTTP error\"\n                \" code. Use a subclass of HTTPException with that code\"\n                \" instead.\"\n            ) from None\n\n        self.error_handler_spec[None][code][exc_class] = t.cast(\n            \"ErrorHandlerCallable[Exception]\", f\n        )\n\n    @staticmethod\n    def _get_exc_class_and_code(\n        exc_class_or_code: t.Union[t.Type[Exception], int]\n    ) -> t.Tuple[t.Type[Exception], t.Optional[int]]:\n        \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\n        exc_class: t.Type[Exception]\n        if isinstance(exc_class_or_code, int):\n            exc_class = default_exceptions[exc_class_or_code]\n        else:\n            exc_class = exc_class_or_code\n\n        assert issubclass(\n            exc_class, Exception\n        ), \"Custom exceptions must be subclasses of Exception.\"\n\n        if issubclass(exc_class, HTTPException):\n            return exc_class, exc_class.code\n        else:\n            return exc_class, None\n\n\ndef _endpoint_from_view_func(view_func: t.Callable) -> str:\n    \"\"\"Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    \"\"\"\n    assert view_func is not None, \"expected view func if endpoint is not provided.\"\n    return view_func.__name__\n\n\ndef _matching_loader_thinks_module_is_package(loader, mod_name):\n    \"\"\"Attempt to figure out if the given name is a package or a module.\n\n    :param: loader: The loader that handled the name.\n    :param mod_name: The name of the package or module.\n    \"\"\"\n    # Use loader.is_package if it's available.\n    if hasattr(loader, \"is_package\"):\n        return loader.is_package(mod_name)\n\n    cls = type(loader)\n\n    # NamespaceLoader doesn't implement is_package, but all names it\n    # loads must be packages.\n    if cls.__module__ == \"_frozen_importlib\" and cls.__name__ == \"NamespaceLoader\":\n        return True\n\n    # Otherwise we need to fail with an error that explains what went\n    # wrong.\n    raise AttributeError(\n        f\"'{cls.__name__}.is_package()' must be implemented for PEP 302\"\n        f\" import hooks.\"\n    )\n\n\ndef _find_package_path(root_mod_name):\n    \"\"\"Find the path that contains the package or module.\"\"\"\n    try:\n        spec = importlib.util.find_spec(root_mod_name)\n\n        if spec is None:\n            raise ValueError(\"not found\")\n    # ImportError: the machinery told us it does not exist\n    # ValueError:\n    #    - the module name was invalid\n    #    - the module name is __main__\n    #    - *we* raised `ValueError` due to `spec` being `None`\n    except (ImportError, ValueError):\n        pass  # handled below\n    else:\n        # namespace package\n        if spec.origin in {\"namespace\", None}:\n            return os.path.dirname(next(iter(spec.submodule_search_locations)))\n        # a package (with __init__.py)\n        elif spec.submodule_search_locations:\n            return os.path.dirname(os.path.dirname(spec.origin))\n        # just a normal module\n        else:\n            return os.path.dirname(spec.origin)\n\n    # we were unable to find the `package_path` using PEP 451 loaders\n    loader = pkgutil.get_loader(root_mod_name)\n\n    if loader is None or root_mod_name == \"__main__\":\n        # import name is not found, or interactive/main module\n        return os.getcwd()\n\n    if hasattr(loader, \"get_filename\"):\n        filename = loader.get_filename(root_mod_name)\n    elif hasattr(loader, \"archive\"):\n        # zipimporter's loader.archive points to the .egg or .zip file.\n        filename = loader.archive\n    else:\n        # At least one loader is missing both get_filename and archive:\n        # Google App Engine's HardenedModulesHook, use __file__.\n        filename = importlib.import_module(root_mod_name).__file__\n\n    package_path = os.path.abspath(os.path.dirname(filename))\n\n    # If the imported name is a package, filename is currently pointing\n    # to the root of the package, need to get the current directory.\n    if _matching_loader_thinks_module_is_package(loader, root_mod_name):\n        package_path = os.path.dirname(package_path)\n\n    return package_path\n\n\ndef find_package(import_name: str):\n    \"\"\"Find the prefix that a package is installed under, and the path\n    that it would be imported from.\n\n    The prefix is the directory containing the standard directory\n    hierarchy (lib, bin, etc.). If the package is not installed to the\n    system (:attr:`sys.prefix`) or a virtualenv (``site-packages``),\n    ``None`` is returned.\n\n    The path is the entry in :attr:`sys.path` that contains the package\n    for import. If the package is not installed, it's assumed that the\n    package was imported from the current working directory.\n    \"\"\"\n    root_mod_name, _, _ = import_name.partition(\".\")\n    package_path = _find_package_path(root_mod_name)\n    py_prefix = os.path.abspath(sys.prefix)\n\n    # installed to the system\n    if package_path.startswith(py_prefix):\n        return py_prefix, package_path\n\n    site_parent, site_folder = os.path.split(package_path)\n\n    # installed to a virtualenv\n    if site_folder.lower() == \"site-packages\":\n        parent, folder = os.path.split(site_parent)\n\n        # Windows (prefix/lib/site-packages)\n        if folder.lower() == \"lib\":\n            return parent, package_path\n\n        # Unix (prefix/lib/pythonX.Y/site-packages)\n        if os.path.basename(parent).lower() == \"lib\":\n            return os.path.dirname(parent), package_path\n\n        # something else (prefix/site-packages)\n        return site_parent, package_path\n\n    # not installed\n    return None, package_path\n", 875], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py": ["\"\"\"Common operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The \"os.path\" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Mac, Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. macpath, ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n\"\"\"\n\n# Strings representing various path-related bits and pieces.\n# These are primarily for export; internally, they are hardcoded.\n# Should be set before imports for resolving cyclic dependency.\ncurdir = '.'\npardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\n\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"samefile\",\"sameopenfile\",\"samestat\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\"extsep\",\n           \"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"commonpath\"]\n\n\ndef _get_sep(path):\n    if isinstance(path, bytes):\n        return b'/'\n    else:\n        return '/'\n\n# Normalize the case of a pathname.  Trivial in Posix, string.lower on Mac.\n# On MS-DOS this may also turn slashes into backslashes; however, other\n# normalizations (such as optimizing '../' away) are not allowed\n# (another function should be defined to do that).\n\ndef normcase(s):\n    \"\"\"Normalize case of pathname.  Has no effect under Posix\"\"\"\n    s = os.fspath(s)\n    if not isinstance(s, (bytes, str)):\n        raise TypeError(\"normcase() argument must be str or bytes, \"\n                        \"not '{}'\".format(s.__class__.__name__))\n    return s\n\n\n# Return whether a path is absolute.\n# Trivial in Posix, harder on the Mac or MS-DOS.\n\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    sep = _get_sep(s)\n    return s.startswith(sep)\n\n\n# Join pathnames.\n# Ignore the previous parts if a part is absolute.\n# Insert a '/' unless the first part is empty or already ends in '/'.\n\ndef join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator.\"\"\"\n    a = os.fspath(a)\n    sep = _get_sep(a)\n    path = a\n    try:\n        if not p:\n            path[:0] + sep  #23780: Ensure compatible data type even if p is null.\n        for b in map(os.fspath, p):\n            if b.startswith(sep):\n                path = b\n            elif not path or path.endswith(sep):\n                path += b\n            else:\n                path += sep + b\n    except (TypeError, AttributeError, BytesWarning):\n        genericpath._check_arg_types('join', a, *p)\n        raise\n    return path\n\n\n# Split a path in head (everything up to the last '/') and tail (the\n# rest).  If the path ends in '/', tail will be empty.  If there is no\n# '/' in the path, head  will be empty.\n# Trailing '/'es are stripped from head unless it is the root.\n\ndef split(p):\n    \"\"\"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n    everything after the final slash.  Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\ndef splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        sep = b'/'\n        extsep = b'.'\n    else:\n        sep = '/'\n        extsep = '.'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__\n\n# Split a pathname into a drive specification and the rest of the\n# path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.\n\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    p = os.fspath(p)\n    return p[:0], p\n\n\n# Return the tail (basename) part of a path, same as split(path)[1].\n\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\n\n\n# Return the head (dirname) part of a path, same as split(path)[0].\n\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\n\n\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\n\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n\n# Being true for dangling symbolic links is also useful.\n\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        os.lstat(path)\n    except OSError:\n        return False\n    return True\n\n\n# Is a path a mount point?\n# (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)\n\ndef ismount(path):\n    \"\"\"Test whether a path is a mount point\"\"\"\n    try:\n        s1 = os.lstat(path)\n    except OSError:\n        # It doesn't exist -- so not a mount point. :-)\n        return False\n    else:\n        # A symlink can never be a mount point\n        if stat.S_ISLNK(s1.st_mode):\n            return False\n\n    if isinstance(path, bytes):\n        parent = join(path, b'..')\n    else:\n        parent = join(path, '..')\n    parent = realpath(parent)\n    try:\n        s2 = os.lstat(parent)\n    except OSError:\n        return False\n\n    dev1 = s1.st_dev\n    dev2 = s2.st_dev\n    if dev1 != dev2:\n        return True     # path/.. on a different device as path\n    ino1 = s1.st_ino\n    ino2 = s2.st_ino\n    if ino1 == ino2:\n        return True     # path/.. is the same i-node as path\n    return False\n\n\n# Expand paths beginning with '~' or '~user'.\n# '~' means $HOME; '~user' means that user's home directory.\n# If the path doesn't begin with '~', or if the user or $HOME is unknown,\n# the path is returned unchanged (leaving error reporting to whatever\n# function is called with the expanded path as argument).\n# See also module 'glob' for expansion of *, ? and [...] in pathnames.\n# (A function should also be defined to do full *sh-style environment\n# variable expansion.)\n\ndef expanduser(path):\n    \"\"\"Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path\n    sep = _get_sep(path)\n    i = path.find(sep, 1)\n    if i < 0:\n        i = len(path)\n    if i == 1:\n        if 'HOME' not in os.environ:\n            import pwd\n            try:\n                userhome = pwd.getpwuid(os.getuid()).pw_dir\n            except KeyError:\n                # bpo-10496: if the current user identifier doesn't exist in the\n                # password database, return the path unchanged\n                return path\n        else:\n            userhome = os.environ['HOME']\n    else:\n        import pwd\n        name = path[1:i]\n        if isinstance(name, bytes):\n            name = str(name, 'ASCII')\n        try:\n            pwent = pwd.getpwnam(name)\n        except KeyError:\n            # bpo-10496: if the user name from the path doesn't exist in the\n            # password database, return the path unchanged\n            return path\n        userhome = pwent.pw_dir\n    if isinstance(path, bytes):\n        userhome = os.fsencode(userhome)\n        root = b'/'\n    else:\n        root = '/'\n    userhome = userhome.rstrip(root)\n    return (userhome + path[i:]) or root\n\n\n# Expand paths containing shell variable substitutions.\n# This expands the forms $variable and ${variable} only.\n# Non-existent variables are left unchanged.\n\n_varprog = None\n_varprogb = None\n\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:\n            import re\n            _varprogb = re.compile(br'\\$(\\w+|\\{[^}]*\\})', re.ASCII)\n        search = _varprogb.search\n        start = b'{'\n        end = b'}'\n        environ = getattr(os, 'environb', None)\n    else:\n        if '$' not in path:\n            return path\n        if not _varprog:\n            import re\n            _varprog = re.compile(r'\\$(\\w+|\\{[^}]*\\})', re.ASCII)\n        search = _varprog.search\n        start = '{'\n        end = '}'\n        environ = os.environ\n    i = 0\n    while True:\n        m = search(path, i)\n        if not m:\n            break\n        i, j = m.span(0)\n        name = m.group(1)\n        if name.startswith(start) and name.endswith(end):\n            name = name[1:-1]\n        try:\n            if environ is None:\n                value = os.fsencode(os.environ[os.fsdecode(name)])\n            else:\n                value = environ[name]\n        except KeyError:\n            i = j\n        else:\n            tail = path[j:]\n            path = path[:i] + value\n            i = len(path)\n            path += tail\n    return path\n\n\n# Normalize a path, e.g. A//B, A/./B and A/foo/../B all become A/B.\n# It should be understood that this may change the meaning of the path\n# if it contains symbolic links!\n\ndef normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'/'\n        empty = b''\n        dot = b'.'\n        dotdot = b'..'\n    else:\n        sep = '/'\n        empty = ''\n        dot = '.'\n        dotdot = '..'\n    if path == empty:\n        return dot\n    initial_slashes = path.startswith(sep)\n    # POSIX allows one or two initial slashes, but treats three or more\n    # as single slash.\n    if (initial_slashes and\n        path.startswith(sep*2) and not path.startswith(sep*3)):\n        initial_slashes = 2\n    comps = path.split(sep)\n    new_comps = []\n    for comp in comps:\n        if comp in (empty, dot):\n            continue\n        if (comp != dotdot or (not initial_slashes and not new_comps) or\n             (new_comps and new_comps[-1] == dotdot)):\n            new_comps.append(comp)\n        elif new_comps:\n            new_comps.pop()\n    comps = new_comps\n    path = sep.join(comps)\n    if initial_slashes:\n        path = sep*initial_slashes + path\n    return path or dot\n\n\ndef abspath(path):\n    \"\"\"Return an absolute path.\"\"\"\n    path = os.fspath(path)\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\n\n\n# Return a canonical path (i.e. the absolute location of a file on the\n# filesystem).\n\ndef realpath(filename):\n    \"\"\"Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.\"\"\"\n    filename = os.fspath(filename)\n    path, ok = _joinrealpath(filename[:0], filename, {})\n    return abspath(path)\n\n# Join two paths, normalizing and eliminating any symbolic links\n# encountered in the second path.\ndef _joinrealpath(path, rest, seen):\n    if isinstance(path, bytes):\n        sep = b'/'\n        curdir = b'.'\n        pardir = b'..'\n    else:\n        sep = '/'\n        curdir = '.'\n        pardir = '..'\n\n    if isabs(rest):\n        rest = rest[1:]\n        path = sep\n\n    while rest:\n        name, _, rest = rest.partition(sep)\n        if not name or name == curdir:\n            # current dir\n            continue\n        if name == pardir:\n            # parent dir\n            if path:\n                path, name = split(path)\n                if name == pardir:\n                    path = join(path, pardir, pardir)\n            else:\n                path = pardir\n            continue\n        newpath = join(path, name)\n        if not islink(newpath):\n            path = newpath\n            continue\n        # Resolve the symbolic link\n        if newpath in seen:\n            # Already seen this path\n            path = seen[newpath]\n            if path is not None:\n                # use cached value\n                continue\n            # The symlink is not resolved, so we must have a symlink loop.\n            # Return already resolved part + rest of the path unchanged.\n            return join(newpath, rest), False\n        seen[newpath] = None # not resolved symlink\n        path, ok = _joinrealpath(path, os.readlink(newpath), seen)\n        if not ok:\n            return join(path, rest), False\n        seen[newpath] = path # resolved symlink\n\n    return path, True\n\n\nsupports_unicode_filenames = (sys.platform == 'darwin')\n\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n\n    if not path:\n        raise ValueError(\"no path specified\")\n\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'\n    else:\n        curdir = '.'\n        sep = '/'\n        pardir = '..'\n\n    if start is None:\n        start = curdir\n    else:\n        start = os.fspath(start)\n\n    try:\n        start_list = [x for x in abspath(start).split(sep) if x]\n        path_list = [x for x in abspath(path).split(sep) if x]\n        # Work out how much of the filepath is shared by start and path.\n        i = len(commonprefix([start_list, path_list]))\n\n        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]\n        if not rel_list:\n            return curdir\n        return join(*rel_list)\n    except (TypeError, AttributeError, BytesWarning, DeprecationWarning):\n        genericpath._check_arg_types('relpath', path, start)\n        raise\n\n\n# Return the longest common sub-path of the sequence of paths given as input.\n# The paths are not normalized before comparing them (this is the\n# responsibility of the caller). Any trailing separator is stripped from the\n# returned path.\n\ndef commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'/'\n        curdir = b'.'\n    else:\n        sep = '/'\n        curdir = '.'\n\n    try:\n        split_paths = [path.split(sep) for path in paths]\n\n        try:\n            isabs, = set(p[:1] == sep for p in paths)\n        except ValueError:\n            raise ValueError(\"Can't mix absolute and relative paths\") from None\n\n        split_paths = [[c for c in s if c and c != curdir] for s in split_paths]\n        s1 = min(split_paths)\n        s2 = max(split_paths)\n        common = s1\n        for i, c in enumerate(s1):\n            if c != s2[i]:\n                common = s1[:i]\n                break\n\n        prefix = sep if isabs else sep[:0]\n        return prefix + sep.join(common)\n    except (TypeError, AttributeError):\n        genericpath._check_arg_types('commonpath', *paths)\n        raise\n", 529], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py": ["import os\nimport pkgutil\nimport socket\nimport sys\nimport typing as t\nimport warnings\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom functools import lru_cache\nfrom functools import update_wrapper\nfrom threading import RLock\n\nimport werkzeug.utils\nfrom werkzeug.exceptions import NotFound\nfrom werkzeug.routing import BuildError\nfrom werkzeug.urls import url_quote\n\nfrom .globals import _app_ctx_stack\nfrom .globals import _request_ctx_stack\nfrom .globals import current_app\nfrom .globals import request\nfrom .globals import session\nfrom .signals import message_flashed\n\nif t.TYPE_CHECKING:\n    from .wrappers import Response\n\n\ndef get_env() -> str:\n    \"\"\"Get the environment the app is running in, indicated by the\n    :envvar:`FLASK_ENV` environment variable. The default is\n    ``'production'``.\n    \"\"\"\n    return os.environ.get(\"FLASK_ENV\") or \"production\"\n\n\ndef get_debug_flag() -> bool:\n    \"\"\"Get whether debug mode should be enabled for the app, indicated\n    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n    otherwise.\n    \"\"\"\n    val = os.environ.get(\"FLASK_DEBUG\")\n\n    if not val:\n        return get_env() == \"development\"\n\n    return val.lower() not in (\"0\", \"false\", \"no\")\n\n\ndef get_load_dotenv(default: bool = True) -> bool:\n    \"\"\"Get whether the user has disabled loading dotenv files by setting\n    :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load the\n    files.\n\n    :param default: What to return if the env var isn't set.\n    \"\"\"\n    val = os.environ.get(\"FLASK_SKIP_DOTENV\")\n\n    if not val:\n        return default\n\n    return val.lower() in (\"0\", \"false\", \"no\")\n\n\ndef stream_with_context(\n    generator_or_function: t.Union[\n        t.Iterator[t.AnyStr], t.Callable[..., t.Iterator[t.AnyStr]]\n    ]\n) -> t.Iterator[t.AnyStr]:\n    \"\"\"Request contexts disappear when the response is started on the server.\n    This is done for efficiency reasons and to make it less likely to encounter\n    memory leaks with badly written WSGI middlewares.  The downside is that if\n    you are using streamed responses, the generator cannot access request bound\n    information any more.\n\n    This function however can help you keep the context around for longer::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            @stream_with_context\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(generate())\n\n    Alternatively it can also be used around a specific generator::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(stream_with_context(generate()))\n\n    .. versionadded:: 0.9\n    \"\"\"\n    try:\n        gen = iter(generator_or_function)  # type: ignore\n    except TypeError:\n\n        def decorator(*args: t.Any, **kwargs: t.Any) -> t.Any:\n            gen = generator_or_function(*args, **kwargs)  # type: ignore\n            return stream_with_context(gen)\n\n        return update_wrapper(decorator, generator_or_function)  # type: ignore\n\n    def generator() -> t.Generator:\n        ctx = _request_ctx_stack.top\n        if ctx is None:\n            raise RuntimeError(\n                \"Attempted to stream with context but \"\n                \"there was no context in the first place to keep around.\"\n            )\n        with ctx:\n            # Dummy sentinel.  Has to be inside the context block or we're\n            # not actually keeping the context around.\n            yield None\n\n            # The try/finally is here so that if someone passes a WSGI level\n            # iterator in we're still running the cleanup logic.  Generators\n            # don't need that because they are closed on their destruction\n            # automatically.\n            try:\n                yield from gen\n            finally:\n                if hasattr(gen, \"close\"):\n                    gen.close()  # type: ignore\n\n    # The trick is to start the generator.  Then the code execution runs until\n    # the first dummy None is yielded at which point the context was already\n    # pushed.  This item is discarded.  Then when the iteration continues the\n    # real generator is executed.\n    wrapped_g = generator()\n    next(wrapped_g)\n    return wrapped_g\n\n\ndef make_response(*args: t.Any) -> \"Response\":\n    \"\"\"Sometimes it is necessary to set additional headers in a view.  Because\n    views do not have to return response objects but can return a value that\n    is converted into a response object by Flask itself, it becomes tricky to\n    add headers to it.  This function can be called instead of using a return\n    and you will get a response object which you can use to attach headers.\n\n    If view looked like this and you want to add a new header::\n\n        def index():\n            return render_template('index.html', foo=42)\n\n    You can now do something like this::\n\n        def index():\n            response = make_response(render_template('index.html', foo=42))\n            response.headers['X-Parachutes'] = 'parachutes are cool'\n            return response\n\n    This function accepts the very same arguments you can return from a\n    view function.  This for example creates a response with a 404 error\n    code::\n\n        response = make_response(render_template('not_found.html'), 404)\n\n    The other use case of this function is to force the return value of a\n    view function into a response which is helpful with view\n    decorators::\n\n        response = make_response(view_function())\n        response.headers['X-Parachutes'] = 'parachutes are cool'\n\n    Internally this function does the following things:\n\n    -   if no arguments are passed, it creates a new response argument\n    -   if one argument is passed, :meth:`flask.Flask.make_response`\n        is invoked with it.\n    -   if more than one argument is passed, the arguments are passed\n        to the :meth:`flask.Flask.make_response` function as tuple.\n\n    .. versionadded:: 0.6\n    \"\"\"\n    if not args:\n        return current_app.response_class()\n    if len(args) == 1:\n        args = args[0]\n    return current_app.make_response(args)\n\n\ndef url_for(endpoint: str, **values: t.Any) -> str:\n    \"\"\"Generates a URL to the given endpoint with the method provided.\n\n    Variable arguments that are unknown to the target endpoint are appended\n    to the generated URL as query arguments.  If the value of a query argument\n    is ``None``, the whole pair is skipped.  In case blueprints are active\n    you can shortcut references to the same blueprint by prefixing the\n    local endpoint with a dot (``.``).\n\n    This will reference the index function local to the current blueprint::\n\n        url_for('.index')\n\n    See :ref:`url-building`.\n\n    Configuration values ``APPLICATION_ROOT`` and ``SERVER_NAME`` are only used when\n    generating URLs outside of a request context.\n\n    To integrate applications, :class:`Flask` has a hook to intercept URL build\n    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\n    function results in a :exc:`~werkzeug.routing.BuildError` when the current\n    app does not have a URL for the given endpoint and values.  When it does, the\n    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\n    it is not ``None``, which can return a string to use as the result of\n    `url_for` (instead of `url_for`'s default to raise the\n    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\n    An example::\n\n        def external_url_handler(error, endpoint, values):\n            \"Looks up an external URL when `url_for` cannot build a URL.\"\n            # This is an example of hooking the build_error_handler.\n            # Here, lookup_url is some utility function you've built\n            # which looks up the endpoint in some external URL registry.\n            url = lookup_url(endpoint, **values)\n            if url is None:\n                # External lookup did not have a URL.\n                # Re-raise the BuildError, in context of original traceback.\n                exc_type, exc_value, tb = sys.exc_info()\n                if exc_value is error:\n                    raise exc_type(exc_value).with_traceback(tb)\n                else:\n                    raise error\n            # url_for will use this result, instead of raising BuildError.\n            return url\n\n        app.url_build_error_handlers.append(external_url_handler)\n\n    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\n    `endpoint` and `values` are the arguments passed into `url_for`.  Note\n    that this is for building URLs outside the current application, and not for\n    handling 404 NotFound errors.\n\n    .. versionadded:: 0.10\n       The `_scheme` parameter was added.\n\n    .. versionadded:: 0.9\n       The `_anchor` and `_method` parameters were added.\n\n    .. versionadded:: 0.9\n       Calls :meth:`Flask.handle_build_error` on\n       :exc:`~werkzeug.routing.BuildError`.\n\n    :param endpoint: the endpoint of the URL (name of the function)\n    :param values: the variable arguments of the URL rule\n    :param _external: if set to ``True``, an absolute URL is generated. Server\n      address can be changed via ``SERVER_NAME`` configuration variable which\n      falls back to the `Host` header, then to the IP and port of the request.\n    :param _scheme: a string specifying the desired URL scheme. The `_external`\n      parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\n      behavior uses the same scheme as the current request, or\n      :data:`PREFERRED_URL_SCHEME` if no request context is available.\n      This also can be set to an empty string to build protocol-relative\n      URLs.\n    :param _anchor: if provided this is added as anchor to the URL.\n    :param _method: if provided this explicitly specifies an HTTP method.\n    \"\"\"\n    appctx = _app_ctx_stack.top\n    reqctx = _request_ctx_stack.top\n\n    if appctx is None:\n        raise RuntimeError(\n            \"Attempted to generate a URL without the application context being\"\n            \" pushed. This has to be executed when application context is\"\n            \" available.\"\n        )\n\n    # If request specific information is available we have some extra\n    # features that support \"relative\" URLs.\n    if reqctx is not None:\n        url_adapter = reqctx.url_adapter\n        blueprint_name = request.blueprint\n\n        if endpoint[:1] == \".\":\n            if blueprint_name is not None:\n                endpoint = f\"{blueprint_name}{endpoint}\"\n            else:\n                endpoint = endpoint[1:]\n\n        external = values.pop(\"_external\", False)\n\n    # Otherwise go with the url adapter from the appctx and make\n    # the URLs external by default.\n    else:\n        url_adapter = appctx.url_adapter\n\n        if url_adapter is None:\n            raise RuntimeError(\n                \"Application was not able to create a URL adapter for request\"\n                \" independent URL generation. You might be able to fix this by\"\n                \" setting the SERVER_NAME config variable.\"\n            )\n\n        external = values.pop(\"_external\", True)\n\n    anchor = values.pop(\"_anchor\", None)\n    method = values.pop(\"_method\", None)\n    scheme = values.pop(\"_scheme\", None)\n    appctx.app.inject_url_defaults(endpoint, values)\n\n    # This is not the best way to deal with this but currently the\n    # underlying Werkzeug router does not support overriding the scheme on\n    # a per build call basis.\n    old_scheme = None\n    if scheme is not None:\n        if not external:\n            raise ValueError(\"When specifying _scheme, _external must be True\")\n        old_scheme = url_adapter.url_scheme\n        url_adapter.url_scheme = scheme\n\n    try:\n        try:\n            rv = url_adapter.build(\n                endpoint, values, method=method, force_external=external\n            )\n        finally:\n            if old_scheme is not None:\n                url_adapter.url_scheme = old_scheme\n    except BuildError as error:\n        # We need to inject the values again so that the app callback can\n        # deal with that sort of stuff.\n        values[\"_external\"] = external\n        values[\"_anchor\"] = anchor\n        values[\"_method\"] = method\n        values[\"_scheme\"] = scheme\n        return appctx.app.handle_url_build_error(error, endpoint, values)\n\n    if anchor is not None:\n        rv += f\"#{url_quote(anchor)}\"\n    return rv\n\n\ndef get_template_attribute(template_name: str, attribute: str) -> t.Any:\n    \"\"\"Loads a macro (or variable) a template exports.  This can be used to\n    invoke a macro from within Python code.  If you for example have a\n    template named :file:`_cider.html` with the following contents:\n\n    .. sourcecode:: html+jinja\n\n       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n\n    You can access this from Python code like this::\n\n        hello = get_template_attribute('_cider.html', 'hello')\n        return hello('World')\n\n    .. versionadded:: 0.2\n\n    :param template_name: the name of the template\n    :param attribute: the name of the variable of macro to access\n    \"\"\"\n    return getattr(current_app.jinja_env.get_template(template_name).module, attribute)\n\n\ndef flash(message: str, category: str = \"message\") -> None:\n    \"\"\"Flashes a message to the next request.  In order to remove the\n    flashed message from the session and to display it to the user,\n    the template has to call :func:`get_flashed_messages`.\n\n    .. versionchanged:: 0.3\n       `category` parameter added.\n\n    :param message: the message to be flashed.\n    :param category: the category for the message.  The following values\n                     are recommended: ``'message'`` for any kind of message,\n                     ``'error'`` for errors, ``'info'`` for information\n                     messages and ``'warning'`` for warnings.  However any\n                     kind of string can be used as category.\n    \"\"\"\n    # Original implementation:\n    #\n    #     session.setdefault('_flashes', []).append((category, message))\n    #\n    # This assumed that changes made to mutable structures in the session are\n    # always in sync with the session object, which is not true for session\n    # implementations that use external storage for keeping their keys/values.\n    flashes = session.get(\"_flashes\", [])\n    flashes.append((category, message))\n    session[\"_flashes\"] = flashes\n    message_flashed.send(\n        current_app._get_current_object(),  # type: ignore\n        message=message,\n        category=category,\n    )\n\n\ndef get_flashed_messages(\n    with_categories: bool = False, category_filter: t.Iterable[str] = ()\n) -> t.Union[t.List[str], t.List[t.Tuple[str, str]]]:\n    \"\"\"Pulls all flashed messages from the session and returns them.\n    Further calls in the same request to the function will return\n    the same messages.  By default just the messages are returned,\n    but when `with_categories` is set to ``True``, the return value will\n    be a list of tuples in the form ``(category, message)`` instead.\n\n    Filter the flashed messages to one or more categories by providing those\n    categories in `category_filter`.  This allows rendering categories in\n    separate html blocks.  The `with_categories` and `category_filter`\n    arguments are distinct:\n\n    * `with_categories` controls whether categories are returned with message\n      text (``True`` gives a tuple, where ``False`` gives just the message text).\n    * `category_filter` filters the messages down to only those matching the\n      provided categories.\n\n    See :doc:`/patterns/flashing` for examples.\n\n    .. versionchanged:: 0.3\n       `with_categories` parameter added.\n\n    .. versionchanged:: 0.9\n        `category_filter` parameter added.\n\n    :param with_categories: set to ``True`` to also receive categories.\n    :param category_filter: filter of categories to limit return values.  Only\n                            categories in the list will be returned.\n    \"\"\"\n    flashes = _request_ctx_stack.top.flashes\n    if flashes is None:\n        _request_ctx_stack.top.flashes = flashes = (\n            session.pop(\"_flashes\") if \"_flashes\" in session else []\n        )\n    if category_filter:\n        flashes = list(filter(lambda f: f[0] in category_filter, flashes))\n    if not with_categories:\n        return [x[1] for x in flashes]\n    return flashes\n\n\ndef _prepare_send_file_kwargs(\n    download_name: t.Optional[str] = None,\n    attachment_filename: t.Optional[str] = None,\n    etag: t.Optional[t.Union[bool, str]] = None,\n    add_etags: t.Optional[t.Union[bool]] = None,\n    max_age: t.Optional[\n        t.Union[int, t.Callable[[t.Optional[str]], t.Optional[int]]]\n    ] = None,\n    cache_timeout: t.Optional[int] = None,\n    **kwargs: t.Any,\n) -> t.Dict[str, t.Any]:\n    if attachment_filename is not None:\n        warnings.warn(\n            \"The 'attachment_filename' parameter has been renamed to\"\n            \" 'download_name'. The old name will be removed in Flask\"\n            \" 2.1.\",\n            DeprecationWarning,\n            stacklevel=3,\n        )\n        download_name = attachment_filename\n\n    if cache_timeout is not None:\n        warnings.warn(\n            \"The 'cache_timeout' parameter has been renamed to\"\n            \" 'max_age'. The old name will be removed in Flask 2.1.\",\n            DeprecationWarning,\n            stacklevel=3,\n        )\n        max_age = cache_timeout\n\n    if add_etags is not None:\n        warnings.warn(\n            \"The 'add_etags' parameter has been renamed to 'etag'. The\"\n            \" old name will be removed in Flask 2.1.\",\n            DeprecationWarning,\n            stacklevel=3,\n        )\n        etag = add_etags\n\n    if max_age is None:\n        max_age = current_app.get_send_file_max_age\n\n    kwargs.update(\n        environ=request.environ,\n        download_name=download_name,\n        etag=etag,\n        max_age=max_age,\n        use_x_sendfile=current_app.use_x_sendfile,\n        response_class=current_app.response_class,\n        _root_path=current_app.root_path,  # type: ignore\n    )\n    return kwargs\n\n\ndef send_file(\n    path_or_file: t.Union[os.PathLike, str, t.BinaryIO],\n    mimetype: t.Optional[str] = None,\n    as_attachment: bool = False,\n    download_name: t.Optional[str] = None,\n    attachment_filename: t.Optional[str] = None,\n    conditional: bool = True,\n    etag: t.Union[bool, str] = True,\n    add_etags: t.Optional[bool] = None,\n    last_modified: t.Optional[t.Union[datetime, int, float]] = None,\n    max_age: t.Optional[\n        t.Union[int, t.Callable[[t.Optional[str]], t.Optional[int]]]\n    ] = None,\n    cache_timeout: t.Optional[int] = None,\n):\n    \"\"\"Send the contents of a file to the client.\n\n    The first argument can be a file path or a file-like object. Paths\n    are preferred in most cases because Werkzeug can manage the file and\n    get extra information from the path. Passing a file-like object\n    requires that the file is opened in binary mode, and is mostly\n    useful when building a file in memory with :class:`io.BytesIO`.\n\n    Never pass file paths provided by a user. The path is assumed to be\n    trusted, so a user could craft a path to access a file you didn't\n    intend. Use :func:`send_from_directory` to safely serve\n    user-requested paths from within a directory.\n\n    If the WSGI server sets a ``file_wrapper`` in ``environ``, it is\n    used, otherwise Werkzeug's built-in wrapper is used. Alternatively,\n    if the HTTP server supports ``X-Sendfile``, configuring Flask with\n    ``USE_X_SENDFILE = True`` will tell the server to send the given\n    path, which is much more efficient than reading it in Python.\n\n    :param path_or_file: The path to the file to send, relative to the\n        current working directory if a relative path is given.\n        Alternatively, a file-like object opened in binary mode. Make\n        sure the file pointer is seeked to the start of the data.\n    :param mimetype: The MIME type to send for the file. If not\n        provided, it will try to detect it from the file name.\n    :param as_attachment: Indicate to a browser that it should offer to\n        save the file instead of displaying it.\n    :param download_name: The default name browsers will use when saving\n        the file. Defaults to the passed file name.\n    :param conditional: Enable conditional and range responses based on\n        request headers. Requires passing a file path and ``environ``.\n    :param etag: Calculate an ETag for the file, which requires passing\n        a file path. Can also be a string to use instead.\n    :param last_modified: The last modified time to send for the file,\n        in seconds. If not provided, it will try to detect it from the\n        file path.\n    :param max_age: How long the client should cache the file, in\n        seconds. If set, ``Cache-Control`` will be ``public``, otherwise\n        it will be ``no-cache`` to prefer conditional caching.\n\n    .. versionchanged:: 2.0\n        ``download_name`` replaces the ``attachment_filename``\n        parameter. If ``as_attachment=False``, it is passed with\n        ``Content-Disposition: inline`` instead.\n\n    .. versionchanged:: 2.0\n        ``max_age`` replaces the ``cache_timeout`` parameter.\n        ``conditional`` is enabled and ``max_age`` is not set by\n        default.\n\n    .. versionchanged:: 2.0\n        ``etag`` replaces the ``add_etags`` parameter. It can be a\n        string to use instead of generating one.\n\n    .. versionchanged:: 2.0\n        Passing a file-like object that inherits from\n        :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather\n        than sending an empty file.\n\n    .. versionadded:: 2.0\n        Moved the implementation to Werkzeug. This is now a wrapper to\n        pass some Flask-specific arguments.\n\n    .. versionchanged:: 1.1\n        ``filename`` may be a :class:`~os.PathLike` object.\n\n    .. versionchanged:: 1.1\n        Passing a :class:`~io.BytesIO` object supports range requests.\n\n    .. versionchanged:: 1.0.3\n        Filenames are encoded with ASCII instead of Latin-1 for broader\n        compatibility with WSGI servers.\n\n    .. versionchanged:: 1.0\n        UTF-8 filenames as specified in :rfc:`2231` are supported.\n\n    .. versionchanged:: 0.12\n        The filename is no longer automatically inferred from file\n        objects. If you want to use automatic MIME and etag support,\n        pass a filename via ``filename_or_fp`` or\n        ``attachment_filename``.\n\n    .. versionchanged:: 0.12\n        ``attachment_filename`` is preferred over ``filename`` for MIME\n        detection.\n\n    .. versionchanged:: 0.9\n        ``cache_timeout`` defaults to\n        :meth:`Flask.get_send_file_max_age`.\n\n    .. versionchanged:: 0.7\n        MIME guessing and etag support for file-like objects was\n        deprecated because it was unreliable. Pass a filename if you are\n        able to, otherwise attach an etag yourself.\n\n    .. versionchanged:: 0.5\n        The ``add_etags``, ``cache_timeout`` and ``conditional``\n        parameters were added. The default behavior is to add etags.\n\n    .. versionadded:: 0.2\n    \"\"\"\n    return werkzeug.utils.send_file(\n        **_prepare_send_file_kwargs(\n            path_or_file=path_or_file,\n            environ=request.environ,\n            mimetype=mimetype,\n            as_attachment=as_attachment,\n            download_name=download_name,\n            attachment_filename=attachment_filename,\n            conditional=conditional,\n            etag=etag,\n            add_etags=add_etags,\n            last_modified=last_modified,\n            max_age=max_age,\n            cache_timeout=cache_timeout,\n        )\n    )\n\n\ndef safe_join(directory: str, *pathnames: str) -> str:\n    \"\"\"Safely join zero or more untrusted path components to a base\n    directory to avoid escaping the base directory.\n\n    :param directory: The trusted base directory.\n    :param pathnames: The untrusted path components relative to the\n        base directory.\n    :return: A safe path, otherwise ``None``.\n    \"\"\"\n    warnings.warn(\n        \"'flask.helpers.safe_join' is deprecated and will be removed in\"\n        \" Flask 2.1. Use 'werkzeug.utils.safe_join' instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    path = werkzeug.utils.safe_join(directory, *pathnames)\n\n    if path is None:\n        raise NotFound()\n\n    return path\n\n\ndef send_from_directory(\n    directory: t.Union[os.PathLike, str],\n    path: t.Union[os.PathLike, str],\n    filename: t.Optional[str] = None,\n    **kwargs: t.Any,\n) -> \"Response\":\n    \"\"\"Send a file from within a directory using :func:`send_file`.\n\n    .. code-block:: python\n\n        @app.route(\"/uploads/<path:name>\")\n        def download_file(name):\n            return send_from_directory(\n                app.config['UPLOAD_FOLDER'], name, as_attachment=True\n            )\n\n    This is a secure way to serve files from a folder, such as static\n    files or uploads. Uses :func:`~werkzeug.security.safe_join` to\n    ensure the path coming from the client is not maliciously crafted to\n    point outside the specified directory.\n\n    If the final path does not point to an existing regular file,\n    raises a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n\n    :param directory: The directory that ``path`` must be located under.\n    :param path: The path to the file to send, relative to\n        ``directory``.\n    :param kwargs: Arguments to pass to :func:`send_file`.\n\n    .. versionchanged:: 2.0\n        ``path`` replaces the ``filename`` parameter.\n\n    .. versionadded:: 2.0\n        Moved the implementation to Werkzeug. This is now a wrapper to\n        pass some Flask-specific arguments.\n\n    .. versionadded:: 0.5\n    \"\"\"\n    if filename is not None:\n        warnings.warn(\n            \"The 'filename' parameter has been renamed to 'path'. The\"\n            \" old name will be removed in Flask 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        path = filename\n\n    return werkzeug.utils.send_from_directory(  # type: ignore\n        directory, path, **_prepare_send_file_kwargs(**kwargs)\n    )\n\n\ndef get_root_path(import_name: str) -> str:\n    \"\"\"Find the root path of a package, or the path that contains a\n    module. If it cannot be found, returns the current working\n    directory.\n\n    Not to be confused with the value returned by :func:`find_package`.\n\n    :meta private:\n    \"\"\"\n    # Module already imported and has a file attribute. Use that first.\n    mod = sys.modules.get(import_name)\n\n    if mod is not None and hasattr(mod, \"__file__\"):\n        return os.path.dirname(os.path.abspath(mod.__file__))\n\n    # Next attempt: check the loader.\n    loader = pkgutil.get_loader(import_name)\n\n    # Loader does not exist or we're referring to an unloaded main\n    # module or a main module without path (interactive sessions), go\n    # with the current working directory.\n    if loader is None or import_name == \"__main__\":\n        return os.getcwd()\n\n    if hasattr(loader, \"get_filename\"):\n        filepath = loader.get_filename(import_name)  # type: ignore\n    else:\n        # Fall back to imports.\n        __import__(import_name)\n        mod = sys.modules[import_name]\n        filepath = getattr(mod, \"__file__\", None)\n\n        # If we don't have a file path it might be because it is a\n        # namespace package. In this case pick the root path from the\n        # first module that is contained in the package.\n        if filepath is None:\n            raise RuntimeError(\n                \"No root path can be found for the provided module\"\n                f\" {import_name!r}. This can happen because the module\"\n                \" came from an import hook that does not provide file\"\n                \" name information or because it's a namespace package.\"\n                \" In this case the root path needs to be explicitly\"\n                \" provided.\"\n            )\n\n    # filepath is import_name.py for a module, or __init__.py for a package.\n    return os.path.dirname(os.path.abspath(filepath))\n\n\nclass locked_cached_property(werkzeug.utils.cached_property):\n    \"\"\"A :func:`property` that is only evaluated once. Like\n    :class:`werkzeug.utils.cached_property` except access uses a lock\n    for thread safety.\n\n    .. versionchanged:: 2.0\n        Inherits from Werkzeug's ``cached_property`` (and ``property``).\n    \"\"\"\n\n    def __init__(\n        self,\n        fget: t.Callable[[t.Any], t.Any],\n        name: t.Optional[str] = None,\n        doc: t.Optional[str] = None,\n    ) -> None:\n        super().__init__(fget, name=name, doc=doc)\n        self.lock = RLock()\n\n    def __get__(self, obj: object, type: type = None) -> t.Any:  # type: ignore\n        if obj is None:\n            return self\n\n        with self.lock:\n            return super().__get__(obj, type=type)\n\n    def __set__(self, obj: object, value: t.Any) -> None:\n        with self.lock:\n            super().__set__(obj, value)\n\n    def __delete__(self, obj: object) -> None:\n        with self.lock:\n            super().__delete__(obj)\n\n\ndef total_seconds(td: timedelta) -> int:\n    \"\"\"Returns the total seconds from a timedelta object.\n\n    :param timedelta td: the timedelta to be converted in seconds\n\n    :returns: number of seconds\n    :rtype: int\n\n    .. deprecated:: 2.0\n        Will be removed in Flask 2.1. Use\n        :meth:`timedelta.total_seconds` instead.\n    \"\"\"\n    warnings.warn(\n        \"'total_seconds' is deprecated and will be removed in Flask\"\n        \" 2.1. Use 'timedelta.total_seconds' instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return td.days * 60 * 60 * 24 + td.seconds\n\n\ndef is_ip(value: str) -> bool:\n    \"\"\"Determine if the given string is an IP address.\n\n    :param value: value to check\n    :type value: str\n\n    :return: True if string is an IP address\n    :rtype: bool\n    \"\"\"\n    for family in (socket.AF_INET, socket.AF_INET6):\n        try:\n            socket.inet_pton(family, value)\n        except OSError:\n            pass\n        else:\n            return True\n\n    return False\n\n\n@lru_cache(maxsize=None)\ndef _split_blueprint_path(name: str) -> t.List[str]:\n    out: t.List[str] = [name]\n\n    if \".\" in name:\n        out.extend(_split_blueprint_path(name.rpartition(\".\")[0]))\n\n    return out\n", 836], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py": ["import enum\nimport errno\nimport os\nimport sys\nimport typing\nimport typing as t\nfrom collections import abc\nfrom contextlib import contextmanager\nfrom contextlib import ExitStack\nfrom functools import partial\nfrom functools import update_wrapper\nfrom gettext import gettext as _\nfrom gettext import ngettext\nfrom itertools import repeat\n\nfrom . import types\nfrom ._unicodefun import _verify_python_env\nfrom .exceptions import Abort\nfrom .exceptions import BadParameter\nfrom .exceptions import ClickException\nfrom .exceptions import Exit\nfrom .exceptions import MissingParameter\nfrom .exceptions import UsageError\nfrom .formatting import HelpFormatter\nfrom .formatting import join_options\nfrom .globals import pop_context\nfrom .globals import push_context\nfrom .parser import _flag_needs_value\nfrom .parser import OptionParser\nfrom .parser import split_opt\nfrom .termui import confirm\nfrom .termui import prompt\nfrom .termui import style\nfrom .utils import _detect_program_name\nfrom .utils import _expand_args\nfrom .utils import echo\nfrom .utils import make_default_short_help\nfrom .utils import make_str\nfrom .utils import PacifyFlushWrapper\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te\n    from .shell_completion import CompletionItem\n\nF = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])\nV = t.TypeVar(\"V\")\n\n\ndef _complete_visible_commands(\n    ctx: \"Context\", incomplete: str\n) -> t.Iterator[t.Tuple[str, \"Command\"]]:\n    \"\"\"List all the subcommands of a group that start with the\n    incomplete value and aren't hidden.\n\n    :param ctx: Invocation context for the group.\n    :param incomplete: Value being completed. May be empty.\n    \"\"\"\n    multi = t.cast(MultiCommand, ctx.command)\n\n    for name in multi.list_commands(ctx):\n        if name.startswith(incomplete):\n            command = multi.get_command(ctx, name)\n\n            if command is not None and not command.hidden:\n                yield name, command\n\n\ndef _check_multicommand(\n    base_command: \"MultiCommand\", cmd_name: str, cmd: \"Command\", register: bool = False\n) -> None:\n    if not base_command.chain or not isinstance(cmd, MultiCommand):\n        return\n    if register:\n        hint = (\n            \"It is not possible to add multi commands as children to\"\n            \" another multi command that is in chain mode.\"\n        )\n    else:\n        hint = (\n            \"Found a multi command as subcommand to a multi command\"\n            \" that is in chain mode. This is not supported.\"\n        )\n    raise RuntimeError(\n        f\"{hint}. Command {base_command.name!r} is set to chain and\"\n        f\" {cmd_name!r} was added as a subcommand but it in itself is a\"\n        f\" multi command. ({cmd_name!r} is a {type(cmd).__name__}\"\n        f\" within a chained {type(base_command).__name__} named\"\n        f\" {base_command.name!r}).\"\n    )\n\n\ndef batch(iterable: t.Iterable[V], batch_size: int) -> t.List[t.Tuple[V, ...]]:\n    return list(zip(*repeat(iter(iterable), batch_size)))\n\n\n@contextmanager\ndef augment_usage_errors(\n    ctx: \"Context\", param: t.Optional[\"Parameter\"] = None\n) -> t.Iterator[None]:\n    \"\"\"Context manager that attaches extra information to exceptions.\"\"\"\n    try:\n        yield\n    except BadParameter as e:\n        if e.ctx is None:\n            e.ctx = ctx\n        if param is not None and e.param is None:\n            e.param = param\n        raise\n    except UsageError as e:\n        if e.ctx is None:\n            e.ctx = ctx\n        raise\n\n\ndef iter_params_for_processing(\n    invocation_order: t.Sequence[\"Parameter\"],\n    declaration_order: t.Sequence[\"Parameter\"],\n) -> t.List[\"Parameter\"]:\n    \"\"\"Given a sequence of parameters in the order as should be considered\n    for processing and an iterable of parameters that exist, this returns\n    a list in the correct order as they should be processed.\n    \"\"\"\n\n    def sort_key(item: \"Parameter\") -> t.Tuple[bool, float]:\n        try:\n            idx: float = invocation_order.index(item)\n        except ValueError:\n            idx = float(\"inf\")\n\n        return not item.is_eager, idx\n\n    return sorted(declaration_order, key=sort_key)\n\n\nclass ParameterSource(enum.Enum):\n    \"\"\"This is an :class:`~enum.Enum` that indicates the source of a\n    parameter's value.\n\n    Use :meth:`click.Context.get_parameter_source` to get the\n    source for a parameter by name.\n\n    .. versionchanged:: 8.0\n        Use :class:`~enum.Enum` and drop the ``validate`` method.\n\n    .. versionchanged:: 8.0\n        Added the ``PROMPT`` value.\n    \"\"\"\n\n    COMMANDLINE = enum.auto()\n    \"\"\"The value was provided by the command line args.\"\"\"\n    ENVIRONMENT = enum.auto()\n    \"\"\"The value was provided with an environment variable.\"\"\"\n    DEFAULT = enum.auto()\n    \"\"\"Used the default specified by the parameter.\"\"\"\n    DEFAULT_MAP = enum.auto()\n    \"\"\"Used a default provided by :attr:`Context.default_map`.\"\"\"\n    PROMPT = enum.auto()\n    \"\"\"Used a prompt to confirm a default or provide a value.\"\"\"\n\n\nclass Context:\n    \"\"\"The context is a special internal object that holds state relevant\n    for the script execution at every single level.  It's normally invisible\n    to commands unless they opt-in to getting access to it.\n\n    The context is useful as it can pass internal objects around and can\n    control special execution features such as reading data from\n    environment variables.\n\n    A context can be used as context manager in which case it will call\n    :meth:`close` on teardown.\n\n    :param command: the command class for this context.\n    :param parent: the parent context.\n    :param info_name: the info name for this invocation.  Generally this\n                      is the most descriptive name for the script or\n                      command.  For the toplevel script it is usually\n                      the name of the script, for commands below it it's\n                      the name of the script.\n    :param obj: an arbitrary object of user data.\n    :param auto_envvar_prefix: the prefix to use for automatic environment\n                               variables.  If this is `None` then reading\n                               from environment variables is disabled.  This\n                               does not affect manually set environment\n                               variables which are always read.\n    :param default_map: a dictionary (like object) with default values\n                        for parameters.\n    :param terminal_width: the width of the terminal.  The default is\n                           inherit from parent context.  If no context\n                           defines the terminal width then auto\n                           detection will be applied.\n    :param max_content_width: the maximum width for content rendered by\n                              Click (this currently only affects help\n                              pages).  This defaults to 80 characters if\n                              not overridden.  In other words: even if the\n                              terminal is larger than that, Click will not\n                              format things wider than 80 characters by\n                              default.  In addition to that, formatters might\n                              add some safety mapping on the right.\n    :param resilient_parsing: if this flag is enabled then Click will\n                              parse without any interactivity or callback\n                              invocation.  Default values will also be\n                              ignored.  This is useful for implementing\n                              things such as completion support.\n    :param allow_extra_args: if this is set to `True` then extra arguments\n                             at the end will not raise an error and will be\n                             kept on the context.  The default is to inherit\n                             from the command.\n    :param allow_interspersed_args: if this is set to `False` then options\n                                    and arguments cannot be mixed.  The\n                                    default is to inherit from the command.\n    :param ignore_unknown_options: instructs click to ignore options it does\n                                   not know and keeps them for later\n                                   processing.\n    :param help_option_names: optionally a list of strings that define how\n                              the default help parameter is named.  The\n                              default is ``['--help']``.\n    :param token_normalize_func: an optional function that is used to\n                                 normalize tokens (options, choices,\n                                 etc.).  This for instance can be used to\n                                 implement case insensitive behavior.\n    :param color: controls if the terminal supports ANSI colors or not.  The\n                  default is autodetection.  This is only needed if ANSI\n                  codes are used in texts that Click prints which is by\n                  default not the case.  This for instance would affect\n                  help output.\n    :param show_default: Show defaults for all options. If not set,\n        defaults to the value from a parent context. Overrides an\n        option's ``show_default`` argument.\n\n    .. versionchanged:: 8.0\n        The ``show_default`` parameter defaults to the value from the\n        parent context.\n\n    .. versionchanged:: 7.1\n       Added the ``show_default`` parameter.\n\n    .. versionchanged:: 4.0\n        Added the ``color``, ``ignore_unknown_options``, and\n        ``max_content_width`` parameters.\n\n    .. versionchanged:: 3.0\n        Added the ``allow_extra_args`` and ``allow_interspersed_args``\n        parameters.\n\n    .. versionchanged:: 2.0\n        Added the ``resilient_parsing``, ``help_option_names``, and\n        ``token_normalize_func`` parameters.\n    \"\"\"\n\n    #: The formatter class to create with :meth:`make_formatter`.\n    #:\n    #: .. versionadded:: 8.0\n    formatter_class: t.Type[\"HelpFormatter\"] = HelpFormatter\n\n    def __init__(\n        self,\n        command: \"Command\",\n        parent: t.Optional[\"Context\"] = None,\n        info_name: t.Optional[str] = None,\n        obj: t.Optional[t.Any] = None,\n        auto_envvar_prefix: t.Optional[str] = None,\n        default_map: t.Optional[t.Dict[str, t.Any]] = None,\n        terminal_width: t.Optional[int] = None,\n        max_content_width: t.Optional[int] = None,\n        resilient_parsing: bool = False,\n        allow_extra_args: t.Optional[bool] = None,\n        allow_interspersed_args: t.Optional[bool] = None,\n        ignore_unknown_options: t.Optional[bool] = None,\n        help_option_names: t.Optional[t.List[str]] = None,\n        token_normalize_func: t.Optional[t.Callable[[str], str]] = None,\n        color: t.Optional[bool] = None,\n        show_default: t.Optional[bool] = None,\n    ) -> None:\n        #: the parent context or `None` if none exists.\n        self.parent = parent\n        #: the :class:`Command` for this context.\n        self.command = command\n        #: the descriptive information name\n        self.info_name = info_name\n        #: Map of parameter names to their parsed values. Parameters\n        #: with ``expose_value=False`` are not stored.\n        self.params: t.Dict[str, t.Any] = {}\n        #: the leftover arguments.\n        self.args: t.List[str] = []\n        #: protected arguments.  These are arguments that are prepended\n        #: to `args` when certain parsing scenarios are encountered but\n        #: must be never propagated to another arguments.  This is used\n        #: to implement nested parsing.\n        self.protected_args: t.List[str] = []\n\n        if obj is None and parent is not None:\n            obj = parent.obj\n\n        #: the user object stored.\n        self.obj: t.Any = obj\n        self._meta: t.Dict[str, t.Any] = getattr(parent, \"meta\", {})\n\n        #: A dictionary (-like object) with defaults for parameters.\n        if (\n            default_map is None\n            and info_name is not None\n            and parent is not None\n            and parent.default_map is not None\n        ):\n            default_map = parent.default_map.get(info_name)\n\n        self.default_map: t.Optional[t.Dict[str, t.Any]] = default_map\n\n        #: This flag indicates if a subcommand is going to be executed. A\n        #: group callback can use this information to figure out if it's\n        #: being executed directly or because the execution flow passes\n        #: onwards to a subcommand. By default it's None, but it can be\n        #: the name of the subcommand to execute.\n        #:\n        #: If chaining is enabled this will be set to ``'*'`` in case\n        #: any commands are executed.  It is however not possible to\n        #: figure out which ones.  If you require this knowledge you\n        #: should use a :func:`result_callback`.\n        self.invoked_subcommand: t.Optional[str] = None\n\n        if terminal_width is None and parent is not None:\n            terminal_width = parent.terminal_width\n\n        #: The width of the terminal (None is autodetection).\n        self.terminal_width: t.Optional[int] = terminal_width\n\n        if max_content_width is None and parent is not None:\n            max_content_width = parent.max_content_width\n\n        #: The maximum width of formatted content (None implies a sensible\n        #: default which is 80 for most things).\n        self.max_content_width: t.Optional[int] = max_content_width\n\n        if allow_extra_args is None:\n            allow_extra_args = command.allow_extra_args\n\n        #: Indicates if the context allows extra args or if it should\n        #: fail on parsing.\n        #:\n        #: .. versionadded:: 3.0\n        self.allow_extra_args = allow_extra_args\n\n        if allow_interspersed_args is None:\n            allow_interspersed_args = command.allow_interspersed_args\n\n        #: Indicates if the context allows mixing of arguments and\n        #: options or not.\n        #:\n        #: .. versionadded:: 3.0\n        self.allow_interspersed_args: bool = allow_interspersed_args\n\n        if ignore_unknown_options is None:\n            ignore_unknown_options = command.ignore_unknown_options\n\n        #: Instructs click to ignore options that a command does not\n        #: understand and will store it on the context for later\n        #: processing.  This is primarily useful for situations where you\n        #: want to call into external programs.  Generally this pattern is\n        #: strongly discouraged because it's not possibly to losslessly\n        #: forward all arguments.\n        #:\n        #: .. versionadded:: 4.0\n        self.ignore_unknown_options: bool = ignore_unknown_options\n\n        if help_option_names is None:\n            if parent is not None:\n                help_option_names = parent.help_option_names\n            else:\n                help_option_names = [\"--help\"]\n\n        #: The names for the help options.\n        self.help_option_names: t.List[str] = help_option_names\n\n        if token_normalize_func is None and parent is not None:\n            token_normalize_func = parent.token_normalize_func\n\n        #: An optional normalization function for tokens.  This is\n        #: options, choices, commands etc.\n        self.token_normalize_func: t.Optional[\n            t.Callable[[str], str]\n        ] = token_normalize_func\n\n        #: Indicates if resilient parsing is enabled.  In that case Click\n        #: will do its best to not cause any failures and default values\n        #: will be ignored. Useful for completion.\n        self.resilient_parsing: bool = resilient_parsing\n\n        # If there is no envvar prefix yet, but the parent has one and\n        # the command on this level has a name, we can expand the envvar\n        # prefix automatically.\n        if auto_envvar_prefix is None:\n            if (\n                parent is not None\n                and parent.auto_envvar_prefix is not None\n                and self.info_name is not None\n            ):\n                auto_envvar_prefix = (\n                    f\"{parent.auto_envvar_prefix}_{self.info_name.upper()}\"\n                )\n        else:\n            auto_envvar_prefix = auto_envvar_prefix.upper()\n\n        if auto_envvar_prefix is not None:\n            auto_envvar_prefix = auto_envvar_prefix.replace(\"-\", \"_\")\n\n        self.auto_envvar_prefix: t.Optional[str] = auto_envvar_prefix\n\n        if color is None and parent is not None:\n            color = parent.color\n\n        #: Controls if styling output is wanted or not.\n        self.color: t.Optional[bool] = color\n\n        if show_default is None and parent is not None:\n            show_default = parent.show_default\n\n        #: Show option default values when formatting help text.\n        self.show_default: t.Optional[bool] = show_default\n\n        self._close_callbacks: t.List[t.Callable[[], t.Any]] = []\n        self._depth = 0\n        self._parameter_source: t.Dict[str, ParameterSource] = {}\n        self._exit_stack = ExitStack()\n\n    def to_info_dict(self) -> t.Dict[str, t.Any]:\n        \"\"\"Gather information that could be useful for a tool generating\n        user-facing documentation. This traverses the entire CLI\n        structure.\n\n        .. code-block:: python\n\n            with Context(cli) as ctx:\n                info = ctx.to_info_dict()\n\n        .. versionadded:: 8.0\n        \"\"\"\n        return {\n            \"command\": self.command.to_info_dict(self),\n            \"info_name\": self.info_name,\n            \"allow_extra_args\": self.allow_extra_args,\n            \"allow_interspersed_args\": self.allow_interspersed_args,\n            \"ignore_unknown_options\": self.ignore_unknown_options,\n            \"auto_envvar_prefix\": self.auto_envvar_prefix,\n        }\n\n    def __enter__(self) -> \"Context\":\n        self._depth += 1\n        push_context(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):  # type: ignore\n        self._depth -= 1\n        if self._depth == 0:\n            self.close()\n        pop_context()\n\n    @contextmanager\n    def scope(self, cleanup: bool = True) -> t.Iterator[\"Context\"]:\n        \"\"\"This helper method can be used with the context object to promote\n        it to the current thread local (see :func:`get_current_context`).\n        The default behavior of this is to invoke the cleanup functions which\n        can be disabled by setting `cleanup` to `False`.  The cleanup\n        functions are typically used for things such as closing file handles.\n\n        If the cleanup is intended the context object can also be directly\n        used as a context manager.\n\n        Example usage::\n\n            with ctx.scope():\n                assert get_current_context() is ctx\n\n        This is equivalent::\n\n            with ctx:\n                assert get_current_context() is ctx\n\n        .. versionadded:: 5.0\n\n        :param cleanup: controls if the cleanup functions should be run or\n                        not.  The default is to run these functions.  In\n                        some situations the context only wants to be\n                        temporarily pushed in which case this can be disabled.\n                        Nested pushes automatically defer the cleanup.\n        \"\"\"\n        if not cleanup:\n            self._depth += 1\n        try:\n            with self as rv:\n                yield rv\n        finally:\n            if not cleanup:\n                self._depth -= 1\n\n    @property\n    def meta(self) -> t.Dict[str, t.Any]:\n        \"\"\"This is a dictionary which is shared with all the contexts\n        that are nested.  It exists so that click utilities can store some\n        state here if they need to.  It is however the responsibility of\n        that code to manage this dictionary well.\n\n        The keys are supposed to be unique dotted strings.  For instance\n        module paths are a good choice for it.  What is stored in there is\n        irrelevant for the operation of click.  However what is important is\n        that code that places data here adheres to the general semantics of\n        the system.\n\n        Example usage::\n\n            LANG_KEY = f'{__name__}.lang'\n\n            def set_language(value):\n                ctx = get_current_context()\n                ctx.meta[LANG_KEY] = value\n\n            def get_language():\n                return get_current_context().meta.get(LANG_KEY, 'en_US')\n\n        .. versionadded:: 5.0\n        \"\"\"\n        return self._meta\n\n    def make_formatter(self) -> HelpFormatter:\n        \"\"\"Creates the :class:`~click.HelpFormatter` for the help and\n        usage output.\n\n        To quickly customize the formatter class used without overriding\n        this method, set the :attr:`formatter_class` attribute.\n\n        .. versionchanged:: 8.0\n            Added the :attr:`formatter_class` attribute.\n        \"\"\"\n        return self.formatter_class(\n            width=self.terminal_width, max_width=self.max_content_width\n        )\n\n    def with_resource(self, context_manager: t.ContextManager[V]) -> V:\n        \"\"\"Register a resource as if it were used in a ``with``\n        statement. The resource will be cleaned up when the context is\n        popped.\n\n        Uses :meth:`contextlib.ExitStack.enter_context`. It calls the\n        resource's ``__enter__()`` method and returns the result. When\n        the context is popped, it closes the stack, which calls the\n        resource's ``__exit__()`` method.\n\n        To register a cleanup function for something that isn't a\n        context manager, use :meth:`call_on_close`. Or use something\n        from :mod:`contextlib` to turn it into a context manager first.\n\n        .. code-block:: python\n\n            @click.group()\n            @click.option(\"--name\")\n            @click.pass_context\n            def cli(ctx):\n                ctx.obj = ctx.with_resource(connect_db(name))\n\n        :param context_manager: The context manager to enter.\n        :return: Whatever ``context_manager.__enter__()`` returns.\n\n        .. versionadded:: 8.0\n        \"\"\"\n        return self._exit_stack.enter_context(context_manager)\n\n    def call_on_close(self, f: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n        \"\"\"Register a function to be called when the context tears down.\n\n        This can be used to close resources opened during the script\n        execution. Resources that support Python's context manager\n        protocol which would be used in a ``with`` statement should be\n        registered with :meth:`with_resource` instead.\n\n        :param f: The function to execute on teardown.\n        \"\"\"\n        return self._exit_stack.callback(f)\n\n    def close(self) -> None:\n        \"\"\"Invoke all close callbacks registered with\n        :meth:`call_on_close`, and exit all context managers entered\n        with :meth:`with_resource`.\n        \"\"\"\n        self._exit_stack.close()\n        # In case the context is reused, create a new exit stack.\n        self._exit_stack = ExitStack()\n\n    @property\n    def command_path(self) -> str:\n        \"\"\"The computed command path.  This is used for the ``usage``\n        information on the help page.  It's automatically created by\n        combining the info names of the chain of contexts to the root.\n        \"\"\"\n        rv = \"\"\n        if self.info_name is not None:\n            rv = self.info_name\n        if self.parent is not None:\n            parent_command_path = [self.parent.command_path]\n\n            if isinstance(self.parent.command, Command):\n                for param in self.parent.command.get_params(self):\n                    parent_command_path.extend(param.get_usage_pieces(self))\n\n            rv = f\"{' '.join(parent_command_path)} {rv}\"\n        return rv.lstrip()\n\n    def find_root(self) -> \"Context\":\n        \"\"\"Finds the outermost context.\"\"\"\n        node = self\n        while node.parent is not None:\n            node = node.parent\n        return node\n\n    def find_object(self, object_type: t.Type[V]) -> t.Optional[V]:\n        \"\"\"Finds the closest object of a given type.\"\"\"\n        node: t.Optional[\"Context\"] = self\n\n        while node is not None:\n            if isinstance(node.obj, object_type):\n                return node.obj\n\n            node = node.parent\n\n        return None\n\n    def ensure_object(self, object_type: t.Type[V]) -> V:\n        \"\"\"Like :meth:`find_object` but sets the innermost object to a\n        new instance of `object_type` if it does not exist.\n        \"\"\"\n        rv = self.find_object(object_type)\n        if rv is None:\n            self.obj = rv = object_type()\n        return rv\n\n    @typing.overload\n    def lookup_default(\n        self, name: str, call: \"te.Literal[True]\" = True\n    ) -> t.Optional[t.Any]:\n        ...\n\n    @typing.overload\n    def lookup_default(\n        self, name: str, call: \"te.Literal[False]\" = ...\n    ) -> t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]:\n        ...\n\n    def lookup_default(self, name: str, call: bool = True) -> t.Optional[t.Any]:\n        \"\"\"Get the default for a parameter from :attr:`default_map`.\n\n        :param name: Name of the parameter.\n        :param call: If the default is a callable, call it. Disable to\n            return the callable instead.\n\n        .. versionchanged:: 8.0\n            Added the ``call`` parameter.\n        \"\"\"\n        if self.default_map is not None:\n            value = self.default_map.get(name)\n\n            if call and callable(value):\n                return value()\n\n            return value\n\n        return None\n\n    def fail(self, message: str) -> \"te.NoReturn\":\n        \"\"\"Aborts the execution of the program with a specific error\n        message.\n\n        :param message: the error message to fail with.\n        \"\"\"\n        raise UsageError(message, self)\n\n    def abort(self) -> \"te.NoReturn\":\n        \"\"\"Aborts the script.\"\"\"\n        raise Abort()\n\n    def exit(self, code: int = 0) -> \"te.NoReturn\":\n        \"\"\"Exits the application with a given exit code.\"\"\"\n        raise Exit(code)\n\n    def get_usage(self) -> str:\n        \"\"\"Helper method to get formatted usage string for the current\n        context and command.\n        \"\"\"\n        return self.command.get_usage(self)\n\n    def get_help(self) -> str:\n        \"\"\"Helper method to get formatted help page for the current\n        context and command.\n        \"\"\"\n        return self.command.get_help(self)\n\n    def _make_sub_context(self, command: \"Command\") -> \"Context\":\n        \"\"\"Create a new context of the same type as this context, but\n        for a new command.\n\n        :meta private:\n        \"\"\"\n        return type(self)(command, info_name=command.name, parent=self)\n\n    def invoke(\n        __self,  # noqa: B902\n        __callback: t.Union[\"Command\", t.Callable[..., t.Any]],\n        *args: t.Any,\n        **kwargs: t.Any,\n    ) -> t.Any:\n        \"\"\"Invokes a command callback in exactly the way it expects.  There\n        are two ways to invoke this method:\n\n        1.  the first argument can be a callback and all other arguments and\n            keyword arguments are forwarded directly to the function.\n        2.  the first argument is a click command object.  In that case all\n            arguments are forwarded as well but proper click parameters\n            (options and click arguments) must be keyword arguments and Click\n            will fill in defaults.\n\n        Note that before Click 3.2 keyword arguments were not properly filled\n        in against the intention of this code and no context was created.  For\n        more information about this change and why it was done in a bugfix\n        release see :ref:`upgrade-to-3.2`.\n\n        .. versionchanged:: 8.0\n            All ``kwargs`` are tracked in :attr:`params` so they will be\n            passed if :meth:`forward` is called at multiple levels.\n        \"\"\"\n        if isinstance(__callback, Command):\n            other_cmd = __callback\n\n            if other_cmd.callback is None:\n                raise TypeError(\n                    \"The given command does not have a callback that can be invoked.\"\n                )\n            else:\n                __callback = other_cmd.callback\n\n            ctx = __self._make_sub_context(other_cmd)\n\n            for param in other_cmd.params:\n                if param.name not in kwargs and param.expose_value:\n                    kwargs[param.name] = param.type_cast_value(  # type: ignore\n                        ctx, param.get_default(ctx)\n                    )\n\n            # Track all kwargs as params, so that forward() will pass\n            # them on in subsequent calls.\n            ctx.params.update(kwargs)\n        else:\n            ctx = __self\n\n        with augment_usage_errors(__self):\n            with ctx:\n                return __callback(*args, **kwargs)\n\n    def forward(\n        __self, __cmd: \"Command\", *args: t.Any, **kwargs: t.Any  # noqa: B902\n    ) -> t.Any:\n        \"\"\"Similar to :meth:`invoke` but fills in default keyword\n        arguments from the current context if the other command expects\n        it.  This cannot invoke callbacks directly, only other commands.\n\n        .. versionchanged:: 8.0\n            All ``kwargs`` are tracked in :attr:`params` so they will be\n            passed if ``forward`` is called at multiple levels.\n        \"\"\"\n        # Can only forward to other commands, not direct callbacks.\n        if not isinstance(__cmd, Command):\n            raise TypeError(\"Callback is not a command.\")\n\n        for param in __self.params:\n            if param not in kwargs:\n                kwargs[param] = __self.params[param]\n\n        return __self.invoke(__cmd, *args, **kwargs)\n\n    def set_parameter_source(self, name: str, source: ParameterSource) -> None:\n        \"\"\"Set the source of a parameter. This indicates the location\n        from which the value of the parameter was obtained.\n\n        :param name: The name of the parameter.\n        :param source: A member of :class:`~click.core.ParameterSource`.\n        \"\"\"\n        self._parameter_source[name] = source\n\n    def get_parameter_source(self, name: str) -> t.Optional[ParameterSource]:\n        \"\"\"Get the source of a parameter. This indicates the location\n        from which the value of the parameter was obtained.\n\n        This can be useful for determining when a user specified a value\n        on the command line that is the same as the default value. It\n        will be :attr:`~click.core.ParameterSource.DEFAULT` only if the\n        value was actually taken from the default.\n\n        :param name: The name of the parameter.\n        :rtype: ParameterSource\n\n        .. versionchanged:: 8.0\n            Returns ``None`` if the parameter was not provided from any\n            source.\n        \"\"\"\n        return self._parameter_source.get(name)\n\n\nclass BaseCommand:\n    \"\"\"The base command implements the minimal API contract of commands.\n    Most code will never use this as it does not implement a lot of useful\n    functionality but it can act as the direct subclass of alternative\n    parsing methods that do not depend on the Click parser.\n\n    For instance, this can be used to bridge Click and other systems like\n    argparse or docopt.\n\n    Because base commands do not implement a lot of the API that other\n    parts of Click take for granted, they are not supported for all\n    operations.  For instance, they cannot be used with the decorators\n    usually and they have no built-in callback system.\n\n    .. versionchanged:: 2.0\n       Added the `context_settings` parameter.\n\n    :param name: the name of the command to use unless a group overrides it.\n    :param context_settings: an optional dictionary with defaults that are\n                             passed to the context object.\n    \"\"\"\n\n    #: The context class to create with :meth:`make_context`.\n    #:\n    #: .. versionadded:: 8.0\n    context_class: t.Type[Context] = Context\n    #: the default for the :attr:`Context.allow_extra_args` flag.\n    allow_extra_args = False\n    #: the default for the :attr:`Context.allow_interspersed_args` flag.\n    allow_interspersed_args = True\n    #: the default for the :attr:`Context.ignore_unknown_options` flag.\n    ignore_unknown_options = False\n\n    def __init__(\n        self,\n        name: t.Optional[str],\n        context_settings: t.Optional[t.Dict[str, t.Any]] = None,\n    ) -> None:\n        #: the name the command thinks it has.  Upon registering a command\n        #: on a :class:`Group` the group will default the command name\n        #: with this information.  You should instead use the\n        #: :class:`Context`\\'s :attr:`~Context.info_name` attribute.\n        self.name = name\n\n        if context_settings is None:\n            context_settings = {}\n\n        #: an optional dictionary with defaults passed to the context.\n        self.context_settings: t.Dict[str, t.Any] = context_settings\n\n    def to_info_dict(self, ctx: Context) -> t.Dict[str, t.Any]:\n        \"\"\"Gather information that could be useful for a tool generating\n        user-facing documentation. This traverses the entire structure\n        below this command.\n\n        Use :meth:`click.Context.to_info_dict` to traverse the entire\n        CLI structure.\n\n        :param ctx: A :class:`Context` representing this command.\n\n        .. versionadded:: 8.0\n        \"\"\"\n        return {\"name\": self.name}\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__.__name__} {self.name}>\"\n\n    def get_usage(self, ctx: Context) -> str:\n        raise NotImplementedError(\"Base commands cannot get usage\")\n\n    def get_help(self, ctx: Context) -> str:\n        raise NotImplementedError(\"Base commands cannot get help\")\n\n    def make_context(\n        self,\n        info_name: t.Optional[str],\n        args: t.List[str],\n        parent: t.Optional[Context] = None,\n        **extra: t.Any,\n    ) -> Context:\n        \"\"\"This function when given an info name and arguments will kick\n        off the parsing and create a new :class:`Context`.  It does not\n        invoke the actual command callback though.\n\n        To quickly customize the context class used without overriding\n        this method, set the :attr:`context_class` attribute.\n\n        :param info_name: the info name for this invocation.  Generally this\n                          is the most descriptive name for the script or\n                          command.  For the toplevel script it's usually\n                          the name of the script, for commands below it it's\n                          the name of the command.\n        :param args: the arguments to parse as list of strings.\n        :param parent: the parent context if available.\n        :param extra: extra keyword arguments forwarded to the context\n                      constructor.\n\n        .. versionchanged:: 8.0\n            Added the :attr:`context_class` attribute.\n        \"\"\"\n        for key, value in self.context_settings.items():\n            if key not in extra:\n                extra[key] = value\n\n        ctx = self.context_class(\n            self, info_name=info_name, parent=parent, **extra  # type: ignore\n        )\n\n        with ctx.scope(cleanup=False):\n            self.parse_args(ctx, args)\n        return ctx\n\n    def parse_args(self, ctx: Context, args: t.List[str]) -> t.List[str]:\n        \"\"\"Given a context and a list of arguments this creates the parser\n        and parses the arguments, then modifies the context as necessary.\n        This is automatically invoked by :meth:`make_context`.\n        \"\"\"\n        raise NotImplementedError(\"Base commands do not know how to parse arguments.\")\n\n    def invoke(self, ctx: Context) -> t.Any:\n        \"\"\"Given a context, this invokes the command.  The default\n        implementation is raising a not implemented error.\n        \"\"\"\n        raise NotImplementedError(\"Base commands are not invokable by default\")\n\n    def shell_complete(self, ctx: Context, incomplete: str) -> t.List[\"CompletionItem\"]:\n        \"\"\"Return a list of completions for the incomplete value. Looks\n        at the names of chained multi-commands.\n\n        Any command could be part of a chained multi-command, so sibling\n        commands are valid at any point during command completion. Other\n        command classes will return more completions.\n\n        :param ctx: Invocation context for this command.\n        :param incomplete: Value being completed. May be empty.\n\n        .. versionadded:: 8.0\n        \"\"\"\n        from click.shell_completion import CompletionItem\n\n        results: t.List[\"CompletionItem\"] = []\n\n        while ctx.parent is not None:\n            ctx = ctx.parent\n\n            if isinstance(ctx.command, MultiCommand) and ctx.command.chain:\n                results.extend(\n                    CompletionItem(name, help=command.get_short_help_str())\n                    for name, command in _complete_visible_commands(ctx, incomplete)\n                    if name not in ctx.protected_args\n                )\n\n        return results\n\n    @typing.overload\n    def main(\n        self,\n        args: t.Optional[t.Sequence[str]] = None,\n        prog_name: t.Optional[str] = None,\n        complete_var: t.Optional[str] = None,\n        standalone_mode: \"te.Literal[True]\" = True,\n        **extra: t.Any,\n    ) -> \"te.NoReturn\":\n        ...\n\n    @typing.overload\n    def main(\n        self,\n        args: t.Optional[t.Sequence[str]] = None,\n        prog_name: t.Optional[str] = None,\n        complete_var: t.Optional[str] = None,\n        standalone_mode: bool = ...,\n        **extra: t.Any,\n    ) -> t.Any:\n        ...\n\n    def main(\n        self,\n        args: t.Optional[t.Sequence[str]] = None,\n        prog_name: t.Optional[str] = None,\n        complete_var: t.Optional[str] = None,\n        standalone_mode: bool = True,\n        windows_expand_args: bool = True,\n        **extra: t.Any,\n    ) -> t.Any:\n        \"\"\"This is the way to invoke a script with all the bells and\n        whistles as a command line application.  This will always terminate\n        the application after a call.  If this is not wanted, ``SystemExit``\n        needs to be caught.\n\n        This method is also available by directly calling the instance of\n        a :class:`Command`.\n\n        :param args: the arguments that should be used for parsing.  If not\n                     provided, ``sys.argv[1:]`` is used.\n        :param prog_name: the program name that should be used.  By default\n                          the program name is constructed by taking the file\n                          name from ``sys.argv[0]``.\n        :param complete_var: the environment variable that controls the\n                             bash completion support.  The default is\n                             ``\"_<prog_name>_COMPLETE\"`` with prog_name in\n                             uppercase.\n        :param standalone_mode: the default behavior is to invoke the script\n                                in standalone mode.  Click will then\n                                handle exceptions and convert them into\n                                error messages and the function will never\n                                return but shut down the interpreter.  If\n                                this is set to `False` they will be\n                                propagated to the caller and the return\n                                value of this function is the return value\n                                of :meth:`invoke`.\n        :param windows_expand_args: Expand glob patterns, user dir, and\n            env vars in command line args on Windows.\n        :param extra: extra keyword arguments are forwarded to the context\n                      constructor.  See :class:`Context` for more information.\n\n        .. versionchanged:: 8.0.1\n            Added the ``windows_expand_args`` parameter to allow\n            disabling command line arg expansion on Windows.\n\n        .. versionchanged:: 8.0\n            When taking arguments from ``sys.argv`` on Windows, glob\n            patterns, user dir, and env vars are expanded.\n\n        .. versionchanged:: 3.0\n           Added the ``standalone_mode`` parameter.\n        \"\"\"\n        # Verify that the environment is configured correctly, or reject\n        # further execution to avoid a broken script.\n        _verify_python_env()\n\n        if args is None:\n            args = sys.argv[1:]\n\n            if os.name == \"nt\" and windows_expand_args:\n                args = _expand_args(args)\n        else:\n            args = list(args)\n\n        if prog_name is None:\n            prog_name = _detect_program_name()\n\n        # Process shell completion requests and exit early.\n        self._main_shell_completion(extra, prog_name, complete_var)\n\n        try:\n            try:\n                with self.make_context(prog_name, args, **extra) as ctx:\n                    rv = self.invoke(ctx)\n                    if not standalone_mode:\n                        return rv\n                    # it's not safe to `ctx.exit(rv)` here!\n                    # note that `rv` may actually contain data like \"1\" which\n                    # has obvious effects\n                    # more subtle case: `rv=[None, None]` can come out of\n                    # chained commands which all returned `None` -- so it's not\n                    # even always obvious that `rv` indicates success/failure\n                    # by its truthiness/falsiness\n                    ctx.exit()\n            except (EOFError, KeyboardInterrupt):\n                echo(file=sys.stderr)\n                raise Abort() from None\n            except ClickException as e:\n                if not standalone_mode:\n                    raise\n                e.show()\n                sys.exit(e.exit_code)\n            except OSError as e:\n                if e.errno == errno.EPIPE:\n                    sys.stdout = t.cast(t.TextIO, PacifyFlushWrapper(sys.stdout))\n                    sys.stderr = t.cast(t.TextIO, PacifyFlushWrapper(sys.stderr))\n                    sys.exit(1)\n                else:\n                    raise\n        except Exit as e:\n            if standalone_mode:\n                sys.exit(e.exit_code)\n            else:\n                # in non-standalone mode, return the exit code\n                # note that this is only reached if `self.invoke` above raises\n                # an Exit explicitly -- thus bypassing the check there which\n                # would return its result\n                # the results of non-standalone execution may therefore be\n                # somewhat ambiguous: if there are codepaths which lead to\n                # `ctx.exit(1)` and to `return 1`, the caller won't be able to\n                # tell the difference between the two\n                return e.exit_code\n        except Abort:\n            if not standalone_mode:\n                raise\n            echo(_(\"Aborted!\"), file=sys.stderr)\n            sys.exit(1)\n\n    def _main_shell_completion(\n        self,\n        ctx_args: t.Dict[str, t.Any],\n        prog_name: str,\n        complete_var: t.Optional[str] = None,\n    ) -> None:\n        \"\"\"Check if the shell is asking for tab completion, process\n        that, then exit early. Called from :meth:`main` before the\n        program is invoked.\n\n        :param prog_name: Name of the executable in the shell.\n        :param complete_var: Name of the environment variable that holds\n            the completion instruction. Defaults to\n            ``_{PROG_NAME}_COMPLETE``.\n        \"\"\"\n        if complete_var is None:\n            complete_var = f\"_{prog_name}_COMPLETE\".replace(\"-\", \"_\").upper()\n\n        instruction = os.environ.get(complete_var)\n\n        if not instruction:\n            return\n\n        from .shell_completion import shell_complete\n\n        rv = shell_complete(self, ctx_args, prog_name, complete_var, instruction)\n        sys.exit(rv)\n\n    def __call__(self, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        \"\"\"Alias for :meth:`main`.\"\"\"\n        return self.main(*args, **kwargs)\n\n\nclass Command(BaseCommand):\n    \"\"\"Commands are the basic building block of command line interfaces in\n    Click.  A basic command handles command line parsing and might dispatch\n    more parsing to commands nested below it.\n\n    .. versionchanged:: 2.0\n       Added the `context_settings` parameter.\n    .. versionchanged:: 8.0\n       Added repr showing the command name\n    .. versionchanged:: 7.1\n       Added the `no_args_is_help` parameter.\n\n    :param name: the name of the command to use unless a group overrides it.\n    :param context_settings: an optional dictionary with defaults that are\n                             passed to the context object.\n    :param callback: the callback to invoke.  This is optional.\n    :param params: the parameters to register with this command.  This can\n                   be either :class:`Option` or :class:`Argument` objects.\n    :param help: the help string to use for this command.\n    :param epilog: like the help string but it's printed at the end of the\n                   help page after everything else.\n    :param short_help: the short help to use for this command.  This is\n                       shown on the command listing of the parent command.\n    :param add_help_option: by default each command registers a ``--help``\n                            option.  This can be disabled by this parameter.\n    :param no_args_is_help: this controls what happens if no arguments are\n                            provided.  This option is disabled by default.\n                            If enabled this will add ``--help`` as argument\n                            if no arguments are passed\n    :param hidden: hide this command from help outputs.\n\n    :param deprecated: issues a message indicating that\n                             the command is deprecated.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: t.Optional[str],\n        context_settings: t.Optional[t.Dict[str, t.Any]] = None,\n        callback: t.Optional[t.Callable[..., t.Any]] = None,\n        params: t.Optional[t.List[\"Parameter\"]] = None,\n        help: t.Optional[str] = None,\n        epilog: t.Optional[str] = None,\n        short_help: t.Optional[str] = None,\n        options_metavar: t.Optional[str] = \"[OPTIONS]\",\n        add_help_option: bool = True,\n        no_args_is_help: bool = False,\n        hidden: bool = False,\n        deprecated: bool = False,\n    ) -> None:\n        super().__init__(name, context_settings)\n        #: the callback to execute when the command fires.  This might be\n        #: `None` in which case nothing happens.\n        self.callback = callback\n        #: the list of parameters for this command in the order they\n        #: should show up in the help page and execute.  Eager parameters\n        #: will automatically be handled before non eager ones.\n        self.params: t.List[\"Parameter\"] = params or []\n\n        # if a form feed (page break) is found in the help text, truncate help\n        # text to the content preceding the first form feed\n        if help and \"\\f\" in help:\n            help = help.split(\"\\f\", 1)[0]\n\n        self.help = help\n        self.epilog = epilog\n        self.options_metavar = options_metavar\n        self.short_help = short_help\n        self.add_help_option = add_help_option\n        self.no_args_is_help = no_args_is_help\n        self.hidden = hidden\n        self.deprecated = deprecated\n\n    def to_info_dict(self, ctx: Context) -> t.Dict[str, t.Any]:\n        info_dict = super().to_info_dict(ctx)\n        info_dict.update(\n            params=[param.to_info_dict() for param in self.get_params(ctx)],\n            help=self.help,\n            epilog=self.epilog,\n            short_help=self.short_help,\n            hidden=self.hidden,\n            deprecated=self.deprecated,\n        )\n        return info_dict\n\n    def get_usage(self, ctx: Context) -> str:\n        \"\"\"Formats the usage line into a string and returns it.\n\n        Calls :meth:`format_usage` internally.\n        \"\"\"\n        formatter = ctx.make_formatter()\n        self.format_usage(ctx, formatter)\n        return formatter.getvalue().rstrip(\"\\n\")\n\n    def get_params(self, ctx: Context) -> t.List[\"Parameter\"]:\n        rv = self.params\n        help_option = self.get_help_option(ctx)\n\n        if help_option is not None:\n            rv = [*rv, help_option]\n\n        return rv\n\n    def format_usage(self, ctx: Context, formatter: HelpFormatter) -> None:\n        \"\"\"Writes the usage line into the formatter.\n\n        This is a low-level method called by :meth:`get_usage`.\n        \"\"\"\n        pieces = self.collect_usage_pieces(ctx)\n        formatter.write_usage(ctx.command_path, \" \".join(pieces))\n\n    def collect_usage_pieces(self, ctx: Context) -> t.List[str]:\n        \"\"\"Returns all the pieces that go into the usage line and returns\n        it as a list of strings.\n        \"\"\"\n        rv = [self.options_metavar] if self.options_metavar else []\n\n        for param in self.get_params(ctx):\n            rv.extend(param.get_usage_pieces(ctx))\n\n        return rv\n\n    def get_help_option_names(self, ctx: Context) -> t.List[str]:\n        \"\"\"Returns the names for the help option.\"\"\"\n        all_names = set(ctx.help_option_names)\n        for param in self.params:\n            all_names.difference_update(param.opts)\n            all_names.difference_update(param.secondary_opts)\n        return list(all_names)\n\n    def get_help_option(self, ctx: Context) -> t.Optional[\"Option\"]:\n        \"\"\"Returns the help option object.\"\"\"\n        help_options = self.get_help_option_names(ctx)\n\n        if not help_options or not self.add_help_option:\n            return None\n\n        def show_help(ctx: Context, param: \"Parameter\", value: str) -> None:\n            if value and not ctx.resilient_parsing:\n                echo(ctx.get_help(), color=ctx.color)\n                ctx.exit()\n\n        return Option(\n            help_options,\n            is_flag=True,\n            is_eager=True,\n            expose_value=False,\n            callback=show_help,\n            help=_(\"Show this message and exit.\"),\n        )\n\n    def make_parser(self, ctx: Context) -> OptionParser:\n        \"\"\"Creates the underlying option parser for this command.\"\"\"\n        parser = OptionParser(ctx)\n        for param in self.get_params(ctx):\n            param.add_to_parser(parser, ctx)\n        return parser\n\n    def get_help(self, ctx: Context) -> str:\n        \"\"\"Formats the help into a string and returns it.\n\n        Calls :meth:`format_help` internally.\n        \"\"\"\n        formatter = ctx.make_formatter()\n        self.format_help(ctx, formatter)\n        return formatter.getvalue().rstrip(\"\\n\")\n\n    def get_short_help_str(self, limit: int = 45) -> str:\n        \"\"\"Gets short help for the command or makes it by shortening the\n        long help string.\n        \"\"\"\n        text = self.short_help or \"\"\n\n        if not text and self.help:\n            text = make_default_short_help(self.help, limit)\n\n        if self.deprecated:\n            text = _(\"(Deprecated) {text}\").format(text=text)\n\n        return text.strip()\n\n    def format_help(self, ctx: Context, formatter: HelpFormatter) -> None:\n        \"\"\"Writes the help into the formatter if it exists.\n\n        This is a low-level method called by :meth:`get_help`.\n\n        This calls the following methods:\n\n        -   :meth:`format_usage`\n        -   :meth:`format_help_text`\n        -   :meth:`format_options`\n        -   :meth:`format_epilog`\n        \"\"\"\n        self.format_usage(ctx, formatter)\n        self.format_help_text(ctx, formatter)\n        self.format_options(ctx, formatter)\n        self.format_epilog(ctx, formatter)\n\n    def format_help_text(self, ctx: Context, formatter: HelpFormatter) -> None:\n        \"\"\"Writes the help text to the formatter if it exists.\"\"\"\n        text = self.help or \"\"\n\n        if self.deprecated:\n            text = _(\"(Deprecated) {text}\").format(text=text)\n\n        if text:\n            formatter.write_paragraph()\n\n            with formatter.indentation():\n                formatter.write_text(text)\n\n    def format_options(self, ctx: Context, formatter: HelpFormatter) -> None:\n        \"\"\"Writes all the options into the formatter if they exist.\"\"\"\n        opts = []\n        for param in self.get_params(ctx):\n            rv = param.get_help_record(ctx)\n            if rv is not None:\n                opts.append(rv)\n\n        if opts:\n            with formatter.section(_(\"Options\")):\n                formatter.write_dl(opts)\n\n    def format_epilog(self, ctx: Context, formatter: HelpFormatter) -> None:\n        \"\"\"Writes the epilog into the formatter if it exists.\"\"\"\n        if self.epilog:\n            formatter.write_paragraph()\n            with formatter.indentation():\n                formatter.write_text(self.epilog)\n\n    def parse_args(self, ctx: Context, args: t.List[str]) -> t.List[str]:\n        if not args and self.no_args_is_help and not ctx.resilient_parsing:\n            echo(ctx.get_help(), color=ctx.color)\n            ctx.exit()\n\n        parser = self.make_parser(ctx)\n        opts, args, param_order = parser.parse_args(args=args)\n\n        for param in iter_params_for_processing(param_order, self.get_params(ctx)):\n            value, args = param.handle_parse_result(ctx, opts, args)\n\n        if args and not ctx.allow_extra_args and not ctx.resilient_parsing:\n            ctx.fail(\n                ngettext(\n                    \"Got unexpected extra argument ({args})\",\n                    \"Got unexpected extra arguments ({args})\",\n                    len(args),\n                ).format(args=\" \".join(map(str, args)))\n            )\n\n        ctx.args = args\n        return args\n\n    def invoke(self, ctx: Context) -> t.Any:\n        \"\"\"Given a context, this invokes the attached callback (if it exists)\n        in the right way.\n        \"\"\"\n        if self.deprecated:\n            message = _(\n                \"DeprecationWarning: The command {name!r} is deprecated.\"\n            ).format(name=self.name)\n            echo(style(message, fg=\"red\"), err=True)\n\n        if self.callback is not None:\n            return ctx.invoke(self.callback, **ctx.params)\n\n    def shell_complete(self, ctx: Context, incomplete: str) -> t.List[\"CompletionItem\"]:\n        \"\"\"Return a list of completions for the incomplete value. Looks\n        at the names of options and chained multi-commands.\n\n        :param ctx: Invocation context for this command.\n        :param incomplete: Value being completed. May be empty.\n\n        .. versionadded:: 8.0\n        \"\"\"\n        from click.shell_completion import CompletionItem\n\n        results: t.List[\"CompletionItem\"] = []\n\n        if incomplete and not incomplete[0].isalnum():\n            for param in self.get_params(ctx):\n                if (\n                    not isinstance(param, Option)\n                    or param.hidden\n                    or (\n                        not param.multiple\n                        and ctx.get_parameter_source(param.name)  # type: ignore\n                        is ParameterSource.COMMANDLINE\n                    )\n                ):\n                    continue\n\n                results.extend(\n                    CompletionItem(name, help=param.help)\n                    for name in [*param.opts, *param.secondary_opts]\n                    if name.startswith(incomplete)\n                )\n\n        results.extend(super().shell_complete(ctx, incomplete))\n        return results\n\n\nclass MultiCommand(Command):\n    \"\"\"A multi command is the basic implementation of a command that\n    dispatches to subcommands.  The most common version is the\n    :class:`Group`.\n\n    :param invoke_without_command: this controls how the multi command itself\n                                   is invoked.  By default it's only invoked\n                                   if a subcommand is provided.\n    :param no_args_is_help: this controls what happens if no arguments are\n                            provided.  This option is enabled by default if\n                            `invoke_without_command` is disabled or disabled\n                            if it's enabled.  If enabled this will add\n                            ``--help`` as argument if no arguments are\n                            passed.\n    :param subcommand_metavar: the string that is used in the documentation\n                               to indicate the subcommand place.\n    :param chain: if this is set to `True` chaining of multiple subcommands\n                  is enabled.  This restricts the form of commands in that\n                  they cannot have optional arguments but it allows\n                  multiple commands to be chained together.\n    :param result_callback: The result callback to attach to this multi\n        command. This can be set or changed later with the\n        :meth:`result_callback` decorator.\n    \"\"\"\n\n    allow_extra_args = True\n    allow_interspersed_args = False\n\n    def __init__(\n        self,\n        name: t.Optional[str] = None,\n        invoke_without_command: bool = False,\n        no_args_is_help: t.Optional[bool] = None,\n        subcommand_metavar: t.Optional[str] = None,\n        chain: bool = False,\n        result_callback: t.Optional[t.Callable[..., t.Any]] = None,\n        **attrs: t.Any,\n    ) -> None:\n        super().__init__(name, **attrs)\n\n        if no_args_is_help is None:\n            no_args_is_help = not invoke_without_command\n\n        self.no_args_is_help = no_args_is_help\n        self.invoke_without_command = invoke_without_command\n\n        if subcommand_metavar is None:\n            if chain:\n                subcommand_metavar = \"COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\"\n            else:\n                subcommand_metavar = \"COMMAND [ARGS]...\"\n\n        self.subcommand_metavar = subcommand_metavar\n        self.chain = chain\n        # The result callback that is stored. This can be set or\n        # overridden with the :func:`result_callback` decorator.\n        self._result_callback = result_callback\n\n        if self.chain:\n            for param in self.params:\n                if isinstance(param, Argument) and not param.required:\n                    raise RuntimeError(\n                        \"Multi commands in chain mode cannot have\"\n                        \" optional arguments.\"\n                    )\n\n    def to_info_dict(self, ctx: Context) -> t.Dict[str, t.Any]:\n        info_dict = super().to_info_dict(ctx)\n        commands = {}\n\n        for name in self.list_commands(ctx):\n            command = self.get_command(ctx, name)\n\n            if command is None:\n                continue\n\n            sub_ctx = ctx._make_sub_context(command)\n\n            with sub_ctx.scope(cleanup=False):\n                commands[name] = command.to_info_dict(sub_ctx)\n\n        info_dict.update(commands=commands, chain=self.chain)\n        return info_dict\n\n    def collect_usage_pieces(self, ctx: Context) -> t.List[str]:\n        rv = super().collect_usage_pieces(ctx)\n        rv.append(self.subcommand_metavar)\n        return rv\n\n    def format_options(self, ctx: Context, formatter: HelpFormatter) -> None:\n        super().format_options(ctx, formatter)\n        self.format_commands(ctx, formatter)\n\n    def result_callback(self, replace: bool = False) -> t.Callable[[F], F]:\n        \"\"\"Adds a result callback to the command.  By default if a\n        result callback is already registered this will chain them but\n        this can be disabled with the `replace` parameter.  The result\n        callback is invoked with the return value of the subcommand\n        (or the list of return values from all subcommands if chaining\n        is enabled) as well as the parameters as they would be passed\n        to the main callback.\n\n        Example::\n\n            @click.group()\n            @click.option('-i', '--input', default=23)\n            def cli(input):\n                return 42\n\n            @cli.result_callback()\n            def process_result(result, input):\n                return result + input\n\n        :param replace: if set to `True` an already existing result\n                        callback will be removed.\n\n        .. versionchanged:: 8.0\n            Renamed from ``resultcallback``.\n\n        .. versionadded:: 3.0\n        \"\"\"\n\n        def decorator(f: F) -> F:\n            old_callback = self._result_callback\n\n            if old_callback is None or replace:\n                self._result_callback = f\n                return f\n\n            def function(__value, *args, **kwargs):  # type: ignore\n                inner = old_callback(__value, *args, **kwargs)  # type: ignore\n                return f(inner, *args, **kwargs)\n\n            self._result_callback = rv = update_wrapper(t.cast(F, function), f)\n            return rv\n\n        return decorator\n\n    def resultcallback(self, replace: bool = False) -> t.Callable[[F], F]:\n        import warnings\n\n        warnings.warn(\n            \"'resultcallback' has been renamed to 'result_callback'.\"\n            \" The old name will be removed in Click 8.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.result_callback(replace=replace)\n\n    def format_commands(self, ctx: Context, formatter: HelpFormatter) -> None:\n        \"\"\"Extra format methods for multi methods that adds all the commands\n        after the options.\n        \"\"\"\n        commands = []\n        for subcommand in self.list_commands(ctx):\n            cmd = self.get_command(ctx, subcommand)\n            # What is this, the tool lied about a command.  Ignore it\n            if cmd is None:\n                continue\n            if cmd.hidden:\n                continue\n\n            commands.append((subcommand, cmd))\n\n        # allow for 3 times the default spacing\n        if len(commands):\n            limit = formatter.width - 6 - max(len(cmd[0]) for cmd in commands)\n\n            rows = []\n            for subcommand, cmd in commands:\n                help = cmd.get_short_help_str(limit)\n                rows.append((subcommand, help))\n\n            if rows:\n                with formatter.section(_(\"Commands\")):\n                    formatter.write_dl(rows)\n\n    def parse_args(self, ctx: Context, args: t.List[str]) -> t.List[str]:\n        if not args and self.no_args_is_help and not ctx.resilient_parsing:\n            echo(ctx.get_help(), color=ctx.color)\n            ctx.exit()\n\n        rest = super().parse_args(ctx, args)\n\n        if self.chain:\n            ctx.protected_args = rest\n            ctx.args = []\n        elif rest:\n            ctx.protected_args, ctx.args = rest[:1], rest[1:]\n\n        return ctx.args\n\n    def invoke(self, ctx: Context) -> t.Any:\n        def _process_result(value: t.Any) -> t.Any:\n            if self._result_callback is not None:\n                value = ctx.invoke(self._result_callback, value, **ctx.params)\n            return value\n\n        if not ctx.protected_args:\n            if self.invoke_without_command:\n                # No subcommand was invoked, so the result callback is\n                # invoked with None for regular groups, or an empty list\n                # for chained groups.\n                with ctx:\n                    super().invoke(ctx)\n                    return _process_result([] if self.chain else None)\n            ctx.fail(_(\"Missing command.\"))\n\n        # Fetch args back out\n        args = [*ctx.protected_args, *ctx.args]\n        ctx.args = []\n        ctx.protected_args = []\n\n        # If we're not in chain mode, we only allow the invocation of a\n        # single command but we also inform the current context about the\n        # name of the command to invoke.\n        if not self.chain:\n            # Make sure the context is entered so we do not clean up\n            # resources until the result processor has worked.\n            with ctx:\n                cmd_name, cmd, args = self.resolve_command(ctx, args)\n                assert cmd is not None\n                ctx.invoked_subcommand = cmd_name\n                super().invoke(ctx)\n                sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)\n                with sub_ctx:\n                    return _process_result(sub_ctx.command.invoke(sub_ctx))\n\n        # In chain mode we create the contexts step by step, but after the\n        # base command has been invoked.  Because at that point we do not\n        # know the subcommands yet, the invoked subcommand attribute is\n        # set to ``*`` to inform the command that subcommands are executed\n        # but nothing else.\n        with ctx:\n            ctx.invoked_subcommand = \"*\" if args else None\n            super().invoke(ctx)\n\n            # Otherwise we make every single context and invoke them in a\n            # chain.  In that case the return value to the result processor\n            # is the list of all invoked subcommand's results.\n            contexts = []\n            while args:\n                cmd_name, cmd, args = self.resolve_command(ctx, args)\n                assert cmd is not None\n                sub_ctx = cmd.make_context(\n                    cmd_name,\n                    args,\n                    parent=ctx,\n                    allow_extra_args=True,\n                    allow_interspersed_args=False,\n                )\n                contexts.append(sub_ctx)\n                args, sub_ctx.args = sub_ctx.args, []\n\n            rv = []\n            for sub_ctx in contexts:\n                with sub_ctx:\n                    rv.append(sub_ctx.command.invoke(sub_ctx))\n            return _process_result(rv)\n\n    def resolve_command(\n        self, ctx: Context, args: t.List[str]\n    ) -> t.Tuple[t.Optional[str], t.Optional[Command], t.List[str]]:\n        cmd_name = make_str(args[0])\n        original_cmd_name = cmd_name\n\n        # Get the command\n        cmd = self.get_command(ctx, cmd_name)\n\n        # If we can't find the command but there is a normalization\n        # function available, we try with that one.\n        if cmd is None and ctx.token_normalize_func is not None:\n            cmd_name = ctx.token_normalize_func(cmd_name)\n            cmd = self.get_command(ctx, cmd_name)\n\n        # If we don't find the command we want to show an error message\n        # to the user that it was not provided.  However, there is\n        # something else we should do: if the first argument looks like\n        # an option we want to kick off parsing again for arguments to\n        # resolve things like --help which now should go to the main\n        # place.\n        if cmd is None and not ctx.resilient_parsing:\n            if split_opt(cmd_name)[0]:\n                self.parse_args(ctx, ctx.args)\n            ctx.fail(_(\"No such command {name!r}.\").format(name=original_cmd_name))\n        return cmd_name if cmd else None, cmd, args[1:]\n\n    def get_command(self, ctx: Context, cmd_name: str) -> t.Optional[Command]:\n        \"\"\"Given a context and a command name, this returns a\n        :class:`Command` object if it exists or returns `None`.\n        \"\"\"\n        raise NotImplementedError\n\n    def list_commands(self, ctx: Context) -> t.List[str]:\n        \"\"\"Returns a list of subcommand names in the order they should\n        appear.\n        \"\"\"\n        return []\n\n    def shell_complete(self, ctx: Context, incomplete: str) -> t.List[\"CompletionItem\"]:\n        \"\"\"Return a list of completions for the incomplete value. Looks\n        at the names of options, subcommands, and chained\n        multi-commands.\n\n        :param ctx: Invocation context for this command.\n        :param incomplete: Value being completed. May be empty.\n\n        .. versionadded:: 8.0\n        \"\"\"\n        from click.shell_completion import CompletionItem\n\n        results = [\n            CompletionItem(name, help=command.get_short_help_str())\n            for name, command in _complete_visible_commands(ctx, incomplete)\n        ]\n        results.extend(super().shell_complete(ctx, incomplete))\n        return results\n\n\nclass Group(MultiCommand):\n    \"\"\"A group allows a command to have subcommands attached. This is\n    the most common way to implement nesting in Click.\n\n    :param name: The name of the group command.\n    :param commands: A dict mapping names to :class:`Command` objects.\n        Can also be a list of :class:`Command`, which will use\n        :attr:`Command.name` to create the dict.\n    :param attrs: Other command arguments described in\n        :class:`MultiCommand`, :class:`Command`, and\n        :class:`BaseCommand`.\n\n    .. versionchanged:: 8.0\n        The ``commmands`` argument can be a list of command objects.\n    \"\"\"\n\n    #: If set, this is used by the group's :meth:`command` decorator\n    #: as the default :class:`Command` class. This is useful to make all\n    #: subcommands use a custom command class.\n    #:\n    #: .. versionadded:: 8.0\n    command_class: t.Optional[t.Type[Command]] = None\n\n    #: If set, this is used by the group's :meth:`group` decorator\n    #: as the default :class:`Group` class. This is useful to make all\n    #: subgroups use a custom group class.\n    #:\n    #: If set to the special value :class:`type` (literally\n    #: ``group_class = type``), this group's class will be used as the\n    #: default class. This makes a custom group class continue to make\n    #: custom groups.\n    #:\n    #: .. versionadded:: 8.0\n    group_class: t.Optional[t.Union[t.Type[\"Group\"], t.Type[type]]] = None\n    # Literal[type] isn't valid, so use Type[type]\n\n    def __init__(\n        self,\n        name: t.Optional[str] = None,\n        commands: t.Optional[t.Union[t.Dict[str, Command], t.Sequence[Command]]] = None,\n        **attrs: t.Any,\n    ) -> None:\n        super().__init__(name, **attrs)\n\n        if commands is None:\n            commands = {}\n        elif isinstance(commands, abc.Sequence):\n            commands = {c.name: c for c in commands if c.name is not None}\n\n        #: The registered subcommands by their exported names.\n        self.commands: t.Dict[str, Command] = commands\n\n    def add_command(self, cmd: Command, name: t.Optional[str] = None) -> None:\n        \"\"\"Registers another :class:`Command` with this group.  If the name\n        is not provided, the name of the command is used.\n        \"\"\"\n        name = name or cmd.name\n        if name is None:\n            raise TypeError(\"Command has no name.\")\n        _check_multicommand(self, name, cmd, register=True)\n        self.commands[name] = cmd\n\n    def command(\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], Command]:\n        \"\"\"A shortcut decorator for declaring and attaching a command to\n        the group. This takes the same arguments as :func:`command` and\n        immediately registers the created command with this group by\n        calling :meth:`add_command`.\n\n        To customize the command class used, set the\n        :attr:`command_class` attribute.\n\n        .. versionchanged:: 8.0\n            Added the :attr:`command_class` attribute.\n        \"\"\"\n        from .decorators import command\n\n        if self.command_class is not None and \"cls\" not in kwargs:\n            kwargs[\"cls\"] = self.command_class\n\n        def decorator(f: t.Callable[..., t.Any]) -> Command:\n            cmd = command(*args, **kwargs)(f)\n            self.add_command(cmd)\n            return cmd\n\n        return decorator\n\n    def group(\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], \"Group\"]:\n        \"\"\"A shortcut decorator for declaring and attaching a group to\n        the group. This takes the same arguments as :func:`group` and\n        immediately registers the created group with this group by\n        calling :meth:`add_command`.\n\n        To customize the group class used, set the :attr:`group_class`\n        attribute.\n\n        .. versionchanged:: 8.0\n            Added the :attr:`group_class` attribute.\n        \"\"\"\n        from .decorators import group\n\n        if self.group_class is not None and \"cls\" not in kwargs:\n            if self.group_class is type:\n                kwargs[\"cls\"] = type(self)\n            else:\n                kwargs[\"cls\"] = self.group_class\n\n        def decorator(f: t.Callable[..., t.Any]) -> \"Group\":\n            cmd = group(*args, **kwargs)(f)\n            self.add_command(cmd)\n            return cmd\n\n        return decorator\n\n    def get_command(self, ctx: Context, cmd_name: str) -> t.Optional[Command]:\n        return self.commands.get(cmd_name)\n\n    def list_commands(self, ctx: Context) -> t.List[str]:\n        return sorted(self.commands)\n\n\nclass CommandCollection(MultiCommand):\n    \"\"\"A command collection is a multi command that merges multiple multi\n    commands together into one.  This is a straightforward implementation\n    that accepts a list of different multi commands as sources and\n    provides all the commands for each of them.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: t.Optional[str] = None,\n        sources: t.Optional[t.List[MultiCommand]] = None,\n        **attrs: t.Any,\n    ) -> None:\n        super().__init__(name, **attrs)\n        #: The list of registered multi commands.\n        self.sources: t.List[MultiCommand] = sources or []\n\n    def add_source(self, multi_cmd: MultiCommand) -> None:\n        \"\"\"Adds a new multi command to the chain dispatcher.\"\"\"\n        self.sources.append(multi_cmd)\n\n    def get_command(self, ctx: Context, cmd_name: str) -> t.Optional[Command]:\n        for source in self.sources:\n            rv = source.get_command(ctx, cmd_name)\n\n            if rv is not None:\n                if self.chain:\n                    _check_multicommand(self, cmd_name, rv)\n\n                return rv\n\n        return None\n\n    def list_commands(self, ctx: Context) -> t.List[str]:\n        rv: t.Set[str] = set()\n\n        for source in self.sources:\n            rv.update(source.list_commands(ctx))\n\n        return sorted(rv)\n\n\ndef _check_iter(value: t.Any) -> t.Iterator[t.Any]:\n    \"\"\"Check if the value is iterable but not a string. Raises a type\n    error, or return an iterator over the value.\n    \"\"\"\n    if isinstance(value, str):\n        raise TypeError\n\n    return iter(value)\n\n\nclass Parameter:\n    r\"\"\"A parameter to a command comes in two versions: they are either\n    :class:`Option`\\s or :class:`Argument`\\s.  Other subclasses are currently\n    not supported by design as some of the internals for parsing are\n    intentionally not finalized.\n\n    Some settings are supported by both options and arguments.\n\n    :param param_decls: the parameter declarations for this option or\n                        argument.  This is a list of flags or argument\n                        names.\n    :param type: the type that should be used.  Either a :class:`ParamType`\n                 or a Python type.  The later is converted into the former\n                 automatically if supported.\n    :param required: controls if this is optional or not.\n    :param default: the default value if omitted.  This can also be a callable,\n                    in which case it's invoked when the default is needed\n                    without any arguments.\n    :param callback: A function to further process or validate the value\n        after type conversion. It is called as ``f(ctx, param, value)``\n        and must return the value. It is called for all sources,\n        including prompts.\n    :param nargs: the number of arguments to match.  If not ``1`` the return\n                  value is a tuple instead of single value.  The default for\n                  nargs is ``1`` (except if the type is a tuple, then it's\n                  the arity of the tuple). If ``nargs=-1``, all remaining\n                  parameters are collected.\n    :param metavar: how the value is represented in the help page.\n    :param expose_value: if this is `True` then the value is passed onwards\n                         to the command callback and stored on the context,\n                         otherwise it's skipped.\n    :param is_eager: eager values are processed before non eager ones.  This\n                     should not be set for arguments or it will inverse the\n                     order of processing.\n    :param envvar: a string or list of strings that are environment variables\n                   that should be checked.\n    :param shell_complete: A function that returns custom shell\n        completions. Used instead of the param's type completion if\n        given. Takes ``ctx, param, incomplete`` and must return a list\n        of :class:`~click.shell_completion.CompletionItem` or a list of\n        strings.\n\n    .. versionchanged:: 8.0\n        ``process_value`` validates required parameters and bounded\n        ``nargs``, and invokes the parameter callback before returning\n        the value. This allows the callback to validate prompts.\n        ``full_process_value`` is removed.\n\n    .. versionchanged:: 8.0\n        ``autocompletion`` is renamed to ``shell_complete`` and has new\n        semantics described above. The old name is deprecated and will\n        be removed in 8.1, until then it will be wrapped to match the\n        new requirements.\n\n    .. versionchanged:: 8.0\n        For ``multiple=True, nargs>1``, the default must be a list of\n        tuples.\n\n    .. versionchanged:: 8.0\n        Setting a default is no longer required for ``nargs>1``, it will\n        default to ``None``. ``multiple=True`` or ``nargs=-1`` will\n        default to ``()``.\n\n    .. versionchanged:: 7.1\n        Empty environment variables are ignored rather than taking the\n        empty string value. This makes it possible for scripts to clear\n        variables if they can't unset them.\n\n    .. versionchanged:: 2.0\n        Changed signature for parameter callback to also be passed the\n        parameter. The old callback format will still work, but it will\n        raise a warning to give you a chance to migrate the code easier.\n    \"\"\"\n\n    param_type_name = \"parameter\"\n\n    def __init__(\n        self,\n        param_decls: t.Optional[t.Sequence[str]] = None,\n        type: t.Optional[t.Union[types.ParamType, t.Any]] = None,\n        required: bool = False,\n        default: t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]] = None,\n        callback: t.Optional[t.Callable[[Context, \"Parameter\", t.Any], t.Any]] = None,\n        nargs: t.Optional[int] = None,\n        multiple: bool = False,\n        metavar: t.Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: t.Optional[t.Union[str, t.Sequence[str]]] = None,\n        shell_complete: t.Optional[\n            t.Callable[\n                [Context, \"Parameter\", str],\n                t.Union[t.List[\"CompletionItem\"], t.List[str]],\n            ]\n        ] = None,\n        autocompletion: t.Optional[\n            t.Callable[\n                [Context, t.List[str], str], t.List[t.Union[t.Tuple[str, str], str]]\n            ]\n        ] = None,\n    ) -> None:\n        self.name, self.opts, self.secondary_opts = self._parse_decls(\n            param_decls or (), expose_value\n        )\n        self.type = types.convert_type(type, default)\n\n        # Default nargs to what the type tells us if we have that\n        # information available.\n        if nargs is None:\n            if self.type.is_composite:\n                nargs = self.type.arity\n            else:\n                nargs = 1\n\n        self.required = required\n        self.callback = callback\n        self.nargs = nargs\n        self.multiple = multiple\n        self.expose_value = expose_value\n        self.default = default\n        self.is_eager = is_eager\n        self.metavar = metavar\n        self.envvar = envvar\n\n        if autocompletion is not None:\n            import warnings\n\n            warnings.warn(\n                \"'autocompletion' is renamed to 'shell_complete'. The old name is\"\n                \" deprecated and will be removed in Click 8.1. See the docs about\"\n                \" 'Parameter' for information about new behavior.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n\n            def shell_complete(\n                ctx: Context, param: \"Parameter\", incomplete: str\n            ) -> t.List[\"CompletionItem\"]:\n                from click.shell_completion import CompletionItem\n\n                out = []\n\n                for c in autocompletion(ctx, [], incomplete):  # type: ignore\n                    if isinstance(c, tuple):\n                        c = CompletionItem(c[0], help=c[1])\n                    elif isinstance(c, str):\n                        c = CompletionItem(c)\n\n                    if c.value.startswith(incomplete):\n                        out.append(c)\n\n                return out\n\n        self._custom_shell_complete = shell_complete\n\n        if __debug__:\n            if self.type.is_composite and nargs != self.type.arity:\n                raise ValueError(\n                    f\"'nargs' must be {self.type.arity} (or None) for\"\n                    f\" type {self.type!r}, but it was {nargs}.\"\n                )\n\n            # Skip no default or callable default.\n            check_default = default if not callable(default) else None\n\n            if check_default is not None:\n                if multiple:\n                    try:\n                        # Only check the first value against nargs.\n                        check_default = next(_check_iter(check_default), None)\n                    except TypeError:\n                        raise ValueError(\n                            \"'default' must be a list when 'multiple' is true.\"\n                        ) from None\n\n                # Can be None for multiple with empty default.\n                if nargs != 1 and check_default is not None:\n                    try:\n                        _check_iter(check_default)\n                    except TypeError:\n                        if multiple:\n                            message = (\n                                \"'default' must be a list of lists when 'multiple' is\"\n                                \" true and 'nargs' != 1.\"\n                            )\n                        else:\n                            message = \"'default' must be a list when 'nargs' != 1.\"\n\n                        raise ValueError(message) from None\n\n                    if nargs > 1 and len(check_default) != nargs:\n                        subject = \"item length\" if multiple else \"length\"\n                        raise ValueError(\n                            f\"'default' {subject} must match nargs={nargs}.\"\n                        )\n\n    def to_info_dict(self) -> t.Dict[str, t.Any]:\n        \"\"\"Gather information that could be useful for a tool generating\n        user-facing documentation.\n\n        Use :meth:`click.Context.to_info_dict` to traverse the entire\n        CLI structure.\n\n        .. versionadded:: 8.0\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"param_type_name\": self.param_type_name,\n            \"opts\": self.opts,\n            \"secondary_opts\": self.secondary_opts,\n            \"type\": self.type.to_info_dict(),\n            \"required\": self.required,\n            \"nargs\": self.nargs,\n            \"multiple\": self.multiple,\n            \"default\": self.default,\n            \"envvar\": self.envvar,\n        }\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__.__name__} {self.name}>\"\n\n    def _parse_decls(\n        self, decls: t.Sequence[str], expose_value: bool\n    ) -> t.Tuple[t.Optional[str], t.List[str], t.List[str]]:\n        raise NotImplementedError()\n\n    @property\n    def human_readable_name(self) -> str:\n        \"\"\"Returns the human readable name of this parameter.  This is the\n        same as the name for options, but the metavar for arguments.\n        \"\"\"\n        return self.name  # type: ignore\n\n    def make_metavar(self) -> str:\n        if self.metavar is not None:\n            return self.metavar\n\n        metavar = self.type.get_metavar(self)\n\n        if metavar is None:\n            metavar = self.type.name.upper()\n\n        if self.nargs != 1:\n            metavar += \"...\"\n\n        return metavar\n\n    @typing.overload\n    def get_default(\n        self, ctx: Context, call: \"te.Literal[True]\" = True\n    ) -> t.Optional[t.Any]:\n        ...\n\n    @typing.overload\n    def get_default(\n        self, ctx: Context, call: bool = ...\n    ) -> t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]:\n        ...\n\n    def get_default(\n        self, ctx: Context, call: bool = True\n    ) -> t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]:\n        \"\"\"Get the default for the parameter. Tries\n        :meth:`Context.lookup_default` first, then the local default.\n\n        :param ctx: Current context.\n        :param call: If the default is a callable, call it. Disable to\n            return the callable instead.\n\n        .. versionchanged:: 8.0.2\n            Type casting is no longer performed when getting a default.\n\n        .. versionchanged:: 8.0.1\n            Type casting can fail in resilient parsing mode. Invalid\n            defaults will not prevent showing help text.\n\n        .. versionchanged:: 8.0\n            Looks at ``ctx.default_map`` first.\n\n        .. versionchanged:: 8.0\n            Added the ``call`` parameter.\n        \"\"\"\n        value = ctx.lookup_default(self.name, call=False)  # type: ignore\n\n        if value is None:\n            value = self.default\n\n        if call and callable(value):\n            value = value()\n\n        return value\n\n    def add_to_parser(self, parser: OptionParser, ctx: Context) -> None:\n        raise NotImplementedError()\n\n    def consume_value(\n        self, ctx: Context, opts: t.Mapping[str, t.Any]\n    ) -> t.Tuple[t.Any, ParameterSource]:\n        value = opts.get(self.name)  # type: ignore\n        source = ParameterSource.COMMANDLINE\n\n        if value is None:\n            value = self.value_from_envvar(ctx)\n            source = ParameterSource.ENVIRONMENT\n\n        if value is None:\n            value = ctx.lookup_default(self.name)  # type: ignore\n            source = ParameterSource.DEFAULT_MAP\n\n        if value is None:\n            value = self.get_default(ctx)\n            source = ParameterSource.DEFAULT\n\n        return value, source\n\n    def type_cast_value(self, ctx: Context, value: t.Any) -> t.Any:\n        \"\"\"Convert and validate a value against the option's\n        :attr:`type`, :attr:`multiple`, and :attr:`nargs`.\n        \"\"\"\n        if value is None:\n            return () if self.multiple or self.nargs == -1 else None\n\n        def check_iter(value: t.Any) -> t.Iterator:\n            try:\n                return _check_iter(value)\n            except TypeError:\n                # This should only happen when passing in args manually,\n                # the parser should construct an iterable when parsing\n                # the command line.\n                raise BadParameter(\n                    _(\"Value must be an iterable.\"), ctx=ctx, param=self\n                ) from None\n\n        if self.nargs == 1 or self.type.is_composite:\n            convert: t.Callable[[t.Any], t.Any] = partial(\n                self.type, param=self, ctx=ctx\n            )\n        elif self.nargs == -1:\n\n            def convert(value: t.Any) -> t.Tuple:\n                return tuple(self.type(x, self, ctx) for x in check_iter(value))\n\n        else:  # nargs > 1\n\n            def convert(value: t.Any) -> t.Tuple:\n                value = tuple(check_iter(value))\n\n                if len(value) != self.nargs:\n                    raise BadParameter(\n                        ngettext(\n                            \"Takes {nargs} values but 1 was given.\",\n                            \"Takes {nargs} values but {len} were given.\",\n                            len(value),\n                        ).format(nargs=self.nargs, len=len(value)),\n                        ctx=ctx,\n                        param=self,\n                    )\n\n                return tuple(self.type(x, self, ctx) for x in value)\n\n        if self.multiple:\n            return tuple(convert(x) for x in check_iter(value))\n\n        return convert(value)\n\n    def value_is_missing(self, value: t.Any) -> bool:\n        if value is None:\n            return True\n\n        if (self.nargs != 1 or self.multiple) and value == ():\n            return True\n\n        return False\n\n    def process_value(self, ctx: Context, value: t.Any) -> t.Any:\n        value = self.type_cast_value(ctx, value)\n\n        if self.required and self.value_is_missing(value):\n            raise MissingParameter(ctx=ctx, param=self)\n\n        if self.callback is not None:\n            value = self.callback(ctx, self, value)\n\n        return value\n\n    def resolve_envvar_value(self, ctx: Context) -> t.Optional[str]:\n        if self.envvar is None:\n            return None\n\n        if isinstance(self.envvar, str):\n            rv = os.environ.get(self.envvar)\n\n            if rv:\n                return rv\n        else:\n            for envvar in self.envvar:\n                rv = os.environ.get(envvar)\n\n                if rv:\n                    return rv\n\n        return None\n\n    def value_from_envvar(self, ctx: Context) -> t.Optional[t.Any]:\n        rv: t.Optional[t.Any] = self.resolve_envvar_value(ctx)\n\n        if rv is not None and self.nargs != 1:\n            rv = self.type.split_envvar_value(rv)\n\n        return rv\n\n    def handle_parse_result(\n        self, ctx: Context, opts: t.Mapping[str, t.Any], args: t.List[str]\n    ) -> t.Tuple[t.Any, t.List[str]]:\n        with augment_usage_errors(ctx, param=self):\n            value, source = self.consume_value(ctx, opts)\n            ctx.set_parameter_source(self.name, source)  # type: ignore\n\n            try:\n                value = self.process_value(ctx, value)\n            except Exception:\n                if not ctx.resilient_parsing:\n                    raise\n\n                value = None\n\n        if self.expose_value:\n            ctx.params[self.name] = value  # type: ignore\n\n        return value, args\n\n    def get_help_record(self, ctx: Context) -> t.Optional[t.Tuple[str, str]]:\n        pass\n\n    def get_usage_pieces(self, ctx: Context) -> t.List[str]:\n        return []\n\n    def get_error_hint(self, ctx: Context) -> str:\n        \"\"\"Get a stringified version of the param for use in error messages to\n        indicate which param caused the error.\n        \"\"\"\n        hint_list = self.opts or [self.human_readable_name]\n        return \" / \".join(f\"'{x}'\" for x in hint_list)\n\n    def shell_complete(self, ctx: Context, incomplete: str) -> t.List[\"CompletionItem\"]:\n        \"\"\"Return a list of completions for the incomplete value. If a\n        ``shell_complete`` function was given during init, it is used.\n        Otherwise, the :attr:`type`\n        :meth:`~click.types.ParamType.shell_complete` function is used.\n\n        :param ctx: Invocation context for this command.\n        :param incomplete: Value being completed. May be empty.\n\n        .. versionadded:: 8.0\n        \"\"\"\n        if self._custom_shell_complete is not None:\n            results = self._custom_shell_complete(ctx, self, incomplete)\n\n            if results and isinstance(results[0], str):\n                from click.shell_completion import CompletionItem\n\n                results = [CompletionItem(c) for c in results]\n\n            return t.cast(t.List[\"CompletionItem\"], results)\n\n        return self.type.shell_complete(ctx, self, incomplete)\n\n\nclass Option(Parameter):\n    \"\"\"Options are usually optional values on the command line and\n    have some extra features that arguments don't have.\n\n    All other parameters are passed onwards to the parameter constructor.\n\n    :param show_default: controls if the default value should be shown on the\n                         help page. Normally, defaults are not shown. If this\n                         value is a string, it shows the string instead of the\n                         value. This is particularly useful for dynamic options.\n    :param show_envvar: controls if an environment variable should be shown on\n                        the help page.  Normally, environment variables\n                        are not shown.\n    :param prompt: if set to `True` or a non empty string then the user will be\n                   prompted for input.  If set to `True` the prompt will be the\n                   option name capitalized.\n    :param confirmation_prompt: Prompt a second time to confirm the\n        value if it was prompted for. Can be set to a string instead of\n        ``True`` to customize the message.\n    :param prompt_required: If set to ``False``, the user will be\n        prompted for input only when the option was specified as a flag\n        without a value.\n    :param hide_input: if this is `True` then the input on the prompt will be\n                       hidden from the user.  This is useful for password\n                       input.\n    :param is_flag: forces this option to act as a flag.  The default is\n                    auto detection.\n    :param flag_value: which value should be used for this flag if it's\n                       enabled.  This is set to a boolean automatically if\n                       the option string contains a slash to mark two options.\n    :param multiple: if this is set to `True` then the argument is accepted\n                     multiple times and recorded.  This is similar to ``nargs``\n                     in how it works but supports arbitrary number of\n                     arguments.\n    :param count: this flag makes an option increment an integer.\n    :param allow_from_autoenv: if this is enabled then the value of this\n                               parameter will be pulled from an environment\n                               variable in case a prefix is defined on the\n                               context.\n    :param help: the help string.\n    :param hidden: hide this option from help outputs.\n\n    .. versionchanged:: 8.0.1\n        ``type`` is detected from ``flag_value`` if given.\n    \"\"\"\n\n    param_type_name = \"option\"\n\n    def __init__(\n        self,\n        param_decls: t.Optional[t.Sequence[str]] = None,\n        show_default: t.Union[bool, str] = False,\n        prompt: t.Union[bool, str] = False,\n        confirmation_prompt: t.Union[bool, str] = False,\n        prompt_required: bool = True,\n        hide_input: bool = False,\n        is_flag: t.Optional[bool] = None,\n        flag_value: t.Optional[t.Any] = None,\n        multiple: bool = False,\n        count: bool = False,\n        allow_from_autoenv: bool = True,\n        type: t.Optional[t.Union[types.ParamType, t.Any]] = None,\n        help: t.Optional[str] = None,\n        hidden: bool = False,\n        show_choices: bool = True,\n        show_envvar: bool = False,\n        **attrs: t.Any,\n    ) -> None:\n        default_is_missing = \"default\" not in attrs\n        super().__init__(param_decls, type=type, multiple=multiple, **attrs)\n\n        if prompt is True:\n            if self.name is None:\n                raise TypeError(\"'name' is required with 'prompt=True'.\")\n\n            prompt_text: t.Optional[str] = self.name.replace(\"_\", \" \").capitalize()\n        elif prompt is False:\n            prompt_text = None\n        else:\n            prompt_text = t.cast(str, prompt)\n\n        self.prompt = prompt_text\n        self.confirmation_prompt = confirmation_prompt\n        self.prompt_required = prompt_required\n        self.hide_input = hide_input\n        self.hidden = hidden\n\n        # If prompt is enabled but not required, then the option can be\n        # used as a flag to indicate using prompt or flag_value.\n        self._flag_needs_value = self.prompt is not None and not self.prompt_required\n\n        if is_flag is None:\n            if flag_value is not None:\n                # Implicitly a flag because flag_value was set.\n                is_flag = True\n            elif self._flag_needs_value:\n                # Not a flag, but when used as a flag it shows a prompt.\n                is_flag = False\n            else:\n                # Implicitly a flag because flag options were given.\n                is_flag = bool(self.secondary_opts)\n        elif is_flag is False and not self._flag_needs_value:\n            # Not a flag, and prompt is not enabled, can be used as a\n            # flag if flag_value is set.\n            self._flag_needs_value = flag_value is not None\n\n        if is_flag and default_is_missing:\n            self.default: t.Union[t.Any, t.Callable[[], t.Any]] = False\n\n        if flag_value is None:\n            flag_value = not self.default\n\n        if is_flag and type is None:\n            # Re-guess the type from the flag value instead of the\n            # default.\n            self.type = types.convert_type(None, flag_value)\n\n        self.is_flag: bool = is_flag\n        self.is_bool_flag = is_flag and isinstance(self.type, types.BoolParamType)\n        self.flag_value: t.Any = flag_value\n\n        # Counting\n        self.count = count\n        if count:\n            if type is None:\n                self.type = types.IntRange(min=0)\n            if default_is_missing:\n                self.default = 0\n\n        self.allow_from_autoenv = allow_from_autoenv\n        self.help = help\n        self.show_default = show_default\n        self.show_choices = show_choices\n        self.show_envvar = show_envvar\n\n        if __debug__:\n            if self.nargs == -1:\n                raise TypeError(\"nargs=-1 is not supported for options.\")\n\n            if self.prompt and self.is_flag and not self.is_bool_flag:\n                raise TypeError(\"'prompt' is not valid for non-boolean flag.\")\n\n            if not self.is_bool_flag and self.secondary_opts:\n                raise TypeError(\"Secondary flag is not valid for non-boolean flag.\")\n\n            if self.is_bool_flag and self.hide_input and self.prompt is not None:\n                raise TypeError(\n                    \"'prompt' with 'hide_input' is not valid for boolean flag.\"\n                )\n\n            if self.count:\n                if self.multiple:\n                    raise TypeError(\"'count' is not valid with 'multiple'.\")\n\n                if self.is_flag:\n                    raise TypeError(\"'count' is not valid with 'is_flag'.\")\n\n    def to_info_dict(self) -> t.Dict[str, t.Any]:\n        info_dict = super().to_info_dict()\n        info_dict.update(\n            help=self.help,\n            prompt=self.prompt,\n            is_flag=self.is_flag,\n            flag_value=self.flag_value,\n            count=self.count,\n            hidden=self.hidden,\n        )\n        return info_dict\n\n    def _parse_decls(\n        self, decls: t.Sequence[str], expose_value: bool\n    ) -> t.Tuple[t.Optional[str], t.List[str], t.List[str]]:\n        opts = []\n        secondary_opts = []\n        name = None\n        possible_names = []\n\n        for decl in decls:\n            if decl.isidentifier():\n                if name is not None:\n                    raise TypeError(f\"Name '{name}' defined twice\")\n                name = decl\n            else:\n                split_char = \";\" if decl[:1] == \"/\" else \"/\"\n                if split_char in decl:\n                    first, second = decl.split(split_char, 1)\n                    first = first.rstrip()\n                    if first:\n                        possible_names.append(split_opt(first))\n                        opts.append(first)\n                    second = second.lstrip()\n                    if second:\n                        secondary_opts.append(second.lstrip())\n                    if first == second:\n                        raise ValueError(\n                            f\"Boolean option {decl!r} cannot use the\"\n                            \" same flag for true/false.\"\n                        )\n                else:\n                    possible_names.append(split_opt(decl))\n                    opts.append(decl)\n\n        if name is None and possible_names:\n            possible_names.sort(key=lambda x: -len(x[0]))  # group long options first\n            name = possible_names[0][1].replace(\"-\", \"_\").lower()\n            if not name.isidentifier():\n                name = None\n\n        if name is None:\n            if not expose_value:\n                return None, opts, secondary_opts\n            raise TypeError(\"Could not determine name for option\")\n\n        if not opts and not secondary_opts:\n            raise TypeError(\n                f\"No options defined but a name was passed ({name}).\"\n                \" Did you mean to declare an argument instead? Did\"\n                f\" you mean to pass '--{name}'?\"\n            )\n\n        return name, opts, secondary_opts\n\n    def add_to_parser(self, parser: OptionParser, ctx: Context) -> None:\n        if self.multiple:\n            action = \"append\"\n        elif self.count:\n            action = \"count\"\n        else:\n            action = \"store\"\n\n        if self.is_flag:\n            action = f\"{action}_const\"\n\n            if self.is_bool_flag and self.secondary_opts:\n                parser.add_option(\n                    obj=self, opts=self.opts, dest=self.name, action=action, const=True\n                )\n                parser.add_option(\n                    obj=self,\n                    opts=self.secondary_opts,\n                    dest=self.name,\n                    action=action,\n                    const=False,\n                )\n            else:\n                parser.add_option(\n                    obj=self,\n                    opts=self.opts,\n                    dest=self.name,\n                    action=action,\n                    const=self.flag_value,\n                )\n        else:\n            parser.add_option(\n                obj=self,\n                opts=self.opts,\n                dest=self.name,\n                action=action,\n                nargs=self.nargs,\n            )\n\n    def get_help_record(self, ctx: Context) -> t.Optional[t.Tuple[str, str]]:\n        if self.hidden:\n            return None\n\n        any_prefix_is_slash = False\n\n        def _write_opts(opts: t.Sequence[str]) -> str:\n            nonlocal any_prefix_is_slash\n\n            rv, any_slashes = join_options(opts)\n\n            if any_slashes:\n                any_prefix_is_slash = True\n\n            if not self.is_flag and not self.count:\n                rv += f\" {self.make_metavar()}\"\n\n            return rv\n\n        rv = [_write_opts(self.opts)]\n\n        if self.secondary_opts:\n            rv.append(_write_opts(self.secondary_opts))\n\n        help = self.help or \"\"\n        extra = []\n\n        if self.show_envvar:\n            envvar = self.envvar\n\n            if envvar is None:\n                if (\n                    self.allow_from_autoenv\n                    and ctx.auto_envvar_prefix is not None\n                    and self.name is not None\n                ):\n                    envvar = f\"{ctx.auto_envvar_prefix}_{self.name.upper()}\"\n\n            if envvar is not None:\n                var_str = (\n                    envvar\n                    if isinstance(envvar, str)\n                    else \", \".join(str(d) for d in envvar)\n                )\n                extra.append(_(\"env var: {var}\").format(var=var_str))\n\n        # Temporarily enable resilient parsing to avoid type casting\n        # failing for the default. Might be possible to extend this to\n        # help formatting in general.\n        resilient = ctx.resilient_parsing\n        ctx.resilient_parsing = True\n\n        try:\n            default_value = self.get_default(ctx, call=False)\n        finally:\n            ctx.resilient_parsing = resilient\n\n        show_default_is_str = isinstance(self.show_default, str)\n\n        if show_default_is_str or (\n            default_value is not None and (self.show_default or ctx.show_default)\n        ):\n            if show_default_is_str:\n                default_string = f\"({self.show_default})\"\n            elif isinstance(default_value, (list, tuple)):\n                default_string = \", \".join(str(d) for d in default_value)\n            elif callable(default_value):\n                default_string = _(\"(dynamic)\")\n            elif self.is_bool_flag and self.secondary_opts:\n                # For boolean flags that have distinct True/False opts,\n                # use the opt without prefix instead of the value.\n                default_string = split_opt(\n                    (self.opts if self.default else self.secondary_opts)[0]\n                )[1]\n            else:\n                default_string = str(default_value)\n\n            if default_string:\n                extra.append(_(\"default: {default}\").format(default=default_string))\n\n        if (\n            isinstance(self.type, types._NumberRangeBase)\n            # skip count with default range type\n            and not (self.count and self.type.min == 0 and self.type.max is None)\n        ):\n            range_str = self.type._describe_range()\n\n            if range_str:\n                extra.append(range_str)\n\n        if self.required:\n            extra.append(_(\"required\"))\n\n        if extra:\n            extra_str = \"; \".join(extra)\n            help = f\"{help}  [{extra_str}]\" if help else f\"[{extra_str}]\"\n\n        return (\"; \" if any_prefix_is_slash else \" / \").join(rv), help\n\n    @typing.overload\n    def get_default(\n        self, ctx: Context, call: \"te.Literal[True]\" = True\n    ) -> t.Optional[t.Any]:\n        ...\n\n    @typing.overload\n    def get_default(\n        self, ctx: Context, call: bool = ...\n    ) -> t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]:\n        ...\n\n    def get_default(\n        self, ctx: Context, call: bool = True\n    ) -> t.Optional[t.Union[t.Any, t.Callable[[], t.Any]]]:\n        # If we're a non boolean flag our default is more complex because\n        # we need to look at all flags in the same group to figure out\n        # if we're the the default one in which case we return the flag\n        # value as default.\n        if self.is_flag and not self.is_bool_flag:\n            for param in ctx.command.params:\n                if param.name == self.name and param.default:\n                    return param.flag_value  # type: ignore\n\n            return None\n\n        return super().get_default(ctx, call=call)\n\n    def prompt_for_value(self, ctx: Context) -> t.Any:\n        \"\"\"This is an alternative flow that can be activated in the full\n        value processing if a value does not exist.  It will prompt the\n        user until a valid value exists and then returns the processed\n        value as result.\n        \"\"\"\n        assert self.prompt is not None\n\n        # Calculate the default before prompting anything to be stable.\n        default = self.get_default(ctx)\n\n        # If this is a prompt for a flag we need to handle this\n        # differently.\n        if self.is_bool_flag:\n            return confirm(self.prompt, default)\n\n        return prompt(\n            self.prompt,\n            default=default,\n            type=self.type,\n            hide_input=self.hide_input,\n            show_choices=self.show_choices,\n            confirmation_prompt=self.confirmation_prompt,\n            value_proc=lambda x: self.process_value(ctx, x),\n        )\n\n    def resolve_envvar_value(self, ctx: Context) -> t.Optional[str]:\n        rv = super().resolve_envvar_value(ctx)\n\n        if rv is not None:\n            return rv\n\n        if (\n            self.allow_from_autoenv\n            and ctx.auto_envvar_prefix is not None\n            and self.name is not None\n        ):\n            envvar = f\"{ctx.auto_envvar_prefix}_{self.name.upper()}\"\n            rv = os.environ.get(envvar)\n\n        return rv\n\n    def value_from_envvar(self, ctx: Context) -> t.Optional[t.Any]:\n        rv: t.Optional[t.Any] = self.resolve_envvar_value(ctx)\n\n        if rv is None:\n            return None\n\n        value_depth = (self.nargs != 1) + bool(self.multiple)\n\n        if value_depth > 0:\n            rv = self.type.split_envvar_value(rv)\n\n            if self.multiple and self.nargs != 1:\n                rv = batch(rv, self.nargs)\n\n        return rv\n\n    def consume_value(\n        self, ctx: Context, opts: t.Mapping[str, \"Parameter\"]\n    ) -> t.Tuple[t.Any, ParameterSource]:\n        value, source = super().consume_value(ctx, opts)\n\n        # The parser will emit a sentinel value if the option can be\n        # given as a flag without a value. This is different from None\n        # to distinguish from the flag not being given at all.\n        if value is _flag_needs_value:\n            if self.prompt is not None and not ctx.resilient_parsing:\n                value = self.prompt_for_value(ctx)\n                source = ParameterSource.PROMPT\n            else:\n                value = self.flag_value\n                source = ParameterSource.COMMANDLINE\n\n        elif (\n            self.multiple\n            and value is not None\n            and any(v is _flag_needs_value for v in value)\n        ):\n            value = [self.flag_value if v is _flag_needs_value else v for v in value]\n            source = ParameterSource.COMMANDLINE\n\n        # The value wasn't set, or used the param's default, prompt if\n        # prompting is enabled.\n        elif (\n            source in {None, ParameterSource.DEFAULT}\n            and self.prompt is not None\n            and (self.required or self.prompt_required)\n            and not ctx.resilient_parsing\n        ):\n            value = self.prompt_for_value(ctx)\n            source = ParameterSource.PROMPT\n\n        return value, source\n\n\nclass Argument(Parameter):\n    \"\"\"Arguments are positional parameters to a command.  They generally\n    provide fewer features than options but can have infinite ``nargs``\n    and are required by default.\n\n    All parameters are passed onwards to the parameter constructor.\n    \"\"\"\n\n    param_type_name = \"argument\"\n\n    def __init__(\n        self,\n        param_decls: t.Sequence[str],\n        required: t.Optional[bool] = None,\n        **attrs: t.Any,\n    ) -> None:\n        if required is None:\n            if attrs.get(\"default\") is not None:\n                required = False\n            else:\n                required = attrs.get(\"nargs\", 1) > 0\n\n        if \"multiple\" in attrs:\n            raise TypeError(\"__init__() got an unexpected keyword argument 'multiple'.\")\n\n        super().__init__(param_decls, required=required, **attrs)\n\n        if __debug__:\n            if self.default is not None and self.nargs == -1:\n                raise TypeError(\"'default' is not supported for nargs=-1.\")\n\n    @property\n    def human_readable_name(self) -> str:\n        if self.metavar is not None:\n            return self.metavar\n        return self.name.upper()  # type: ignore\n\n    def make_metavar(self) -> str:\n        if self.metavar is not None:\n            return self.metavar\n        var = self.type.get_metavar(self)\n        if not var:\n            var = self.name.upper()  # type: ignore\n        if not self.required:\n            var = f\"[{var}]\"\n        if self.nargs != 1:\n            var += \"...\"\n        return var\n\n    def _parse_decls(\n        self, decls: t.Sequence[str], expose_value: bool\n    ) -> t.Tuple[t.Optional[str], t.List[str], t.List[str]]:\n        if not decls:\n            if not expose_value:\n                return None, [], []\n            raise TypeError(\"Could not determine name for argument\")\n        if len(decls) == 1:\n            name = arg = decls[0]\n            name = name.replace(\"-\", \"_\").lower()\n        else:\n            raise TypeError(\n                \"Arguments take exactly one parameter declaration, got\"\n                f\" {len(decls)}.\"\n            )\n        return name, [arg], []\n\n    def get_usage_pieces(self, ctx: Context) -> t.List[str]:\n        return [self.make_metavar()]\n\n    def get_error_hint(self, ctx: Context) -> str:\n        return f\"'{self.make_metavar()}'\"\n\n    def add_to_parser(self, parser: OptionParser, ctx: Context) -> None:\n        parser.add_argument(dest=self.name, nargs=self.nargs, obj=self)\n", 2953], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/importlib/util.py": ["\"\"\"Utility code for constructing importers, etc.\"\"\"\nfrom . import abc\nfrom ._bootstrap import module_from_spec\nfrom ._bootstrap import _resolve_name\nfrom ._bootstrap import spec_from_loader\nfrom ._bootstrap import _find_spec\nfrom ._bootstrap_external import MAGIC_NUMBER\nfrom ._bootstrap_external import _RAW_MAGIC_NUMBER\nfrom ._bootstrap_external import cache_from_source\nfrom ._bootstrap_external import decode_source\nfrom ._bootstrap_external import source_from_cache\nfrom ._bootstrap_external import spec_from_file_location\n\nfrom contextlib import contextmanager\nimport _imp\nimport functools\nimport sys\nimport types\nimport warnings\n\n\ndef source_hash(source_bytes):\n    \"Return the hash of *source_bytes* as used in hash-based pyc files.\"\n    return _imp.source_hash(_RAW_MAGIC_NUMBER, source_bytes)\n\n\ndef resolve_name(name, package):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n    if not name.startswith('.'):\n        return name\n    elif not package:\n        raise ValueError(f'no package specified for {repr(name)} '\n                         '(required for relative module names)')\n    level = 0\n    for character in name:\n        if character != '.':\n            break\n        level += 1\n    return _resolve_name(name[level:], package, level)\n\n\ndef _find_spec_from_path(name, path=None):\n    \"\"\"Return the spec for the specified module.\n\n    First, sys.modules is checked to see if the module was already imported. If\n    so, then sys.modules[name].__spec__ is returned. If that happens to be\n    set to None, then ValueError is raised. If the module is not in\n    sys.modules, then sys.meta_path is searched for a suitable spec with the\n    value of 'path' given to the finders. None is returned if no spec could\n    be found.\n\n    Dotted names do not have their parent packages implicitly imported. You will\n    most likely need to explicitly import all parent packages in the proper\n    order for a submodule to get the correct spec.\n\n    \"\"\"\n    if name not in sys.modules:\n        return _find_spec(name, path)\n    else:\n        module = sys.modules[name]\n        if module is None:\n            return None\n        try:\n            spec = module.__spec__\n        except AttributeError:\n            raise ValueError('{}.__spec__ is not set'.format(name)) from None\n        else:\n            if spec is None:\n                raise ValueError('{}.__spec__ is None'.format(name))\n            return spec\n\n\ndef find_spec(name, package=None):\n    \"\"\"Return the spec for the specified module.\n\n    First, sys.modules is checked to see if the module was already imported. If\n    so, then sys.modules[name].__spec__ is returned. If that happens to be\n    set to None, then ValueError is raised. If the module is not in\n    sys.modules, then sys.meta_path is searched for a suitable spec with the\n    value of 'path' given to the finders. None is returned if no spec could\n    be found.\n\n    If the name is for submodule (contains a dot), the parent module is\n    automatically imported.\n\n    The name and package arguments work the same as importlib.import_module().\n    In other words, relative module names (with leading dots) work.\n\n    \"\"\"\n    fullname = resolve_name(name, package) if name.startswith('.') else name\n    if fullname not in sys.modules:\n        parent_name = fullname.rpartition('.')[0]\n        if parent_name:\n            parent = __import__(parent_name, fromlist=['__path__'])\n            try:\n                parent_path = parent.__path__\n            except AttributeError as e:\n                raise ModuleNotFoundError(\n                    f\"__path__ attribute not found on {parent_name!r} \"\n                    f\"while trying to find {fullname!r}\", name=fullname) from e\n        else:\n            parent_path = None\n        return _find_spec(fullname, parent_path)\n    else:\n        module = sys.modules[fullname]\n        if module is None:\n            return None\n        try:\n            spec = module.__spec__\n        except AttributeError:\n            raise ValueError('{}.__spec__ is not set'.format(name)) from None\n        else:\n            if spec is None:\n                raise ValueError('{}.__spec__ is None'.format(name))\n            return spec\n\n\n@contextmanager\ndef _module_to_load(name):\n    is_reload = name in sys.modules\n\n    module = sys.modules.get(name)\n    if not is_reload:\n        # This must be done before open() is called as the 'io' module\n        # implicitly imports 'locale' and would otherwise trigger an\n        # infinite loop.\n        module = type(sys)(name)\n        # This must be done before putting the module in sys.modules\n        # (otherwise an optimization shortcut in import.c becomes wrong)\n        module.__initializing__ = True\n        sys.modules[name] = module\n    try:\n        yield module\n    except Exception:\n        if not is_reload:\n            try:\n                del sys.modules[name]\n            except KeyError:\n                pass\n    finally:\n        module.__initializing__ = False\n\n\ndef set_package(fxn):\n    \"\"\"Set __package__ on the returned module.\n\n    This function is deprecated.\n\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_package_wrapper(*args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(*args, **kwargs)\n        if getattr(module, '__package__', None) is None:\n            module.__package__ = module.__name__\n            if not hasattr(module, '__path__'):\n                module.__package__ = module.__package__.rpartition('.')[0]\n        return module\n    return set_package_wrapper\n\n\ndef set_loader(fxn):\n    \"\"\"Set __loader__ on the returned module.\n\n    This function is deprecated.\n\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_loader_wrapper(self, *args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(self, *args, **kwargs)\n        if getattr(module, '__loader__', None) is None:\n            module.__loader__ = self\n        return module\n    return set_loader_wrapper\n\n\ndef module_for_loader(fxn):\n    \"\"\"Decorator to handle selecting the proper module for loaders.\n\n    The decorated function is passed the module to use instead of the module\n    name. The module passed in to the function is either from sys.modules if\n    it already exists or is a new module. If the module is new, then __name__\n    is set the first argument to the method, __loader__ is set to self, and\n    __package__ is set accordingly (if self.is_package() is defined) will be set\n    before it is passed to the decorated function (if self.is_package() does\n    not work for the module it will be set post-load).\n\n    If an exception is raised and the decorator created the module it is\n    subsequently removed from sys.modules.\n\n    The decorator assumes that the decorated function takes the module name as\n    the second argument.\n\n    \"\"\"\n    warnings.warn('The import system now takes care of this automatically.',\n                  DeprecationWarning, stacklevel=2)\n    @functools.wraps(fxn)\n    def module_for_loader_wrapper(self, fullname, *args, **kwargs):\n        with _module_to_load(fullname) as module:\n            module.__loader__ = self\n            try:\n                is_package = self.is_package(fullname)\n            except (ImportError, AttributeError):\n                pass\n            else:\n                if is_package:\n                    module.__package__ = fullname\n                else:\n                    module.__package__ = fullname.rpartition('.')[0]\n            # If __package__ was not set above, __import__() will do it later.\n            return fxn(self, module, *args, **kwargs)\n\n    return module_for_loader_wrapper\n\n\nclass _LazyModule(types.ModuleType):\n\n    \"\"\"A subclass of the module type which triggers loading upon attribute access.\"\"\"\n\n    def __getattribute__(self, attr):\n        \"\"\"Trigger the load of the module and return the attribute.\"\"\"\n        # All module metadata must be garnered from __spec__ in order to avoid\n        # using mutated values.\n        # Stop triggering this method.\n        self.__class__ = types.ModuleType\n        # Get the original name to make sure no object substitution occurred\n        # in sys.modules.\n        original_name = self.__spec__.name\n        # Figure out exactly what attributes were mutated between the creation\n        # of the module and now.\n        attrs_then = self.__spec__.loader_state['__dict__']\n        original_type = self.__spec__.loader_state['__class__']\n        attrs_now = self.__dict__\n        attrs_updated = {}\n        for key, value in attrs_now.items():\n            # Code that set the attribute may have kept a reference to the\n            # assigned object, making identity more important than equality.\n            if key not in attrs_then:\n                attrs_updated[key] = value\n            elif id(attrs_now[key]) != id(attrs_then[key]):\n                attrs_updated[key] = value\n        self.__spec__.loader.exec_module(self)\n        # If exec_module() was used directly there is no guarantee the module\n        # object was put into sys.modules.\n        if original_name in sys.modules:\n            if id(self) != id(sys.modules[original_name]):\n                raise ValueError(f\"module object for {original_name!r} \"\n                                  \"substituted in sys.modules during a lazy \"\n                                  \"load\")\n        # Update after loading since that's what would happen in an eager\n        # loading situation.\n        self.__dict__.update(attrs_updated)\n        return getattr(self, attr)\n\n    def __delattr__(self, attr):\n        \"\"\"Trigger the load and then perform the deletion.\"\"\"\n        # To trigger the load and raise an exception if the attribute\n        # doesn't exist.\n        self.__getattribute__(attr)\n        delattr(self, attr)\n\n\nclass LazyLoader(abc.Loader):\n\n    \"\"\"A loader that creates a module which defers loading until attribute access.\"\"\"\n\n    @staticmethod\n    def __check_eager_loader(loader):\n        if not hasattr(loader, 'exec_module'):\n            raise TypeError('loader must define exec_module()')\n\n    @classmethod\n    def factory(cls, loader):\n        \"\"\"Construct a callable which returns the eager loader made lazy.\"\"\"\n        cls.__check_eager_loader(loader)\n        return lambda *args, **kwargs: cls(loader(*args, **kwargs))\n\n    def __init__(self, loader):\n        self.__check_eager_loader(loader)\n        self.loader = loader\n\n    def create_module(self, spec):\n        return self.loader.create_module(spec)\n\n    def exec_module(self, module):\n        \"\"\"Make the module load lazily.\"\"\"\n        module.__spec__.loader = self.loader\n        module.__loader__ = self.loader\n        # Don't need to worry about deep-copying as trying to set an attribute\n        # on an object would have triggered the load,\n        # e.g. ``module.__spec__.loader = None`` would trigger a load from\n        # trying to access module.__spec__.\n        loader_state = {}\n        loader_state['__dict__'] = module.__dict__.copy()\n        loader_state['__class__'] = module.__class__\n        module.__spec__.loader_state = loader_state\n        module.__class__ = _LazyModule\n", 300], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py": ["import functools\nimport inspect\nimport logging\nimport os\nimport sys\nimport typing as t\nimport weakref\nfrom datetime import timedelta\nfrom itertools import chain\nfrom threading import Lock\nfrom types import TracebackType\n\nfrom werkzeug.datastructures import Headers\nfrom werkzeug.datastructures import ImmutableDict\nfrom werkzeug.exceptions import BadRequest\nfrom werkzeug.exceptions import BadRequestKeyError\nfrom werkzeug.exceptions import HTTPException\nfrom werkzeug.exceptions import InternalServerError\nfrom werkzeug.local import ContextVar\nfrom werkzeug.routing import BuildError\nfrom werkzeug.routing import Map\nfrom werkzeug.routing import MapAdapter\nfrom werkzeug.routing import RequestRedirect\nfrom werkzeug.routing import RoutingException\nfrom werkzeug.routing import Rule\nfrom werkzeug.wrappers import Response as BaseResponse\n\nfrom . import cli\nfrom . import json\nfrom .config import Config\nfrom .config import ConfigAttribute\nfrom .ctx import _AppCtxGlobals\nfrom .ctx import AppContext\nfrom .ctx import RequestContext\nfrom .globals import _request_ctx_stack\nfrom .globals import g\nfrom .globals import request\nfrom .globals import session\nfrom .helpers import _split_blueprint_path\nfrom .helpers import get_debug_flag\nfrom .helpers import get_env\nfrom .helpers import get_flashed_messages\nfrom .helpers import get_load_dotenv\nfrom .helpers import locked_cached_property\nfrom .helpers import url_for\nfrom .json import jsonify\nfrom .logging import create_logger\nfrom .scaffold import _endpoint_from_view_func\nfrom .scaffold import _sentinel\nfrom .scaffold import find_package\nfrom .scaffold import Scaffold\nfrom .scaffold import setupmethod\nfrom .sessions import SecureCookieSessionInterface\nfrom .signals import appcontext_tearing_down\nfrom .signals import got_request_exception\nfrom .signals import request_finished\nfrom .signals import request_started\nfrom .signals import request_tearing_down\nfrom .templating import DispatchingJinjaLoader\nfrom .templating import Environment\nfrom .typing import BeforeFirstRequestCallable\nfrom .typing import ResponseReturnValue\nfrom .typing import TeardownCallable\nfrom .typing import TemplateFilterCallable\nfrom .typing import TemplateGlobalCallable\nfrom .typing import TemplateTestCallable\nfrom .wrappers import Request\nfrom .wrappers import Response\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te\n    from .blueprints import Blueprint\n    from .testing import FlaskClient\n    from .testing import FlaskCliRunner\n    from .typing import ErrorHandlerCallable\n\nif sys.version_info >= (3, 8):\n    iscoroutinefunction = inspect.iscoroutinefunction\nelse:\n\n    def iscoroutinefunction(func: t.Any) -> bool:\n        while inspect.ismethod(func):\n            func = func.__func__\n\n        while isinstance(func, functools.partial):\n            func = func.func\n\n        return inspect.iscoroutinefunction(func)\n\n\ndef _make_timedelta(value: t.Optional[timedelta]) -> t.Optional[timedelta]:\n    if value is None or isinstance(value, timedelta):\n        return value\n\n    return timedelta(seconds=value)\n\n\nclass Flask(Scaffold):\n    \"\"\"The flask object implements a WSGI application and acts as the central\n    object.  It is passed the name of the module or package of the\n    application.  Once it is created it will act as a central registry for\n    the view functions, the URL rules, template configuration and much more.\n\n    The name of the package is used to resolve resources from inside the\n    package or the folder the module is contained in depending on if the\n    package parameter resolves to an actual python package (a folder with\n    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).\n\n    For more information about resource loading, see :func:`open_resource`.\n\n    Usually you create a :class:`Flask` instance in your main module or\n    in the :file:`__init__.py` file of your package like this::\n\n        from flask import Flask\n        app = Flask(__name__)\n\n    .. admonition:: About the First Parameter\n\n        The idea of the first parameter is to give Flask an idea of what\n        belongs to your application.  This name is used to find resources\n        on the filesystem, can be used by extensions to improve debugging\n        information and a lot more.\n\n        So it's important what you provide there.  If you are using a single\n        module, `__name__` is always the correct value.  If you however are\n        using a package, it's usually recommended to hardcode the name of\n        your package there.\n\n        For example if your application is defined in :file:`yourapplication/app.py`\n        you should create it with one of the two versions below::\n\n            app = Flask('yourapplication')\n            app = Flask(__name__.split('.')[0])\n\n        Why is that?  The application will work even with `__name__`, thanks\n        to how resources are looked up.  However it will make debugging more\n        painful.  Certain extensions can make assumptions based on the\n        import name of your application.  For example the Flask-SQLAlchemy\n        extension will look for the code in your application that triggered\n        an SQL query in debug mode.  If the import name is not properly set\n        up, that debugging information is lost.  (For example it would only\n        pick up SQL queries in `yourapplication.app` and not\n        `yourapplication.views.frontend`)\n\n    .. versionadded:: 0.7\n       The `static_url_path`, `static_folder`, and `template_folder`\n       parameters were added.\n\n    .. versionadded:: 0.8\n       The `instance_path` and `instance_relative_config` parameters were\n       added.\n\n    .. versionadded:: 0.11\n       The `root_path` parameter was added.\n\n    .. versionadded:: 1.0\n       The ``host_matching`` and ``static_host`` parameters were added.\n\n    .. versionadded:: 1.0\n       The ``subdomain_matching`` parameter was added. Subdomain\n       matching needs to be enabled manually now. Setting\n       :data:`SERVER_NAME` does not implicitly enable it.\n\n    :param import_name: the name of the application package\n    :param static_url_path: can be used to specify a different path for the\n                            static files on the web.  Defaults to the name\n                            of the `static_folder` folder.\n    :param static_folder: The folder with static files that is served at\n        ``static_url_path``. Relative to the application ``root_path``\n        or an absolute path. Defaults to ``'static'``.\n    :param static_host: the host to use when adding the static route.\n        Defaults to None. Required when using ``host_matching=True``\n        with a ``static_folder`` configured.\n    :param host_matching: set ``url_map.host_matching`` attribute.\n        Defaults to False.\n    :param subdomain_matching: consider the subdomain relative to\n        :data:`SERVER_NAME` when matching routes. Defaults to False.\n    :param template_folder: the folder that contains the templates that should\n                            be used by the application.  Defaults to\n                            ``'templates'`` folder in the root path of the\n                            application.\n    :param instance_path: An alternative instance path for the application.\n                          By default the folder ``'instance'`` next to the\n                          package or module is assumed to be the instance\n                          path.\n    :param instance_relative_config: if set to ``True`` relative filenames\n                                     for loading the config are assumed to\n                                     be relative to the instance path instead\n                                     of the application root.\n    :param root_path: The path to the root of the application files.\n        This should only be set manually when it can't be detected\n        automatically, such as for namespace packages.\n    \"\"\"\n\n    #: The class that is used for request objects.  See :class:`~flask.Request`\n    #: for more information.\n    request_class = Request\n\n    #: The class that is used for response objects.  See\n    #: :class:`~flask.Response` for more information.\n    response_class = Response\n\n    #: The class that is used for the Jinja environment.\n    #:\n    #: .. versionadded:: 0.11\n    jinja_environment = Environment\n\n    #: The class that is used for the :data:`~flask.g` instance.\n    #:\n    #: Example use cases for a custom class:\n    #:\n    #: 1. Store arbitrary attributes on flask.g.\n    #: 2. Add a property for lazy per-request database connectors.\n    #: 3. Return None instead of AttributeError on unexpected attributes.\n    #: 4. Raise exception if an unexpected attr is set, a \"controlled\" flask.g.\n    #:\n    #: In Flask 0.9 this property was called `request_globals_class` but it\n    #: was changed in 0.10 to :attr:`app_ctx_globals_class` because the\n    #: flask.g object is now application context scoped.\n    #:\n    #: .. versionadded:: 0.10\n    app_ctx_globals_class = _AppCtxGlobals\n\n    #: The class that is used for the ``config`` attribute of this app.\n    #: Defaults to :class:`~flask.Config`.\n    #:\n    #: Example use cases for a custom class:\n    #:\n    #: 1. Default values for certain config options.\n    #: 2. Access to config values through attributes in addition to keys.\n    #:\n    #: .. versionadded:: 0.11\n    config_class = Config\n\n    #: The testing flag.  Set this to ``True`` to enable the test mode of\n    #: Flask extensions (and in the future probably also Flask itself).\n    #: For example this might activate test helpers that have an\n    #: additional runtime cost which should not be enabled by default.\n    #:\n    #: If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\n    #: default it's implicitly enabled.\n    #:\n    #: This attribute can also be configured from the config with the\n    #: ``TESTING`` configuration key.  Defaults to ``False``.\n    testing = ConfigAttribute(\"TESTING\")\n\n    #: If a secret key is set, cryptographic components can use this to\n    #: sign cookies and other things. Set this to a complex random value\n    #: when you want to use the secure cookie for instance.\n    #:\n    #: This attribute can also be configured from the config with the\n    #: :data:`SECRET_KEY` configuration key. Defaults to ``None``.\n    secret_key = ConfigAttribute(\"SECRET_KEY\")\n\n    #: The secure cookie uses this for the name of the session cookie.\n    #:\n    #: This attribute can also be configured from the config with the\n    #: ``SESSION_COOKIE_NAME`` configuration key.  Defaults to ``'session'``\n    session_cookie_name = ConfigAttribute(\"SESSION_COOKIE_NAME\")\n\n    #: A :class:`~datetime.timedelta` which is used to set the expiration\n    #: date of a permanent session.  The default is 31 days which makes a\n    #: permanent session survive for roughly one month.\n    #:\n    #: This attribute can also be configured from the config with the\n    #: ``PERMANENT_SESSION_LIFETIME`` configuration key.  Defaults to\n    #: ``timedelta(days=31)``\n    permanent_session_lifetime = ConfigAttribute(\n        \"PERMANENT_SESSION_LIFETIME\", get_converter=_make_timedelta\n    )\n\n    #: A :class:`~datetime.timedelta` or number of seconds which is used\n    #: as the default ``max_age`` for :func:`send_file`. The default is\n    #: ``None``, which tells the browser to use conditional requests\n    #: instead of a timed cache.\n    #:\n    #: Configured with the :data:`SEND_FILE_MAX_AGE_DEFAULT`\n    #: configuration key.\n    #:\n    #: .. versionchanged:: 2.0\n    #:     Defaults to ``None`` instead of 12 hours.\n    send_file_max_age_default = ConfigAttribute(\n        \"SEND_FILE_MAX_AGE_DEFAULT\", get_converter=_make_timedelta\n    )\n\n    #: Enable this if you want to use the X-Sendfile feature.  Keep in\n    #: mind that the server has to support this.  This only affects files\n    #: sent with the :func:`send_file` method.\n    #:\n    #: .. versionadded:: 0.2\n    #:\n    #: This attribute can also be configured from the config with the\n    #: ``USE_X_SENDFILE`` configuration key.  Defaults to ``False``.\n    use_x_sendfile = ConfigAttribute(\"USE_X_SENDFILE\")\n\n    #: The JSON encoder class to use.  Defaults to :class:`~flask.json.JSONEncoder`.\n    #:\n    #: .. versionadded:: 0.10\n    json_encoder = json.JSONEncoder\n\n    #: The JSON decoder class to use.  Defaults to :class:`~flask.json.JSONDecoder`.\n    #:\n    #: .. versionadded:: 0.10\n    json_decoder = json.JSONDecoder\n\n    #: Options that are passed to the Jinja environment in\n    #: :meth:`create_jinja_environment`. Changing these options after\n    #: the environment is created (accessing :attr:`jinja_env`) will\n    #: have no effect.\n    #:\n    #: .. versionchanged:: 1.1.0\n    #:     This is a ``dict`` instead of an ``ImmutableDict`` to allow\n    #:     easier configuration.\n    #:\n    jinja_options: dict = {}\n\n    #: Default configuration parameters.\n    default_config = ImmutableDict(\n        {\n            \"ENV\": None,\n            \"DEBUG\": None,\n            \"TESTING\": False,\n            \"PROPAGATE_EXCEPTIONS\": None,\n            \"PRESERVE_CONTEXT_ON_EXCEPTION\": None,\n            \"SECRET_KEY\": None,\n            \"PERMANENT_SESSION_LIFETIME\": timedelta(days=31),\n            \"USE_X_SENDFILE\": False,\n            \"SERVER_NAME\": None,\n            \"APPLICATION_ROOT\": \"/\",\n            \"SESSION_COOKIE_NAME\": \"session\",\n            \"SESSION_COOKIE_DOMAIN\": None,\n            \"SESSION_COOKIE_PATH\": None,\n            \"SESSION_COOKIE_HTTPONLY\": True,\n            \"SESSION_COOKIE_SECURE\": False,\n            \"SESSION_COOKIE_SAMESITE\": None,\n            \"SESSION_REFRESH_EACH_REQUEST\": True,\n            \"MAX_CONTENT_LENGTH\": None,\n            \"SEND_FILE_MAX_AGE_DEFAULT\": None,\n            \"TRAP_BAD_REQUEST_ERRORS\": None,\n            \"TRAP_HTTP_EXCEPTIONS\": False,\n            \"EXPLAIN_TEMPLATE_LOADING\": False,\n            \"PREFERRED_URL_SCHEME\": \"http\",\n            \"JSON_AS_ASCII\": True,\n            \"JSON_SORT_KEYS\": True,\n            \"JSONIFY_PRETTYPRINT_REGULAR\": False,\n            \"JSONIFY_MIMETYPE\": \"application/json\",\n            \"TEMPLATES_AUTO_RELOAD\": None,\n            \"MAX_COOKIE_SIZE\": 4093,\n        }\n    )\n\n    #: The rule object to use for URL rules created.  This is used by\n    #: :meth:`add_url_rule`.  Defaults to :class:`werkzeug.routing.Rule`.\n    #:\n    #: .. versionadded:: 0.7\n    url_rule_class = Rule\n\n    #: The map object to use for storing the URL rules and routing\n    #: configuration parameters. Defaults to :class:`werkzeug.routing.Map`.\n    #:\n    #: .. versionadded:: 1.1.0\n    url_map_class = Map\n\n    #: The :meth:`test_client` method creates an instance of this test\n    #: client class. Defaults to :class:`~flask.testing.FlaskClient`.\n    #:\n    #: .. versionadded:: 0.7\n    test_client_class: t.Optional[t.Type[\"FlaskClient\"]] = None\n\n    #: The :class:`~click.testing.CliRunner` subclass, by default\n    #: :class:`~flask.testing.FlaskCliRunner` that is used by\n    #: :meth:`test_cli_runner`. Its ``__init__`` method should take a\n    #: Flask app object as the first argument.\n    #:\n    #: .. versionadded:: 1.0\n    test_cli_runner_class: t.Optional[t.Type[\"FlaskCliRunner\"]] = None\n\n    #: the session interface to use.  By default an instance of\n    #: :class:`~flask.sessions.SecureCookieSessionInterface` is used here.\n    #:\n    #: .. versionadded:: 0.8\n    session_interface = SecureCookieSessionInterface()\n\n    def __init__(\n        self,\n        import_name: str,\n        static_url_path: t.Optional[str] = None,\n        static_folder: t.Optional[t.Union[str, os.PathLike]] = \"static\",\n        static_host: t.Optional[str] = None,\n        host_matching: bool = False,\n        subdomain_matching: bool = False,\n        template_folder: t.Optional[str] = \"templates\",\n        instance_path: t.Optional[str] = None,\n        instance_relative_config: bool = False,\n        root_path: t.Optional[str] = None,\n    ):\n        super().__init__(\n            import_name=import_name,\n            static_folder=static_folder,\n            static_url_path=static_url_path,\n            template_folder=template_folder,\n            root_path=root_path,\n        )\n\n        if instance_path is None:\n            instance_path = self.auto_find_instance_path()\n        elif not os.path.isabs(instance_path):\n            raise ValueError(\n                \"If an instance path is provided it must be absolute.\"\n                \" A relative path was given instead.\"\n            )\n\n        #: Holds the path to the instance folder.\n        #:\n        #: .. versionadded:: 0.8\n        self.instance_path = instance_path\n\n        #: The configuration dictionary as :class:`Config`.  This behaves\n        #: exactly like a regular dictionary but supports additional methods\n        #: to load a config from files.\n        self.config = self.make_config(instance_relative_config)\n\n        #: A list of functions that are called when :meth:`url_for` raises a\n        #: :exc:`~werkzeug.routing.BuildError`.  Each function registered here\n        #: is called with `error`, `endpoint` and `values`.  If a function\n        #: returns ``None`` or raises a :exc:`BuildError` the next function is\n        #: tried.\n        #:\n        #: .. versionadded:: 0.9\n        self.url_build_error_handlers: t.List[\n            t.Callable[[Exception, str, dict], str]\n        ] = []\n\n        #: A list of functions that will be called at the beginning of the\n        #: first request to this instance. To register a function, use the\n        #: :meth:`before_first_request` decorator.\n        #:\n        #: .. versionadded:: 0.8\n        self.before_first_request_funcs: t.List[BeforeFirstRequestCallable] = []\n\n        #: A list of functions that are called when the application context\n        #: is destroyed.  Since the application context is also torn down\n        #: if the request ends this is the place to store code that disconnects\n        #: from databases.\n        #:\n        #: .. versionadded:: 0.9\n        self.teardown_appcontext_funcs: t.List[TeardownCallable] = []\n\n        #: A list of shell context processor functions that should be run\n        #: when a shell context is created.\n        #:\n        #: .. versionadded:: 0.11\n        self.shell_context_processors: t.List[t.Callable[[], t.Dict[str, t.Any]]] = []\n\n        #: Maps registered blueprint names to blueprint objects. The\n        #: dict retains the order the blueprints were registered in.\n        #: Blueprints can be registered multiple times, this dict does\n        #: not track how often they were attached.\n        #:\n        #: .. versionadded:: 0.7\n        self.blueprints: t.Dict[str, \"Blueprint\"] = {}\n\n        #: a place where extensions can store application specific state.  For\n        #: example this is where an extension could store database engines and\n        #: similar things.\n        #:\n        #: The key must match the name of the extension module. For example in\n        #: case of a \"Flask-Foo\" extension in `flask_foo`, the key would be\n        #: ``'foo'``.\n        #:\n        #: .. versionadded:: 0.7\n        self.extensions: dict = {}\n\n        #: The :class:`~werkzeug.routing.Map` for this instance.  You can use\n        #: this to change the routing converters after the class was created\n        #: but before any routes are connected.  Example::\n        #:\n        #:    from werkzeug.routing import BaseConverter\n        #:\n        #:    class ListConverter(BaseConverter):\n        #:        def to_python(self, value):\n        #:            return value.split(',')\n        #:        def to_url(self, values):\n        #:            return ','.join(super(ListConverter, self).to_url(value)\n        #:                            for value in values)\n        #:\n        #:    app = Flask(__name__)\n        #:    app.url_map.converters['list'] = ListConverter\n        self.url_map = self.url_map_class()\n\n        self.url_map.host_matching = host_matching\n        self.subdomain_matching = subdomain_matching\n\n        # tracks internally if the application already handled at least one\n        # request.\n        self._got_first_request = False\n        self._before_request_lock = Lock()\n\n        # Add a static route using the provided static_url_path, static_host,\n        # and static_folder if there is a configured static_folder.\n        # Note we do this without checking if static_folder exists.\n        # For one, it might be created while the server is running (e.g. during\n        # development). Also, Google App Engine stores static files somewhere\n        if self.has_static_folder:\n            assert (\n                bool(static_host) == host_matching\n            ), \"Invalid static_host/host_matching combination\"\n            # Use a weakref to avoid creating a reference cycle between the app\n            # and the view function (see #3761).\n            self_ref = weakref.ref(self)\n            self.add_url_rule(\n                f\"{self.static_url_path}/<path:filename>\",\n                endpoint=\"static\",\n                host=static_host,\n                view_func=lambda **kw: self_ref().send_static_file(**kw),  # type: ignore # noqa: B950\n            )\n\n        # Set the name of the Click group in case someone wants to add\n        # the app's commands to another CLI tool.\n        self.cli.name = self.name\n\n    def _is_setup_finished(self) -> bool:\n        return self.debug and self._got_first_request\n\n    @locked_cached_property\n    def name(self) -> str:  # type: ignore\n        \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        if self.import_name == \"__main__\":\n            fn = getattr(sys.modules[\"__main__\"], \"__file__\", None)\n            if fn is None:\n                return \"__main__\"\n            return os.path.splitext(os.path.basename(fn))[0]\n        return self.import_name\n\n    @property\n    def propagate_exceptions(self) -> bool:\n        \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n        value in case it's set, otherwise a sensible default is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        rv = self.config[\"PROPAGATE_EXCEPTIONS\"]\n        if rv is not None:\n            return rv\n        return self.testing or self.debug\n\n    @property\n    def preserve_context_on_exception(self) -> bool:\n        \"\"\"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION``\n        configuration value in case it's set, otherwise a sensible default\n        is returned.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        rv = self.config[\"PRESERVE_CONTEXT_ON_EXCEPTION\"]\n        if rv is not None:\n            return rv\n        return self.debug\n\n    @locked_cached_property\n    def logger(self) -> logging.Logger:\n        \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\n        return create_logger(self)\n\n    @locked_cached_property\n    def jinja_env(self) -> Environment:\n        \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\n        return self.create_jinja_environment()\n\n    @property\n    def got_first_request(self) -> bool:\n        \"\"\"This attribute is set to ``True`` if the application started\n        handling the first request.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        return self._got_first_request\n\n    def make_config(self, instance_relative: bool = False) -> Config:\n        \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        root_path = self.root_path\n        if instance_relative:\n            root_path = self.instance_path\n        defaults = dict(self.default_config)\n        defaults[\"ENV\"] = get_env()\n        defaults[\"DEBUG\"] = get_debug_flag()\n        return self.config_class(root_path, defaults)\n\n    def auto_find_instance_path(self) -> str:\n        \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        prefix, package_path = find_package(self.import_name)\n        if prefix is None:\n            return os.path.join(package_path, \"instance\")\n        return os.path.join(prefix, \"var\", f\"{self.name}-instance\")\n\n    def open_instance_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n        \"\"\"Opens a resource from the application's instance folder\n        (:attr:`instance_path`).  Otherwise works like\n        :meth:`open_resource`.  Instance resources can also be opened for\n        writing.\n\n        :param resource: the name of the resource.  To access resources within\n                         subfolders use forward slashes as separator.\n        :param mode: resource file opening mode, default is 'rb'.\n        \"\"\"\n        return open(os.path.join(self.instance_path, resource), mode)\n\n    @property\n    def templates_auto_reload(self) -> bool:\n        \"\"\"Reload templates when they are changed. Used by\n        :meth:`create_jinja_environment`.\n\n        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n        not set, it will be enabled in debug mode.\n\n        .. versionadded:: 1.0\n            This property was added but the underlying config and behavior\n            already existed.\n        \"\"\"\n        rv = self.config[\"TEMPLATES_AUTO_RELOAD\"]\n        return rv if rv is not None else self.debug\n\n    @templates_auto_reload.setter\n    def templates_auto_reload(self, value: bool) -> None:\n        self.config[\"TEMPLATES_AUTO_RELOAD\"] = value\n\n    def create_jinja_environment(self) -> Environment:\n        \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        options = dict(self.jinja_options)\n\n        if \"autoescape\" not in options:\n            options[\"autoescape\"] = self.select_jinja_autoescape\n\n        if \"auto_reload\" not in options:\n            options[\"auto_reload\"] = self.templates_auto_reload\n\n        rv = self.jinja_environment(self, **options)\n        rv.globals.update(\n            url_for=url_for,\n            get_flashed_messages=get_flashed_messages,\n            config=self.config,\n            # request, session and g are normally added with the\n            # context processor for efficiency reasons but for imported\n            # templates we also want the proxies in there.\n            request=request,\n            session=session,\n            g=g,\n        )\n        rv.policies[\"json.dumps_function\"] = json.dumps\n        return rv\n\n    def create_global_jinja_loader(self) -> DispatchingJinjaLoader:\n        \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        return DispatchingJinjaLoader(self)\n\n    def select_jinja_autoescape(self, filename: str) -> bool:\n        \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if filename is None:\n            return True\n        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\"))\n\n    def update_template_context(self, context: dict) -> None:\n        \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\n        names: t.Iterable[t.Optional[str]] = (None,)\n\n        # A template may be rendered outside a request context.\n        if request:\n            names = chain(names, reversed(request.blueprints))\n\n        # The values passed to render_template take precedence. Keep a\n        # copy to re-apply after all context functions.\n        orig_ctx = context.copy()\n\n        for name in names:\n            if name in self.template_context_processors:\n                for func in self.template_context_processors[name]:\n                    context.update(func())\n\n        context.update(orig_ctx)\n\n    def make_shell_context(self) -> dict:\n        \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        rv = {\"app\": self, \"g\": g}\n        for processor in self.shell_context_processors:\n            rv.update(processor())\n        return rv\n\n    #: What environment the app is running in. Flask and extensions may\n    #: enable behaviors based on the environment, such as enabling debug\n    #: mode. This maps to the :data:`ENV` config key. This is set by the\n    #: :envvar:`FLASK_ENV` environment variable and may not behave as\n    #: expected if set in code.\n    #:\n    #: **Do not enable development when deploying in production.**\n    #:\n    #: Default: ``'production'``\n    env = ConfigAttribute(\"ENV\")\n\n    @property\n    def debug(self) -> bool:\n        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n        the development server, an interactive debugger will be shown for\n        unhandled exceptions, and the server will be reloaded when code\n        changes. This maps to the :data:`DEBUG` config key. This is\n        enabled when :attr:`env` is ``'development'`` and is overridden\n        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n        expected if set in code.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``True`` if :attr:`env` is ``'development'``, or\n        ``False`` otherwise.\n        \"\"\"\n        return self.config[\"DEBUG\"]\n\n    @debug.setter\n    def debug(self, value: bool) -> None:\n        self.config[\"DEBUG\"] = value\n        self.jinja_env.auto_reload = self.templates_auto_reload\n\n    def run(\n        self,\n        host: t.Optional[str] = None,\n        port: t.Optional[int] = None,\n        debug: t.Optional[bool] = None,\n        load_dotenv: bool = True,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :doc:`/deploying/index` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n            environment variables will override :attr:`env` and\n            :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\n        # Change this into a no-op if the server is invoked from the\n        # command line. Have a look at cli.py for more information.\n        if os.environ.get(\"FLASK_RUN_FROM_CLI\") == \"true\":\n            from .debughelpers import explain_ignored_app_run\n\n            explain_ignored_app_run()\n            return\n\n        if get_load_dotenv(load_dotenv):\n            cli.load_dotenv()\n\n            # if set, let env vars override previous values\n            if \"FLASK_ENV\" in os.environ:\n                self.env = get_env()\n                self.debug = get_debug_flag()\n            elif \"FLASK_DEBUG\" in os.environ:\n                self.debug = get_debug_flag()\n\n        # debug passed to method overrides all other sources\n        if debug is not None:\n            self.debug = bool(debug)\n\n        server_name = self.config.get(\"SERVER_NAME\")\n        sn_host = sn_port = None\n\n        if server_name:\n            sn_host, _, sn_port = server_name.partition(\":\")\n\n        if not host:\n            if sn_host:\n                host = sn_host\n            else:\n                host = \"127.0.0.1\"\n\n        if port or port == 0:\n            port = int(port)\n        elif sn_port:\n            port = int(sn_port)\n        else:\n            port = 5000\n\n        options.setdefault(\"use_reloader\", self.debug)\n        options.setdefault(\"use_debugger\", self.debug)\n        options.setdefault(\"threaded\", True)\n\n        cli.show_server_banner(self.env, self.debug, self.name, False)\n\n        from werkzeug.serving import run_simple\n\n        try:\n            run_simple(t.cast(str, host), port, self, **options)\n        finally:\n            # reset the first request information if the development server\n            # reset normally.  This makes it possible to restart the server\n            # without reloader and that stuff from an interactive shell.\n            self._got_first_request = False\n\n    def test_client(self, use_cookies: bool = True, **kwargs: t.Any) -> \"FlaskClient\":\n        \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :doc:`/testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\n        cls = self.test_client_class\n        if cls is None:\n            from .testing import FlaskClient as cls  # type: ignore\n        return cls(  # type: ignore\n            self, self.response_class, use_cookies=use_cookies, **kwargs\n        )\n\n    def test_cli_runner(self, **kwargs: t.Any) -> \"FlaskCliRunner\":\n        \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\n        cls = self.test_cli_runner_class\n\n        if cls is None:\n            from .testing import FlaskCliRunner as cls  # type: ignore\n\n        return cls(self, **kwargs)  # type: ignore\n\n    @setupmethod\n    def register_blueprint(self, blueprint: \"Blueprint\", **options: t.Any) -> None:\n        \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n            for ``url_for``.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        blueprint.register(self, options)\n\n    def iter_blueprints(self) -> t.ValuesView[\"Blueprint\"]:\n        \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        return self.blueprints.values()\n\n    @setupmethod\n    def add_url_rule(\n        self,\n        rule: str,\n        endpoint: t.Optional[str] = None,\n        view_func: t.Optional[t.Callable] = None,\n        provide_automatic_options: t.Optional[bool] = None,\n        **options: t.Any,\n    ) -> None:\n        if endpoint is None:\n            endpoint = _endpoint_from_view_func(view_func)  # type: ignore\n        options[\"endpoint\"] = endpoint\n        methods = options.pop(\"methods\", None)\n\n        # if the methods are not given and the view_func object knows its\n        # methods we can use that instead.  If neither exists, we go with\n        # a tuple of only ``GET`` as default.\n        if methods is None:\n            methods = getattr(view_func, \"methods\", None) or (\"GET\",)\n        if isinstance(methods, str):\n            raise TypeError(\n                \"Allowed methods must be a list of strings, for\"\n                ' example: @app.route(..., methods=[\"POST\"])'\n            )\n        methods = {item.upper() for item in methods}\n\n        # Methods that should always be added\n        required_methods = set(getattr(view_func, \"required_methods\", ()))\n\n        # starting with Flask 0.8 the view_func object can disable and\n        # force-enable the automatic options handling.\n        if provide_automatic_options is None:\n            provide_automatic_options = getattr(\n                view_func, \"provide_automatic_options\", None\n            )\n\n        if provide_automatic_options is None:\n            if \"OPTIONS\" not in methods:\n                provide_automatic_options = True\n                required_methods.add(\"OPTIONS\")\n            else:\n                provide_automatic_options = False\n\n        # Add the required methods now.\n        methods |= required_methods\n\n        rule = self.url_rule_class(rule, methods=methods, **options)\n        rule.provide_automatic_options = provide_automatic_options  # type: ignore\n\n        self.url_map.add(rule)\n        if view_func is not None:\n            old_func = self.view_functions.get(endpoint)\n            if old_func is not None and old_func != view_func:\n                raise AssertionError(\n                    \"View function mapping is overwriting an existing\"\n                    f\" endpoint function: {endpoint}\"\n                )\n            self.view_functions[endpoint] = view_func\n\n    @setupmethod\n    def template_filter(\n        self, name: t.Optional[str] = None\n    ) -> t.Callable[[TemplateFilterCallable], TemplateFilterCallable]:\n        \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: TemplateFilterCallable) -> TemplateFilterCallable:\n            self.add_template_filter(f, name=name)\n            return f\n\n        return decorator\n\n    @setupmethod\n    def add_template_filter(\n        self, f: TemplateFilterCallable, name: t.Optional[str] = None\n    ) -> None:\n        \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n        self.jinja_env.filters[name or f.__name__] = f\n\n    @setupmethod\n    def template_test(\n        self, name: t.Optional[str] = None\n    ) -> t.Callable[[TemplateTestCallable], TemplateTestCallable]:\n        \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: TemplateTestCallable) -> TemplateTestCallable:\n            self.add_template_test(f, name=name)\n            return f\n\n        return decorator\n\n    @setupmethod\n    def add_template_test(\n        self, f: TemplateTestCallable, name: t.Optional[str] = None\n    ) -> None:\n        \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n        self.jinja_env.tests[name or f.__name__] = f\n\n    @setupmethod\n    def template_global(\n        self, name: t.Optional[str] = None\n    ) -> t.Callable[[TemplateGlobalCallable], TemplateGlobalCallable]:\n        \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: TemplateGlobalCallable) -> TemplateGlobalCallable:\n            self.add_template_global(f, name=name)\n            return f\n\n        return decorator\n\n    @setupmethod\n    def add_template_global(\n        self, f: TemplateGlobalCallable, name: t.Optional[str] = None\n    ) -> None:\n        \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\n        self.jinja_env.globals[name or f.__name__] = f\n\n    @setupmethod\n    def before_first_request(\n        self, f: BeforeFirstRequestCallable\n    ) -> BeforeFirstRequestCallable:\n        \"\"\"Registers a function to be run before the first request to this\n        instance of the application.\n\n        The function will be called without any arguments and its return\n        value is ignored.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        self.before_first_request_funcs.append(f)\n        return f\n\n    @setupmethod\n    def teardown_appcontext(self, f: TeardownCallable) -> TeardownCallable:\n        \"\"\"Registers a function to be called when the application context\n        ends.  These functions are typically also called when the request\n        context is popped.\n\n        Example::\n\n            ctx = app.app_context()\n            ctx.push()\n            ...\n            ctx.pop()\n\n        When ``ctx.pop()`` is executed in the above example, the teardown\n        functions are called just before the app context moves from the\n        stack of active contexts.  This becomes relevant if you are using\n        such constructs in tests.\n\n        Since a request context typically also manages an application\n        context it would also be called when you pop a request context.\n\n        When a teardown function was called because of an unhandled exception\n        it will be passed an error object. If an :meth:`errorhandler` is\n        registered, it will handle the exception and the teardown will not\n        receive it.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        self.teardown_appcontext_funcs.append(f)\n        return f\n\n    @setupmethod\n    def shell_context_processor(self, f: t.Callable) -> t.Callable:\n        \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        self.shell_context_processors.append(f)\n        return f\n\n    def _find_error_handler(\n        self, e: Exception\n    ) -> t.Optional[\"ErrorHandlerCallable[Exception]\"]:\n        \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\n        exc_class, code = self._get_exc_class_and_code(type(e))\n        names = (*request.blueprints, None)\n\n        for c in (code, None) if code is not None else (None,):\n            for name in names:\n                handler_map = self.error_handler_spec[name][c]\n\n                if not handler_map:\n                    continue\n\n                for cls in exc_class.__mro__:\n                    handler = handler_map.get(cls)\n\n                    if handler is not None:\n                        return handler\n        return None\n\n    def handle_http_exception(\n        self, e: HTTPException\n    ) -> t.Union[HTTPException, ResponseReturnValue]:\n        \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPException`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\n        # Proxy exceptions don't have error codes.  We want to always return\n        # those unchanged as errors\n        if e.code is None:\n            return e\n\n        # RoutingExceptions are used internally to trigger routing\n        # actions, such as slash redirects raising RequestRedirect. They\n        # are not raised or handled in user code.\n        if isinstance(e, RoutingException):\n            return e\n\n        handler = self._find_error_handler(e)\n        if handler is None:\n            return e\n        return self.ensure_sync(handler)(e)\n\n    def trap_http_exception(self, e: Exception) -> bool:\n        \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        if self.config[\"TRAP_HTTP_EXCEPTIONS\"]:\n            return True\n\n        trap_bad_request = self.config[\"TRAP_BAD_REQUEST_ERRORS\"]\n\n        # if unset, trap key errors in debug mode\n        if (\n            trap_bad_request is None\n            and self.debug\n            and isinstance(e, BadRequestKeyError)\n        ):\n            return True\n\n        if trap_bad_request:\n            return isinstance(e, BadRequest)\n\n        return False\n\n    def handle_user_exception(\n        self, e: Exception\n    ) -> t.Union[HTTPException, ResponseReturnValue]:\n        \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        if isinstance(e, BadRequestKeyError) and (\n            self.debug or self.config[\"TRAP_BAD_REQUEST_ERRORS\"]\n        ):\n            e.show_exception = True\n\n        if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n            return self.handle_http_exception(e)\n\n        handler = self._find_error_handler(e)\n\n        if handler is None:\n            raise\n\n        return self.ensure_sync(handler)(e)\n\n    def handle_exception(self, e: Exception) -> Response:\n        \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :attr:`propagate_exceptions` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\n        exc_info = sys.exc_info()\n        got_request_exception.send(self, exception=e)\n\n        if self.propagate_exceptions:\n            # Re-raise if called with an active exception, otherwise\n            # raise the passed in exception.\n            if exc_info[1] is e:\n                raise\n\n            raise e\n\n        self.log_exception(exc_info)\n        server_error: t.Union[InternalServerError, ResponseReturnValue]\n        server_error = InternalServerError(original_exception=e)\n        handler = self._find_error_handler(server_error)\n\n        if handler is not None:\n            server_error = self.ensure_sync(handler)(server_error)\n\n        return self.finalize_request(server_error, from_error_handler=True)\n\n    def log_exception(\n        self,\n        exc_info: t.Union[\n            t.Tuple[type, BaseException, TracebackType], t.Tuple[None, None, None]\n        ],\n    ) -> None:\n        \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        self.logger.error(\n            f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n        )\n\n    def raise_routing_exception(self, request: Request) -> \"te.NoReturn\":\n        \"\"\"Exceptions that are recording during routing are reraised with\n        this method.  During debug we are not reraising redirect requests\n        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n        a different error instead to help debug situations.\n\n        :internal:\n        \"\"\"\n        if (\n            not self.debug\n            or not isinstance(request.routing_exception, RequestRedirect)\n            or request.method in (\"GET\", \"HEAD\", \"OPTIONS\")\n        ):\n            raise request.routing_exception  # type: ignore\n\n        from .debughelpers import FormDataRoutingRedirect\n\n        raise FormDataRoutingRedirect(request)\n\n    def dispatch_request(self) -> ResponseReturnValue:\n        \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\n        req = _request_ctx_stack.top.request\n        if req.routing_exception is not None:\n            self.raise_routing_exception(req)\n        rule = req.url_rule\n        # if we provide automatic options for this URL and the\n        # request came with the OPTIONS method, reply automatically\n        if (\n            getattr(rule, \"provide_automatic_options\", False)\n            and req.method == \"OPTIONS\"\n        ):\n            return self.make_default_options_response()\n        # otherwise dispatch to the handler for that endpoint\n        return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n\n    def full_dispatch_request(self) -> Response:\n        \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        self.try_trigger_before_first_request_functions()\n        try:\n            request_started.send(self)\n            rv = self.preprocess_request()\n            if rv is None:\n                rv = self.dispatch_request()\n        except Exception as e:\n            rv = self.handle_user_exception(e)\n        return self.finalize_request(rv)\n\n    def finalize_request(\n        self,\n        rv: t.Union[ResponseReturnValue, HTTPException],\n        from_error_handler: bool = False,\n    ) -> Response:\n        \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\n        response = self.make_response(rv)\n        try:\n            response = self.process_response(response)\n            request_finished.send(self, response=response)\n        except Exception:\n            if not from_error_handler:\n                raise\n            self.logger.exception(\n                \"Request finalizing failed with an error while handling an error\"\n            )\n        return response\n\n    def try_trigger_before_first_request_functions(self) -> None:\n        \"\"\"Called before each request and will ensure that it triggers\n        the :attr:`before_first_request_funcs` and only exactly once per\n        application instance (which means process usually).\n\n        :internal:\n        \"\"\"\n        if self._got_first_request:\n            return\n        with self._before_request_lock:\n            if self._got_first_request:\n                return\n            for func in self.before_first_request_funcs:\n                self.ensure_sync(func)()\n            self._got_first_request = True\n\n    def make_default_options_response(self) -> Response:\n        \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        adapter = _request_ctx_stack.top.url_adapter\n        methods = adapter.allowed_methods()\n        rv = self.response_class()\n        rv.allow.update(methods)\n        return rv\n\n    def should_ignore_error(self, error: t.Optional[BaseException]) -> bool:\n        \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        return False\n\n    def ensure_sync(self, func: t.Callable) -> t.Callable:\n        \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        if iscoroutinefunction(func):\n            return self.async_to_sync(func)\n\n        return func\n\n    def async_to_sync(\n        self, func: t.Callable[..., t.Coroutine]\n    ) -> t.Callable[..., t.Any]:\n        \"\"\"Return a sync function that will run the coroutine function.\n\n        .. code-block:: python\n\n            result = app.async_to_sync(func)(*args, **kwargs)\n\n        Override this method to change how the app converts async code\n        to be synchronously callable.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        try:\n            from asgiref.sync import async_to_sync as asgiref_async_to_sync\n        except ImportError:\n            raise RuntimeError(\n                \"Install Flask with the 'async' extra in order to use async views.\"\n            ) from None\n\n        # Check that Werkzeug isn't using its fallback ContextVar class.\n        if ContextVar.__module__ == \"werkzeug.local\":\n            raise RuntimeError(\n                \"Async cannot be used with this combination of Python \"\n                \"and Greenlet versions.\"\n            )\n\n        return asgiref_async_to_sync(func)\n\n    def make_response(self, rv: ResponseReturnValue) -> Response:\n        \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str``\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes``\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\n\n        status = headers = None\n\n        # unpack tuple returns\n        if isinstance(rv, tuple):\n            len_rv = len(rv)\n\n            # a 3-tuple is unpacked directly\n            if len_rv == 3:\n                rv, status, headers = rv\n            # decide if a 2-tuple has status or headers\n            elif len_rv == 2:\n                if isinstance(rv[1], (Headers, dict, tuple, list)):\n                    rv, headers = rv\n                else:\n                    rv, status = rv\n            # other sized tuples are not allowed\n            else:\n                raise TypeError(\n                    \"The view function did not return a valid response tuple.\"\n                    \" The tuple must have the form (body, status, headers),\"\n                    \" (body, status), or (body, headers).\"\n                )\n\n        # the body must not be None\n        if rv is None:\n            raise TypeError(\n                f\"The view function for {request.endpoint!r} did not\"\n                \" return a valid response. The function either returned\"\n                \" None or ended without a return statement.\"\n            )\n\n        # make sure the body is an instance of the response class\n        if not isinstance(rv, self.response_class):\n            if isinstance(rv, (str, bytes, bytearray)):\n                # let the response class set the status and headers instead of\n                # waiting to do it manually, so that the class can handle any\n                # special logic\n                rv = self.response_class(rv, status=status, headers=headers)\n                status = headers = None\n            elif isinstance(rv, dict):\n                rv = jsonify(rv)\n            elif isinstance(rv, BaseResponse) or callable(rv):\n                # evaluate a WSGI callable, or coerce a different response\n                # class to the correct type\n                try:\n                    rv = self.response_class.force_type(rv, request.environ)  # type: ignore  # noqa: B950\n                except TypeError as e:\n                    raise TypeError(\n                        f\"{e}\\nThe view function did not return a valid\"\n                        \" response. The return type must be a string,\"\n                        \" dict, tuple, Response instance, or WSGI\"\n                        f\" callable, but it was a {type(rv).__name__}.\"\n                    ).with_traceback(sys.exc_info()[2]) from None\n            else:\n                raise TypeError(\n                    \"The view function did not return a valid\"\n                    \" response. The return type must be a string,\"\n                    \" dict, tuple, Response instance, or WSGI\"\n                    f\" callable, but it was a {type(rv).__name__}.\"\n                )\n\n        rv = t.cast(Response, rv)\n        # prefer the status if it was provided\n        if status is not None:\n            if isinstance(status, (str, bytes, bytearray)):\n                rv.status = status  # type: ignore\n            else:\n                rv.status_code = status\n\n        # extend existing headers with provided headers\n        if headers:\n            rv.headers.update(headers)\n\n        return rv\n\n    def create_url_adapter(\n        self, request: t.Optional[Request]\n    ) -> t.Optional[MapAdapter]:\n        \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionadded:: 0.6\n\n        .. versionchanged:: 0.9\n           This can now also be called without a request object when the\n           URL adapter is created for the application context.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n        \"\"\"\n        if request is not None:\n            # If subdomain matching is disabled (the default), use the\n            # default subdomain in all cases. This should be the default\n            # in Werkzeug but it currently does not have that feature.\n            if not self.subdomain_matching:\n                subdomain = self.url_map.default_subdomain or None\n            else:\n                subdomain = None\n\n            return self.url_map.bind_to_environ(\n                request.environ,\n                server_name=self.config[\"SERVER_NAME\"],\n                subdomain=subdomain,\n            )\n        # We need at the very least the server name to be set for this\n        # to work.\n        if self.config[\"SERVER_NAME\"] is not None:\n            return self.url_map.bind(\n                self.config[\"SERVER_NAME\"],\n                script_name=self.config[\"APPLICATION_ROOT\"],\n                url_scheme=self.config[\"PREFERRED_URL_SCHEME\"],\n            )\n\n        return None\n\n    def inject_url_defaults(self, endpoint: str, values: dict) -> None:\n        \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        names: t.Iterable[t.Optional[str]] = (None,)\n\n        # url_for may be called outside a request context, parse the\n        # passed endpoint instead of using request.blueprints.\n        if \".\" in endpoint:\n            names = chain(\n                names, reversed(_split_blueprint_path(endpoint.rpartition(\".\")[0]))\n            )\n\n        for name in names:\n            if name in self.url_default_functions:\n                for func in self.url_default_functions[name]:\n                    func(endpoint, values)\n\n    def handle_url_build_error(\n        self, error: Exception, endpoint: str, values: dict\n    ) -> str:\n        \"\"\"Handle :class:`~werkzeug.routing.BuildError` on\n        :meth:`url_for`.\n        \"\"\"\n        for handler in self.url_build_error_handlers:\n            try:\n                rv = handler(error, endpoint, values)\n            except BuildError as e:\n                # make error available outside except block\n                error = e\n            else:\n                if rv is not None:\n                    return rv\n\n        # Re-raise if called with an active exception, otherwise raise\n        # the passed in exception.\n        if error is sys.exc_info()[1]:\n            raise\n\n        raise error\n\n    def preprocess_request(self) -> t.Optional[ResponseReturnValue]:\n        \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\n        names = (None, *reversed(request.blueprints))\n\n        for name in names:\n            if name in self.url_value_preprocessors:\n                for url_func in self.url_value_preprocessors[name]:\n                    url_func(request.endpoint, request.view_args)\n\n        for name in names:\n            if name in self.before_request_funcs:\n                for before_func in self.before_request_funcs[name]:\n                    rv = self.ensure_sync(before_func)()\n\n                    if rv is not None:\n                        return rv\n\n        return None\n\n    def process_response(self, response: Response) -> Response:\n        \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\n        ctx = _request_ctx_stack.top\n\n        for func in ctx._after_request_functions:\n            response = self.ensure_sync(func)(response)\n\n        for name in chain(request.blueprints, (None,)):\n            if name in self.after_request_funcs:\n                for func in reversed(self.after_request_funcs[name]):\n                    response = self.ensure_sync(func)(response)\n\n        if not self.session_interface.is_null_session(ctx.session):\n            self.session_interface.save_session(self, ctx.session, response)\n\n        return response\n\n    def do_teardown_request(\n        self, exc: t.Optional[BaseException] = _sentinel  # type: ignore\n    ) -> None:\n        \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\n        if exc is _sentinel:\n            exc = sys.exc_info()[1]\n\n        for name in chain(request.blueprints, (None,)):\n            if name in self.teardown_request_funcs:\n                for func in reversed(self.teardown_request_funcs[name]):\n                    self.ensure_sync(func)(exc)\n\n        request_tearing_down.send(self, exc=exc)\n\n    def do_teardown_appcontext(\n        self, exc: t.Optional[BaseException] = _sentinel  # type: ignore\n    ) -> None:\n        \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        if exc is _sentinel:\n            exc = sys.exc_info()[1]\n\n        for func in reversed(self.teardown_appcontext_funcs):\n            self.ensure_sync(func)(exc)\n\n        appcontext_tearing_down.send(self, exc=exc)\n\n    def app_context(self) -> AppContext:\n        \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        return AppContext(self)\n\n    def request_context(self, environ: dict) -> RequestContext:\n        \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\n        return RequestContext(self, environ)\n\n    def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> RequestContext:\n        \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\n        from .testing import EnvironBuilder\n\n        builder = EnvironBuilder(self, *args, **kwargs)\n\n        try:\n            return self.request_context(builder.get_environ())\n        finally:\n            builder.close()\n\n    def wsgi_app(self, environ: dict, start_response: t.Callable) -> t.Any:\n        \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\n        ctx = self.request_context(environ)\n        error: t.Optional[BaseException] = None\n        try:\n            try:\n                ctx.push()\n                response = self.full_dispatch_request()\n            except Exception as e:\n                error = e\n                response = self.handle_exception(e)\n            except:  # noqa: B001\n                error = sys.exc_info()[1]\n                raise\n            return response(environ, start_response)\n        finally:\n            if self.should_ignore_error(error):\n                error = None\n            ctx.auto_pop(error)\n\n    def __call__(self, environ: dict, start_response: t.Callable) -> t.Any:\n        \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app`, which can be\n        wrapped to apply middleware.\n        \"\"\"\n        return self.wsgi_app(environ, start_response)\n", 2091], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/utils.py": ["import codecs\nimport io\nimport mimetypes\nimport os\nimport pkgutil\nimport re\nimport sys\nimport typing as t\nimport unicodedata\nimport warnings\nfrom datetime import datetime\nfrom html.entities import name2codepoint\nfrom time import time\nfrom zlib import adler32\n\nfrom ._internal import _DictAccessorProperty\nfrom ._internal import _missing\nfrom ._internal import _parse_signature\nfrom ._internal import _TAccessorValue\nfrom .datastructures import Headers\nfrom .exceptions import NotFound\nfrom .exceptions import RequestedRangeNotSatisfiable\nfrom .security import safe_join\nfrom .urls import url_quote\nfrom .wsgi import wrap_file\n\nif t.TYPE_CHECKING:\n    from _typeshed.wsgi import WSGIEnvironment\n    from .wrappers.request import Request\n    from .wrappers.response import Response\n\n_T = t.TypeVar(\"_T\")\n\n_entity_re = re.compile(r\"&([^;]+);\")\n_filename_ascii_strip_re = re.compile(r\"[^A-Za-z0-9_.-]\")\n_windows_device_files = (\n    \"CON\",\n    \"AUX\",\n    \"COM1\",\n    \"COM2\",\n    \"COM3\",\n    \"COM4\",\n    \"LPT1\",\n    \"LPT2\",\n    \"LPT3\",\n    \"PRN\",\n    \"NUL\",\n)\n\n\nclass cached_property(property, t.Generic[_T]):\n    \"\"\"A :func:`property` that is only evaluated once. Subsequent access\n    returns the cached value. Setting the property sets the cached\n    value. Deleting the property clears the cached value, accessing it\n    again will evaluate it again.\n\n    .. code-block:: python\n\n        class Example:\n            @cached_property\n            def value(self):\n                # calculate something important here\n                return 42\n\n        e = Example()\n        e.value  # evaluates\n        e.value  # uses cache\n        e.value = 16  # sets cache\n        del e.value  # clears cache\n\n    The class must have a ``__dict__`` for this to work.\n\n    .. versionchanged:: 2.0\n        ``del obj.name`` clears the cached value.\n    \"\"\"\n\n    def __init__(\n        self,\n        fget: t.Callable[[t.Any], _T],\n        name: t.Optional[str] = None,\n        doc: t.Optional[str] = None,\n    ) -> None:\n        super().__init__(fget, doc=doc)\n        self.__name__ = name or fget.__name__\n        self.__module__ = fget.__module__\n\n    def __set__(self, obj: object, value: _T) -> None:\n        obj.__dict__[self.__name__] = value\n\n    def __get__(self, obj: object, type: type = None) -> _T:  # type: ignore\n        if obj is None:\n            return self  # type: ignore\n\n        value: _T = obj.__dict__.get(self.__name__, _missing)\n\n        if value is _missing:\n            value = self.fget(obj)  # type: ignore\n            obj.__dict__[self.__name__] = value\n\n        return value\n\n    def __delete__(self, obj: object) -> None:\n        del obj.__dict__[self.__name__]\n\n\ndef invalidate_cached_property(obj: object, name: str) -> None:\n    \"\"\"Invalidates the cache for a :class:`cached_property`:\n\n    >>> class Test(object):\n    ...     @cached_property\n    ...     def magic_number(self):\n    ...         print(\"recalculating...\")\n    ...         return 42\n    ...\n    >>> var = Test()\n    >>> var.magic_number\n    recalculating...\n    42\n    >>> var.magic_number\n    42\n    >>> invalidate_cached_property(var, \"magic_number\")\n    >>> var.magic_number\n    recalculating...\n    42\n\n    You must pass the name of the cached property as the second argument.\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1. Use ``del obj.name`` instead.\n    \"\"\"\n    warnings.warn(\n        \"'invalidate_cached_property' is deprecated and will be removed\"\n        \" in Werkzeug 2.1. Use 'del obj.name' instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    delattr(obj, name)\n\n\nclass environ_property(_DictAccessorProperty[_TAccessorValue]):\n    \"\"\"Maps request attributes to environment variables. This works not only\n    for the Werkzeug request object, but also any other class with an\n    environ attribute:\n\n    >>> class Test(object):\n    ...     environ = {'key': 'value'}\n    ...     test = environ_property('key')\n    >>> var = Test()\n    >>> var.test\n    'value'\n\n    If you pass it a second value it's used as default if the key does not\n    exist, the third one can be a converter that takes a value and converts\n    it.  If it raises :exc:`ValueError` or :exc:`TypeError` the default value\n    is used. If no default value is provided `None` is used.\n\n    Per default the property is read only.  You have to explicitly enable it\n    by passing ``read_only=False`` to the constructor.\n    \"\"\"\n\n    read_only = True\n\n    def lookup(self, obj: \"Request\") -> \"WSGIEnvironment\":\n        return obj.environ\n\n\nclass header_property(_DictAccessorProperty[_TAccessorValue]):\n    \"\"\"Like `environ_property` but for headers.\"\"\"\n\n    def lookup(self, obj: t.Union[\"Request\", \"Response\"]) -> Headers:\n        return obj.headers\n\n\nclass HTMLBuilder:\n    \"\"\"Helper object for HTML generation.\n\n    Per default there are two instances of that class.  The `html` one, and\n    the `xhtml` one for those two dialects.  The class uses keyword parameters\n    and positional parameters to generate small snippets of HTML.\n\n    Keyword parameters are converted to XML/SGML attributes, positional\n    arguments are used as children.  Because Python accepts positional\n    arguments before keyword arguments it's a good idea to use a list with the\n    star-syntax for some children:\n\n    >>> html.p(class_='foo', *[html.a('foo', href='foo.html'), ' ',\n    ...                        html.a('bar', href='bar.html')])\n    '<p class=\"foo\"><a href=\"foo.html\">foo</a> <a href=\"bar.html\">bar</a></p>'\n\n    This class works around some browser limitations and can not be used for\n    arbitrary SGML/XML generation.  For that purpose lxml and similar\n    libraries exist.\n\n    Calling the builder escapes the string passed:\n\n    >>> html.p(html(\"<foo>\"))\n    '<p>&lt;foo&gt;</p>'\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1.\n    \"\"\"\n\n    _entity_re = re.compile(r\"&([^;]+);\")\n    _entities = name2codepoint.copy()\n    _entities[\"apos\"] = 39\n    _empty_elements = {\n        \"area\",\n        \"base\",\n        \"basefont\",\n        \"br\",\n        \"col\",\n        \"command\",\n        \"embed\",\n        \"frame\",\n        \"hr\",\n        \"img\",\n        \"input\",\n        \"keygen\",\n        \"isindex\",\n        \"link\",\n        \"meta\",\n        \"param\",\n        \"source\",\n        \"wbr\",\n    }\n    _boolean_attributes = {\n        \"selected\",\n        \"checked\",\n        \"compact\",\n        \"declare\",\n        \"defer\",\n        \"disabled\",\n        \"ismap\",\n        \"multiple\",\n        \"nohref\",\n        \"noresize\",\n        \"noshade\",\n        \"nowrap\",\n    }\n    _plaintext_elements = {\"textarea\"}\n    _c_like_cdata = {\"script\", \"style\"}\n\n    def __init__(self, dialect):  # type: ignore\n        self._dialect = dialect\n\n    def __call__(self, s):  # type: ignore\n        import html\n\n        warnings.warn(\n            \"'utils.HTMLBuilder' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return html.escape(s)\n\n    def __getattr__(self, tag):  # type: ignore\n        import html\n\n        warnings.warn(\n            \"'utils.HTMLBuilder' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        if tag[:2] == \"__\":\n            raise AttributeError(tag)\n\n        def proxy(*children, **arguments):  # type: ignore\n            buffer = f\"<{tag}\"\n            for key, value in arguments.items():\n                if value is None:\n                    continue\n                if key[-1] == \"_\":\n                    key = key[:-1]\n                if key in self._boolean_attributes:\n                    if not value:\n                        continue\n                    if self._dialect == \"xhtml\":\n                        value = f'=\"{key}\"'\n                    else:\n                        value = \"\"\n                else:\n                    value = f'=\"{html.escape(value)}\"'\n                buffer += f\" {key}{value}\"\n            if not children and tag in self._empty_elements:\n                if self._dialect == \"xhtml\":\n                    buffer += \" />\"\n                else:\n                    buffer += \">\"\n                return buffer\n            buffer += \">\"\n\n            children_as_string = \"\".join([str(x) for x in children if x is not None])\n\n            if children_as_string:\n                if tag in self._plaintext_elements:\n                    children_as_string = html.escape(children_as_string)\n                elif tag in self._c_like_cdata and self._dialect == \"xhtml\":\n                    children_as_string = f\"/*<![CDATA[*/{children_as_string}/*]]>*/\"\n            buffer += children_as_string + f\"</{tag}>\"\n            return buffer\n\n        return proxy\n\n    def __repr__(self) -> str:\n        return f\"<{type(self).__name__} for {self._dialect!r}>\"\n\n\nhtml = HTMLBuilder(\"html\")\nxhtml = HTMLBuilder(\"xhtml\")\n\n# https://cgit.freedesktop.org/xdg/shared-mime-info/tree/freedesktop.org.xml.in\n# https://www.iana.org/assignments/media-types/media-types.xhtml\n# Types listed in the XDG mime info that have a charset in the IANA registration.\n_charset_mimetypes = {\n    \"application/ecmascript\",\n    \"application/javascript\",\n    \"application/sql\",\n    \"application/xml\",\n    \"application/xml-dtd\",\n    \"application/xml-external-parsed-entity\",\n}\n\n\ndef get_content_type(mimetype: str, charset: str) -> str:\n    \"\"\"Returns the full content type string with charset for a mimetype.\n\n    If the mimetype represents text, the charset parameter will be\n    appended, otherwise the mimetype is returned unchanged.\n\n    :param mimetype: The mimetype to be used as content type.\n    :param charset: The charset to be appended for text mimetypes.\n    :return: The content type.\n\n    .. versionchanged:: 0.15\n        Any type that ends with ``+xml`` gets a charset, not just those\n        that start with ``application/``. Known text types such as\n        ``application/javascript`` are also given charsets.\n    \"\"\"\n    if (\n        mimetype.startswith(\"text/\")\n        or mimetype in _charset_mimetypes\n        or mimetype.endswith(\"+xml\")\n    ):\n        mimetype += f\"; charset={charset}\"\n\n    return mimetype\n\n\ndef detect_utf_encoding(data: bytes) -> str:\n    \"\"\"Detect which UTF encoding was used to encode the given bytes.\n\n    The latest JSON standard (:rfc:`8259`) suggests that only UTF-8 is\n    accepted. Older documents allowed 8, 16, or 32. 16 and 32 can be big\n    or little endian. Some editors or libraries may prepend a BOM.\n\n    :internal:\n\n    :param data: Bytes in unknown UTF encoding.\n    :return: UTF encoding name\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1. This is built in to\n        :func:`json.loads`.\n\n    .. versionadded:: 0.15\n    \"\"\"\n    warnings.warn(\n        \"'detect_utf_encoding' is deprecated and will be removed in\"\n        \" Werkzeug 2.1. This is built in to 'json.loads'.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    head = data[:4]\n\n    if head[:3] == codecs.BOM_UTF8:\n        return \"utf-8-sig\"\n\n    if b\"\\x00\" not in head:\n        return \"utf-8\"\n\n    if head in (codecs.BOM_UTF32_BE, codecs.BOM_UTF32_LE):\n        return \"utf-32\"\n\n    if head[:2] in (codecs.BOM_UTF16_BE, codecs.BOM_UTF16_LE):\n        return \"utf-16\"\n\n    if len(head) == 4:\n        if head[:3] == b\"\\x00\\x00\\x00\":\n            return \"utf-32-be\"\n\n        if head[::2] == b\"\\x00\\x00\":\n            return \"utf-16-be\"\n\n        if head[1:] == b\"\\x00\\x00\\x00\":\n            return \"utf-32-le\"\n\n        if head[1::2] == b\"\\x00\\x00\":\n            return \"utf-16-le\"\n\n    if len(head) == 2:\n        return \"utf-16-be\" if head.startswith(b\"\\x00\") else \"utf-16-le\"\n\n    return \"utf-8\"\n\n\ndef format_string(string: str, context: t.Mapping[str, t.Any]) -> str:\n    \"\"\"String-template format a string:\n\n    >>> format_string('$foo and ${foo}s', dict(foo=42))\n    '42 and 42s'\n\n    This does not do any attribute lookup.\n\n    :param string: the format string.\n    :param context: a dict with the variables to insert.\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1. Use :class:`string.Template`\n        instead.\n    \"\"\"\n    from string import Template\n\n    warnings.warn(\n        \"'utils.format_string' is deprecated and will be removed in\"\n        \" Werkzeug 2.1. Use 'string.Template' instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return Template(string).substitute(context)\n\n\ndef secure_filename(filename: str) -> str:\n    r\"\"\"Pass it a filename and it will return a secure version of it.  This\n    filename can then safely be stored on a regular file system and passed\n    to :func:`os.path.join`.  The filename returned is an ASCII only string\n    for maximum portability.\n\n    On windows systems the function also makes sure that the file is not\n    named after one of the special device files.\n\n    >>> secure_filename(\"My cool movie.mov\")\n    'My_cool_movie.mov'\n    >>> secure_filename(\"../../../etc/passwd\")\n    'etc_passwd'\n    >>> secure_filename('i contain cool \\xfcml\\xe4uts.txt')\n    'i_contain_cool_umlauts.txt'\n\n    The function might return an empty filename.  It's your responsibility\n    to ensure that the filename is unique and that you abort or\n    generate a random filename if the function returned an empty one.\n\n    .. versionadded:: 0.5\n\n    :param filename: the filename to secure\n    \"\"\"\n    filename = unicodedata.normalize(\"NFKD\", filename)\n    filename = filename.encode(\"ascii\", \"ignore\").decode(\"ascii\")\n\n    for sep in os.path.sep, os.path.altsep:\n        if sep:\n            filename = filename.replace(sep, \" \")\n    filename = str(_filename_ascii_strip_re.sub(\"\", \"_\".join(filename.split()))).strip(\n        \"._\"\n    )\n\n    # on nt a couple of special files are present in each folder.  We\n    # have to ensure that the target file is not such a filename.  In\n    # this case we prepend an underline\n    if (\n        os.name == \"nt\"\n        and filename\n        and filename.split(\".\")[0].upper() in _windows_device_files\n    ):\n        filename = f\"_{filename}\"\n\n    return filename\n\n\ndef escape(s: t.Any) -> str:\n    \"\"\"Replace ``&``, ``<``, ``>``, ``\"``, and ``'`` with HTML-safe\n    sequences.\n\n    ``None`` is escaped to an empty string.\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1. Use MarkupSafe instead.\n    \"\"\"\n    import html\n\n    warnings.warn(\n        \"'utils.escape' is deprecated and will be removed in Werkzeug\"\n        \" 2.1. Use MarkupSafe instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n\n    if s is None:\n        return \"\"\n\n    if hasattr(s, \"__html__\"):\n        return s.__html__()  # type: ignore\n\n    if not isinstance(s, str):\n        s = str(s)\n\n    return html.escape(s, quote=True)  # type: ignore\n\n\ndef unescape(s: str) -> str:\n    \"\"\"The reverse of :func:`escape`. This unescapes all the HTML\n    entities, not only those inserted by ``escape``.\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1. Use MarkupSafe instead.\n    \"\"\"\n    import html\n\n    warnings.warn(\n        \"'utils.unescape' is deprecated and will be removed in Werkzueg\"\n        \" 2.1. Use MarkupSafe instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return html.unescape(s)\n\n\ndef redirect(\n    location: str, code: int = 302, Response: t.Optional[t.Type[\"Response\"]] = None\n) -> \"Response\":\n    \"\"\"Returns a response object (a WSGI application) that, if called,\n    redirects the client to the target location. Supported codes are\n    301, 302, 303, 305, 307, and 308. 300 is not supported because\n    it's not a real redirect and 304 because it's the answer for a\n    request with a request with defined If-Modified-Since headers.\n\n    .. versionadded:: 0.6\n       The location can now be a unicode string that is encoded using\n       the :func:`iri_to_uri` function.\n\n    .. versionadded:: 0.10\n        The class used for the Response object can now be passed in.\n\n    :param location: the location the response should redirect to.\n    :param code: the redirect status code. defaults to 302.\n    :param class Response: a Response class to use when instantiating a\n        response. The default is :class:`werkzeug.wrappers.Response` if\n        unspecified.\n    \"\"\"\n    import html\n\n    if Response is None:\n        from .wrappers import Response  # type: ignore\n\n    display_location = html.escape(location)\n    if isinstance(location, str):\n        # Safe conversion is necessary here as we might redirect\n        # to a broken URI scheme (for instance itms-services).\n        from .urls import iri_to_uri\n\n        location = iri_to_uri(location, safe_conversion=True)\n    response = Response(  # type: ignore\n        '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\\n'\n        \"<title>Redirecting...</title>\\n\"\n        \"<h1>Redirecting...</h1>\\n\"\n        \"<p>You should be redirected automatically to target URL: \"\n        f'<a href=\"{html.escape(location)}\">{display_location}</a>. If'\n        \" not click the link.\",\n        code,\n        mimetype=\"text/html\",\n    )\n    response.headers[\"Location\"] = location\n    return response\n\n\ndef append_slash_redirect(environ: \"WSGIEnvironment\", code: int = 301) -> \"Response\":\n    \"\"\"Redirects to the same URL but with a slash appended.  The behavior\n    of this function is undefined if the path ends with a slash already.\n\n    :param environ: the WSGI environment for the request that triggers\n                    the redirect.\n    :param code: the status code for the redirect.\n    \"\"\"\n    new_path = environ[\"PATH_INFO\"].strip(\"/\") + \"/\"\n    query_string = environ.get(\"QUERY_STRING\")\n    if query_string:\n        new_path += f\"?{query_string}\"\n    return redirect(new_path, code)\n\n\ndef send_file(\n    path_or_file: t.Union[os.PathLike, str, t.IO[bytes]],\n    environ: \"WSGIEnvironment\",\n    mimetype: t.Optional[str] = None,\n    as_attachment: bool = False,\n    download_name: t.Optional[str] = None,\n    conditional: bool = True,\n    etag: t.Union[bool, str] = True,\n    last_modified: t.Optional[t.Union[datetime, int, float]] = None,\n    max_age: t.Optional[\n        t.Union[int, t.Callable[[t.Optional[str]], t.Optional[int]]]\n    ] = None,\n    use_x_sendfile: bool = False,\n    response_class: t.Optional[t.Type[\"Response\"]] = None,\n    _root_path: t.Optional[t.Union[os.PathLike, str]] = None,\n) -> \"Response\":\n    \"\"\"Send the contents of a file to the client.\n\n    The first argument can be a file path or a file-like object. Paths\n    are preferred in most cases because Werkzeug can manage the file and\n    get extra information from the path. Passing a file-like object\n    requires that the file is opened in binary mode, and is mostly\n    useful when building a file in memory with :class:`io.BytesIO`.\n\n    Never pass file paths provided by a user. The path is assumed to be\n    trusted, so a user could craft a path to access a file you didn't\n    intend.\n\n    If the WSGI server sets a ``file_wrapper`` in ``environ``, it is\n    used, otherwise Werkzeug's built-in wrapper is used. Alternatively,\n    if the HTTP server supports ``X-Sendfile``, ``use_x_sendfile=True``\n    will tell the server to send the given path, which is much more\n    efficient than reading it in Python.\n\n    :param path_or_file: The path to the file to send, relative to the\n        current working directory if a relative path is given.\n        Alternatively, a file-like object opened in binary mode. Make\n        sure the file pointer is seeked to the start of the data.\n    :param environ: The WSGI environ for the current request.\n    :param mimetype: The MIME type to send for the file. If not\n        provided, it will try to detect it from the file name.\n    :param as_attachment: Indicate to a browser that it should offer to\n        save the file instead of displaying it.\n    :param download_name: The default name browsers will use when saving\n        the file. Defaults to the passed file name.\n    :param conditional: Enable conditional and range responses based on\n        request headers. Requires passing a file path and ``environ``.\n    :param etag: Calculate an ETag for the file, which requires passing\n        a file path. Can also be a string to use instead.\n    :param last_modified: The last modified time to send for the file,\n        in seconds. If not provided, it will try to detect it from the\n        file path.\n    :param max_age: How long the client should cache the file, in\n        seconds. If set, ``Cache-Control`` will be ``public``, otherwise\n        it will be ``no-cache`` to prefer conditional caching.\n    :param use_x_sendfile: Set the ``X-Sendfile`` header to let the\n        server to efficiently send the file. Requires support from the\n        HTTP server. Requires passing a file path.\n    :param response_class: Build the response using this class. Defaults\n        to :class:`~werkzeug.wrappers.Response`.\n    :param _root_path: Do not use. For internal use only. Use\n        :func:`send_from_directory` to safely send files under a path.\n\n    .. versionchanged:: 2.0.2\n        ``send_file`` only sets a detected ``Content-Encoding`` if\n        ``as_attachment`` is disabled.\n\n    .. versionadded:: 2.0\n        Adapted from Flask's implementation.\n\n    .. versionchanged:: 2.0\n        ``download_name`` replaces Flask's ``attachment_filename``\n         parameter. If ``as_attachment=False``, it is passed with\n         ``Content-Disposition: inline`` instead.\n\n    .. versionchanged:: 2.0\n        ``max_age`` replaces Flask's ``cache_timeout`` parameter.\n        ``conditional`` is enabled and ``max_age`` is not set by\n        default.\n\n    .. versionchanged:: 2.0\n        ``etag`` replaces Flask's ``add_etags`` parameter. It can be a\n        string to use instead of generating one.\n\n    .. versionchanged:: 2.0\n        If an encoding is returned when guessing ``mimetype`` from\n        ``download_name``, set the ``Content-Encoding`` header.\n    \"\"\"\n    if response_class is None:\n        from .wrappers import Response\n\n        response_class = Response\n\n    path: t.Optional[str] = None\n    file: t.Optional[t.IO[bytes]] = None\n    size: t.Optional[int] = None\n    mtime: t.Optional[float] = None\n    headers = Headers()\n\n    if isinstance(path_or_file, (os.PathLike, str)) or hasattr(\n        path_or_file, \"__fspath__\"\n    ):\n        path_or_file = t.cast(t.Union[os.PathLike, str], path_or_file)\n\n        # Flask will pass app.root_path, allowing its send_file wrapper\n        # to not have to deal with paths.\n        if _root_path is not None:\n            path = os.path.join(_root_path, path_or_file)\n        else:\n            path = os.path.abspath(path_or_file)\n\n        stat = os.stat(path)\n        size = stat.st_size\n        mtime = stat.st_mtime\n    else:\n        file = path_or_file\n\n    if download_name is None and path is not None:\n        download_name = os.path.basename(path)\n\n    if mimetype is None:\n        if download_name is None:\n            raise TypeError(\n                \"Unable to detect the MIME type because a file name is\"\n                \" not available. Either set 'download_name', pass a\"\n                \" path instead of a file, or set 'mimetype'.\"\n            )\n\n        mimetype, encoding = mimetypes.guess_type(download_name)\n\n        if mimetype is None:\n            mimetype = \"application/octet-stream\"\n\n        # Don't send encoding for attachments, it causes browsers to\n        # save decompress tar.gz files.\n        if encoding is not None and not as_attachment:\n            headers.set(\"Content-Encoding\", encoding)\n\n    if download_name is not None:\n        try:\n            download_name.encode(\"ascii\")\n        except UnicodeEncodeError:\n            simple = unicodedata.normalize(\"NFKD\", download_name)\n            simple = simple.encode(\"ascii\", \"ignore\").decode(\"ascii\")\n            quoted = url_quote(download_name, safe=\"\")\n            names = {\"filename\": simple, \"filename*\": f\"UTF-8''{quoted}\"}\n        else:\n            names = {\"filename\": download_name}\n\n        value = \"attachment\" if as_attachment else \"inline\"\n        headers.set(\"Content-Disposition\", value, **names)\n    elif as_attachment:\n        raise TypeError(\n            \"No name provided for attachment. Either set\"\n            \" 'download_name' or pass a path instead of a file.\"\n        )\n\n    if use_x_sendfile and path is not None:\n        headers[\"X-Sendfile\"] = path\n        data = None\n    else:\n        if file is None:\n            file = open(path, \"rb\")  # type: ignore\n        elif isinstance(file, io.BytesIO):\n            size = file.getbuffer().nbytes\n        elif isinstance(file, io.TextIOBase):\n            raise ValueError(\"Files must be opened in binary mode or use BytesIO.\")\n\n        data = wrap_file(environ, file)\n\n    rv = response_class(\n        data, mimetype=mimetype, headers=headers, direct_passthrough=True\n    )\n\n    if size is not None:\n        rv.content_length = size\n\n    if last_modified is not None:\n        rv.last_modified = last_modified  # type: ignore\n    elif mtime is not None:\n        rv.last_modified = mtime  # type: ignore\n\n    rv.cache_control.no_cache = True\n\n    # Flask will pass app.get_send_file_max_age, allowing its send_file\n    # wrapper to not have to deal with paths.\n    if callable(max_age):\n        max_age = max_age(path)\n\n    if max_age is not None:\n        if max_age > 0:\n            rv.cache_control.no_cache = None\n            rv.cache_control.public = True\n\n        rv.cache_control.max_age = max_age\n        rv.expires = int(time() + max_age)  # type: ignore\n\n    if isinstance(etag, str):\n        rv.set_etag(etag)\n    elif etag and path is not None:\n        check = adler32(path.encode(\"utf-8\")) & 0xFFFFFFFF\n        rv.set_etag(f\"{mtime}-{size}-{check}\")\n\n    if conditional:\n        try:\n            rv = rv.make_conditional(environ, accept_ranges=True, complete_length=size)\n        except RequestedRangeNotSatisfiable:\n            if file is not None:\n                file.close()\n\n            raise\n\n        # Some x-sendfile implementations incorrectly ignore the 304\n        # status code and send the file anyway.\n        if rv.status_code == 304:\n            rv.headers.pop(\"x-sendfile\", None)\n\n    return rv\n\n\ndef send_from_directory(\n    directory: t.Union[os.PathLike, str],\n    path: t.Union[os.PathLike, str],\n    environ: \"WSGIEnvironment\",\n    **kwargs: t.Any,\n) -> \"Response\":\n    \"\"\"Send a file from within a directory using :func:`send_file`.\n\n    This is a secure way to serve files from a folder, such as static\n    files or uploads. Uses :func:`~werkzeug.security.safe_join` to\n    ensure the path coming from the client is not maliciously crafted to\n    point outside the specified directory.\n\n    If the final path does not point to an existing regular file,\n    returns a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n\n    :param directory: The directory that ``path`` must be located under.\n    :param path: The path to the file to send, relative to\n        ``directory``.\n    :param environ: The WSGI environ for the current request.\n    :param kwargs: Arguments to pass to :func:`send_file`.\n\n    .. versionadded:: 2.0\n        Adapted from Flask's implementation.\n    \"\"\"\n    path = safe_join(os.fspath(directory), os.fspath(path))\n\n    if path is None:\n        raise NotFound()\n\n    # Flask will pass app.root_path, allowing its send_from_directory\n    # wrapper to not have to deal with paths.\n    if \"_root_path\" in kwargs:\n        path = os.path.join(kwargs[\"_root_path\"], path)\n\n    try:\n        if not os.path.isfile(path):\n            raise NotFound()\n    except ValueError:\n        # path contains null byte on Python < 3.8\n        raise NotFound() from None\n\n    return send_file(path, environ, **kwargs)\n\n\ndef import_string(import_name: str, silent: bool = False) -> t.Any:\n    \"\"\"Imports an object based on a string.  This is useful if you want to\n    use import paths as endpoints or something similar.  An import path can\n    be specified either in dotted notation (``xml.sax.saxutils.escape``)\n    or with a colon as object delimiter (``xml.sax.saxutils:escape``).\n\n    If `silent` is True the return value will be `None` if the import fails.\n\n    :param import_name: the dotted name for the object to import.\n    :param silent: if set to `True` import errors are ignored and\n                   `None` is returned instead.\n    :return: imported object\n    \"\"\"\n    import_name = import_name.replace(\":\", \".\")\n    try:\n        try:\n            __import__(import_name)\n        except ImportError:\n            if \".\" not in import_name:\n                raise\n        else:\n            return sys.modules[import_name]\n\n        module_name, obj_name = import_name.rsplit(\".\", 1)\n        module = __import__(module_name, globals(), locals(), [obj_name])\n        try:\n            return getattr(module, obj_name)\n        except AttributeError as e:\n            raise ImportError(e) from None\n\n    except ImportError as e:\n        if not silent:\n            raise ImportStringError(import_name, e).with_traceback(\n                sys.exc_info()[2]\n            ) from None\n\n    return None\n\n\ndef find_modules(\n    import_path: str, include_packages: bool = False, recursive: bool = False\n) -> t.Iterator[str]:\n    \"\"\"Finds all the modules below a package.  This can be useful to\n    automatically import all views / controllers so that their metaclasses /\n    function decorators have a chance to register themselves on the\n    application.\n\n    Packages are not returned unless `include_packages` is `True`.  This can\n    also recursively list modules but in that case it will import all the\n    packages to get the correct load path of that module.\n\n    :param import_path: the dotted name for the package to find child modules.\n    :param include_packages: set to `True` if packages should be returned, too.\n    :param recursive: set to `True` if recursion should happen.\n    :return: generator\n    \"\"\"\n    module = import_string(import_path)\n    path = getattr(module, \"__path__\", None)\n    if path is None:\n        raise ValueError(f\"{import_path!r} is not a package\")\n    basename = f\"{module.__name__}.\"\n    for _importer, modname, ispkg in pkgutil.iter_modules(path):\n        modname = basename + modname\n        if ispkg:\n            if include_packages:\n                yield modname\n            if recursive:\n                yield from find_modules(modname, include_packages, True)\n        else:\n            yield modname\n\n\ndef validate_arguments(func, args, kwargs, drop_extra=True):  # type: ignore\n    \"\"\"Checks if the function accepts the arguments and keyword arguments.\n    Returns a new ``(args, kwargs)`` tuple that can safely be passed to\n    the function without causing a `TypeError` because the function signature\n    is incompatible.  If `drop_extra` is set to `True` (which is the default)\n    any extra positional or keyword arguments are dropped automatically.\n\n    The exception raised provides three attributes:\n\n    `missing`\n        A set of argument names that the function expected but where\n        missing.\n\n    `extra`\n        A dict of keyword arguments that the function can not handle but\n        where provided.\n\n    `extra_positional`\n        A list of values that where given by positional argument but the\n        function cannot accept.\n\n    This can be useful for decorators that forward user submitted data to\n    a view function::\n\n        from werkzeug.utils import ArgumentValidationError, validate_arguments\n\n        def sanitize(f):\n            def proxy(request):\n                data = request.values.to_dict()\n                try:\n                    args, kwargs = validate_arguments(f, (request,), data)\n                except ArgumentValidationError:\n                    raise BadRequest('The browser failed to transmit all '\n                                     'the data expected.')\n                return f(*args, **kwargs)\n            return proxy\n\n    :param func: the function the validation is performed against.\n    :param args: a tuple of positional arguments.\n    :param kwargs: a dict of keyword arguments.\n    :param drop_extra: set to `False` if you don't want extra arguments\n                       to be silently dropped.\n    :return: tuple in the form ``(args, kwargs)``.\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1. Use :func:`inspect.signature`\n        instead.\n    \"\"\"\n    warnings.warn(\n        \"'utils.validate_arguments' is deprecated and will be removed\"\n        \" in Werkzeug 2.1. Use 'inspect.signature' instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    parser = _parse_signature(func)\n    args, kwargs, missing, extra, extra_positional = parser(args, kwargs)[:5]\n    if missing:\n        raise ArgumentValidationError(tuple(missing))\n    elif (extra or extra_positional) and not drop_extra:\n        raise ArgumentValidationError(None, extra, extra_positional)\n    return tuple(args), kwargs\n\n\ndef bind_arguments(func, args, kwargs):  # type: ignore\n    \"\"\"Bind the arguments provided into a dict.  When passed a function,\n    a tuple of arguments and a dict of keyword arguments `bind_arguments`\n    returns a dict of names as the function would see it.  This can be useful\n    to implement a cache decorator that uses the function arguments to build\n    the cache key based on the values of the arguments.\n\n    :param func: the function the arguments should be bound for.\n    :param args: tuple of positional arguments.\n    :param kwargs: a dict of keyword arguments.\n    :return: a :class:`dict` of bound keyword arguments.\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1. Use :meth:`Signature.bind`\n        instead.\n    \"\"\"\n    warnings.warn(\n        \"'utils.bind_arguments' is deprecated and will be removed in\"\n        \" Werkzeug 2.1. Use 'Signature.bind' instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    (\n        args,\n        kwargs,\n        missing,\n        extra,\n        extra_positional,\n        arg_spec,\n        vararg_var,\n        kwarg_var,\n    ) = _parse_signature(func)(args, kwargs)\n    values = {}\n    for (name, _has_default, _default), value in zip(arg_spec, args):\n        values[name] = value\n    if vararg_var is not None:\n        values[vararg_var] = tuple(extra_positional)\n    elif extra_positional:\n        raise TypeError(\"too many positional arguments\")\n    if kwarg_var is not None:\n        multikw = set(extra) & {x[0] for x in arg_spec}\n        if multikw:\n            raise TypeError(\n                f\"got multiple values for keyword argument {next(iter(multikw))!r}\"\n            )\n        values[kwarg_var] = extra\n    elif extra:\n        raise TypeError(f\"got unexpected keyword argument {next(iter(extra))!r}\")\n    return values\n\n\nclass ArgumentValidationError(ValueError):\n    \"\"\"Raised if :func:`validate_arguments` fails to validate\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1 along with ``utils.bind`` and\n        ``validate_arguments``.\n    \"\"\"\n\n    def __init__(self, missing=None, extra=None, extra_positional=None):  # type: ignore\n        self.missing = set(missing or ())\n        self.extra = extra or {}\n        self.extra_positional = extra_positional or []\n        super().__init__(\n            \"function arguments invalid.\"\n            f\" ({len(self.missing)} missing,\"\n            f\" {len(self.extra) + len(self.extra_positional)} additional)\"\n        )\n\n\nclass ImportStringError(ImportError):\n    \"\"\"Provides information about a failed :func:`import_string` attempt.\"\"\"\n\n    #: String in dotted notation that failed to be imported.\n    import_name: str\n    #: Wrapped exception.\n    exception: BaseException\n\n    def __init__(self, import_name: str, exception: BaseException) -> None:\n        self.import_name = import_name\n        self.exception = exception\n        msg = import_name\n        name = \"\"\n        tracked = []\n        for part in import_name.replace(\":\", \".\").split(\".\"):\n            name = f\"{name}.{part}\" if name else part\n            imported = import_string(name, silent=True)\n            if imported:\n                tracked.append((name, getattr(imported, \"__file__\", None)))\n            else:\n                track = [f\"- {n!r} found in {i!r}.\" for n, i in tracked]\n                track.append(f\"- {name!r} not found.\")\n                track_str = \"\\n\".join(track)\n                msg = (\n                    f\"import_string() failed for {import_name!r}. Possible reasons\"\n                    f\" are:\\n\\n\"\n                    \"- missing __init__.py in a package;\\n\"\n                    \"- package or module path not included in sys.path;\\n\"\n                    \"- duplicated package or module name taking precedence in\"\n                    \" sys.path;\\n\"\n                    \"- missing module, class, function or variable;\\n\\n\"\n                    f\"Debugged import:\\n\\n{track_str}\\n\\n\"\n                    f\"Original exception:\\n\\n{type(exception).__name__}: {exception}\"\n                )\n                break\n\n        super().__init__(msg)\n\n    def __repr__(self) -> str:\n        return f\"<{type(self).__name__}({self.import_name!r}, {self.exception!r})>\"\n", 1099], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py": ["r\"\"\"OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n\"\"\"\n\n#'\nimport abc\nimport sys\nimport stat as st\n\n_names = sys.builtin_module_names\n\n# Note:  more names are added to __all__ later.\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\n\ndef _exists(name):\n    return name in globals()\n\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']\n\n# Any new dependencies of the os module and/or changes in path separator\n# requires updating importlib as well.\nif 'posix' in _names:\n    name = 'posix'\n    linesep = '\\n'\n    from posix import *\n    try:\n        from posix import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    import posixpath as path\n\n    try:\n        from posix import _have_functions\n    except ImportError:\n        pass\n\n    import posix\n    __all__.extend(_get_exports_list(posix))\n    del posix\n\nelif 'nt' in _names:\n    name = 'nt'\n    linesep = '\\r\\n'\n    from nt import *\n    try:\n        from nt import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    import ntpath as path\n\n    import nt\n    __all__.extend(_get_exports_list(nt))\n    del nt\n\n    try:\n        from nt import _have_functions\n    except ImportError:\n        pass\n\nelse:\n    raise ImportError('no os specific module found')\n\nsys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\n\ndel _names\n\n\nif _exists(\"_have_functions\"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    _add(\"HAVE_FCHMODAT\",   \"chmod\")\n    _add(\"HAVE_FCHOWNAT\",   \"chown\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_FUTIMESAT\",  \"utime\")\n    _add(\"HAVE_LINKAT\",     \"link\")\n    _add(\"HAVE_MKDIRAT\",    \"mkdir\")\n    _add(\"HAVE_MKFIFOAT\",   \"mkfifo\")\n    _add(\"HAVE_MKNODAT\",    \"mknod\")\n    _add(\"HAVE_OPENAT\",     \"open\")\n    _add(\"HAVE_READLINKAT\", \"readlink\")\n    _add(\"HAVE_RENAMEAT\",   \"rename\")\n    _add(\"HAVE_SYMLINKAT\",  \"symlink\")\n    _add(\"HAVE_UNLINKAT\",   \"unlink\")\n    _add(\"HAVE_UNLINKAT\",   \"rmdir\")\n    _add(\"HAVE_UTIMENSAT\",  \"utime\")\n    supports_dir_fd = _set\n\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    supports_effective_ids = _set\n\n    _set = set()\n    _add(\"HAVE_FCHDIR\",     \"chdir\")\n    _add(\"HAVE_FCHMOD\",     \"chmod\")\n    _add(\"HAVE_FCHOWN\",     \"chown\")\n    _add(\"HAVE_FDOPENDIR\",  \"listdir\")\n    _add(\"HAVE_FDOPENDIR\",  \"scandir\")\n    _add(\"HAVE_FEXECVE\",    \"execve\")\n    _set.add(stat) # fstat always works\n    _add(\"HAVE_FTRUNCATE\",  \"truncate\")\n    _add(\"HAVE_FUTIMENS\",   \"utime\")\n    _add(\"HAVE_FUTIMES\",    \"utime\")\n    _add(\"HAVE_FPATHCONF\",  \"pathconf\")\n    if _exists(\"statvfs\") and _exists(\"fstatvfs\"): # mac os x10.3\n        _add(\"HAVE_FSTATVFS\", \"statvfs\")\n    supports_fd = _set\n\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    # Some platforms don't support lchmod().  Often the function exists\n    # anyway, as a stub that always returns ENOSUP or perhaps EOPNOTSUPP.\n    # (No, I don't know why that's a good design.)  ./configure will detect\n    # this and reject it--so HAVE_LCHMOD still won't be defined on such\n    # platforms.  This is Very Helpful.\n    #\n    # However, sometimes platforms without a working lchmod() *do* have\n    # fchmodat().  (Examples: Linux kernel 3.2 with glibc 2.15,\n    # OpenIndiana 3.x.)  And fchmodat() has a flag that theoretically makes\n    # it behave like lchmod().  So in theory it would be a suitable\n    # replacement for lchmod().  But when lchmod() doesn't work, fchmodat()'s\n    # flag doesn't work *either*.  Sadly ./configure isn't sophisticated\n    # enough to detect this condition--it only determines whether or not\n    # fchmodat() minimally works.\n    #\n    # Therefore we simply ignore fchmodat() when deciding whether or not\n    # os.chmod supports follow_symlinks.  Just checking lchmod() is\n    # sufficient.  After all--if you have a working fchmodat(), your\n    # lchmod() almost certainly works too.\n    #\n    # _add(\"HAVE_FCHMODAT\",   \"chmod\")\n    _add(\"HAVE_FCHOWNAT\",   \"chown\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_LCHFLAGS\",   \"chflags\")\n    _add(\"HAVE_LCHMOD\",     \"chmod\")\n    if _exists(\"lchown\"): # mac os x10.3\n        _add(\"HAVE_LCHOWN\", \"chown\")\n    _add(\"HAVE_LINKAT\",     \"link\")\n    _add(\"HAVE_LUTIMES\",    \"utime\")\n    _add(\"HAVE_LSTAT\",      \"stat\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_UTIMENSAT\",  \"utime\")\n    _add(\"MS_WINDOWS\",      \"stat\")\n    supports_follow_symlinks = _set\n\n    del _set\n    del _have_functions\n    del _globals\n    del _add\n\n\n# Python uses fixed values for the SEEK_ constants; they are mapped\n# to native constants if necessary in posixmodule.c\n# Other possible SEEK values are directly imported from posixmodule.c\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\n\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    if head and tail and not path.exists(head):\n        try:\n            makedirs(head, exist_ok=exist_ok)\n        except FileExistsError:\n            # Defeats race condition when another thread created the path\n            pass\n        cdir = curdir\n        if isinstance(tail, bytes):\n            cdir = bytes(curdir, 'ASCII')\n        if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists\n            return\n    try:\n        mkdir(name, mode)\n    except OSError:\n        # Cannot rely on checking for EEXIST, since the operating system\n        # could give priority to other errors like EACCES or EROFS\n        if not exist_ok or not path.isdir(name):\n            raise\n\ndef removedirs(name):\n    \"\"\"removedirs(name)\n\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n\n    \"\"\"\n    rmdir(name)\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    while head and tail:\n        try:\n            rmdir(head)\n        except OSError:\n            break\n        head, tail = path.split(head)\n\ndef renames(old, new):\n    \"\"\"renames(old, new)\n\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n\n    \"\"\"\n    head, tail = path.split(new)\n    if head and tail and not path.exists(head):\n        makedirs(head)\n    rename(old, new)\n    head, tail = path.split(old)\n    if head and tail:\n        try:\n            removedirs(head)\n        except OSError:\n            pass\n\n__all__.extend([\"makedirs\", \"removedirs\", \"renames\"])\n\ndef walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg 'topdown' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune the\n    search, or to impose a specific order of visiting.  Modifying dirnames when\n    topdown is false is ineffective, since the directories in dirnames have\n    already been generated by the time dirnames itself is generated. No matter\n    the value of topdown, the list of subdirectories is retrieved before the\n    tuples for the directory and its subdirectories are generated.\n\n    By default errors from the os.scandir() call are ignored.  If\n    optional arg 'onerror' is specified, it should be a function; it\n    will be called with one argument, an OSError instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    By default, os.walk does not follow symbolic links to subdirectories on\n    systems that support them.  In order to get this functionality, set the\n    optional argument 'followlinks' to true.\n\n    Caution:  if you pass a relative pathname for top, don't change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn't\n    either.\n\n    Example:\n\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk('python/Lib/email'):\n        print(root, \"consumes\", end=\"\")\n        print(sum([getsize(join(root, name)) for name in files]), end=\"\")\n        print(\"bytes in\", len(files), \"non-directory files\")\n        if 'CVS' in dirs:\n            dirs.remove('CVS')  # don't visit CVS directories\n\n    \"\"\"\n    top = fspath(top)\n    dirs = []\n    nondirs = []\n    walk_dirs = []\n\n    # We may not have read permission for top, in which case we can't\n    # get a list of the files the directory contains.  os.walk\n    # always suppressed the exception then, rather than blow up for a\n    # minor reason when (say) a thousand readable directories are still\n    # left to visit.  That logic is copied here.\n    try:\n        # Note that scandir is global in this module due\n        # to earlier import-*.\n        scandir_it = scandir(top)\n    except OSError as error:\n        if onerror is not None:\n            onerror(error)\n        return\n\n    with scandir_it:\n        while True:\n            try:\n                try:\n                    entry = next(scandir_it)\n                except StopIteration:\n                    break\n            except OSError as error:\n                if onerror is not None:\n                    onerror(error)\n                return\n\n            try:\n                is_dir = entry.is_dir()\n            except OSError:\n                # If is_dir() raises an OSError, consider that the entry is not\n                # a directory, same behaviour than os.path.isdir().\n                is_dir = False\n\n            if is_dir:\n                dirs.append(entry.name)\n            else:\n                nondirs.append(entry.name)\n\n            if not topdown and is_dir:\n                # Bottom-up: recurse into sub-directory, but exclude symlinks to\n                # directories if followlinks is False\n                if followlinks:\n                    walk_into = True\n                else:\n                    try:\n                        is_symlink = entry.is_symlink()\n                    except OSError:\n                        # If is_symlink() raises an OSError, consider that the\n                        # entry is not a symbolic link, same behaviour than\n                        # os.path.islink().\n                        is_symlink = False\n                    walk_into = not is_symlink\n\n                if walk_into:\n                    walk_dirs.append(entry.path)\n\n    # Yield before recursion if going top down\n    if topdown:\n        yield top, dirs, nondirs\n\n        # Recurse into sub-directories\n        islink, join = path.islink, path.join\n        for dirname in dirs:\n            new_path = join(top, dirname)\n            # Issue #23605: os.path.islink() is used instead of caching\n            # entry.is_symlink() result during the loop on os.scandir() because\n            # the caller can replace the directory entry during the \"yield\"\n            # above.\n            if followlinks or not islink(new_path):\n                yield from walk(new_path, topdown, onerror, followlinks)\n    else:\n        # Recurse into sub-directories\n        for new_path in walk_dirs:\n            yield from walk(new_path, topdown, onerror, followlinks)\n        # Yield after recursion if going bottom up\n        yield top, dirs, nondirs\n\n__all__.append(\"walk\")\n\nif {open, stat} <= supports_dir_fd and {scandir, stat} <= supports_fd:\n\n    def fwalk(top=\".\", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):\n        \"\"\"Directory tree generator.\n\n        This behaves exactly like walk(), except that it yields a 4-tuple\n\n            dirpath, dirnames, filenames, dirfd\n\n        `dirpath`, `dirnames` and `filenames` are identical to walk() output,\n        and `dirfd` is a file descriptor referring to the directory `dirpath`.\n\n        The advantage of fwalk() over walk() is that it's safe against symlink\n        races (when follow_symlinks is False).\n\n        If dir_fd is not None, it should be a file descriptor open to a directory,\n          and top should be relative; top will then be relative to that directory.\n          (dir_fd is always supported for fwalk.)\n\n        Caution:\n        Since fwalk() yields file descriptors, those are only valid until the\n        next iteration step, so you should dup() them if you want to keep them\n        for a longer period.\n\n        Example:\n\n        import os\n        for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n            print(root, \"consumes\", end=\"\")\n            print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n                  end=\"\")\n            print(\"bytes in\", len(files), \"non-directory files\")\n            if 'CVS' in dirs:\n                dirs.remove('CVS')  # don't visit CVS directories\n        \"\"\"\n        if not isinstance(top, int) or not hasattr(top, '__index__'):\n            top = fspath(top)\n        # Note: To guard against symlink races, we use the standard\n        # lstat()/open()/fstat() trick.\n        if not follow_symlinks:\n            orig_st = stat(top, follow_symlinks=False, dir_fd=dir_fd)\n        topfd = open(top, O_RDONLY, dir_fd=dir_fd)\n        try:\n            if (follow_symlinks or (st.S_ISDIR(orig_st.st_mode) and\n                                    path.samestat(orig_st, stat(topfd)))):\n                yield from _fwalk(topfd, top, isinstance(top, bytes),\n                                  topdown, onerror, follow_symlinks)\n        finally:\n            close(topfd)\n\n    def _fwalk(topfd, toppath, isbytes, topdown, onerror, follow_symlinks):\n        # Note: This uses O(depth of the directory tree) file descriptors: if\n        # necessary, it can be adapted to only require O(1) FDs, see issue\n        # #13734.\n\n        scandir_it = scandir(topfd)\n        dirs = []\n        nondirs = []\n        entries = None if topdown or follow_symlinks else []\n        for entry in scandir_it:\n            name = entry.name\n            if isbytes:\n                name = fsencode(name)\n            try:\n                if entry.is_dir():\n                    dirs.append(name)\n                    if entries is not None:\n                        entries.append(entry)\n                else:\n                    nondirs.append(name)\n            except OSError:\n                try:\n                    # Add dangling symlinks, ignore disappeared files\n                    if entry.is_symlink():\n                        nondirs.append(name)\n                except OSError:\n                    pass\n\n        if topdown:\n            yield toppath, dirs, nondirs, topfd\n\n        for name in dirs if entries is None else zip(dirs, entries):\n            try:\n                if not follow_symlinks:\n                    if topdown:\n                        orig_st = stat(name, dir_fd=topfd, follow_symlinks=False)\n                    else:\n                        assert entries is not None\n                        name, entry = name\n                        orig_st = entry.stat(follow_symlinks=False)\n                dirfd = open(name, O_RDONLY, dir_fd=topfd)\n            except OSError as err:\n                if onerror is not None:\n                    onerror(err)\n                continue\n            try:\n                if follow_symlinks or path.samestat(orig_st, stat(dirfd)):\n                    dirpath = path.join(toppath, name)\n                    yield from _fwalk(dirfd, dirpath, isbytes,\n                                      topdown, onerror, follow_symlinks)\n            finally:\n                close(dirfd)\n\n        if not topdown:\n            yield toppath, dirs, nondirs, topfd\n\n    __all__.append(\"fwalk\")\n\n# Make sure os.environ exists, at least\ntry:\n    environ\nexcept NameError:\n    environ = {}\n\ndef execl(file, *args):\n    \"\"\"execl(file, *args)\n\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\n\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\n\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\n\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\n\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\n\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\n\ndef _execvpe(file, args, env=None):\n    if env is not None:\n        exec_func = execve\n        argrest = (args, env)\n    else:\n        exec_func = execv\n        argrest = (args,)\n        env = environ\n\n    if path.dirname(file):\n        exec_func(file, *argrest)\n        return\n    saved_exc = None\n    path_list = get_exec_path(env)\n    if name != 'nt':\n        file = fsencode(file)\n        path_list = map(fsencode, path_list)\n    for dir in path_list:\n        fullname = path.join(dir, file)\n        try:\n            exec_func(fullname, *argrest)\n        except (FileNotFoundError, NotADirectoryError) as e:\n            last_exc = e\n        except OSError as e:\n            last_exc = e\n            if saved_exc is None:\n                saved_exc = e\n    if saved_exc is not None:\n        raise saved_exc\n    raise last_exc\n\n\ndef get_exec_path(env=None):\n    \"\"\"Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    \"\"\"\n    # Use a local import instead of a global import to limit the number of\n    # modules loaded at startup: the os module is always loaded at startup by\n    # Python. It may also avoid a bootstrap issue.\n    import warnings\n\n    if env is None:\n        env = environ\n\n    # {b'PATH': ...}.get('PATH') and {'PATH': ...}.get(b'PATH') emit a\n    # BytesWarning when using python -b or python -bb: ignore the warning\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\", BytesWarning)\n\n        try:\n            path_list = env.get('PATH')\n        except TypeError:\n            path_list = None\n\n        if supports_bytes_environ:\n            try:\n                path_listb = env[b'PATH']\n            except (KeyError, TypeError):\n                pass\n            else:\n                if path_list is not None:\n                    raise ValueError(\n                        \"env cannot contain 'PATH' and b'PATH' keys\")\n                path_list = path_listb\n\n            if path_list is not None and isinstance(path_list, bytes):\n                path_list = fsdecode(path_list)\n\n    if path_list is None:\n        path_list = defpath\n    return path_list.split(pathsep)\n\n\n# Change environ to automatically call putenv(), unsetenv if they exist.\nfrom _collections_abc import MutableMapping\n\nclass _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self.putenv = putenv\n        self.unsetenv = unsetenv\n        self._data = data\n\n    def __getitem__(self, key):\n        try:\n            value = self._data[self.encodekey(key)]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n        return self.decodevalue(value)\n\n    def __setitem__(self, key, value):\n        key = self.encodekey(key)\n        value = self.encodevalue(value)\n        self.putenv(key, value)\n        self._data[key] = value\n\n    def __delitem__(self, key):\n        encodedkey = self.encodekey(key)\n        self.unsetenv(encodedkey)\n        try:\n            del self._data[encodedkey]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n\n    def __iter__(self):\n        # list() from dict object is an atomic operation\n        keys = list(self._data)\n        for key in keys:\n            yield self.decodekey(key)\n\n    def __len__(self):\n        return len(self._data)\n\n    def __repr__(self):\n        return 'environ({{{}}})'.format(', '.join(\n            ('{!r}: {!r}'.format(self.decodekey(key), self.decodevalue(value))\n            for key, value in self._data.items())))\n\n    def copy(self):\n        return dict(self)\n\n    def setdefault(self, key, value):\n        if key not in self:\n            self[key] = value\n        return self[key]\n\ntry:\n    _putenv = putenv\nexcept NameError:\n    _putenv = lambda key, value: None\nelse:\n    if \"putenv\" not in __all__:\n        __all__.append(\"putenv\")\n\ntry:\n    _unsetenv = unsetenv\nexcept NameError:\n    _unsetenv = lambda key: _putenv(key, \"\")\nelse:\n    if \"unsetenv\" not in __all__:\n        __all__.append(\"unsetenv\")\n\ndef _createenviron():\n    if name == 'nt':\n        # Where Env Var Names Must Be UPPERCASE\n        def check_str(value):\n            if not isinstance(value, str):\n                raise TypeError(\"str expected, not %s\" % type(value).__name__)\n            return value\n        encode = check_str\n        decode = str\n        def encodekey(key):\n            return encode(key).upper()\n        data = {}\n        for key, value in environ.items():\n            data[encodekey(key)] = value\n    else:\n        # Where Env Var Names Can Be Mixed Case\n        encoding = sys.getfilesystemencoding()\n        def encode(value):\n            if not isinstance(value, str):\n                raise TypeError(\"str expected, not %s\" % type(value).__name__)\n            return value.encode(encoding, 'surrogateescape')\n        def decode(value):\n            return value.decode(encoding, 'surrogateescape')\n        encodekey = encode\n        data = environ\n    return _Environ(data,\n        encodekey, decode,\n        encode, decode,\n        _putenv, _unsetenv)\n\n# unicode environ\nenviron = _createenviron()\ndel _createenviron\n\n\ndef getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\n\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\n\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError(\"bytes expected, not %s\" % type(value).__name__)\n        return value\n\n    # bytes environ\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,\n        _check_bytes, bytes,\n        _putenv, _unsetenv)\n    del _check_bytes\n\n    def getenvb(key, default=None):\n        \"\"\"Get an environment variable, return None if it doesn't exist.\n        The optional second argument can specify an alternate default.\n        key, default and the result are bytes.\"\"\"\n        return environb.get(key, default)\n\n    __all__.extend((\"environb\", \"getenvb\"))\n\ndef _fscodec():\n    encoding = sys.getfilesystemencoding()\n    errors = sys.getfilesystemencodeerrors()\n\n    def fsencode(filename):\n        \"\"\"Encode filename (an os.PathLike, bytes, or str) to the filesystem\n        encoding with 'surrogateescape' error handler, return bytes unchanged.\n        On Windows, use 'strict' error handler if the file system encoding is\n        'mbcs' (which is the default encoding).\n        \"\"\"\n        filename = fspath(filename)  # Does type-checking of `filename`.\n        if isinstance(filename, str):\n            return filename.encode(encoding, errors)\n        else:\n            return filename\n\n    def fsdecode(filename):\n        \"\"\"Decode filename (an os.PathLike, bytes, or str) from the filesystem\n        encoding with 'surrogateescape' error handler, return str unchanged. On\n        Windows, use 'strict' error handler if the file system encoding is\n        'mbcs' (which is the default encoding).\n        \"\"\"\n        filename = fspath(filename)  # Does type-checking of `filename`.\n        if isinstance(filename, bytes):\n            return filename.decode(encoding, errors)\n        else:\n            return filename\n\n    return fsencode, fsdecode\n\nfsencode, fsdecode = _fscodec()\ndel _fscodec\n\n# Supply spawn*() (probably only for Unix)\nif _exists(\"fork\") and not _exists(\"spawnv\") and _exists(\"execv\"):\n\n    P_WAIT = 0\n    P_NOWAIT = P_NOWAITO = 1\n\n    __all__.extend([\"P_WAIT\", \"P_NOWAIT\", \"P_NOWAITO\"])\n\n    # XXX Should we support P_DETACH?  I suppose it could fork()**2\n    # and close the std I/O streams.  Also, P_OVERLAY is the same\n    # as execv*()?\n\n    def _spawnvef(mode, file, args, env, func):\n        # Internal helper; func is the exec*() function to use\n        if not isinstance(args, (tuple, list)):\n            raise TypeError('argv must be a tuple or a list')\n        if not args or not args[0]:\n            raise ValueError('argv first element cannot be empty')\n        pid = fork()\n        if not pid:\n            # Child\n            try:\n                if env is None:\n                    func(file, args)\n                else:\n                    func(file, args, env)\n            except:\n                _exit(127)\n        else:\n            # Parent\n            if mode == P_NOWAIT:\n                return pid # Caller is responsible for waiting!\n            while 1:\n                wpid, sts = waitpid(pid, 0)\n                if WIFSTOPPED(sts):\n                    continue\n                elif WIFSIGNALED(sts):\n                    return -WTERMSIG(sts)\n                elif WIFEXITED(sts):\n                    return WEXITSTATUS(sts)\n                else:\n                    raise OSError(\"Not stopped, signaled or exited???\")\n\n    def spawnv(mode, file, args):\n        \"\"\"spawnv(mode, file, args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, None, execv)\n\n    def spawnve(mode, file, args, env):\n        \"\"\"spawnve(mode, file, args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, env, execve)\n\n    # Note: spawnvp[e] isn't currently supported on Windows\n\n    def spawnvp(mode, file, args):\n        \"\"\"spawnvp(mode, file, args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, None, execvp)\n\n    def spawnvpe(mode, file, args, env):\n        \"\"\"spawnvpe(mode, file, args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, env, execvpe)\n\n\n    __all__.extend([\"spawnv\", \"spawnve\", \"spawnvp\", \"spawnvpe\"])\n\n\nif _exists(\"spawnv\"):\n    # These aren't supplied by the basic Windows code\n    # but can be easily implemented in Python\n\n    def spawnl(mode, file, *args):\n        \"\"\"spawnl(mode, file, *args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return spawnv(mode, file, args)\n\n    def spawnle(mode, file, *args):\n        \"\"\"spawnle(mode, file, *args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        env = args[-1]\n        return spawnve(mode, file, args[:-1], env)\n\n\n    __all__.extend([\"spawnl\", \"spawnle\"])\n\n\nif _exists(\"spawnvp\"):\n    # At the moment, Windows doesn't implement spawnvp[e],\n    # so it won't have spawnlp[e] either.\n    def spawnlp(mode, file, *args):\n        \"\"\"spawnlp(mode, file, *args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return spawnvp(mode, file, args)\n\n    def spawnlpe(mode, file, *args):\n        \"\"\"spawnlpe(mode, file, *args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        env = args[-1]\n        return spawnvpe(mode, file, args[:-1], env)\n\n\n    __all__.extend([\"spawnlp\", \"spawnlpe\"])\n\n\n# Supply os.popen()\ndef popen(cmd, mode=\"r\", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError(\"invalid cmd type (%s, expected string)\" % type(cmd))\n    if mode not in (\"r\", \"w\"):\n        raise ValueError(\"invalid mode %r\" % mode)\n    if buffering == 0 or buffering is None:\n        raise ValueError(\"popen() does not support unbuffered streams\")\n    import subprocess, io\n    if mode == \"r\":\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdout=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdout), proc)\n    else:\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdin=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdin), proc)\n\n# Helper for popen() -- a proxy for a file whose close waits for the process\nclass _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == 'nt':\n            return returncode\n        else:\n            return returncode << 8  # Shift left to match old behavior\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        self.close()\n    def __getattr__(self, name):\n        return getattr(self._stream, name)\n    def __iter__(self):\n        return iter(self._stream)\n\n# Supply os.fdopen()\ndef fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError(\"invalid fd type (%s, expected integer)\" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n\n\n# For testing purposes, make sure the function is available when the C\n# implementation exists.\ndef _fspath(path):\n    \"\"\"Return the path representation of a path-like object.\n\n    If str or bytes is passed in, it is returned unchanged. Otherwise the\n    os.PathLike interface is used to get the path representation. If the\n    path representation is not str or bytes, TypeError is raised. If the\n    provided path is not str, bytes, or os.PathLike, TypeError is raised.\n    \"\"\"\n    if isinstance(path, (str, bytes)):\n        return path\n\n    # Work from the object's type to match method resolution of other magic\n    # methods.\n    path_type = type(path)\n    try:\n        path_repr = path_type.__fspath__(path)\n    except AttributeError:\n        if hasattr(path_type, '__fspath__'):\n            raise\n        else:\n            raise TypeError(\"expected str, bytes or os.PathLike object, \"\n                            \"not \" + path_type.__name__)\n    if isinstance(path_repr, (str, bytes)):\n        return path_repr\n    else:\n        raise TypeError(\"expected {}.__fspath__() to return str or bytes, \"\n                        \"not {}\".format(path_type.__name__,\n                                        type(path_repr).__name__))\n\n# If there is no C implementation, make the pure Python version the\n# implementation as transparently as possible.\nif not _exists('fspath'):\n    fspath = _fspath\n    fspath.__name__ = \"fspath\"\n\n\nclass PathLike(abc.ABC):\n\n    \"\"\"Abstract base class for implementing the file system path protocol.\"\"\"\n\n    @abc.abstractmethod\n    def __fspath__(self):\n        \"\"\"Return the file system path representation of the object.\"\"\"\n        raise NotImplementedError\n\n    @classmethod\n    def __subclasshook__(cls, subclass):\n        return hasattr(subclass, '__fspath__')\n", 1078], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py": ["# Copyright 2007 Google, Inc. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.\n\nUnit tests are in test_collections.\n\"\"\"\n\nfrom abc import ABCMeta, abstractmethod\nimport sys\n\n__all__ = [\"Awaitable\", \"Coroutine\",\n           \"AsyncIterable\", \"AsyncIterator\", \"AsyncGenerator\",\n           \"Hashable\", \"Iterable\", \"Iterator\", \"Generator\", \"Reversible\",\n           \"Sized\", \"Container\", \"Callable\", \"Collection\",\n           \"Set\", \"MutableSet\",\n           \"Mapping\", \"MutableMapping\",\n           \"MappingView\", \"KeysView\", \"ItemsView\", \"ValuesView\",\n           \"Sequence\", \"MutableSequence\",\n           \"ByteString\",\n           ]\n\n# This module has been renamed from collections.abc to _collections_abc to\n# speed up interpreter startup. Some of the types such as MutableMapping are\n# required early but collections module imports a lot of other modules.\n# See issue #19218\n__name__ = \"collections.abc\"\n\n# Private list of types that we want to register with the various ABCs\n# so that they will pass tests like:\n#       it = iter(somebytearray)\n#       assert isinstance(it, Iterable)\n# Note:  in other implementations, these types might not be distinct\n# and they may have their own implementation specific types that\n# are not included on this list.\nbytes_iterator = type(iter(b''))\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n\n\n### ONE-TRICK PONIES ###\n\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True\n\nclass Hashable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __hash__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Hashable:\n            return _check_methods(C, \"__hash__\")\n        return NotImplemented\n\n\nclass Awaitable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __await__(self):\n        yield\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Awaitable:\n            return _check_methods(C, \"__await__\")\n        return NotImplemented\n\n\nclass Coroutine(Awaitable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        \"\"\"Raise an exception in the coroutine.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        \"\"\"Raise GeneratorExit inside coroutine.\n        \"\"\"\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError(\"coroutine ignored GeneratorExit\")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Coroutine:\n            return _check_methods(C, '__await__', 'send', 'throw', 'close')\n        return NotImplemented\n\n\nCoroutine.register(coroutine)\n\n\nclass AsyncIterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __aiter__(self):\n        return AsyncIterator()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterable:\n            return _check_methods(C, \"__aiter__\")\n        return NotImplemented\n\n\nclass AsyncIterator(AsyncIterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    async def __anext__(self):\n        \"\"\"Return the next item or raise StopAsyncIteration when exhausted.\"\"\"\n        raise StopAsyncIteration\n\n    def __aiter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterator:\n            return _check_methods(C, \"__anext__\", \"__aiter__\")\n        return NotImplemented\n\n\nclass AsyncGenerator(AsyncIterator):\n\n    __slots__ = ()\n\n    async def __anext__(self):\n        \"\"\"Return the next item from the asynchronous generator.\n        When exhausted, raise StopAsyncIteration.\n        \"\"\"\n        return await self.asend(None)\n\n    @abstractmethod\n    async def asend(self, value):\n        \"\"\"Send a value into the asynchronous generator.\n        Return next yielded value or raise StopAsyncIteration.\n        \"\"\"\n        raise StopAsyncIteration\n\n    @abstractmethod\n    async def athrow(self, typ, val=None, tb=None):\n        \"\"\"Raise an exception in the asynchronous generator.\n        Return next yielded value or raise StopAsyncIteration.\n        \"\"\"\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    async def aclose(self):\n        \"\"\"Raise GeneratorExit inside coroutine.\n        \"\"\"\n        try:\n            await self.athrow(GeneratorExit)\n        except (GeneratorExit, StopAsyncIteration):\n            pass\n        else:\n            raise RuntimeError(\"asynchronous generator ignored GeneratorExit\")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncGenerator:\n            return _check_methods(C, '__aiter__', '__anext__',\n                                  'asend', 'athrow', 'aclose')\n        return NotImplemented\n\n\nAsyncGenerator.register(async_generator)\n\n\nclass Iterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            return _check_methods(C, \"__iter__\")\n        return NotImplemented\n\n\nclass Iterator(Iterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __next__(self):\n        'Return the next item from the iterator. When exhausted, raise StopIteration'\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterator:\n            return _check_methods(C, '__iter__', '__next__')\n        return NotImplemented\n\nIterator.register(bytes_iterator)\nIterator.register(bytearray_iterator)\n#Iterator.register(callable_iterator)\nIterator.register(dict_keyiterator)\nIterator.register(dict_valueiterator)\nIterator.register(dict_itemiterator)\nIterator.register(list_iterator)\nIterator.register(list_reverseiterator)\nIterator.register(range_iterator)\nIterator.register(longrange_iterator)\nIterator.register(set_iterator)\nIterator.register(str_iterator)\nIterator.register(tuple_iterator)\nIterator.register(zip_iterator)\n\n\nclass Reversible(Iterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __reversed__(self):\n        while False:\n            yield None\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Reversible:\n            return _check_methods(C, \"__reversed__\", \"__iter__\")\n        return NotImplemented\n\n\nclass Generator(Iterator):\n\n    __slots__ = ()\n\n    def __next__(self):\n        \"\"\"Return the next item from the generator.\n        When exhausted, raise StopIteration.\n        \"\"\"\n        return self.send(None)\n\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the generator.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        \"\"\"Raise an exception in the generator.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        \"\"\"Raise GeneratorExit inside generator.\n        \"\"\"\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError(\"generator ignored GeneratorExit\")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Generator:\n            return _check_methods(C, '__iter__', '__next__',\n                                  'send', 'throw', 'close')\n        return NotImplemented\n\nGenerator.register(generator)\n\n\nclass Sized(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __len__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            return _check_methods(C, \"__len__\")\n        return NotImplemented\n\n\nclass Container(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            return _check_methods(C, \"__contains__\")\n        return NotImplemented\n\nclass Collection(Sized, Iterable, Container):\n\n    __slots__ = ()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Collection:\n            return _check_methods(C,  \"__len__\", \"__iter__\", \"__contains__\")\n        return NotImplemented\n\nclass Callable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __call__(self, *args, **kwds):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Callable:\n            return _check_methods(C, \"__call__\")\n        return NotImplemented\n\n\n### SETS ###\n\n\nclass Set(Collection):\n\n    \"\"\"A set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), redefine __le__ and __ge__,\n    then the other operations will automatically follow suit.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __le__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) > len(other):\n            return False\n        for elem in self:\n            if elem not in other:\n                return False\n        return True\n\n    def __lt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) < len(other) and self.__le__(other)\n\n    def __gt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) > len(other) and self.__ge__(other)\n\n    def __ge__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) < len(other):\n            return False\n        for elem in other:\n            if elem not in self:\n                return False\n        return True\n\n    def __eq__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) == len(other) and self.__le__(other)\n\n    @classmethod\n    def _from_iterable(cls, it):\n        '''Construct an instance of the class from any iterable input.\n\n        Must override this method if the class constructor signature\n        does not accept an iterable for an input.\n        '''\n        return cls(it)\n\n    def __and__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        return self._from_iterable(value for value in other if value in self)\n\n    __rand__ = __and__\n\n    def isdisjoint(self, other):\n        'Return True if two sets have a null intersection.'\n        for value in other:\n            if value in self:\n                return False\n        return True\n\n    def __or__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        chain = (e for s in (self, other) for e in s)\n        return self._from_iterable(chain)\n\n    __ror__ = __or__\n\n    def __sub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in self\n                                   if value not in other)\n\n    def __rsub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in other\n                                   if value not in self)\n\n    def __xor__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return (self - other) | (other - self)\n\n    __rxor__ = __xor__\n\n    def _hash(self):\n        \"\"\"Compute the hash value of a set.\n\n        Note that we don't define __hash__: not all sets are hashable.\n        But if you define a hashable set type, its __hash__ should\n        call this function.\n\n        This must be compatible __eq__.\n\n        All sets ought to compare equal if they contain the same\n        elements, regardless of how they are implemented, and\n        regardless of the order of the elements; so there's not much\n        freedom for __eq__ or __hash__.  We match the algorithm used\n        by the built-in frozenset type.\n        \"\"\"\n        MAX = sys.maxsize\n        MASK = 2 * MAX + 1\n        n = len(self)\n        h = 1927868237 * (n + 1)\n        h &= MASK\n        for x in self:\n            hx = hash(x)\n            h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167\n            h &= MASK\n        h = h * 69069 + 907133923\n        h &= MASK\n        if h > MAX:\n            h -= MASK + 1\n        if h == -1:\n            h = 590923713\n        return h\n\nSet.register(frozenset)\n\n\nclass MutableSet(Set):\n    \"\"\"A mutable set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__, __len__,\n    add(), and discard().\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    \"\"\"\n\n    __slots__ = ()\n\n    @abstractmethod\n    def add(self, value):\n        \"\"\"Add an element.\"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def discard(self, value):\n        \"\"\"Remove an element.  Do not raise an exception if absent.\"\"\"\n        raise NotImplementedError\n\n    def remove(self, value):\n        \"\"\"Remove an element. If not a member, raise a KeyError.\"\"\"\n        if value not in self:\n            raise KeyError(value)\n        self.discard(value)\n\n    def pop(self):\n        \"\"\"Return the popped value.  Raise KeyError if empty.\"\"\"\n        it = iter(self)\n        try:\n            value = next(it)\n        except StopIteration:\n            raise KeyError from None\n        self.discard(value)\n        return value\n\n    def clear(self):\n        \"\"\"This is slow (creates N new iterators!) but effective.\"\"\"\n        try:\n            while True:\n                self.pop()\n        except KeyError:\n            pass\n\n    def __ior__(self, it):\n        for value in it:\n            self.add(value)\n        return self\n\n    def __iand__(self, it):\n        for value in (self - it):\n            self.discard(value)\n        return self\n\n    def __ixor__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            if not isinstance(it, Set):\n                it = self._from_iterable(it)\n            for value in it:\n                if value in self:\n                    self.discard(value)\n                else:\n                    self.add(value)\n        return self\n\n    def __isub__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            for value in it:\n                self.discard(value)\n        return self\n\nMutableSet.register(set)\n\n\n### MAPPINGS ###\n\n\nclass Mapping(Collection):\n\n    __slots__ = ()\n\n    \"\"\"A Mapping is a generic container for associating key/value\n    pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __iter__, and __len__.\n\n    \"\"\"\n\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError\n\n    def get(self, key, default=None):\n        'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def __contains__(self, key):\n        try:\n            self[key]\n        except KeyError:\n            return False\n        else:\n            return True\n\n    def keys(self):\n        \"D.keys() -> a set-like object providing a view on D's keys\"\n        return KeysView(self)\n\n    def items(self):\n        \"D.items() -> a set-like object providing a view on D's items\"\n        return ItemsView(self)\n\n    def values(self):\n        \"D.values() -> an object providing a view on D's values\"\n        return ValuesView(self)\n\n    def __eq__(self, other):\n        if not isinstance(other, Mapping):\n            return NotImplemented\n        return dict(self.items()) == dict(other.items())\n\n    __reversed__ = None\n\nMapping.register(mappingproxy)\n\n\nclass MappingView(Sized):\n\n    __slots__ = '_mapping',\n\n    def __init__(self, mapping):\n        self._mapping = mapping\n\n    def __len__(self):\n        return len(self._mapping)\n\n    def __repr__(self):\n        return '{0.__class__.__name__}({0._mapping!r})'.format(self)\n\n\nclass KeysView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, key):\n        return key in self._mapping\n\n    def __iter__(self):\n        yield from self._mapping\n\nKeysView.register(dict_keys)\n\n\nclass ItemsView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, item):\n        key, value = item\n        try:\n            v = self._mapping[key]\n        except KeyError:\n            return False\n        else:\n            return v is value or v == value\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield (key, self._mapping[key])\n\nItemsView.register(dict_items)\n\n\nclass ValuesView(MappingView, Collection):\n\n    __slots__ = ()\n\n    def __contains__(self, value):\n        for key in self._mapping:\n            v = self._mapping[key]\n            if v is value or v == value:\n                return True\n        return False\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield self._mapping[key]\n\nValuesView.register(dict_values)\n\n\nclass MutableMapping(Mapping):\n\n    __slots__ = ()\n\n    \"\"\"A MutableMapping is a generic container for associating\n    key/value pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __setitem__, __delitem__,\n    __iter__, and __len__.\n\n    \"\"\"\n\n    @abstractmethod\n    def __setitem__(self, key, value):\n        raise KeyError\n\n    @abstractmethod\n    def __delitem__(self, key):\n        raise KeyError\n\n    __marker = object()\n\n    def pop(self, key, default=__marker):\n        '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n          If key is not found, d is returned if given, otherwise KeyError is raised.\n        '''\n        try:\n            value = self[key]\n        except KeyError:\n            if default is self.__marker:\n                raise\n            return default\n        else:\n            del self[key]\n            return value\n\n    def popitem(self):\n        '''D.popitem() -> (k, v), remove and return some (key, value) pair\n           as a 2-tuple; but raise KeyError if D is empty.\n        '''\n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError from None\n        value = self[key]\n        del self[key]\n        return key, value\n\n    def clear(self):\n        'D.clear() -> None.  Remove all items from D.'\n        try:\n            while True:\n                self.popitem()\n        except KeyError:\n            pass\n\n    def update(*args, **kwds):\n        ''' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.\n            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]\n            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\n            In either case, this is followed by: for k, v in F.items(): D[k] = v\n        '''\n        if not args:\n            raise TypeError(\"descriptor 'update' of 'MutableMapping' object \"\n                            \"needs an argument\")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError('update expected at most 1 arguments, got %d' %\n                            len(args))\n        if args:\n            other = args[0]\n            if isinstance(other, Mapping):\n                for key in other:\n                    self[key] = other[key]\n            elif hasattr(other, \"keys\"):\n                for key in other.keys():\n                    self[key] = other[key]\n            else:\n                for key, value in other:\n                    self[key] = value\n        for key, value in kwds.items():\n            self[key] = value\n\n    def setdefault(self, key, default=None):\n        'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n        return default\n\nMutableMapping.register(dict)\n\n\n### SEQUENCES ###\n\n\nclass Sequence(Reversible, Collection):\n\n    \"\"\"All the operations on a read-only sequence.\n\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    \"\"\"\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __getitem__(self, index):\n        raise IndexError\n\n    def __iter__(self):\n        i = 0\n        try:\n            while True:\n                v = self[i]\n                yield v\n                i += 1\n        except IndexError:\n            return\n\n    def __contains__(self, value):\n        for v in self:\n            if v is value or v == value:\n                return True\n        return False\n\n    def __reversed__(self):\n        for i in reversed(range(len(self))):\n            yield self[i]\n\n    def index(self, value, start=0, stop=None):\n        '''S.index(value, [start, [stop]]) -> integer -- return first index of value.\n           Raises ValueError if the value is not present.\n\n           Supporting start and stop arguments is optional, but\n           recommended.\n        '''\n        if start is not None and start < 0:\n            start = max(len(self) + start, 0)\n        if stop is not None and stop < 0:\n            stop += len(self)\n\n        i = start\n        while stop is None or i < stop:\n            try:\n                v = self[i]\n                if v is value or v == value:\n                    return i\n            except IndexError:\n                break\n            i += 1\n        raise ValueError\n\n    def count(self, value):\n        'S.count(value) -> integer -- return number of occurrences of value'\n        return sum(1 for v in self if v is value or v == value)\n\nSequence.register(tuple)\nSequence.register(str)\nSequence.register(range)\nSequence.register(memoryview)\n\n\nclass ByteString(Sequence):\n\n    \"\"\"This unifies bytes and bytearray.\n\n    XXX Should add all their methods.\n    \"\"\"\n\n    __slots__ = ()\n\nByteString.register(bytes)\nByteString.register(bytearray)\n\n\nclass MutableSequence(Sequence):\n\n    __slots__ = ()\n\n    \"\"\"All the operations on a read-write sequence.\n\n    Concrete subclasses must provide __new__ or __init__,\n    __getitem__, __setitem__, __delitem__, __len__, and insert().\n\n    \"\"\"\n\n    @abstractmethod\n    def __setitem__(self, index, value):\n        raise IndexError\n\n    @abstractmethod\n    def __delitem__(self, index):\n        raise IndexError\n\n    @abstractmethod\n    def insert(self, index, value):\n        'S.insert(index, value) -- insert value before index'\n        raise IndexError\n\n    def append(self, value):\n        'S.append(value) -- append value to the end of the sequence'\n        self.insert(len(self), value)\n\n    def clear(self):\n        'S.clear() -> None -- remove all items from S'\n        try:\n            while True:\n                self.pop()\n        except IndexError:\n            pass\n\n    def reverse(self):\n        'S.reverse() -- reverse *IN PLACE*'\n        n = len(self)\n        for i in range(n//2):\n            self[i], self[n-i-1] = self[n-i-1], self[i]\n\n    def extend(self, values):\n        'S.extend(iterable) -- extend sequence by appending elements from the iterable'\n        for v in values:\n            self.append(v)\n\n    def pop(self, index=-1):\n        '''S.pop([index]) -> item -- remove and return item at index (default last).\n           Raise IndexError if list is empty or index is out of range.\n        '''\n        v = self[index]\n        del self[index]\n        return v\n\n    def remove(self, value):\n        '''S.remove(value) -- remove first occurrence of value.\n           Raise ValueError if the value is not present.\n        '''\n        del self[self.index(value)]\n\n    def __iadd__(self, values):\n        self.extend(values)\n        return self\n\nMutableSequence.register(list)\nMutableSequence.register(bytearray)  # Multiply inheriting, see ByteString\n", 1011], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/config.py": ["import errno\nimport os\nimport types\nimport typing as t\n\nfrom werkzeug.utils import import_string\n\n\nclass ConfigAttribute:\n    \"\"\"Makes an attribute forward to the config\"\"\"\n\n    def __init__(self, name: str, get_converter: t.Optional[t.Callable] = None) -> None:\n        self.__name__ = name\n        self.get_converter = get_converter\n\n    def __get__(self, obj: t.Any, owner: t.Any = None) -> t.Any:\n        if obj is None:\n            return self\n        rv = obj.config[self.__name__]\n        if self.get_converter is not None:\n            rv = self.get_converter(rv)\n        return rv\n\n    def __set__(self, obj: t.Any, value: t.Any) -> None:\n        obj.config[self.__name__] = value\n\n\nclass Config(dict):\n    \"\"\"Works exactly like a dict but provides ways to fill it from files\n    or special dictionaries.  There are two common patterns to populate the\n    config.\n\n    Either you can fill the config from a config file::\n\n        app.config.from_pyfile('yourconfig.cfg')\n\n    Or alternatively you can define the configuration options in the\n    module that calls :meth:`from_object` or provide an import path to\n    a module that should be loaded.  It is also possible to tell it to\n    use the same module and with that provide the configuration values\n    just before the call::\n\n        DEBUG = True\n        SECRET_KEY = 'development key'\n        app.config.from_object(__name__)\n\n    In both cases (loading from any Python file or loading from modules),\n    only uppercase keys are added to the config.  This makes it possible to use\n    lowercase values in the config file for temporary values that are not added\n    to the config or to define the config keys in the same file that implements\n    the application.\n\n    Probably the most interesting way to load configurations is from an\n    environment variable pointing to a file::\n\n        app.config.from_envvar('YOURAPPLICATION_SETTINGS')\n\n    In this case before launching the application you have to set this\n    environment variable to the file you want to use.  On Linux and OS X\n    use the export statement::\n\n        export YOURAPPLICATION_SETTINGS='/path/to/config/file'\n\n    On windows use `set` instead.\n\n    :param root_path: path to which files are read relative from.  When the\n                      config object is created by the application, this is\n                      the application's :attr:`~flask.Flask.root_path`.\n    :param defaults: an optional dictionary of default values\n    \"\"\"\n\n    def __init__(self, root_path: str, defaults: t.Optional[dict] = None) -> None:\n        dict.__init__(self, defaults or {})\n        self.root_path = root_path\n\n    def from_envvar(self, variable_name: str, silent: bool = False) -> bool:\n        \"\"\"Loads a configuration from an environment variable pointing to\n        a configuration file.  This is basically just a shortcut with nicer\n        error messages for this line of code::\n\n            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n\n        :param variable_name: name of the environment variable\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n        :return: ``True`` if the file was loaded successfully.\n        \"\"\"\n        rv = os.environ.get(variable_name)\n        if not rv:\n            if silent:\n                return False\n            raise RuntimeError(\n                f\"The environment variable {variable_name!r} is not set\"\n                \" and as such configuration could not be loaded. Set\"\n                \" this variable and make it point to a configuration\"\n                \" file\"\n            )\n        return self.from_pyfile(rv, silent=silent)\n\n    def from_pyfile(self, filename: str, silent: bool = False) -> bool:\n        \"\"\"Updates the values in the config from a Python file.  This function\n        behaves as if the file was imported as module with the\n        :meth:`from_object` function.\n\n        :param filename: the filename of the config.  This can either be an\n                         absolute filename or a filename relative to the\n                         root path.\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 0.7\n           `silent` parameter.\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        d = types.ModuleType(\"config\")\n        d.__file__ = filename\n        try:\n            with open(filename, mode=\"rb\") as config_file:\n                exec(compile(config_file.read(), filename, \"exec\"), d.__dict__)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):\n                return False\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n        self.from_object(d)\n        return True\n\n    def from_object(self, obj: t.Union[object, str]) -> None:\n        \"\"\"Updates the values from the given object.  An object can be of one\n        of the following two types:\n\n        -   a string: in this case the object with that name will be imported\n        -   an actual object reference: that object is used directly\n\n        Objects are usually either modules or classes. :meth:`from_object`\n        loads only the uppercase attributes of the module/class. A ``dict``\n        object will not work with :meth:`from_object` because the keys of a\n        ``dict`` are not attributes of the ``dict`` class.\n\n        Example of module-based configuration::\n\n            app.config.from_object('yourapplication.default_config')\n            from yourapplication import default_config\n            app.config.from_object(default_config)\n\n        Nothing is done to the object before loading. If the object is a\n        class and has ``@property`` attributes, it needs to be\n        instantiated before being passed to this method.\n\n        You should not use this function to load the actual configuration but\n        rather configuration defaults.  The actual config should be loaded\n        with :meth:`from_pyfile` and ideally from a location not within the\n        package because the package might be installed system wide.\n\n        See :ref:`config-dev-prod` for an example of class-based configuration\n        using :meth:`from_object`.\n\n        :param obj: an import name or object\n        \"\"\"\n        if isinstance(obj, str):\n            obj = import_string(obj)\n        for key in dir(obj):\n            if key.isupper():\n                self[key] = getattr(obj, key)\n\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n\n    def from_json(self, filename: str, silent: bool = False) -> bool:\n        \"\"\"Update the values in the config from a JSON file. The loaded\n        data is passed to the :meth:`from_mapping` method.\n\n        :param filename: The path to the JSON file. This can be an\n            absolute path or relative to the config root path.\n        :param silent: Ignore the file if it doesn't exist.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. deprecated:: 2.0.0\n            Will be removed in Flask 2.1. Use :meth:`from_file` instead.\n            This was removed early in 2.0.0, was added back in 2.0.1.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        import warnings\n        from . import json\n\n        warnings.warn(\n            \"'from_json' is deprecated and will be removed in Flask\"\n            \" 2.1. Use 'from_file(path, json.load)' instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.from_file(filename, json.load, silent=silent)\n\n    def from_mapping(\n        self, mapping: t.Optional[t.Mapping[str, t.Any]] = None, **kwargs: t.Any\n    ) -> bool:\n        \"\"\"Updates the config like :meth:`update` ignoring items with non-upper\n        keys.\n        :return: Always returns ``True``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        mappings: t.Dict[str, t.Any] = {}\n        if mapping is not None:\n            mappings.update(mapping)\n        mappings.update(kwargs)\n        for key, value in mappings.items():\n            if key.isupper():\n                self[key] = value\n        return True\n\n    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n    ) -> t.Dict[str, t.Any]:\n        \"\"\"Returns a dictionary containing a subset of configuration options\n        that match the specified namespace/prefix. Example usage::\n\n            app.config['IMAGE_STORE_TYPE'] = 'fs'\n            app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n            image_store_config = app.config.get_namespace('IMAGE_STORE_')\n\n        The resulting dictionary `image_store_config` would look like::\n\n            {\n                'type': 'fs',\n                'path': '/var/app/images',\n                'base_url': 'http://img.website.com'\n            }\n\n        This is often useful when configuration options map directly to\n        keyword arguments in functions or class constructors.\n\n        :param namespace: a configuration namespace\n        :param lowercase: a flag indicating if the keys of the resulting\n                          dictionary should be lowercase\n        :param trim_namespace: a flag indicating if the keys of the resulting\n                          dictionary should not include the namespace\n\n        .. versionadded:: 0.11\n        \"\"\"\n        rv = {}\n        for k, v in self.items():\n            if not k.startswith(namespace):\n                continue\n            if trim_namespace:\n                key = k[len(namespace) :]\n            else:\n                key = k\n            if lowercase:\n                key = key.lower()\n            rv[key] = v\n        return rv\n\n    def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {dict.__repr__(self)}>\"\n", 295], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/datastructures.py": ["import base64\nimport codecs\nimport mimetypes\nimport re\nimport warnings\nfrom collections.abc import Collection\nfrom collections.abc import MutableSet\nfrom copy import deepcopy\nfrom io import BytesIO\nfrom itertools import repeat\nfrom os import fspath\n\nfrom . import exceptions\nfrom ._internal import _make_encode_wrapper\nfrom ._internal import _missing\nfrom .filesystem import get_filesystem_encoding\n\n\ndef is_immutable(self):\n    raise TypeError(f\"{type(self).__name__!r} objects are immutable\")\n\n\ndef iter_multi_items(mapping):\n    \"\"\"Iterates over the items of a mapping yielding keys and values\n    without dropping any from more complex structures.\n    \"\"\"\n    if isinstance(mapping, MultiDict):\n        yield from mapping.items(multi=True)\n    elif isinstance(mapping, dict):\n        for key, value in mapping.items():\n            if isinstance(value, (tuple, list)):\n                for v in value:\n                    yield key, v\n            else:\n                yield key, value\n    else:\n        yield from mapping\n\n\nclass ImmutableListMixin:\n    \"\"\"Makes a :class:`list` immutable.\n\n    .. versionadded:: 0.5\n\n    :private:\n    \"\"\"\n\n    _hash_cache = None\n\n    def __hash__(self):\n        if self._hash_cache is not None:\n            return self._hash_cache\n        rv = self._hash_cache = hash(tuple(self))\n        return rv\n\n    def __reduce_ex__(self, protocol):\n        return type(self), (list(self),)\n\n    def __delitem__(self, key):\n        is_immutable(self)\n\n    def __iadd__(self, other):\n        is_immutable(self)\n\n    def __imul__(self, other):\n        is_immutable(self)\n\n    def __setitem__(self, key, value):\n        is_immutable(self)\n\n    def append(self, item):\n        is_immutable(self)\n\n    def remove(self, item):\n        is_immutable(self)\n\n    def extend(self, iterable):\n        is_immutable(self)\n\n    def insert(self, pos, value):\n        is_immutable(self)\n\n    def pop(self, index=-1):\n        is_immutable(self)\n\n    def reverse(self):\n        is_immutable(self)\n\n    def sort(self, key=None, reverse=False):\n        is_immutable(self)\n\n\nclass ImmutableList(ImmutableListMixin, list):\n    \"\"\"An immutable :class:`list`.\n\n    .. versionadded:: 0.5\n\n    :private:\n    \"\"\"\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({list.__repr__(self)})\"\n\n\nclass ImmutableDictMixin:\n    \"\"\"Makes a :class:`dict` immutable.\n\n    .. versionadded:: 0.5\n\n    :private:\n    \"\"\"\n\n    _hash_cache = None\n\n    @classmethod\n    def fromkeys(cls, keys, value=None):\n        instance = super().__new__(cls)\n        instance.__init__(zip(keys, repeat(value)))\n        return instance\n\n    def __reduce_ex__(self, protocol):\n        return type(self), (dict(self),)\n\n    def _iter_hashitems(self):\n        return self.items()\n\n    def __hash__(self):\n        if self._hash_cache is not None:\n            return self._hash_cache\n        rv = self._hash_cache = hash(frozenset(self._iter_hashitems()))\n        return rv\n\n    def setdefault(self, key, default=None):\n        is_immutable(self)\n\n    def update(self, *args, **kwargs):\n        is_immutable(self)\n\n    def pop(self, key, default=None):\n        is_immutable(self)\n\n    def popitem(self):\n        is_immutable(self)\n\n    def __setitem__(self, key, value):\n        is_immutable(self)\n\n    def __delitem__(self, key):\n        is_immutable(self)\n\n    def clear(self):\n        is_immutable(self)\n\n\nclass ImmutableMultiDictMixin(ImmutableDictMixin):\n    \"\"\"Makes a :class:`MultiDict` immutable.\n\n    .. versionadded:: 0.5\n\n    :private:\n    \"\"\"\n\n    def __reduce_ex__(self, protocol):\n        return type(self), (list(self.items(multi=True)),)\n\n    def _iter_hashitems(self):\n        return self.items(multi=True)\n\n    def add(self, key, value):\n        is_immutable(self)\n\n    def popitemlist(self):\n        is_immutable(self)\n\n    def poplist(self, key):\n        is_immutable(self)\n\n    def setlist(self, key, new_list):\n        is_immutable(self)\n\n    def setlistdefault(self, key, default_list=None):\n        is_immutable(self)\n\n\ndef _calls_update(name):\n    def oncall(self, *args, **kw):\n        rv = getattr(super(UpdateDictMixin, self), name)(*args, **kw)\n\n        if self.on_update is not None:\n            self.on_update(self)\n\n        return rv\n\n    oncall.__name__ = name\n    return oncall\n\n\nclass UpdateDictMixin(dict):\n    \"\"\"Makes dicts call `self.on_update` on modifications.\n\n    .. versionadded:: 0.5\n\n    :private:\n    \"\"\"\n\n    on_update = None\n\n    def setdefault(self, key, default=None):\n        modified = key not in self\n        rv = super().setdefault(key, default)\n        if modified and self.on_update is not None:\n            self.on_update(self)\n        return rv\n\n    def pop(self, key, default=_missing):\n        modified = key in self\n        if default is _missing:\n            rv = super().pop(key)\n        else:\n            rv = super().pop(key, default)\n        if modified and self.on_update is not None:\n            self.on_update(self)\n        return rv\n\n    __setitem__ = _calls_update(\"__setitem__\")\n    __delitem__ = _calls_update(\"__delitem__\")\n    clear = _calls_update(\"clear\")\n    popitem = _calls_update(\"popitem\")\n    update = _calls_update(\"update\")\n\n\nclass TypeConversionDict(dict):\n    \"\"\"Works like a regular dict but the :meth:`get` method can perform\n    type conversions.  :class:`MultiDict` and :class:`CombinedMultiDict`\n    are subclasses of this class and provide the same feature.\n\n    .. versionadded:: 0.5\n    \"\"\"\n\n    def get(self, key, default=None, type=None):\n        \"\"\"Return the default value if the requested data doesn't exist.\n        If `type` is provided and is a callable it should convert the value,\n        return it or raise a :exc:`ValueError` if that is not possible.  In\n        this case the function will return the default as if the value was not\n        found:\n\n        >>> d = TypeConversionDict(foo='42', bar='blub')\n        >>> d.get('foo', type=int)\n        42\n        >>> d.get('bar', -1, type=int)\n        -1\n\n        :param key: The key to be looked up.\n        :param default: The default value to be returned if the key can't\n                        be looked up.  If not further specified `None` is\n                        returned.\n        :param type: A callable that is used to cast the value in the\n                     :class:`MultiDict`.  If a :exc:`ValueError` is raised\n                     by this callable the default value is returned.\n        \"\"\"\n        try:\n            rv = self[key]\n        except KeyError:\n            return default\n        if type is not None:\n            try:\n                rv = type(rv)\n            except ValueError:\n                rv = default\n        return rv\n\n\nclass ImmutableTypeConversionDict(ImmutableDictMixin, TypeConversionDict):\n    \"\"\"Works like a :class:`TypeConversionDict` but does not support\n    modifications.\n\n    .. versionadded:: 0.5\n    \"\"\"\n\n    def copy(self):\n        \"\"\"Return a shallow mutable copy of this object.  Keep in mind that\n        the standard library's :func:`copy` function is a no-op for this class\n        like for any other python immutable type (eg: :class:`tuple`).\n        \"\"\"\n        return TypeConversionDict(self)\n\n    def __copy__(self):\n        return self\n\n\nclass MultiDict(TypeConversionDict):\n    \"\"\"A :class:`MultiDict` is a dictionary subclass customized to deal with\n    multiple values for the same key which is for example used by the parsing\n    functions in the wrappers.  This is necessary because some HTML form\n    elements pass multiple values for the same key.\n\n    :class:`MultiDict` implements all standard dictionary methods.\n    Internally, it saves all values for a key as a list, but the standard dict\n    access methods will only return the first value for a key. If you want to\n    gain access to the other values, too, you have to use the `list` methods as\n    explained below.\n\n    Basic Usage:\n\n    >>> d = MultiDict([('a', 'b'), ('a', 'c')])\n    >>> d\n    MultiDict([('a', 'b'), ('a', 'c')])\n    >>> d['a']\n    'b'\n    >>> d.getlist('a')\n    ['b', 'c']\n    >>> 'a' in d\n    True\n\n    It behaves like a normal dict thus all dict functions will only return the\n    first value when multiple values for one key are found.\n\n    From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a\n    subclass of the :exc:`~exceptions.BadRequest` HTTP exception and will\n    render a page for a ``400 BAD REQUEST`` if caught in a catch-all for HTTP\n    exceptions.\n\n    A :class:`MultiDict` can be constructed from an iterable of\n    ``(key, value)`` tuples, a dict, a :class:`MultiDict` or from Werkzeug 0.2\n    onwards some keyword parameters.\n\n    :param mapping: the initial value for the :class:`MultiDict`.  Either a\n                    regular dict, an iterable of ``(key, value)`` tuples\n                    or `None`.\n    \"\"\"\n\n    def __init__(self, mapping=None):\n        if isinstance(mapping, MultiDict):\n            dict.__init__(self, ((k, l[:]) for k, l in mapping.lists()))\n        elif isinstance(mapping, dict):\n            tmp = {}\n            for key, value in mapping.items():\n                if isinstance(value, (tuple, list)):\n                    if len(value) == 0:\n                        continue\n                    value = list(value)\n                else:\n                    value = [value]\n                tmp[key] = value\n            dict.__init__(self, tmp)\n        else:\n            tmp = {}\n            for key, value in mapping or ():\n                tmp.setdefault(key, []).append(value)\n            dict.__init__(self, tmp)\n\n    def __getstate__(self):\n        return dict(self.lists())\n\n    def __setstate__(self, value):\n        dict.clear(self)\n        dict.update(self, value)\n\n    def __iter__(self):\n        # Work around https://bugs.python.org/issue43246.\n        # (`return super().__iter__()` also works here, which makes this look\n        # even more like it should be a no-op, yet it isn't.)\n        return dict.__iter__(self)\n\n    def __getitem__(self, key):\n        \"\"\"Return the first data value for this key;\n        raises KeyError if not found.\n\n        :param key: The key to be looked up.\n        :raise KeyError: if the key does not exist.\n        \"\"\"\n\n        if key in self:\n            lst = dict.__getitem__(self, key)\n            if len(lst) > 0:\n                return lst[0]\n        raise exceptions.BadRequestKeyError(key)\n\n    def __setitem__(self, key, value):\n        \"\"\"Like :meth:`add` but removes an existing key first.\n\n        :param key: the key for the value.\n        :param value: the value to set.\n        \"\"\"\n        dict.__setitem__(self, key, [value])\n\n    def add(self, key, value):\n        \"\"\"Adds a new value for the key.\n\n        .. versionadded:: 0.6\n\n        :param key: the key for the value.\n        :param value: the value to add.\n        \"\"\"\n        dict.setdefault(self, key, []).append(value)\n\n    def getlist(self, key, type=None):\n        \"\"\"Return the list of items for a given key. If that key is not in the\n        `MultiDict`, the return value will be an empty list.  Just like `get`,\n        `getlist` accepts a `type` parameter.  All items will be converted\n        with the callable defined there.\n\n        :param key: The key to be looked up.\n        :param type: A callable that is used to cast the value in the\n                     :class:`MultiDict`.  If a :exc:`ValueError` is raised\n                     by this callable the value will be removed from the list.\n        :return: a :class:`list` of all the values for the key.\n        \"\"\"\n        try:\n            rv = dict.__getitem__(self, key)\n        except KeyError:\n            return []\n        if type is None:\n            return list(rv)\n        result = []\n        for item in rv:\n            try:\n                result.append(type(item))\n            except ValueError:\n                pass\n        return result\n\n    def setlist(self, key, new_list):\n        \"\"\"Remove the old values for a key and add new ones.  Note that the list\n        you pass the values in will be shallow-copied before it is inserted in\n        the dictionary.\n\n        >>> d = MultiDict()\n        >>> d.setlist('foo', ['1', '2'])\n        >>> d['foo']\n        '1'\n        >>> d.getlist('foo')\n        ['1', '2']\n\n        :param key: The key for which the values are set.\n        :param new_list: An iterable with the new values for the key.  Old values\n                         are removed first.\n        \"\"\"\n        dict.__setitem__(self, key, list(new_list))\n\n    def setdefault(self, key, default=None):\n        \"\"\"Returns the value for the key if it is in the dict, otherwise it\n        returns `default` and sets that value for `key`.\n\n        :param key: The key to be looked up.\n        :param default: The default value to be returned if the key is not\n                        in the dict.  If not further specified it's `None`.\n        \"\"\"\n        if key not in self:\n            self[key] = default\n        else:\n            default = self[key]\n        return default\n\n    def setlistdefault(self, key, default_list=None):\n        \"\"\"Like `setdefault` but sets multiple values.  The list returned\n        is not a copy, but the list that is actually used internally.  This\n        means that you can put new values into the dict by appending items\n        to the list:\n\n        >>> d = MultiDict({\"foo\": 1})\n        >>> d.setlistdefault(\"foo\").extend([2, 3])\n        >>> d.getlist(\"foo\")\n        [1, 2, 3]\n\n        :param key: The key to be looked up.\n        :param default_list: An iterable of default values.  It is either copied\n                             (in case it was a list) or converted into a list\n                             before returned.\n        :return: a :class:`list`\n        \"\"\"\n        if key not in self:\n            default_list = list(default_list or ())\n            dict.__setitem__(self, key, default_list)\n        else:\n            default_list = dict.__getitem__(self, key)\n        return default_list\n\n    def items(self, multi=False):\n        \"\"\"Return an iterator of ``(key, value)`` pairs.\n\n        :param multi: If set to `True` the iterator returned will have a pair\n                      for each value of each key.  Otherwise it will only\n                      contain pairs for the first value of each key.\n        \"\"\"\n        for key, values in dict.items(self):\n            if multi:\n                for value in values:\n                    yield key, value\n            else:\n                yield key, values[0]\n\n    def lists(self):\n        \"\"\"Return a iterator of ``(key, values)`` pairs, where values is the list\n        of all values associated with the key.\"\"\"\n        for key, values in dict.items(self):\n            yield key, list(values)\n\n    def values(self):\n        \"\"\"Returns an iterator of the first value on every key's value list.\"\"\"\n        for values in dict.values(self):\n            yield values[0]\n\n    def listvalues(self):\n        \"\"\"Return an iterator of all values associated with a key.  Zipping\n        :meth:`keys` and this is the same as calling :meth:`lists`:\n\n        >>> d = MultiDict({\"foo\": [1, 2, 3]})\n        >>> zip(d.keys(), d.listvalues()) == d.lists()\n        True\n        \"\"\"\n        return dict.values(self)\n\n    def copy(self):\n        \"\"\"Return a shallow copy of this object.\"\"\"\n        return self.__class__(self)\n\n    def deepcopy(self, memo=None):\n        \"\"\"Return a deep copy of this object.\"\"\"\n        return self.__class__(deepcopy(self.to_dict(flat=False), memo))\n\n    def to_dict(self, flat=True):\n        \"\"\"Return the contents as regular dict.  If `flat` is `True` the\n        returned dict will only have the first item present, if `flat` is\n        `False` all values will be returned as lists.\n\n        :param flat: If set to `False` the dict returned will have lists\n                     with all the values in it.  Otherwise it will only\n                     contain the first value for each key.\n        :return: a :class:`dict`\n        \"\"\"\n        if flat:\n            return dict(self.items())\n        return dict(self.lists())\n\n    def update(self, mapping):\n        \"\"\"update() extends rather than replaces existing key lists:\n\n        >>> a = MultiDict({'x': 1})\n        >>> b = MultiDict({'x': 2, 'y': 3})\n        >>> a.update(b)\n        >>> a\n        MultiDict([('y', 3), ('x', 1), ('x', 2)])\n\n        If the value list for a key in ``other_dict`` is empty, no new values\n        will be added to the dict and the key will not be created:\n\n        >>> x = {'empty_list': []}\n        >>> y = MultiDict()\n        >>> y.update(x)\n        >>> y\n        MultiDict([])\n        \"\"\"\n        for key, value in iter_multi_items(mapping):\n            MultiDict.add(self, key, value)\n\n    def pop(self, key, default=_missing):\n        \"\"\"Pop the first item for a list on the dict.  Afterwards the\n        key is removed from the dict, so additional values are discarded:\n\n        >>> d = MultiDict({\"foo\": [1, 2, 3]})\n        >>> d.pop(\"foo\")\n        1\n        >>> \"foo\" in d\n        False\n\n        :param key: the key to pop.\n        :param default: if provided the value to return if the key was\n                        not in the dictionary.\n        \"\"\"\n        try:\n            lst = dict.pop(self, key)\n\n            if len(lst) == 0:\n                raise exceptions.BadRequestKeyError(key)\n\n            return lst[0]\n        except KeyError:\n            if default is not _missing:\n                return default\n\n            raise exceptions.BadRequestKeyError(key) from None\n\n    def popitem(self):\n        \"\"\"Pop an item from the dict.\"\"\"\n        try:\n            item = dict.popitem(self)\n\n            if len(item[1]) == 0:\n                raise exceptions.BadRequestKeyError(item[0])\n\n            return (item[0], item[1][0])\n        except KeyError as e:\n            raise exceptions.BadRequestKeyError(e.args[0]) from None\n\n    def poplist(self, key):\n        \"\"\"Pop the list for a key from the dict.  If the key is not in the dict\n        an empty list is returned.\n\n        .. versionchanged:: 0.5\n           If the key does no longer exist a list is returned instead of\n           raising an error.\n        \"\"\"\n        return dict.pop(self, key, [])\n\n    def popitemlist(self):\n        \"\"\"Pop a ``(key, list)`` tuple from the dict.\"\"\"\n        try:\n            return dict.popitem(self)\n        except KeyError as e:\n            raise exceptions.BadRequestKeyError(e.args[0]) from None\n\n    def __copy__(self):\n        return self.copy()\n\n    def __deepcopy__(self, memo):\n        return self.deepcopy(memo=memo)\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({list(self.items(multi=True))!r})\"\n\n\nclass _omd_bucket:\n    \"\"\"Wraps values in the :class:`OrderedMultiDict`.  This makes it\n    possible to keep an order over multiple different keys.  It requires\n    a lot of extra memory and slows down access a lot, but makes it\n    possible to access elements in O(1) and iterate in O(n).\n    \"\"\"\n\n    __slots__ = (\"prev\", \"key\", \"value\", \"next\")\n\n    def __init__(self, omd, key, value):\n        self.prev = omd._last_bucket\n        self.key = key\n        self.value = value\n        self.next = None\n\n        if omd._first_bucket is None:\n            omd._first_bucket = self\n        if omd._last_bucket is not None:\n            omd._last_bucket.next = self\n        omd._last_bucket = self\n\n    def unlink(self, omd):\n        if self.prev:\n            self.prev.next = self.next\n        if self.next:\n            self.next.prev = self.prev\n        if omd._first_bucket is self:\n            omd._first_bucket = self.next\n        if omd._last_bucket is self:\n            omd._last_bucket = self.prev\n\n\nclass OrderedMultiDict(MultiDict):\n    \"\"\"Works like a regular :class:`MultiDict` but preserves the\n    order of the fields.  To convert the ordered multi dict into a\n    list you can use the :meth:`items` method and pass it ``multi=True``.\n\n    In general an :class:`OrderedMultiDict` is an order of magnitude\n    slower than a :class:`MultiDict`.\n\n    .. admonition:: note\n\n       Due to a limitation in Python you cannot convert an ordered\n       multi dict into a regular dict by using ``dict(multidict)``.\n       Instead you have to use the :meth:`to_dict` method, otherwise\n       the internal bucket objects are exposed.\n    \"\"\"\n\n    def __init__(self, mapping=None):\n        dict.__init__(self)\n        self._first_bucket = self._last_bucket = None\n        if mapping is not None:\n            OrderedMultiDict.update(self, mapping)\n\n    def __eq__(self, other):\n        if not isinstance(other, MultiDict):\n            return NotImplemented\n        if isinstance(other, OrderedMultiDict):\n            iter1 = iter(self.items(multi=True))\n            iter2 = iter(other.items(multi=True))\n            try:\n                for k1, v1 in iter1:\n                    k2, v2 = next(iter2)\n                    if k1 != k2 or v1 != v2:\n                        return False\n            except StopIteration:\n                return False\n            try:\n                next(iter2)\n            except StopIteration:\n                return True\n            return False\n        if len(self) != len(other):\n            return False\n        for key, values in self.lists():\n            if other.getlist(key) != values:\n                return False\n        return True\n\n    __hash__ = None\n\n    def __reduce_ex__(self, protocol):\n        return type(self), (list(self.items(multi=True)),)\n\n    def __getstate__(self):\n        return list(self.items(multi=True))\n\n    def __setstate__(self, values):\n        dict.clear(self)\n        for key, value in values:\n            self.add(key, value)\n\n    def __getitem__(self, key):\n        if key in self:\n            return dict.__getitem__(self, key)[0].value\n        raise exceptions.BadRequestKeyError(key)\n\n    def __setitem__(self, key, value):\n        self.poplist(key)\n        self.add(key, value)\n\n    def __delitem__(self, key):\n        self.pop(key)\n\n    def keys(self):\n        return (key for key, value in self.items())\n\n    def __iter__(self):\n        return iter(self.keys())\n\n    def values(self):\n        return (value for key, value in self.items())\n\n    def items(self, multi=False):\n        ptr = self._first_bucket\n        if multi:\n            while ptr is not None:\n                yield ptr.key, ptr.value\n                ptr = ptr.next\n        else:\n            returned_keys = set()\n            while ptr is not None:\n                if ptr.key not in returned_keys:\n                    returned_keys.add(ptr.key)\n                    yield ptr.key, ptr.value\n                ptr = ptr.next\n\n    def lists(self):\n        returned_keys = set()\n        ptr = self._first_bucket\n        while ptr is not None:\n            if ptr.key not in returned_keys:\n                yield ptr.key, self.getlist(ptr.key)\n                returned_keys.add(ptr.key)\n            ptr = ptr.next\n\n    def listvalues(self):\n        for _key, values in self.lists():\n            yield values\n\n    def add(self, key, value):\n        dict.setdefault(self, key, []).append(_omd_bucket(self, key, value))\n\n    def getlist(self, key, type=None):\n        try:\n            rv = dict.__getitem__(self, key)\n        except KeyError:\n            return []\n        if type is None:\n            return [x.value for x in rv]\n        result = []\n        for item in rv:\n            try:\n                result.append(type(item.value))\n            except ValueError:\n                pass\n        return result\n\n    def setlist(self, key, new_list):\n        self.poplist(key)\n        for value in new_list:\n            self.add(key, value)\n\n    def setlistdefault(self, key, default_list=None):\n        raise TypeError(\"setlistdefault is unsupported for ordered multi dicts\")\n\n    def update(self, mapping):\n        for key, value in iter_multi_items(mapping):\n            OrderedMultiDict.add(self, key, value)\n\n    def poplist(self, key):\n        buckets = dict.pop(self, key, ())\n        for bucket in buckets:\n            bucket.unlink(self)\n        return [x.value for x in buckets]\n\n    def pop(self, key, default=_missing):\n        try:\n            buckets = dict.pop(self, key)\n        except KeyError:\n            if default is not _missing:\n                return default\n\n            raise exceptions.BadRequestKeyError(key) from None\n\n        for bucket in buckets:\n            bucket.unlink(self)\n\n        return buckets[0].value\n\n    def popitem(self):\n        try:\n            key, buckets = dict.popitem(self)\n        except KeyError as e:\n            raise exceptions.BadRequestKeyError(e.args[0]) from None\n\n        for bucket in buckets:\n            bucket.unlink(self)\n\n        return key, buckets[0].value\n\n    def popitemlist(self):\n        try:\n            key, buckets = dict.popitem(self)\n        except KeyError as e:\n            raise exceptions.BadRequestKeyError(e.args[0]) from None\n\n        for bucket in buckets:\n            bucket.unlink(self)\n\n        return key, [x.value for x in buckets]\n\n\ndef _options_header_vkw(value, kw):\n    return http.dump_options_header(\n        value, {k.replace(\"_\", \"-\"): v for k, v in kw.items()}\n    )\n\n\ndef _unicodify_header_value(value):\n    if isinstance(value, bytes):\n        value = value.decode(\"latin-1\")\n    if not isinstance(value, str):\n        value = str(value)\n    return value\n\n\nclass Headers:\n    \"\"\"An object that stores some headers. It has a dict-like interface,\n    but is ordered, can store the same key multiple times, and iterating\n    yields ``(key, value)`` pairs instead of only keys.\n\n    This data structure is useful if you want a nicer way to handle WSGI\n    headers which are stored as tuples in a list.\n\n    From Werkzeug 0.3 onwards, the :exc:`KeyError` raised by this class is\n    also a subclass of the :class:`~exceptions.BadRequest` HTTP exception\n    and will render a page for a ``400 BAD REQUEST`` if caught in a\n    catch-all for HTTP exceptions.\n\n    Headers is mostly compatible with the Python :class:`wsgiref.headers.Headers`\n    class, with the exception of `__getitem__`.  :mod:`wsgiref` will return\n    `None` for ``headers['missing']``, whereas :class:`Headers` will raise\n    a :class:`KeyError`.\n\n    To create a new :class:`Headers` object pass it a list or dict of headers\n    which are used as default values.  This does not reuse the list passed\n    to the constructor for internal usage.\n\n    :param defaults: The list of default values for the :class:`Headers`.\n\n    .. versionchanged:: 0.9\n       This data structure now stores unicode values similar to how the\n       multi dicts do it.  The main difference is that bytes can be set as\n       well which will automatically be latin1 decoded.\n\n    .. versionchanged:: 0.9\n       The :meth:`linked` function was removed without replacement as it\n       was an API that does not support the changes to the encoding model.\n    \"\"\"\n\n    def __init__(self, defaults=None):\n        self._list = []\n        if defaults is not None:\n            if isinstance(defaults, (list, Headers)):\n                self._list.extend(defaults)\n            else:\n                self.extend(defaults)\n\n    def __getitem__(self, key, _get_mode=False):\n        if not _get_mode:\n            if isinstance(key, int):\n                return self._list[key]\n            elif isinstance(key, slice):\n                return self.__class__(self._list[key])\n        if not isinstance(key, str):\n            raise exceptions.BadRequestKeyError(key)\n        ikey = key.lower()\n        for k, v in self._list:\n            if k.lower() == ikey:\n                return v\n        # micro optimization: if we are in get mode we will catch that\n        # exception one stack level down so we can raise a standard\n        # key error instead of our special one.\n        if _get_mode:\n            raise KeyError()\n        raise exceptions.BadRequestKeyError(key)\n\n    def __eq__(self, other):\n        def lowered(item):\n            return (item[0].lower(),) + item[1:]\n\n        return other.__class__ is self.__class__ and set(\n            map(lowered, other._list)\n        ) == set(map(lowered, self._list))\n\n    __hash__ = None\n\n    def get(self, key, default=None, type=None, as_bytes=False):\n        \"\"\"Return the default value if the requested data doesn't exist.\n        If `type` is provided and is a callable it should convert the value,\n        return it or raise a :exc:`ValueError` if that is not possible.  In\n        this case the function will return the default as if the value was not\n        found:\n\n        >>> d = Headers([('Content-Length', '42')])\n        >>> d.get('Content-Length', type=int)\n        42\n\n        .. versionadded:: 0.9\n           Added support for `as_bytes`.\n\n        :param key: The key to be looked up.\n        :param default: The default value to be returned if the key can't\n                        be looked up.  If not further specified `None` is\n                        returned.\n        :param type: A callable that is used to cast the value in the\n                     :class:`Headers`.  If a :exc:`ValueError` is raised\n                     by this callable the default value is returned.\n        :param as_bytes: return bytes instead of strings.\n        \"\"\"\n        try:\n            rv = self.__getitem__(key, _get_mode=True)\n        except KeyError:\n            return default\n        if as_bytes:\n            rv = rv.encode(\"latin1\")\n        if type is None:\n            return rv\n        try:\n            return type(rv)\n        except ValueError:\n            return default\n\n    def getlist(self, key, type=None, as_bytes=False):\n        \"\"\"Return the list of items for a given key. If that key is not in the\n        :class:`Headers`, the return value will be an empty list.  Just like\n        :meth:`get`, :meth:`getlist` accepts a `type` parameter.  All items will\n        be converted with the callable defined there.\n\n        .. versionadded:: 0.9\n           Added support for `as_bytes`.\n\n        :param key: The key to be looked up.\n        :param type: A callable that is used to cast the value in the\n                     :class:`Headers`.  If a :exc:`ValueError` is raised\n                     by this callable the value will be removed from the list.\n        :return: a :class:`list` of all the values for the key.\n        :param as_bytes: return bytes instead of strings.\n        \"\"\"\n        ikey = key.lower()\n        result = []\n        for k, v in self:\n            if k.lower() == ikey:\n                if as_bytes:\n                    v = v.encode(\"latin1\")\n                if type is not None:\n                    try:\n                        v = type(v)\n                    except ValueError:\n                        continue\n                result.append(v)\n        return result\n\n    def get_all(self, name):\n        \"\"\"Return a list of all the values for the named field.\n\n        This method is compatible with the :mod:`wsgiref`\n        :meth:`~wsgiref.headers.Headers.get_all` method.\n        \"\"\"\n        return self.getlist(name)\n\n    def items(self, lower=False):\n        for key, value in self:\n            if lower:\n                key = key.lower()\n            yield key, value\n\n    def keys(self, lower=False):\n        for key, _ in self.items(lower):\n            yield key\n\n    def values(self):\n        for _, value in self.items():\n            yield value\n\n    def extend(self, *args, **kwargs):\n        \"\"\"Extend headers in this object with items from another object\n        containing header items as well as keyword arguments.\n\n        To replace existing keys instead of extending, use\n        :meth:`update` instead.\n\n        If provided, the first argument can be another :class:`Headers`\n        object, a :class:`MultiDict`, :class:`dict`, or iterable of\n        pairs.\n\n        .. versionchanged:: 1.0\n            Support :class:`MultiDict`. Allow passing ``kwargs``.\n        \"\"\"\n        if len(args) > 1:\n            raise TypeError(f\"update expected at most 1 arguments, got {len(args)}\")\n\n        if args:\n            for key, value in iter_multi_items(args[0]):\n                self.add(key, value)\n\n        for key, value in iter_multi_items(kwargs):\n            self.add(key, value)\n\n    def __delitem__(self, key, _index_operation=True):\n        if _index_operation and isinstance(key, (int, slice)):\n            del self._list[key]\n            return\n        key = key.lower()\n        new = []\n        for k, v in self._list:\n            if k.lower() != key:\n                new.append((k, v))\n        self._list[:] = new\n\n    def remove(self, key):\n        \"\"\"Remove a key.\n\n        :param key: The key to be removed.\n        \"\"\"\n        return self.__delitem__(key, _index_operation=False)\n\n    def pop(self, key=None, default=_missing):\n        \"\"\"Removes and returns a key or index.\n\n        :param key: The key to be popped.  If this is an integer the item at\n                    that position is removed, if it's a string the value for\n                    that key is.  If the key is omitted or `None` the last\n                    item is removed.\n        :return: an item.\n        \"\"\"\n        if key is None:\n            return self._list.pop()\n        if isinstance(key, int):\n            return self._list.pop(key)\n        try:\n            rv = self[key]\n            self.remove(key)\n        except KeyError:\n            if default is not _missing:\n                return default\n            raise\n        return rv\n\n    def popitem(self):\n        \"\"\"Removes a key or index and returns a (key, value) item.\"\"\"\n        return self.pop()\n\n    def __contains__(self, key):\n        \"\"\"Check if a key is present.\"\"\"\n        try:\n            self.__getitem__(key, _get_mode=True)\n        except KeyError:\n            return False\n        return True\n\n    def has_key(self, key):\n        \"\"\"\n        .. deprecated:: 2.0\n            Will be removed in Werkzeug 2.1. Use ``key in data``\n            instead.\n        \"\"\"\n        warnings.warn(\n            \"'has_key' is deprecated and will be removed in Werkzeug\"\n            \" 2.1. Use 'key in data' instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return key in self\n\n    def __iter__(self):\n        \"\"\"Yield ``(key, value)`` tuples.\"\"\"\n        return iter(self._list)\n\n    def __len__(self):\n        return len(self._list)\n\n    def add(self, _key, _value, **kw):\n        \"\"\"Add a new header tuple to the list.\n\n        Keyword arguments can specify additional parameters for the header\n        value, with underscores converted to dashes::\n\n        >>> d = Headers()\n        >>> d.add('Content-Type', 'text/plain')\n        >>> d.add('Content-Disposition', 'attachment', filename='foo.png')\n\n        The keyword argument dumping uses :func:`dump_options_header`\n        behind the scenes.\n\n        .. versionadded:: 0.4.1\n            keyword arguments were added for :mod:`wsgiref` compatibility.\n        \"\"\"\n        if kw:\n            _value = _options_header_vkw(_value, kw)\n        _key = _unicodify_header_value(_key)\n        _value = _unicodify_header_value(_value)\n        self._validate_value(_value)\n        self._list.append((_key, _value))\n\n    def _validate_value(self, value):\n        if not isinstance(value, str):\n            raise TypeError(\"Value should be a string.\")\n        if \"\\n\" in value or \"\\r\" in value:\n            raise ValueError(\n                \"Detected newline in header value.  This is \"\n                \"a potential security problem\"\n            )\n\n    def add_header(self, _key, _value, **_kw):\n        \"\"\"Add a new header tuple to the list.\n\n        An alias for :meth:`add` for compatibility with the :mod:`wsgiref`\n        :meth:`~wsgiref.headers.Headers.add_header` method.\n        \"\"\"\n        self.add(_key, _value, **_kw)\n\n    def clear(self):\n        \"\"\"Clears all headers.\"\"\"\n        del self._list[:]\n\n    def set(self, _key, _value, **kw):\n        \"\"\"Remove all header tuples for `key` and add a new one.  The newly\n        added key either appears at the end of the list if there was no\n        entry or replaces the first one.\n\n        Keyword arguments can specify additional parameters for the header\n        value, with underscores converted to dashes.  See :meth:`add` for\n        more information.\n\n        .. versionchanged:: 0.6.1\n           :meth:`set` now accepts the same arguments as :meth:`add`.\n\n        :param key: The key to be inserted.\n        :param value: The value to be inserted.\n        \"\"\"\n        if kw:\n            _value = _options_header_vkw(_value, kw)\n        _key = _unicodify_header_value(_key)\n        _value = _unicodify_header_value(_value)\n        self._validate_value(_value)\n        if not self._list:\n            self._list.append((_key, _value))\n            return\n        listiter = iter(self._list)\n        ikey = _key.lower()\n        for idx, (old_key, _old_value) in enumerate(listiter):\n            if old_key.lower() == ikey:\n                # replace first occurrence\n                self._list[idx] = (_key, _value)\n                break\n        else:\n            self._list.append((_key, _value))\n            return\n        self._list[idx + 1 :] = [t for t in listiter if t[0].lower() != ikey]\n\n    def setlist(self, key, values):\n        \"\"\"Remove any existing values for a header and add new ones.\n\n        :param key: The header key to set.\n        :param values: An iterable of values to set for the key.\n\n        .. versionadded:: 1.0\n        \"\"\"\n        if values:\n            values_iter = iter(values)\n            self.set(key, next(values_iter))\n\n            for value in values_iter:\n                self.add(key, value)\n        else:\n            self.remove(key)\n\n    def setdefault(self, key, default):\n        \"\"\"Return the first value for the key if it is in the headers,\n        otherwise set the header to the value given by ``default`` and\n        return that.\n\n        :param key: The header key to get.\n        :param default: The value to set for the key if it is not in the\n            headers.\n        \"\"\"\n        if key in self:\n            return self[key]\n\n        self.set(key, default)\n        return default\n\n    def setlistdefault(self, key, default):\n        \"\"\"Return the list of values for the key if it is in the\n        headers, otherwise set the header to the list of values given\n        by ``default`` and return that.\n\n        Unlike :meth:`MultiDict.setlistdefault`, modifying the returned\n        list will not affect the headers.\n\n        :param key: The header key to get.\n        :param default: An iterable of values to set for the key if it\n            is not in the headers.\n\n        .. versionadded:: 1.0\n        \"\"\"\n        if key not in self:\n            self.setlist(key, default)\n\n        return self.getlist(key)\n\n    def __setitem__(self, key, value):\n        \"\"\"Like :meth:`set` but also supports index/slice based setting.\"\"\"\n        if isinstance(key, (slice, int)):\n            if isinstance(key, int):\n                value = [value]\n            value = [\n                (_unicodify_header_value(k), _unicodify_header_value(v))\n                for (k, v) in value\n            ]\n            for (_, v) in value:\n                self._validate_value(v)\n            if isinstance(key, int):\n                self._list[key] = value[0]\n            else:\n                self._list[key] = value\n        else:\n            self.set(key, value)\n\n    def update(self, *args, **kwargs):\n        \"\"\"Replace headers in this object with items from another\n        headers object and keyword arguments.\n\n        To extend existing keys instead of replacing, use :meth:`extend`\n        instead.\n\n        If provided, the first argument can be another :class:`Headers`\n        object, a :class:`MultiDict`, :class:`dict`, or iterable of\n        pairs.\n\n        .. versionadded:: 1.0\n        \"\"\"\n        if len(args) > 1:\n            raise TypeError(f\"update expected at most 1 arguments, got {len(args)}\")\n\n        if args:\n            mapping = args[0]\n\n            if isinstance(mapping, (Headers, MultiDict)):\n                for key in mapping.keys():\n                    self.setlist(key, mapping.getlist(key))\n            elif isinstance(mapping, dict):\n                for key, value in mapping.items():\n                    if isinstance(value, (list, tuple)):\n                        self.setlist(key, value)\n                    else:\n                        self.set(key, value)\n            else:\n                for key, value in mapping:\n                    self.set(key, value)\n\n        for key, value in kwargs.items():\n            if isinstance(value, (list, tuple)):\n                self.setlist(key, value)\n            else:\n                self.set(key, value)\n\n    def to_wsgi_list(self):\n        \"\"\"Convert the headers into a list suitable for WSGI.\n\n        :return: list\n        \"\"\"\n        return list(self)\n\n    def copy(self):\n        return self.__class__(self._list)\n\n    def __copy__(self):\n        return self.copy()\n\n    def __str__(self):\n        \"\"\"Returns formatted headers suitable for HTTP transmission.\"\"\"\n        strs = []\n        for key, value in self.to_wsgi_list():\n            strs.append(f\"{key}: {value}\")\n        strs.append(\"\\r\\n\")\n        return \"\\r\\n\".join(strs)\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({list(self)!r})\"\n\n\nclass ImmutableHeadersMixin:\n    \"\"\"Makes a :class:`Headers` immutable.  We do not mark them as\n    hashable though since the only usecase for this datastructure\n    in Werkzeug is a view on a mutable structure.\n\n    .. versionadded:: 0.5\n\n    :private:\n    \"\"\"\n\n    def __delitem__(self, key, **kwargs):\n        is_immutable(self)\n\n    def __setitem__(self, key, value):\n        is_immutable(self)\n\n    def set(self, _key, _value, **kw):\n        is_immutable(self)\n\n    def setlist(self, key, values):\n        is_immutable(self)\n\n    def add(self, _key, _value, **kw):\n        is_immutable(self)\n\n    def add_header(self, _key, _value, **_kw):\n        is_immutable(self)\n\n    def remove(self, key):\n        is_immutable(self)\n\n    def extend(self, *args, **kwargs):\n        is_immutable(self)\n\n    def update(self, *args, **kwargs):\n        is_immutable(self)\n\n    def insert(self, pos, value):\n        is_immutable(self)\n\n    def pop(self, key=None, default=_missing):\n        is_immutable(self)\n\n    def popitem(self):\n        is_immutable(self)\n\n    def setdefault(self, key, default):\n        is_immutable(self)\n\n    def setlistdefault(self, key, default):\n        is_immutable(self)\n\n\nclass EnvironHeaders(ImmutableHeadersMixin, Headers):\n    \"\"\"Read only version of the headers from a WSGI environment.  This\n    provides the same interface as `Headers` and is constructed from\n    a WSGI environment.\n\n    From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a\n    subclass of the :exc:`~exceptions.BadRequest` HTTP exception and will\n    render a page for a ``400 BAD REQUEST`` if caught in a catch-all for\n    HTTP exceptions.\n    \"\"\"\n\n    def __init__(self, environ):\n        self.environ = environ\n\n    def __eq__(self, other):\n        return self.environ is other.environ\n\n    __hash__ = None\n\n    def __getitem__(self, key, _get_mode=False):\n        # _get_mode is a no-op for this class as there is no index but\n        # used because get() calls it.\n        if not isinstance(key, str):\n            raise KeyError(key)\n        key = key.upper().replace(\"-\", \"_\")\n        if key in (\"CONTENT_TYPE\", \"CONTENT_LENGTH\"):\n            return _unicodify_header_value(self.environ[key])\n        return _unicodify_header_value(self.environ[f\"HTTP_{key}\"])\n\n    def __len__(self):\n        # the iter is necessary because otherwise list calls our\n        # len which would call list again and so forth.\n        return len(list(iter(self)))\n\n    def __iter__(self):\n        for key, value in self.environ.items():\n            if key.startswith(\"HTTP_\") and key not in (\n                \"HTTP_CONTENT_TYPE\",\n                \"HTTP_CONTENT_LENGTH\",\n            ):\n                yield (\n                    key[5:].replace(\"_\", \"-\").title(),\n                    _unicodify_header_value(value),\n                )\n            elif key in (\"CONTENT_TYPE\", \"CONTENT_LENGTH\") and value:\n                yield (key.replace(\"_\", \"-\").title(), _unicodify_header_value(value))\n\n    def copy(self):\n        raise TypeError(f\"cannot create {type(self).__name__!r} copies\")\n\n\nclass CombinedMultiDict(ImmutableMultiDictMixin, MultiDict):\n    \"\"\"A read only :class:`MultiDict` that you can pass multiple :class:`MultiDict`\n    instances as sequence and it will combine the return values of all wrapped\n    dicts:\n\n    >>> from werkzeug.datastructures import CombinedMultiDict, MultiDict\n    >>> post = MultiDict([('foo', 'bar')])\n    >>> get = MultiDict([('blub', 'blah')])\n    >>> combined = CombinedMultiDict([get, post])\n    >>> combined['foo']\n    'bar'\n    >>> combined['blub']\n    'blah'\n\n    This works for all read operations and will raise a `TypeError` for\n    methods that usually change data which isn't possible.\n\n    From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a\n    subclass of the :exc:`~exceptions.BadRequest` HTTP exception and will\n    render a page for a ``400 BAD REQUEST`` if caught in a catch-all for HTTP\n    exceptions.\n    \"\"\"\n\n    def __reduce_ex__(self, protocol):\n        return type(self), (self.dicts,)\n\n    def __init__(self, dicts=None):\n        self.dicts = list(dicts) or []\n\n    @classmethod\n    def fromkeys(cls, keys, value=None):\n        raise TypeError(f\"cannot create {cls.__name__!r} instances by fromkeys\")\n\n    def __getitem__(self, key):\n        for d in self.dicts:\n            if key in d:\n                return d[key]\n        raise exceptions.BadRequestKeyError(key)\n\n    def get(self, key, default=None, type=None):\n        for d in self.dicts:\n            if key in d:\n                if type is not None:\n                    try:\n                        return type(d[key])\n                    except ValueError:\n                        continue\n                return d[key]\n        return default\n\n    def getlist(self, key, type=None):\n        rv = []\n        for d in self.dicts:\n            rv.extend(d.getlist(key, type))\n        return rv\n\n    def _keys_impl(self):\n        \"\"\"This function exists so __len__ can be implemented more efficiently,\n        saving one list creation from an iterator.\n        \"\"\"\n        rv = set()\n        rv.update(*self.dicts)\n        return rv\n\n    def keys(self):\n        return self._keys_impl()\n\n    def __iter__(self):\n        return iter(self.keys())\n\n    def items(self, multi=False):\n        found = set()\n        for d in self.dicts:\n            for key, value in d.items(multi):\n                if multi:\n                    yield key, value\n                elif key not in found:\n                    found.add(key)\n                    yield key, value\n\n    def values(self):\n        for _key, value in self.items():\n            yield value\n\n    def lists(self):\n        rv = {}\n        for d in self.dicts:\n            for key, values in d.lists():\n                rv.setdefault(key, []).extend(values)\n        return list(rv.items())\n\n    def listvalues(self):\n        return (x[1] for x in self.lists())\n\n    def copy(self):\n        \"\"\"Return a shallow mutable copy of this object.\n\n        This returns a :class:`MultiDict` representing the data at the\n        time of copying. The copy will no longer reflect changes to the\n        wrapped dicts.\n\n        .. versionchanged:: 0.15\n            Return a mutable :class:`MultiDict`.\n        \"\"\"\n        return MultiDict(self)\n\n    def to_dict(self, flat=True):\n        \"\"\"Return the contents as regular dict.  If `flat` is `True` the\n        returned dict will only have the first item present, if `flat` is\n        `False` all values will be returned as lists.\n\n        :param flat: If set to `False` the dict returned will have lists\n                     with all the values in it.  Otherwise it will only\n                     contain the first item for each key.\n        :return: a :class:`dict`\n        \"\"\"\n        if flat:\n            return dict(self.items())\n\n        return dict(self.lists())\n\n    def __len__(self):\n        return len(self._keys_impl())\n\n    def __contains__(self, key):\n        for d in self.dicts:\n            if key in d:\n                return True\n        return False\n\n    def has_key(self, key):\n        \"\"\"\n        .. deprecated:: 2.0\n            Will be removed in Werkzeug 2.1. Use ``key in data``\n            instead.\n        \"\"\"\n        warnings.warn(\n            \"'has_key' is deprecated and will be removed in Werkzeug\"\n            \" 2.1. Use 'key in data' instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return key in self\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({self.dicts!r})\"\n\n\nclass FileMultiDict(MultiDict):\n    \"\"\"A special :class:`MultiDict` that has convenience methods to add\n    files to it.  This is used for :class:`EnvironBuilder` and generally\n    useful for unittesting.\n\n    .. versionadded:: 0.5\n    \"\"\"\n\n    def add_file(self, name, file, filename=None, content_type=None):\n        \"\"\"Adds a new file to the dict.  `file` can be a file name or\n        a :class:`file`-like or a :class:`FileStorage` object.\n\n        :param name: the name of the field.\n        :param file: a filename or :class:`file`-like object\n        :param filename: an optional filename\n        :param content_type: an optional content type\n        \"\"\"\n        if isinstance(file, FileStorage):\n            value = file\n        else:\n            if isinstance(file, str):\n                if filename is None:\n                    filename = file\n                file = open(file, \"rb\")\n            if filename and content_type is None:\n                content_type = (\n                    mimetypes.guess_type(filename)[0] or \"application/octet-stream\"\n                )\n            value = FileStorage(file, filename, name, content_type)\n\n        self.add(name, value)\n\n\nclass ImmutableDict(ImmutableDictMixin, dict):\n    \"\"\"An immutable :class:`dict`.\n\n    .. versionadded:: 0.5\n    \"\"\"\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({dict.__repr__(self)})\"\n\n    def copy(self):\n        \"\"\"Return a shallow mutable copy of this object.  Keep in mind that\n        the standard library's :func:`copy` function is a no-op for this class\n        like for any other python immutable type (eg: :class:`tuple`).\n        \"\"\"\n        return dict(self)\n\n    def __copy__(self):\n        return self\n\n\nclass ImmutableMultiDict(ImmutableMultiDictMixin, MultiDict):\n    \"\"\"An immutable :class:`MultiDict`.\n\n    .. versionadded:: 0.5\n    \"\"\"\n\n    def copy(self):\n        \"\"\"Return a shallow mutable copy of this object.  Keep in mind that\n        the standard library's :func:`copy` function is a no-op for this class\n        like for any other python immutable type (eg: :class:`tuple`).\n        \"\"\"\n        return MultiDict(self)\n\n    def __copy__(self):\n        return self\n\n\nclass ImmutableOrderedMultiDict(ImmutableMultiDictMixin, OrderedMultiDict):\n    \"\"\"An immutable :class:`OrderedMultiDict`.\n\n    .. versionadded:: 0.6\n    \"\"\"\n\n    def _iter_hashitems(self):\n        return enumerate(self.items(multi=True))\n\n    def copy(self):\n        \"\"\"Return a shallow mutable copy of this object.  Keep in mind that\n        the standard library's :func:`copy` function is a no-op for this class\n        like for any other python immutable type (eg: :class:`tuple`).\n        \"\"\"\n        return OrderedMultiDict(self)\n\n    def __copy__(self):\n        return self\n\n\nclass Accept(ImmutableList):\n    \"\"\"An :class:`Accept` object is just a list subclass for lists of\n    ``(value, quality)`` tuples.  It is automatically sorted by specificity\n    and quality.\n\n    All :class:`Accept` objects work similar to a list but provide extra\n    functionality for working with the data.  Containment checks are\n    normalized to the rules of that header:\n\n    >>> a = CharsetAccept([('ISO-8859-1', 1), ('utf-8', 0.7)])\n    >>> a.best\n    'ISO-8859-1'\n    >>> 'iso-8859-1' in a\n    True\n    >>> 'UTF8' in a\n    True\n    >>> 'utf7' in a\n    False\n\n    To get the quality for an item you can use normal item lookup:\n\n    >>> print a['utf-8']\n    0.7\n    >>> a['utf7']\n    0\n\n    .. versionchanged:: 0.5\n       :class:`Accept` objects are forced immutable now.\n\n    .. versionchanged:: 1.0.0\n       :class:`Accept` internal values are no longer ordered\n       alphabetically for equal quality tags. Instead the initial\n       order is preserved.\n\n    \"\"\"\n\n    def __init__(self, values=()):\n        if values is None:\n            list.__init__(self)\n            self.provided = False\n        elif isinstance(values, Accept):\n            self.provided = values.provided\n            list.__init__(self, values)\n        else:\n            self.provided = True\n            values = sorted(\n                values, key=lambda x: (self._specificity(x[0]), x[1]), reverse=True\n            )\n            list.__init__(self, values)\n\n    def _specificity(self, value):\n        \"\"\"Returns a tuple describing the value's specificity.\"\"\"\n        return (value != \"*\",)\n\n    def _value_matches(self, value, item):\n        \"\"\"Check if a value matches a given accept item.\"\"\"\n        return item == \"*\" or item.lower() == value.lower()\n\n    def __getitem__(self, key):\n        \"\"\"Besides index lookup (getting item n) you can also pass it a string\n        to get the quality for the item.  If the item is not in the list, the\n        returned quality is ``0``.\n        \"\"\"\n        if isinstance(key, str):\n            return self.quality(key)\n        return list.__getitem__(self, key)\n\n    def quality(self, key):\n        \"\"\"Returns the quality of the key.\n\n        .. versionadded:: 0.6\n           In previous versions you had to use the item-lookup syntax\n           (eg: ``obj[key]`` instead of ``obj.quality(key)``)\n        \"\"\"\n        for item, quality in self:\n            if self._value_matches(key, item):\n                return quality\n        return 0\n\n    def __contains__(self, value):\n        for item, _quality in self:\n            if self._value_matches(value, item):\n                return True\n        return False\n\n    def __repr__(self):\n        pairs_str = \", \".join(f\"({x!r}, {y})\" for x, y in self)\n        return f\"{type(self).__name__}([{pairs_str}])\"\n\n    def index(self, key):\n        \"\"\"Get the position of an entry or raise :exc:`ValueError`.\n\n        :param key: The key to be looked up.\n\n        .. versionchanged:: 0.5\n           This used to raise :exc:`IndexError`, which was inconsistent\n           with the list API.\n        \"\"\"\n        if isinstance(key, str):\n            for idx, (item, _quality) in enumerate(self):\n                if self._value_matches(key, item):\n                    return idx\n            raise ValueError(key)\n        return list.index(self, key)\n\n    def find(self, key):\n        \"\"\"Get the position of an entry or return -1.\n\n        :param key: The key to be looked up.\n        \"\"\"\n        try:\n            return self.index(key)\n        except ValueError:\n            return -1\n\n    def values(self):\n        \"\"\"Iterate over all values.\"\"\"\n        for item in self:\n            yield item[0]\n\n    def to_header(self):\n        \"\"\"Convert the header set into an HTTP header string.\"\"\"\n        result = []\n        for value, quality in self:\n            if quality != 1:\n                value = f\"{value};q={quality}\"\n            result.append(value)\n        return \",\".join(result)\n\n    def __str__(self):\n        return self.to_header()\n\n    def _best_single_match(self, match):\n        for client_item, quality in self:\n            if self._value_matches(match, client_item):\n                # self is sorted by specificity descending, we can exit\n                return client_item, quality\n        return None\n\n    def best_match(self, matches, default=None):\n        \"\"\"Returns the best match from a list of possible matches based\n        on the specificity and quality of the client. If two items have the\n        same quality and specificity, the one is returned that comes first.\n\n        :param matches: a list of matches to check for\n        :param default: the value that is returned if none match\n        \"\"\"\n        result = default\n        best_quality = -1\n        best_specificity = (-1,)\n        for server_item in matches:\n            match = self._best_single_match(server_item)\n            if not match:\n                continue\n            client_item, quality = match\n            specificity = self._specificity(client_item)\n            if quality <= 0 or quality < best_quality:\n                continue\n            # better quality or same quality but more specific => better match\n            if quality > best_quality or specificity > best_specificity:\n                result = server_item\n                best_quality = quality\n                best_specificity = specificity\n        return result\n\n    @property\n    def best(self):\n        \"\"\"The best match as value.\"\"\"\n        if self:\n            return self[0][0]\n\n\n_mime_split_re = re.compile(r\"/|(?:\\s*;\\s*)\")\n\n\ndef _normalize_mime(value):\n    return _mime_split_re.split(value.lower())\n\n\nclass MIMEAccept(Accept):\n    \"\"\"Like :class:`Accept` but with special methods and behavior for\n    mimetypes.\n    \"\"\"\n\n    def _specificity(self, value):\n        return tuple(x != \"*\" for x in _mime_split_re.split(value))\n\n    def _value_matches(self, value, item):\n        # item comes from the client, can't match if it's invalid.\n        if \"/\" not in item:\n            return False\n\n        # value comes from the application, tell the developer when it\n        # doesn't look valid.\n        if \"/\" not in value:\n            raise ValueError(f\"invalid mimetype {value!r}\")\n\n        # Split the match value into type, subtype, and a sorted list of parameters.\n        normalized_value = _normalize_mime(value)\n        value_type, value_subtype = normalized_value[:2]\n        value_params = sorted(normalized_value[2:])\n\n        # \"*/*\" is the only valid value that can start with \"*\".\n        if value_type == \"*\" and value_subtype != \"*\":\n            raise ValueError(f\"invalid mimetype {value!r}\")\n\n        # Split the accept item into type, subtype, and parameters.\n        normalized_item = _normalize_mime(item)\n        item_type, item_subtype = normalized_item[:2]\n        item_params = sorted(normalized_item[2:])\n\n        # \"*/not-*\" from the client is invalid, can't match.\n        if item_type == \"*\" and item_subtype != \"*\":\n            return False\n\n        return (\n            (item_type == \"*\" and item_subtype == \"*\")\n            or (value_type == \"*\" and value_subtype == \"*\")\n        ) or (\n            item_type == value_type\n            and (\n                item_subtype == \"*\"\n                or value_subtype == \"*\"\n                or (item_subtype == value_subtype and item_params == value_params)\n            )\n        )\n\n    @property\n    def accept_html(self):\n        \"\"\"True if this object accepts HTML.\"\"\"\n        return (\n            \"text/html\" in self or \"application/xhtml+xml\" in self or self.accept_xhtml\n        )\n\n    @property\n    def accept_xhtml(self):\n        \"\"\"True if this object accepts XHTML.\"\"\"\n        return \"application/xhtml+xml\" in self or \"application/xml\" in self\n\n    @property\n    def accept_json(self):\n        \"\"\"True if this object accepts JSON.\"\"\"\n        return \"application/json\" in self\n\n\n_locale_delim_re = re.compile(r\"[_-]\")\n\n\ndef _normalize_lang(value):\n    \"\"\"Process a language tag for matching.\"\"\"\n    return _locale_delim_re.split(value.lower())\n\n\nclass LanguageAccept(Accept):\n    \"\"\"Like :class:`Accept` but with normalization for language tags.\"\"\"\n\n    def _value_matches(self, value, item):\n        return item == \"*\" or _normalize_lang(value) == _normalize_lang(item)\n\n    def best_match(self, matches, default=None):\n        \"\"\"Given a list of supported values, finds the best match from\n        the list of accepted values.\n\n        Language tags are normalized for the purpose of matching, but\n        are returned unchanged.\n\n        If no exact match is found, this will fall back to matching\n        the first subtag (primary language only), first with the\n        accepted values then with the match values. This partial is not\n        applied to any other language subtags.\n\n        The default is returned if no exact or fallback match is found.\n\n        :param matches: A list of supported languages to find a match.\n        :param default: The value that is returned if none match.\n        \"\"\"\n        # Look for an exact match first. If a client accepts \"en-US\",\n        # \"en-US\" is a valid match at this point.\n        result = super().best_match(matches)\n\n        if result is not None:\n            return result\n\n        # Fall back to accepting primary tags. If a client accepts\n        # \"en-US\", \"en\" is a valid match at this point. Need to use\n        # re.split to account for 2 or 3 letter codes.\n        fallback = Accept(\n            [(_locale_delim_re.split(item[0], 1)[0], item[1]) for item in self]\n        )\n        result = fallback.best_match(matches)\n\n        if result is not None:\n            return result\n\n        # Fall back to matching primary tags. If the client accepts\n        # \"en\", \"en-US\" is a valid match at this point.\n        fallback_matches = [_locale_delim_re.split(item, 1)[0] for item in matches]\n        result = super().best_match(fallback_matches)\n\n        # Return a value from the original match list. Find the first\n        # original value that starts with the matched primary tag.\n        if result is not None:\n            return next(item for item in matches if item.startswith(result))\n\n        return default\n\n\nclass CharsetAccept(Accept):\n    \"\"\"Like :class:`Accept` but with normalization for charsets.\"\"\"\n\n    def _value_matches(self, value, item):\n        def _normalize(name):\n            try:\n                return codecs.lookup(name).name\n            except LookupError:\n                return name.lower()\n\n        return item == \"*\" or _normalize(value) == _normalize(item)\n\n\ndef cache_control_property(key, empty, type):\n    \"\"\"Return a new property object for a cache header. Useful if you\n    want to add support for a cache extension in a subclass.\n\n    .. versionchanged:: 2.0\n        Renamed from ``cache_property``.\n    \"\"\"\n    return property(\n        lambda x: x._get_cache_value(key, empty, type),\n        lambda x, v: x._set_cache_value(key, v, type),\n        lambda x: x._del_cache_value(key),\n        f\"accessor for {key!r}\",\n    )\n\n\ndef cache_property(key, empty, type):\n    warnings.warn(\n        \"'cache_property' is renamed to 'cache_control_property'. The\"\n        \" old name is deprecated and will be removed in Werkzeug 2.1.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return cache_control_property(key, empty, type)\n\n\nclass _CacheControl(UpdateDictMixin, dict):\n    \"\"\"Subclass of a dict that stores values for a Cache-Control header.  It\n    has accessors for all the cache-control directives specified in RFC 2616.\n    The class does not differentiate between request and response directives.\n\n    Because the cache-control directives in the HTTP header use dashes the\n    python descriptors use underscores for that.\n\n    To get a header of the :class:`CacheControl` object again you can convert\n    the object into a string or call the :meth:`to_header` method.  If you plan\n    to subclass it and add your own items have a look at the sourcecode for\n    that class.\n\n    .. versionchanged:: 0.4\n\n       Setting `no_cache` or `private` to boolean `True` will set the implicit\n       none-value which is ``*``:\n\n       >>> cc = ResponseCacheControl()\n       >>> cc.no_cache = True\n       >>> cc\n       <ResponseCacheControl 'no-cache'>\n       >>> cc.no_cache\n       '*'\n       >>> cc.no_cache = None\n       >>> cc\n       <ResponseCacheControl ''>\n\n       In versions before 0.5 the behavior documented here affected the now\n       no longer existing `CacheControl` class.\n    \"\"\"\n\n    no_cache = cache_control_property(\"no-cache\", \"*\", None)\n    no_store = cache_control_property(\"no-store\", None, bool)\n    max_age = cache_control_property(\"max-age\", -1, int)\n    no_transform = cache_control_property(\"no-transform\", None, None)\n\n    def __init__(self, values=(), on_update=None):\n        dict.__init__(self, values or ())\n        self.on_update = on_update\n        self.provided = values is not None\n\n    def _get_cache_value(self, key, empty, type):\n        \"\"\"Used internally by the accessor properties.\"\"\"\n        if type is bool:\n            return key in self\n        if key in self:\n            value = self[key]\n            if value is None:\n                return empty\n            elif type is not None:\n                try:\n                    value = type(value)\n                except ValueError:\n                    pass\n            return value\n        return None\n\n    def _set_cache_value(self, key, value, type):\n        \"\"\"Used internally by the accessor properties.\"\"\"\n        if type is bool:\n            if value:\n                self[key] = None\n            else:\n                self.pop(key, None)\n        else:\n            if value is None:\n                self.pop(key, None)\n            elif value is True:\n                self[key] = None\n            else:\n                self[key] = value\n\n    def _del_cache_value(self, key):\n        \"\"\"Used internally by the accessor properties.\"\"\"\n        if key in self:\n            del self[key]\n\n    def to_header(self):\n        \"\"\"Convert the stored values into a cache control header.\"\"\"\n        return http.dump_header(self)\n\n    def __str__(self):\n        return self.to_header()\n\n    def __repr__(self):\n        kv_str = \" \".join(f\"{k}={v!r}\" for k, v in sorted(self.items()))\n        return f\"<{type(self).__name__} {kv_str}>\"\n\n    cache_property = staticmethod(cache_control_property)\n\n\nclass RequestCacheControl(ImmutableDictMixin, _CacheControl):\n    \"\"\"A cache control for requests.  This is immutable and gives access\n    to all the request-relevant cache control headers.\n\n    To get a header of the :class:`RequestCacheControl` object again you can\n    convert the object into a string or call the :meth:`to_header` method.  If\n    you plan to subclass it and add your own items have a look at the sourcecode\n    for that class.\n\n    .. versionadded:: 0.5\n       In previous versions a `CacheControl` class existed that was used\n       both for request and response.\n    \"\"\"\n\n    max_stale = cache_control_property(\"max-stale\", \"*\", int)\n    min_fresh = cache_control_property(\"min-fresh\", \"*\", int)\n    only_if_cached = cache_control_property(\"only-if-cached\", None, bool)\n\n\nclass ResponseCacheControl(_CacheControl):\n    \"\"\"A cache control for responses.  Unlike :class:`RequestCacheControl`\n    this is mutable and gives access to response-relevant cache control\n    headers.\n\n    To get a header of the :class:`ResponseCacheControl` object again you can\n    convert the object into a string or call the :meth:`to_header` method.  If\n    you plan to subclass it and add your own items have a look at the sourcecode\n    for that class.\n\n    .. versionadded:: 0.5\n       In previous versions a `CacheControl` class existed that was used\n       both for request and response.\n    \"\"\"\n\n    public = cache_control_property(\"public\", None, bool)\n    private = cache_control_property(\"private\", \"*\", None)\n    must_revalidate = cache_control_property(\"must-revalidate\", None, bool)\n    proxy_revalidate = cache_control_property(\"proxy-revalidate\", None, bool)\n    s_maxage = cache_control_property(\"s-maxage\", None, None)\n    immutable = cache_control_property(\"immutable\", None, bool)\n\n\ndef csp_property(key):\n    \"\"\"Return a new property object for a content security policy header.\n    Useful if you want to add support for a csp extension in a\n    subclass.\n    \"\"\"\n    return property(\n        lambda x: x._get_value(key),\n        lambda x, v: x._set_value(key, v),\n        lambda x: x._del_value(key),\n        f\"accessor for {key!r}\",\n    )\n\n\nclass ContentSecurityPolicy(UpdateDictMixin, dict):\n    \"\"\"Subclass of a dict that stores values for a Content Security Policy\n    header. It has accessors for all the level 3 policies.\n\n    Because the csp directives in the HTTP header use dashes the\n    python descriptors use underscores for that.\n\n    To get a header of the :class:`ContentSecuirtyPolicy` object again\n    you can convert the object into a string or call the\n    :meth:`to_header` method.  If you plan to subclass it and add your\n    own items have a look at the sourcecode for that class.\n\n    .. versionadded:: 1.0.0\n       Support for Content Security Policy headers was added.\n\n    \"\"\"\n\n    base_uri = csp_property(\"base-uri\")\n    child_src = csp_property(\"child-src\")\n    connect_src = csp_property(\"connect-src\")\n    default_src = csp_property(\"default-src\")\n    font_src = csp_property(\"font-src\")\n    form_action = csp_property(\"form-action\")\n    frame_ancestors = csp_property(\"frame-ancestors\")\n    frame_src = csp_property(\"frame-src\")\n    img_src = csp_property(\"img-src\")\n    manifest_src = csp_property(\"manifest-src\")\n    media_src = csp_property(\"media-src\")\n    navigate_to = csp_property(\"navigate-to\")\n    object_src = csp_property(\"object-src\")\n    prefetch_src = csp_property(\"prefetch-src\")\n    plugin_types = csp_property(\"plugin-types\")\n    report_to = csp_property(\"report-to\")\n    report_uri = csp_property(\"report-uri\")\n    sandbox = csp_property(\"sandbox\")\n    script_src = csp_property(\"script-src\")\n    script_src_attr = csp_property(\"script-src-attr\")\n    script_src_elem = csp_property(\"script-src-elem\")\n    style_src = csp_property(\"style-src\")\n    style_src_attr = csp_property(\"style-src-attr\")\n    style_src_elem = csp_property(\"style-src-elem\")\n    worker_src = csp_property(\"worker-src\")\n\n    def __init__(self, values=(), on_update=None):\n        dict.__init__(self, values or ())\n        self.on_update = on_update\n        self.provided = values is not None\n\n    def _get_value(self, key):\n        \"\"\"Used internally by the accessor properties.\"\"\"\n        return self.get(key)\n\n    def _set_value(self, key, value):\n        \"\"\"Used internally by the accessor properties.\"\"\"\n        if value is None:\n            self.pop(key, None)\n        else:\n            self[key] = value\n\n    def _del_value(self, key):\n        \"\"\"Used internally by the accessor properties.\"\"\"\n        if key in self:\n            del self[key]\n\n    def to_header(self):\n        \"\"\"Convert the stored values into a cache control header.\"\"\"\n        return http.dump_csp_header(self)\n\n    def __str__(self):\n        return self.to_header()\n\n    def __repr__(self):\n        kv_str = \" \".join(f\"{k}={v!r}\" for k, v in sorted(self.items()))\n        return f\"<{type(self).__name__} {kv_str}>\"\n\n\nclass CallbackDict(UpdateDictMixin, dict):\n    \"\"\"A dict that calls a function passed every time something is changed.\n    The function is passed the dict instance.\n    \"\"\"\n\n    def __init__(self, initial=None, on_update=None):\n        dict.__init__(self, initial or ())\n        self.on_update = on_update\n\n    def __repr__(self):\n        return f\"<{type(self).__name__} {dict.__repr__(self)}>\"\n\n\nclass HeaderSet(MutableSet):\n    \"\"\"Similar to the :class:`ETags` class this implements a set-like structure.\n    Unlike :class:`ETags` this is case insensitive and used for vary, allow, and\n    content-language headers.\n\n    If not constructed using the :func:`parse_set_header` function the\n    instantiation works like this:\n\n    >>> hs = HeaderSet(['foo', 'bar', 'baz'])\n    >>> hs\n    HeaderSet(['foo', 'bar', 'baz'])\n    \"\"\"\n\n    def __init__(self, headers=None, on_update=None):\n        self._headers = list(headers or ())\n        self._set = {x.lower() for x in self._headers}\n        self.on_update = on_update\n\n    def add(self, header):\n        \"\"\"Add a new header to the set.\"\"\"\n        self.update((header,))\n\n    def remove(self, header):\n        \"\"\"Remove a header from the set.  This raises an :exc:`KeyError` if the\n        header is not in the set.\n\n        .. versionchanged:: 0.5\n            In older versions a :exc:`IndexError` was raised instead of a\n            :exc:`KeyError` if the object was missing.\n\n        :param header: the header to be removed.\n        \"\"\"\n        key = header.lower()\n        if key not in self._set:\n            raise KeyError(header)\n        self._set.remove(key)\n        for idx, key in enumerate(self._headers):\n            if key.lower() == header:\n                del self._headers[idx]\n                break\n        if self.on_update is not None:\n            self.on_update(self)\n\n    def update(self, iterable):\n        \"\"\"Add all the headers from the iterable to the set.\n\n        :param iterable: updates the set with the items from the iterable.\n        \"\"\"\n        inserted_any = False\n        for header in iterable:\n            key = header.lower()\n            if key not in self._set:\n                self._headers.append(header)\n                self._set.add(key)\n                inserted_any = True\n        if inserted_any and self.on_update is not None:\n            self.on_update(self)\n\n    def discard(self, header):\n        \"\"\"Like :meth:`remove` but ignores errors.\n\n        :param header: the header to be discarded.\n        \"\"\"\n        try:\n            self.remove(header)\n        except KeyError:\n            pass\n\n    def find(self, header):\n        \"\"\"Return the index of the header in the set or return -1 if not found.\n\n        :param header: the header to be looked up.\n        \"\"\"\n        header = header.lower()\n        for idx, item in enumerate(self._headers):\n            if item.lower() == header:\n                return idx\n        return -1\n\n    def index(self, header):\n        \"\"\"Return the index of the header in the set or raise an\n        :exc:`IndexError`.\n\n        :param header: the header to be looked up.\n        \"\"\"\n        rv = self.find(header)\n        if rv < 0:\n            raise IndexError(header)\n        return rv\n\n    def clear(self):\n        \"\"\"Clear the set.\"\"\"\n        self._set.clear()\n        del self._headers[:]\n        if self.on_update is not None:\n            self.on_update(self)\n\n    def as_set(self, preserve_casing=False):\n        \"\"\"Return the set as real python set type.  When calling this, all\n        the items are converted to lowercase and the ordering is lost.\n\n        :param preserve_casing: if set to `True` the items in the set returned\n                                will have the original case like in the\n                                :class:`HeaderSet`, otherwise they will\n                                be lowercase.\n        \"\"\"\n        if preserve_casing:\n            return set(self._headers)\n        return set(self._set)\n\n    def to_header(self):\n        \"\"\"Convert the header set into an HTTP header string.\"\"\"\n        return \", \".join(map(http.quote_header_value, self._headers))\n\n    def __getitem__(self, idx):\n        return self._headers[idx]\n\n    def __delitem__(self, idx):\n        rv = self._headers.pop(idx)\n        self._set.remove(rv.lower())\n        if self.on_update is not None:\n            self.on_update(self)\n\n    def __setitem__(self, idx, value):\n        old = self._headers[idx]\n        self._set.remove(old.lower())\n        self._headers[idx] = value\n        self._set.add(value.lower())\n        if self.on_update is not None:\n            self.on_update(self)\n\n    def __contains__(self, header):\n        return header.lower() in self._set\n\n    def __len__(self):\n        return len(self._set)\n\n    def __iter__(self):\n        return iter(self._headers)\n\n    def __bool__(self):\n        return bool(self._set)\n\n    def __str__(self):\n        return self.to_header()\n\n    def __repr__(self):\n        return f\"{type(self).__name__}({self._headers!r})\"\n\n\nclass ETags(Collection):\n    \"\"\"A set that can be used to check if one etag is present in a collection\n    of etags.\n    \"\"\"\n\n    def __init__(self, strong_etags=None, weak_etags=None, star_tag=False):\n        if not star_tag and strong_etags:\n            self._strong = frozenset(strong_etags)\n        else:\n            self._strong = frozenset()\n\n        self._weak = frozenset(weak_etags or ())\n        self.star_tag = star_tag\n\n    def as_set(self, include_weak=False):\n        \"\"\"Convert the `ETags` object into a python set.  Per default all the\n        weak etags are not part of this set.\"\"\"\n        rv = set(self._strong)\n        if include_weak:\n            rv.update(self._weak)\n        return rv\n\n    def is_weak(self, etag):\n        \"\"\"Check if an etag is weak.\"\"\"\n        return etag in self._weak\n\n    def is_strong(self, etag):\n        \"\"\"Check if an etag is strong.\"\"\"\n        return etag in self._strong\n\n    def contains_weak(self, etag):\n        \"\"\"Check if an etag is part of the set including weak and strong tags.\"\"\"\n        return self.is_weak(etag) or self.contains(etag)\n\n    def contains(self, etag):\n        \"\"\"Check if an etag is part of the set ignoring weak tags.\n        It is also possible to use the ``in`` operator.\n        \"\"\"\n        if self.star_tag:\n            return True\n        return self.is_strong(etag)\n\n    def contains_raw(self, etag):\n        \"\"\"When passed a quoted tag it will check if this tag is part of the\n        set.  If the tag is weak it is checked against weak and strong tags,\n        otherwise strong only.\"\"\"\n        etag, weak = http.unquote_etag(etag)\n        if weak:\n            return self.contains_weak(etag)\n        return self.contains(etag)\n\n    def to_header(self):\n        \"\"\"Convert the etags set into a HTTP header string.\"\"\"\n        if self.star_tag:\n            return \"*\"\n        return \", \".join(\n            [f'\"{x}\"' for x in self._strong] + [f'W/\"{x}\"' for x in self._weak]\n        )\n\n    def __call__(self, etag=None, data=None, include_weak=False):\n        if [etag, data].count(None) != 1:\n            raise TypeError(\"either tag or data required, but at least one\")\n        if etag is None:\n            etag = http.generate_etag(data)\n        if include_weak:\n            if etag in self._weak:\n                return True\n        return etag in self._strong\n\n    def __bool__(self):\n        return bool(self.star_tag or self._strong or self._weak)\n\n    def __str__(self):\n        return self.to_header()\n\n    def __len__(self):\n        return len(self._strong)\n\n    def __iter__(self):\n        return iter(self._strong)\n\n    def __contains__(self, etag):\n        return self.contains(etag)\n\n    def __repr__(self):\n        return f\"<{type(self).__name__} {str(self)!r}>\"\n\n\nclass IfRange:\n    \"\"\"Very simple object that represents the `If-Range` header in parsed\n    form.  It will either have neither a etag or date or one of either but\n    never both.\n\n    .. versionadded:: 0.7\n    \"\"\"\n\n    def __init__(self, etag=None, date=None):\n        #: The etag parsed and unquoted.  Ranges always operate on strong\n        #: etags so the weakness information is not necessary.\n        self.etag = etag\n        #: The date in parsed format or `None`.\n        self.date = date\n\n    def to_header(self):\n        \"\"\"Converts the object back into an HTTP header.\"\"\"\n        if self.date is not None:\n            return http.http_date(self.date)\n        if self.etag is not None:\n            return http.quote_etag(self.etag)\n        return \"\"\n\n    def __str__(self):\n        return self.to_header()\n\n    def __repr__(self):\n        return f\"<{type(self).__name__} {str(self)!r}>\"\n\n\nclass Range:\n    \"\"\"Represents a ``Range`` header. All methods only support only\n    bytes as the unit. Stores a list of ranges if given, but the methods\n    only work if only one range is provided.\n\n    :raise ValueError: If the ranges provided are invalid.\n\n    .. versionchanged:: 0.15\n        The ranges passed in are validated.\n\n    .. versionadded:: 0.7\n    \"\"\"\n\n    def __init__(self, units, ranges):\n        #: The units of this range.  Usually \"bytes\".\n        self.units = units\n        #: A list of ``(begin, end)`` tuples for the range header provided.\n        #: The ranges are non-inclusive.\n        self.ranges = ranges\n\n        for start, end in ranges:\n            if start is None or (end is not None and (start < 0 or start >= end)):\n                raise ValueError(f\"{(start, end)} is not a valid range.\")\n\n    def range_for_length(self, length):\n        \"\"\"If the range is for bytes, the length is not None and there is\n        exactly one range and it is satisfiable it returns a ``(start, stop)``\n        tuple, otherwise `None`.\n        \"\"\"\n        if self.units != \"bytes\" or length is None or len(self.ranges) != 1:\n            return None\n        start, end = self.ranges[0]\n        if end is None:\n            end = length\n            if start < 0:\n                start += length\n        if http.is_byte_range_valid(start, end, length):\n            return start, min(end, length)\n        return None\n\n    def make_content_range(self, length):\n        \"\"\"Creates a :class:`~werkzeug.datastructures.ContentRange` object\n        from the current range and given content length.\n        \"\"\"\n        rng = self.range_for_length(length)\n        if rng is not None:\n            return ContentRange(self.units, rng[0], rng[1], length)\n        return None\n\n    def to_header(self):\n        \"\"\"Converts the object back into an HTTP header.\"\"\"\n        ranges = []\n        for begin, end in self.ranges:\n            if end is None:\n                ranges.append(f\"{begin}-\" if begin >= 0 else str(begin))\n            else:\n                ranges.append(f\"{begin}-{end - 1}\")\n        return f\"{self.units}={','.join(ranges)}\"\n\n    def to_content_range_header(self, length):\n        \"\"\"Converts the object into `Content-Range` HTTP header,\n        based on given length\n        \"\"\"\n        range = self.range_for_length(length)\n        if range is not None:\n            return f\"{self.units} {range[0]}-{range[1] - 1}/{length}\"\n        return None\n\n    def __str__(self):\n        return self.to_header()\n\n    def __repr__(self):\n        return f\"<{type(self).__name__} {str(self)!r}>\"\n\n\ndef _callback_property(name):\n    def fget(self):\n        return getattr(self, name)\n\n    def fset(self, value):\n        setattr(self, name, value)\n        if self.on_update is not None:\n            self.on_update(self)\n\n    return property(fget, fset)\n\n\nclass ContentRange:\n    \"\"\"Represents the content range header.\n\n    .. versionadded:: 0.7\n    \"\"\"\n\n    def __init__(self, units, start, stop, length=None, on_update=None):\n        assert http.is_byte_range_valid(start, stop, length), \"Bad range provided\"\n        self.on_update = on_update\n        self.set(start, stop, length, units)\n\n    #: The units to use, usually \"bytes\"\n    units = _callback_property(\"_units\")\n    #: The start point of the range or `None`.\n    start = _callback_property(\"_start\")\n    #: The stop point of the range (non-inclusive) or `None`.  Can only be\n    #: `None` if also start is `None`.\n    stop = _callback_property(\"_stop\")\n    #: The length of the range or `None`.\n    length = _callback_property(\"_length\")\n\n    def set(self, start, stop, length=None, units=\"bytes\"):\n        \"\"\"Simple method to update the ranges.\"\"\"\n        assert http.is_byte_range_valid(start, stop, length), \"Bad range provided\"\n        self._units = units\n        self._start = start\n        self._stop = stop\n        self._length = length\n        if self.on_update is not None:\n            self.on_update(self)\n\n    def unset(self):\n        \"\"\"Sets the units to `None` which indicates that the header should\n        no longer be used.\n        \"\"\"\n        self.set(None, None, units=None)\n\n    def to_header(self):\n        if self.units is None:\n            return \"\"\n        if self.length is None:\n            length = \"*\"\n        else:\n            length = self.length\n        if self.start is None:\n            return f\"{self.units} */{length}\"\n        return f\"{self.units} {self.start}-{self.stop - 1}/{length}\"\n\n    def __bool__(self):\n        return self.units is not None\n\n    def __str__(self):\n        return self.to_header()\n\n    def __repr__(self):\n        return f\"<{type(self).__name__} {str(self)!r}>\"\n\n\nclass Authorization(ImmutableDictMixin, dict):\n    \"\"\"Represents an ``Authorization`` header sent by the client.\n\n    This is returned by\n    :func:`~werkzeug.http.parse_authorization_header`. It can be useful\n    to create the object manually to pass to the test\n    :class:`~werkzeug.test.Client`.\n\n    .. versionchanged:: 0.5\n        This object became immutable.\n    \"\"\"\n\n    def __init__(self, auth_type, data=None):\n        dict.__init__(self, data or {})\n        self.type = auth_type\n\n    @property\n    def username(self):\n        \"\"\"The username transmitted.  This is set for both basic and digest\n        auth all the time.\n        \"\"\"\n        return self.get(\"username\")\n\n    @property\n    def password(self):\n        \"\"\"When the authentication type is basic this is the password\n        transmitted by the client, else `None`.\n        \"\"\"\n        return self.get(\"password\")\n\n    @property\n    def realm(self):\n        \"\"\"This is the server realm sent back for HTTP digest auth.\"\"\"\n        return self.get(\"realm\")\n\n    @property\n    def nonce(self):\n        \"\"\"The nonce the server sent for digest auth, sent back by the client.\n        A nonce should be unique for every 401 response for HTTP digest auth.\n        \"\"\"\n        return self.get(\"nonce\")\n\n    @property\n    def uri(self):\n        \"\"\"The URI from Request-URI of the Request-Line; duplicated because\n        proxies are allowed to change the Request-Line in transit.  HTTP\n        digest auth only.\n        \"\"\"\n        return self.get(\"uri\")\n\n    @property\n    def nc(self):\n        \"\"\"The nonce count value transmitted by clients if a qop-header is\n        also transmitted.  HTTP digest auth only.\n        \"\"\"\n        return self.get(\"nc\")\n\n    @property\n    def cnonce(self):\n        \"\"\"If the server sent a qop-header in the ``WWW-Authenticate``\n        header, the client has to provide this value for HTTP digest auth.\n        See the RFC for more details.\n        \"\"\"\n        return self.get(\"cnonce\")\n\n    @property\n    def response(self):\n        \"\"\"A string of 32 hex digits computed as defined in RFC 2617, which\n        proves that the user knows a password.  Digest auth only.\n        \"\"\"\n        return self.get(\"response\")\n\n    @property\n    def opaque(self):\n        \"\"\"The opaque header from the server returned unchanged by the client.\n        It is recommended that this string be base64 or hexadecimal data.\n        Digest auth only.\n        \"\"\"\n        return self.get(\"opaque\")\n\n    @property\n    def qop(self):\n        \"\"\"Indicates what \"quality of protection\" the client has applied to\n        the message for HTTP digest auth. Note that this is a single token,\n        not a quoted list of alternatives as in WWW-Authenticate.\n        \"\"\"\n        return self.get(\"qop\")\n\n    def to_header(self):\n        \"\"\"Convert to a string value for an ``Authorization`` header.\n\n        .. versionadded:: 2.0\n            Added to support passing authorization to the test client.\n        \"\"\"\n        if self.type == \"basic\":\n            value = base64.b64encode(\n                f\"{self.username}:{self.password}\".encode()\n            ).decode(\"utf8\")\n            return f\"Basic {value}\"\n\n        if self.type == \"digest\":\n            return f\"Digest {http.dump_header(self)}\"\n\n        raise ValueError(f\"Unsupported type {self.type!r}.\")\n\n\ndef auth_property(name, doc=None):\n    \"\"\"A static helper function for Authentication subclasses to add\n    extra authentication system properties onto a class::\n\n        class FooAuthenticate(WWWAuthenticate):\n            special_realm = auth_property('special_realm')\n\n    For more information have a look at the sourcecode to see how the\n    regular properties (:attr:`realm` etc.) are implemented.\n    \"\"\"\n\n    def _set_value(self, value):\n        if value is None:\n            self.pop(name, None)\n        else:\n            self[name] = str(value)\n\n    return property(lambda x: x.get(name), _set_value, doc=doc)\n\n\ndef _set_property(name, doc=None):\n    def fget(self):\n        def on_update(header_set):\n            if not header_set and name in self:\n                del self[name]\n            elif header_set:\n                self[name] = header_set.to_header()\n\n        return http.parse_set_header(self.get(name), on_update)\n\n    return property(fget, doc=doc)\n\n\nclass WWWAuthenticate(UpdateDictMixin, dict):\n    \"\"\"Provides simple access to `WWW-Authenticate` headers.\"\"\"\n\n    #: list of keys that require quoting in the generated header\n    _require_quoting = frozenset([\"domain\", \"nonce\", \"opaque\", \"realm\", \"qop\"])\n\n    def __init__(self, auth_type=None, values=None, on_update=None):\n        dict.__init__(self, values or ())\n        if auth_type:\n            self[\"__auth_type__\"] = auth_type\n        self.on_update = on_update\n\n    def set_basic(self, realm=\"authentication required\"):\n        \"\"\"Clear the auth info and enable basic auth.\"\"\"\n        dict.clear(self)\n        dict.update(self, {\"__auth_type__\": \"basic\", \"realm\": realm})\n        if self.on_update:\n            self.on_update(self)\n\n    def set_digest(\n        self, realm, nonce, qop=(\"auth\",), opaque=None, algorithm=None, stale=False\n    ):\n        \"\"\"Clear the auth info and enable digest auth.\"\"\"\n        d = {\n            \"__auth_type__\": \"digest\",\n            \"realm\": realm,\n            \"nonce\": nonce,\n            \"qop\": http.dump_header(qop),\n        }\n        if stale:\n            d[\"stale\"] = \"TRUE\"\n        if opaque is not None:\n            d[\"opaque\"] = opaque\n        if algorithm is not None:\n            d[\"algorithm\"] = algorithm\n        dict.clear(self)\n        dict.update(self, d)\n        if self.on_update:\n            self.on_update(self)\n\n    def to_header(self):\n        \"\"\"Convert the stored values into a WWW-Authenticate header.\"\"\"\n        d = dict(self)\n        auth_type = d.pop(\"__auth_type__\", None) or \"basic\"\n        kv_items = (\n            (k, http.quote_header_value(v, allow_token=k not in self._require_quoting))\n            for k, v in d.items()\n        )\n        kv_string = \", \".join([f\"{k}={v}\" for k, v in kv_items])\n        return f\"{auth_type.title()} {kv_string}\"\n\n    def __str__(self):\n        return self.to_header()\n\n    def __repr__(self):\n        return f\"<{type(self).__name__} {self.to_header()!r}>\"\n\n    type = auth_property(\n        \"__auth_type__\",\n        doc=\"\"\"The type of the auth mechanism. HTTP currently specifies\n        ``Basic`` and ``Digest``.\"\"\",\n    )\n    realm = auth_property(\n        \"realm\",\n        doc=\"\"\"A string to be displayed to users so they know which\n        username and password to use. This string should contain at\n        least the name of the host performing the authentication and\n        might additionally indicate the collection of users who might\n        have access.\"\"\",\n    )\n    domain = _set_property(\n        \"domain\",\n        doc=\"\"\"A list of URIs that define the protection space. If a URI\n        is an absolute path, it is relative to the canonical root URL of\n        the server being accessed.\"\"\",\n    )\n    nonce = auth_property(\n        \"nonce\",\n        doc=\"\"\"\n        A server-specified data string which should be uniquely generated\n        each time a 401 response is made. It is recommended that this\n        string be base64 or hexadecimal data.\"\"\",\n    )\n    opaque = auth_property(\n        \"opaque\",\n        doc=\"\"\"A string of data, specified by the server, which should\n        be returned by the client unchanged in the Authorization header\n        of subsequent requests with URIs in the same protection space.\n        It is recommended that this string be base64 or hexadecimal\n        data.\"\"\",\n    )\n    algorithm = auth_property(\n        \"algorithm\",\n        doc=\"\"\"A string indicating a pair of algorithms used to produce\n        the digest and a checksum. If this is not present it is assumed\n        to be \"MD5\". If the algorithm is not understood, the challenge\n        should be ignored (and a different one used, if there is more\n        than one).\"\"\",\n    )\n    qop = _set_property(\n        \"qop\",\n        doc=\"\"\"A set of quality-of-privacy directives such as auth and\n        auth-int.\"\"\",\n    )\n\n    @property\n    def stale(self):\n        \"\"\"A flag, indicating that the previous request from the client\n        was rejected because the nonce value was stale.\n        \"\"\"\n        val = self.get(\"stale\")\n        if val is not None:\n            return val.lower() == \"true\"\n\n    @stale.setter\n    def stale(self, value):\n        if value is None:\n            self.pop(\"stale\", None)\n        else:\n            self[\"stale\"] = \"TRUE\" if value else \"FALSE\"\n\n    auth_property = staticmethod(auth_property)\n\n\nclass FileStorage:\n    \"\"\"The :class:`FileStorage` class is a thin wrapper over incoming files.\n    It is used by the request object to represent uploaded files.  All the\n    attributes of the wrapper stream are proxied by the file storage so\n    it's possible to do ``storage.read()`` instead of the long form\n    ``storage.stream.read()``.\n    \"\"\"\n\n    def __init__(\n        self,\n        stream=None,\n        filename=None,\n        name=None,\n        content_type=None,\n        content_length=None,\n        headers=None,\n    ):\n        self.name = name\n        self.stream = stream or BytesIO()\n\n        # if no filename is provided we can attempt to get the filename\n        # from the stream object passed.  There we have to be careful to\n        # skip things like <fdopen>, <stderr> etc.  Python marks these\n        # special filenames with angular brackets.\n        if filename is None:\n            filename = getattr(stream, \"name\", None)\n            s = _make_encode_wrapper(filename)\n            if filename and filename[0] == s(\"<\") and filename[-1] == s(\">\"):\n                filename = None\n\n            # Make sure the filename is not bytes. This might happen if\n            # the file was opened from the bytes API.\n            if isinstance(filename, bytes):\n                filename = filename.decode(get_filesystem_encoding(), \"replace\")\n\n        self.filename = filename\n        if headers is None:\n            headers = Headers()\n        self.headers = headers\n        if content_type is not None:\n            headers[\"Content-Type\"] = content_type\n        if content_length is not None:\n            headers[\"Content-Length\"] = str(content_length)\n\n    def _parse_content_type(self):\n        if not hasattr(self, \"_parsed_content_type\"):\n            self._parsed_content_type = http.parse_options_header(self.content_type)\n\n    @property\n    def content_type(self):\n        \"\"\"The content-type sent in the header.  Usually not available\"\"\"\n        return self.headers.get(\"content-type\")\n\n    @property\n    def content_length(self):\n        \"\"\"The content-length sent in the header.  Usually not available\"\"\"\n        return int(self.headers.get(\"content-length\") or 0)\n\n    @property\n    def mimetype(self):\n        \"\"\"Like :attr:`content_type`, but without parameters (eg, without\n        charset, type etc.) and always lowercase.  For example if the content\n        type is ``text/HTML; charset=utf-8`` the mimetype would be\n        ``'text/html'``.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        self._parse_content_type()\n        return self._parsed_content_type[0].lower()\n\n    @property\n    def mimetype_params(self):\n        \"\"\"The mimetype parameters as dict.  For example if the content\n        type is ``text/html; charset=utf-8`` the params would be\n        ``{'charset': 'utf-8'}``.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        self._parse_content_type()\n        return self._parsed_content_type[1]\n\n    def save(self, dst, buffer_size=16384):\n        \"\"\"Save the file to a destination path or file object.  If the\n        destination is a file object you have to close it yourself after the\n        call.  The buffer size is the number of bytes held in memory during\n        the copy process.  It defaults to 16KB.\n\n        For secure file saving also have a look at :func:`secure_filename`.\n\n        :param dst: a filename, :class:`os.PathLike`, or open file\n            object to write to.\n        :param buffer_size: Passed as the ``length`` parameter of\n            :func:`shutil.copyfileobj`.\n\n        .. versionchanged:: 1.0\n            Supports :mod:`pathlib`.\n        \"\"\"\n        from shutil import copyfileobj\n\n        close_dst = False\n\n        if hasattr(dst, \"__fspath__\"):\n            dst = fspath(dst)\n\n        if isinstance(dst, str):\n            dst = open(dst, \"wb\")\n            close_dst = True\n\n        try:\n            copyfileobj(self.stream, dst, buffer_size)\n        finally:\n            if close_dst:\n                dst.close()\n\n    def close(self):\n        \"\"\"Close the underlying file if possible.\"\"\"\n        try:\n            self.stream.close()\n        except Exception:\n            pass\n\n    def __bool__(self):\n        return bool(self.filename)\n\n    def __getattr__(self, name):\n        try:\n            return getattr(self.stream, name)\n        except AttributeError:\n            # SpooledTemporaryFile doesn't implement IOBase, get the\n            # attribute from its backing file instead.\n            # https://github.com/python/cpython/pull/3249\n            if hasattr(self.stream, \"_file\"):\n                return getattr(self.stream._file, name)\n            raise\n\n    def __iter__(self):\n        return iter(self.stream)\n\n    def __repr__(self):\n        return f\"<{type(self).__name__}: {self.filename!r} ({self.content_type!r})>\"\n\n\n# circular dependencies\nfrom . import http\n", 3059], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py": ["\"\"\"When it comes to combining multiple controller or view functions\n(however you want to call them) you need a dispatcher. A simple way\nwould be applying regular expression tests on the ``PATH_INFO`` and\ncalling registered callback functions that return the value then.\n\nThis module implements a much more powerful system than simple regular\nexpression matching because it can also convert values in the URLs and\nbuild URLs.\n\nHere a simple example that creates a URL map for an application with\ntwo subdomains (www and kb) and some URL rules:\n\n.. code-block:: python\n\n    m = Map([\n        # Static URLs\n        Rule('/', endpoint='static/index'),\n        Rule('/about', endpoint='static/about'),\n        Rule('/help', endpoint='static/help'),\n        # Knowledge Base\n        Subdomain('kb', [\n            Rule('/', endpoint='kb/index'),\n            Rule('/browse/', endpoint='kb/browse'),\n            Rule('/browse/<int:id>/', endpoint='kb/browse'),\n            Rule('/browse/<int:id>/<int:page>', endpoint='kb/browse')\n        ])\n    ], default_subdomain='www')\n\nIf the application doesn't use subdomains it's perfectly fine to not set\nthe default subdomain and not use the `Subdomain` rule factory. The\nendpoint in the rules can be anything, for example import paths or\nunique identifiers. The WSGI application can use those endpoints to get the\nhandler for that URL.  It doesn't have to be a string at all but it's\nrecommended.\n\nNow it's possible to create a URL adapter for one of the subdomains and\nbuild URLs:\n\n.. code-block:: python\n\n    c = m.bind('example.com')\n\n    c.build(\"kb/browse\", dict(id=42))\n    'http://kb.example.com/browse/42/'\n\n    c.build(\"kb/browse\", dict())\n    'http://kb.example.com/browse/'\n\n    c.build(\"kb/browse\", dict(id=42, page=3))\n    'http://kb.example.com/browse/42/3'\n\n    c.build(\"static/about\")\n    '/about'\n\n    c.build(\"static/index\", force_external=True)\n    'http://www.example.com/'\n\n    c = m.bind('example.com', subdomain='kb')\n\n    c.build(\"static/about\")\n    'http://www.example.com/about'\n\nThe first argument to bind is the server name *without* the subdomain.\nPer default it will assume that the script is mounted on the root, but\noften that's not the case so you can provide the real mount point as\nsecond argument:\n\n.. code-block:: python\n\n    c = m.bind('example.com', '/applications/example')\n\nThe third argument can be the subdomain, if not given the default\nsubdomain is used.  For more details about binding have a look at the\ndocumentation of the `MapAdapter`.\n\nAnd here is how you can match URLs:\n\n.. code-block:: python\n\n    c = m.bind('example.com')\n\n    c.match(\"/\")\n    ('static/index', {})\n\n    c.match(\"/about\")\n    ('static/about', {})\n\n    c = m.bind('example.com', '/', 'kb')\n\n    c.match(\"/\")\n    ('kb/index', {})\n\n    c.match(\"/browse/42/23\")\n    ('kb/browse', {'id': 42, 'page': 23})\n\nIf matching fails you get a ``NotFound`` exception, if the rule thinks\nit's a good idea to redirect (for example because the URL was defined\nto have a slash at the end but the request was missing that slash) it\nwill raise a ``RequestRedirect`` exception. Both are subclasses of\n``HTTPException`` so you can use those errors as responses in the\napplication.\n\nIf matching succeeded but the URL rule was incompatible to the given\nmethod (for example there were only rules for ``GET`` and ``HEAD`` but\nrouting tried to match a ``POST`` request) a ``MethodNotAllowed``\nexception is raised.\n\"\"\"\nimport ast\nimport difflib\nimport posixpath\nimport re\nimport typing\nimport typing as t\nimport uuid\nimport warnings\nfrom pprint import pformat\nfrom string import Template\nfrom threading import Lock\nfrom types import CodeType\n\nfrom ._internal import _encode_idna\nfrom ._internal import _get_environ\nfrom ._internal import _to_bytes\nfrom ._internal import _to_str\nfrom ._internal import _wsgi_decoding_dance\nfrom .datastructures import ImmutableDict\nfrom .datastructures import MultiDict\nfrom .exceptions import BadHost\nfrom .exceptions import BadRequest\nfrom .exceptions import HTTPException\nfrom .exceptions import MethodNotAllowed\nfrom .exceptions import NotFound\nfrom .urls import _fast_url_quote\nfrom .urls import url_encode\nfrom .urls import url_join\nfrom .urls import url_quote\nfrom .urls import url_unquote\nfrom .utils import cached_property\nfrom .utils import redirect\nfrom .wsgi import get_host\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te\n    from _typeshed.wsgi import WSGIApplication\n    from _typeshed.wsgi import WSGIEnvironment\n    from .wrappers.response import Response\n\n_rule_re = re.compile(\n    r\"\"\"\n    (?P<static>[^<]*)                           # static rule data\n    <\n    (?:\n        (?P<converter>[a-zA-Z_][a-zA-Z0-9_]*)   # converter name\n        (?:\\((?P<args>.*?)\\))?                  # converter arguments\n        \\:                                      # variable delimiter\n    )?\n    (?P<variable>[a-zA-Z_][a-zA-Z0-9_]*)        # variable name\n    >\n    \"\"\",\n    re.VERBOSE,\n)\n_simple_rule_re = re.compile(r\"<([^>]+)>\")\n_converter_args_re = re.compile(\n    r\"\"\"\n    ((?P<name>\\w+)\\s*=\\s*)?\n    (?P<value>\n        True|False|\n        \\d+.\\d+|\n        \\d+.|\n        \\d+|\n        [\\w\\d_.]+|\n        [urUR]?(?P<stringval>\"[^\"]*?\"|'[^']*')\n    )\\s*,\n    \"\"\",\n    re.VERBOSE,\n)\n\n\n_PYTHON_CONSTANTS = {\"None\": None, \"True\": True, \"False\": False}\n\n\ndef _pythonize(value: str) -> t.Union[None, bool, int, float, str]:\n    if value in _PYTHON_CONSTANTS:\n        return _PYTHON_CONSTANTS[value]\n    for convert in int, float:\n        try:\n            return convert(value)  # type: ignore\n        except ValueError:\n            pass\n    if value[:1] == value[-1:] and value[0] in \"\\\"'\":\n        value = value[1:-1]\n    return str(value)\n\n\ndef parse_converter_args(argstr: str) -> t.Tuple[t.Tuple, t.Dict[str, t.Any]]:\n    argstr += \",\"\n    args = []\n    kwargs = {}\n\n    for item in _converter_args_re.finditer(argstr):\n        value = item.group(\"stringval\")\n        if value is None:\n            value = item.group(\"value\")\n        value = _pythonize(value)\n        if not item.group(\"name\"):\n            args.append(value)\n        else:\n            name = item.group(\"name\")\n            kwargs[name] = value\n\n    return tuple(args), kwargs\n\n\ndef parse_rule(rule: str) -> t.Iterator[t.Tuple[t.Optional[str], t.Optional[str], str]]:\n    \"\"\"Parse a rule and return it as generator. Each iteration yields tuples\n    in the form ``(converter, arguments, variable)``. If the converter is\n    `None` it's a static url part, otherwise it's a dynamic one.\n\n    :internal:\n    \"\"\"\n    pos = 0\n    end = len(rule)\n    do_match = _rule_re.match\n    used_names = set()\n    while pos < end:\n        m = do_match(rule, pos)\n        if m is None:\n            break\n        data = m.groupdict()\n        if data[\"static\"]:\n            yield None, None, data[\"static\"]\n        variable = data[\"variable\"]\n        converter = data[\"converter\"] or \"default\"\n        if variable in used_names:\n            raise ValueError(f\"variable name {variable!r} used twice.\")\n        used_names.add(variable)\n        yield converter, data[\"args\"] or None, variable\n        pos = m.end()\n    if pos < end:\n        remaining = rule[pos:]\n        if \">\" in remaining or \"<\" in remaining:\n            raise ValueError(f\"malformed url rule: {rule!r}\")\n        yield None, None, remaining\n\n\nclass RoutingException(Exception):\n    \"\"\"Special exceptions that require the application to redirect, notifying\n    about missing urls, etc.\n\n    :internal:\n    \"\"\"\n\n\nclass RequestRedirect(HTTPException, RoutingException):\n    \"\"\"Raise if the map requests a redirect. This is for example the case if\n    `strict_slashes` are activated and an url that requires a trailing slash.\n\n    The attribute `new_url` contains the absolute destination url.\n    \"\"\"\n\n    code = 308\n\n    def __init__(self, new_url: str) -> None:\n        super().__init__(new_url)\n        self.new_url = new_url\n\n    def get_response(\n        self,\n        environ: t.Optional[\"WSGIEnvironment\"] = None,\n        scope: t.Optional[dict] = None,\n    ) -> \"Response\":\n        return redirect(self.new_url, self.code)\n\n\nclass RequestPath(RoutingException):\n    \"\"\"Internal exception.\"\"\"\n\n    __slots__ = (\"path_info\",)\n\n    def __init__(self, path_info: str) -> None:\n        super().__init__()\n        self.path_info = path_info\n\n\nclass RequestAliasRedirect(RoutingException):  # noqa: B903\n    \"\"\"This rule is an alias and wants to redirect to the canonical URL.\"\"\"\n\n    def __init__(self, matched_values: t.Mapping[str, t.Any]) -> None:\n        super().__init__()\n        self.matched_values = matched_values\n\n\nclass BuildError(RoutingException, LookupError):\n    \"\"\"Raised if the build system cannot find a URL for an endpoint with the\n    values provided.\n    \"\"\"\n\n    def __init__(\n        self,\n        endpoint: str,\n        values: t.Mapping[str, t.Any],\n        method: t.Optional[str],\n        adapter: t.Optional[\"MapAdapter\"] = None,\n    ) -> None:\n        super().__init__(endpoint, values, method)\n        self.endpoint = endpoint\n        self.values = values\n        self.method = method\n        self.adapter = adapter\n\n    @cached_property\n    def suggested(self) -> t.Optional[\"Rule\"]:\n        return self.closest_rule(self.adapter)\n\n    def closest_rule(self, adapter: t.Optional[\"MapAdapter\"]) -> t.Optional[\"Rule\"]:\n        def _score_rule(rule: \"Rule\") -> float:\n            return sum(\n                [\n                    0.98\n                    * difflib.SequenceMatcher(\n                        None, rule.endpoint, self.endpoint\n                    ).ratio(),\n                    0.01 * bool(set(self.values or ()).issubset(rule.arguments)),\n                    0.01 * bool(rule.methods and self.method in rule.methods),\n                ]\n            )\n\n        if adapter and adapter.map._rules:\n            return max(adapter.map._rules, key=_score_rule)\n\n        return None\n\n    def __str__(self) -> str:\n        message = [f\"Could not build url for endpoint {self.endpoint!r}\"]\n        if self.method:\n            message.append(f\" ({self.method!r})\")\n        if self.values:\n            message.append(f\" with values {sorted(self.values)!r}\")\n        message.append(\".\")\n        if self.suggested:\n            if self.endpoint == self.suggested.endpoint:\n                if (\n                    self.method\n                    and self.suggested.methods is not None\n                    and self.method not in self.suggested.methods\n                ):\n                    message.append(\n                        \" Did you mean to use methods\"\n                        f\" {sorted(self.suggested.methods)!r}?\"\n                    )\n                missing_values = self.suggested.arguments.union(\n                    set(self.suggested.defaults or ())\n                ) - set(self.values.keys())\n                if missing_values:\n                    message.append(\n                        f\" Did you forget to specify values {sorted(missing_values)!r}?\"\n                    )\n            else:\n                message.append(f\" Did you mean {self.suggested.endpoint!r} instead?\")\n        return \"\".join(message)\n\n\nclass WebsocketMismatch(BadRequest):\n    \"\"\"The only matched rule is either a WebSocket and the request is\n    HTTP, or the rule is HTTP and the request is a WebSocket.\n    \"\"\"\n\n\nclass ValidationError(ValueError):\n    \"\"\"Validation error.  If a rule converter raises this exception the rule\n    does not match the current URL and the next URL is tried.\n    \"\"\"\n\n\nclass RuleFactory:\n    \"\"\"As soon as you have more complex URL setups it's a good idea to use rule\n    factories to avoid repetitive tasks.  Some of them are builtin, others can\n    be added by subclassing `RuleFactory` and overriding `get_rules`.\n    \"\"\"\n\n    def get_rules(self, map: \"Map\") -> t.Iterable[\"Rule\"]:\n        \"\"\"Subclasses of `RuleFactory` have to override this method and return\n        an iterable of rules.\"\"\"\n        raise NotImplementedError()\n\n\nclass Subdomain(RuleFactory):\n    \"\"\"All URLs provided by this factory have the subdomain set to a\n    specific domain. For example if you want to use the subdomain for\n    the current language this can be a good setup::\n\n        url_map = Map([\n            Rule('/', endpoint='#select_language'),\n            Subdomain('<string(length=2):lang_code>', [\n                Rule('/', endpoint='index'),\n                Rule('/about', endpoint='about'),\n                Rule('/help', endpoint='help')\n            ])\n        ])\n\n    All the rules except for the ``'#select_language'`` endpoint will now\n    listen on a two letter long subdomain that holds the language code\n    for the current request.\n    \"\"\"\n\n    def __init__(self, subdomain: str, rules: t.Iterable[RuleFactory]) -> None:\n        self.subdomain = subdomain\n        self.rules = rules\n\n    def get_rules(self, map: \"Map\") -> t.Iterator[\"Rule\"]:\n        for rulefactory in self.rules:\n            for rule in rulefactory.get_rules(map):\n                rule = rule.empty()\n                rule.subdomain = self.subdomain\n                yield rule\n\n\nclass Submount(RuleFactory):\n    \"\"\"Like `Subdomain` but prefixes the URL rule with a given string::\n\n        url_map = Map([\n            Rule('/', endpoint='index'),\n            Submount('/blog', [\n                Rule('/', endpoint='blog/index'),\n                Rule('/entry/<entry_slug>', endpoint='blog/show')\n            ])\n        ])\n\n    Now the rule ``'blog/show'`` matches ``/blog/entry/<entry_slug>``.\n    \"\"\"\n\n    def __init__(self, path: str, rules: t.Iterable[RuleFactory]) -> None:\n        self.path = path.rstrip(\"/\")\n        self.rules = rules\n\n    def get_rules(self, map: \"Map\") -> t.Iterator[\"Rule\"]:\n        for rulefactory in self.rules:\n            for rule in rulefactory.get_rules(map):\n                rule = rule.empty()\n                rule.rule = self.path + rule.rule\n                yield rule\n\n\nclass EndpointPrefix(RuleFactory):\n    \"\"\"Prefixes all endpoints (which must be strings for this factory) with\n    another string. This can be useful for sub applications::\n\n        url_map = Map([\n            Rule('/', endpoint='index'),\n            EndpointPrefix('blog/', [Submount('/blog', [\n                Rule('/', endpoint='index'),\n                Rule('/entry/<entry_slug>', endpoint='show')\n            ])])\n        ])\n    \"\"\"\n\n    def __init__(self, prefix: str, rules: t.Iterable[RuleFactory]) -> None:\n        self.prefix = prefix\n        self.rules = rules\n\n    def get_rules(self, map: \"Map\") -> t.Iterator[\"Rule\"]:\n        for rulefactory in self.rules:\n            for rule in rulefactory.get_rules(map):\n                rule = rule.empty()\n                rule.endpoint = self.prefix + rule.endpoint\n                yield rule\n\n\nclass RuleTemplate:\n    \"\"\"Returns copies of the rules wrapped and expands string templates in\n    the endpoint, rule, defaults or subdomain sections.\n\n    Here a small example for such a rule template::\n\n        from werkzeug.routing import Map, Rule, RuleTemplate\n\n        resource = RuleTemplate([\n            Rule('/$name/', endpoint='$name.list'),\n            Rule('/$name/<int:id>', endpoint='$name.show')\n        ])\n\n        url_map = Map([resource(name='user'), resource(name='page')])\n\n    When a rule template is called the keyword arguments are used to\n    replace the placeholders in all the string parameters.\n    \"\"\"\n\n    def __init__(self, rules: t.Iterable[\"Rule\"]) -> None:\n        self.rules = list(rules)\n\n    def __call__(self, *args: t.Any, **kwargs: t.Any) -> \"RuleTemplateFactory\":\n        return RuleTemplateFactory(self.rules, dict(*args, **kwargs))\n\n\nclass RuleTemplateFactory(RuleFactory):\n    \"\"\"A factory that fills in template variables into rules.  Used by\n    `RuleTemplate` internally.\n\n    :internal:\n    \"\"\"\n\n    def __init__(\n        self, rules: t.Iterable[RuleFactory], context: t.Dict[str, t.Any]\n    ) -> None:\n        self.rules = rules\n        self.context = context\n\n    def get_rules(self, map: \"Map\") -> t.Iterator[\"Rule\"]:\n        for rulefactory in self.rules:\n            for rule in rulefactory.get_rules(map):\n                new_defaults = subdomain = None\n                if rule.defaults:\n                    new_defaults = {}\n                    for key, value in rule.defaults.items():\n                        if isinstance(value, str):\n                            value = Template(value).substitute(self.context)\n                        new_defaults[key] = value\n                if rule.subdomain is not None:\n                    subdomain = Template(rule.subdomain).substitute(self.context)\n                new_endpoint = rule.endpoint\n                if isinstance(new_endpoint, str):\n                    new_endpoint = Template(new_endpoint).substitute(self.context)\n                yield Rule(\n                    Template(rule.rule).substitute(self.context),\n                    new_defaults,\n                    subdomain,\n                    rule.methods,\n                    rule.build_only,\n                    new_endpoint,\n                    rule.strict_slashes,\n                )\n\n\ndef _prefix_names(src: str) -> ast.stmt:\n    \"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n    tree = ast.parse(src).body[0]\n    if isinstance(tree, ast.Expr):\n        tree = tree.value  # type: ignore\n    for node in ast.walk(tree):\n        if isinstance(node, ast.Name):\n            node.id = f\".{node.id}\"\n    return tree\n\n\n_CALL_CONVERTER_CODE_FMT = \"self._converters[{elem!r}].to_url()\"\n_IF_KWARGS_URL_ENCODE_CODE = \"\"\"\\\nif kwargs:\n    q = '?'\n    params = self._encode_query_vars(kwargs)\nelse:\n    q = params = ''\n\"\"\"\n_IF_KWARGS_URL_ENCODE_AST = _prefix_names(_IF_KWARGS_URL_ENCODE_CODE)\n_URL_ENCODE_AST_NAMES = (_prefix_names(\"q\"), _prefix_names(\"params\"))\n\n\nclass Rule(RuleFactory):\n    \"\"\"A Rule represents one URL pattern.  There are some options for `Rule`\n    that change the way it behaves and are passed to the `Rule` constructor.\n    Note that besides the rule-string all arguments *must* be keyword arguments\n    in order to not break the application on Werkzeug upgrades.\n\n    `string`\n        Rule strings basically are just normal URL paths with placeholders in\n        the format ``<converter(arguments):name>`` where the converter and the\n        arguments are optional.  If no converter is defined the `default`\n        converter is used which means `string` in the normal configuration.\n\n        URL rules that end with a slash are branch URLs, others are leaves.\n        If you have `strict_slashes` enabled (which is the default), all\n        branch URLs that are matched without a trailing slash will trigger a\n        redirect to the same URL with the missing slash appended.\n\n        The converters are defined on the `Map`.\n\n    `endpoint`\n        The endpoint for this rule. This can be anything. A reference to a\n        function, a string, a number etc.  The preferred way is using a string\n        because the endpoint is used for URL generation.\n\n    `defaults`\n        An optional dict with defaults for other rules with the same endpoint.\n        This is a bit tricky but useful if you want to have unique URLs::\n\n            url_map = Map([\n                Rule('/all/', defaults={'page': 1}, endpoint='all_entries'),\n                Rule('/all/page/<int:page>', endpoint='all_entries')\n            ])\n\n        If a user now visits ``http://example.com/all/page/1`` he will be\n        redirected to ``http://example.com/all/``.  If `redirect_defaults` is\n        disabled on the `Map` instance this will only affect the URL\n        generation.\n\n    `subdomain`\n        The subdomain rule string for this rule. If not specified the rule\n        only matches for the `default_subdomain` of the map.  If the map is\n        not bound to a subdomain this feature is disabled.\n\n        Can be useful if you want to have user profiles on different subdomains\n        and all subdomains are forwarded to your application::\n\n            url_map = Map([\n                Rule('/', subdomain='<username>', endpoint='user/homepage'),\n                Rule('/stats', subdomain='<username>', endpoint='user/stats')\n            ])\n\n    `methods`\n        A sequence of http methods this rule applies to.  If not specified, all\n        methods are allowed. For example this can be useful if you want different\n        endpoints for `POST` and `GET`.  If methods are defined and the path\n        matches but the method matched against is not in this list or in the\n        list of another rule for that path the error raised is of the type\n        `MethodNotAllowed` rather than `NotFound`.  If `GET` is present in the\n        list of methods and `HEAD` is not, `HEAD` is added automatically.\n\n    `strict_slashes`\n        Override the `Map` setting for `strict_slashes` only for this rule. If\n        not specified the `Map` setting is used.\n\n    `merge_slashes`\n        Override :attr:`Map.merge_slashes` for this rule.\n\n    `build_only`\n        Set this to True and the rule will never match but will create a URL\n        that can be build. This is useful if you have resources on a subdomain\n        or folder that are not handled by the WSGI application (like static data)\n\n    `redirect_to`\n        If given this must be either a string or callable.  In case of a\n        callable it's called with the url adapter that triggered the match and\n        the values of the URL as keyword arguments and has to return the target\n        for the redirect, otherwise it has to be a string with placeholders in\n        rule syntax::\n\n            def foo_with_slug(adapter, id):\n                # ask the database for the slug for the old id.  this of\n                # course has nothing to do with werkzeug.\n                return f'foo/{Foo.get_slug_for_id(id)}'\n\n            url_map = Map([\n                Rule('/foo/<slug>', endpoint='foo'),\n                Rule('/some/old/url/<slug>', redirect_to='foo/<slug>'),\n                Rule('/other/old/url/<int:id>', redirect_to=foo_with_slug)\n            ])\n\n        When the rule is matched the routing system will raise a\n        `RequestRedirect` exception with the target for the redirect.\n\n        Keep in mind that the URL will be joined against the URL root of the\n        script so don't use a leading slash on the target URL unless you\n        really mean root of that domain.\n\n    `alias`\n        If enabled this rule serves as an alias for another rule with the same\n        endpoint and arguments.\n\n    `host`\n        If provided and the URL map has host matching enabled this can be\n        used to provide a match rule for the whole host.  This also means\n        that the subdomain feature is disabled.\n\n    `websocket`\n        If ``True``, this rule is only matches for WebSocket (``ws://``,\n        ``wss://``) requests. By default, rules will only match for HTTP\n        requests.\n\n    .. versionadded:: 1.0\n        Added ``websocket``.\n\n    .. versionadded:: 1.0\n        Added ``merge_slashes``.\n\n    .. versionadded:: 0.7\n        Added ``alias`` and ``host``.\n\n    .. versionchanged:: 0.6.1\n       ``HEAD`` is added to ``methods`` if ``GET`` is present.\n    \"\"\"\n\n    def __init__(\n        self,\n        string: str,\n        defaults: t.Optional[t.Mapping[str, t.Any]] = None,\n        subdomain: t.Optional[str] = None,\n        methods: t.Optional[t.Iterable[str]] = None,\n        build_only: bool = False,\n        endpoint: t.Optional[str] = None,\n        strict_slashes: t.Optional[bool] = None,\n        merge_slashes: t.Optional[bool] = None,\n        redirect_to: t.Optional[t.Union[str, t.Callable[..., str]]] = None,\n        alias: bool = False,\n        host: t.Optional[str] = None,\n        websocket: bool = False,\n    ) -> None:\n        if not string.startswith(\"/\"):\n            raise ValueError(\"urls must start with a leading slash\")\n        self.rule = string\n        self.is_leaf = not string.endswith(\"/\")\n\n        self.map: \"Map\" = None  # type: ignore\n        self.strict_slashes = strict_slashes\n        self.merge_slashes = merge_slashes\n        self.subdomain = subdomain\n        self.host = host\n        self.defaults = defaults\n        self.build_only = build_only\n        self.alias = alias\n        self.websocket = websocket\n\n        if methods is not None:\n            if isinstance(methods, str):\n                raise TypeError(\"'methods' should be a list of strings.\")\n\n            methods = {x.upper() for x in methods}\n\n            if \"HEAD\" not in methods and \"GET\" in methods:\n                methods.add(\"HEAD\")\n\n            if websocket and methods - {\"GET\", \"HEAD\", \"OPTIONS\"}:\n                raise ValueError(\n                    \"WebSocket rules can only use 'GET', 'HEAD', and 'OPTIONS' methods.\"\n                )\n\n        self.methods = methods\n        self.endpoint: str = endpoint  # type: ignore\n        self.redirect_to = redirect_to\n\n        if defaults:\n            self.arguments = set(map(str, defaults))\n        else:\n            self.arguments = set()\n\n        self._trace: t.List[t.Tuple[bool, str]] = []\n\n    def empty(self) -> \"Rule\":\n        \"\"\"\n        Return an unbound copy of this rule.\n\n        This can be useful if want to reuse an already bound URL for another\n        map.  See ``get_empty_kwargs`` to override what keyword arguments are\n        provided to the new copy.\n        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n    def get_empty_kwargs(self) -> t.Mapping[str, t.Any]:\n        \"\"\"\n        Provides kwargs for instantiating empty copy with empty()\n\n        Use this method to provide custom keyword arguments to the subclass of\n        ``Rule`` when calling ``some_rule.empty()``.  Helpful when the subclass\n        has custom keyword arguments that are needed at instantiation.\n\n        Must return a ``dict`` that will be provided as kwargs to the new\n        instance of ``Rule``, following the initial ``self.rule`` value which\n        is always provided as the first, required positional argument.\n        \"\"\"\n        defaults = None\n        if self.defaults:\n            defaults = dict(self.defaults)\n        return dict(\n            defaults=defaults,\n            subdomain=self.subdomain,\n            methods=self.methods,\n            build_only=self.build_only,\n            endpoint=self.endpoint,\n            strict_slashes=self.strict_slashes,\n            redirect_to=self.redirect_to,\n            alias=self.alias,\n            host=self.host,\n        )\n\n    def get_rules(self, map: \"Map\") -> t.Iterator[\"Rule\"]:\n        yield self\n\n    def refresh(self) -> None:\n        \"\"\"Rebinds and refreshes the URL.  Call this if you modified the\n        rule in place.\n\n        :internal:\n        \"\"\"\n        self.bind(self.map, rebind=True)\n\n    def bind(self, map: \"Map\", rebind: bool = False) -> None:\n        \"\"\"Bind the url to a map and create a regular expression based on\n        the information from the rule itself and the defaults from the map.\n\n        :internal:\n        \"\"\"\n        if self.map is not None and not rebind:\n            raise RuntimeError(f\"url rule {self!r} already bound to map {self.map!r}\")\n        self.map = map\n        if self.strict_slashes is None:\n            self.strict_slashes = map.strict_slashes\n        if self.merge_slashes is None:\n            self.merge_slashes = map.merge_slashes\n        if self.subdomain is None:\n            self.subdomain = map.default_subdomain\n        self.compile()\n\n    def get_converter(\n        self,\n        variable_name: str,\n        converter_name: str,\n        args: t.Tuple,\n        kwargs: t.Mapping[str, t.Any],\n    ) -> \"BaseConverter\":\n        \"\"\"Looks up the converter for the given parameter.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        if converter_name not in self.map.converters:\n            raise LookupError(f\"the converter {converter_name!r} does not exist\")\n        return self.map.converters[converter_name](self.map, *args, **kwargs)\n\n    def _encode_query_vars(self, query_vars: t.Mapping[str, t.Any]) -> str:\n        return url_encode(\n            query_vars,\n            charset=self.map.charset,\n            sort=self.map.sort_parameters,\n            key=self.map.sort_key,\n        )\n\n    def compile(self) -> None:\n        \"\"\"Compiles the regular expression and stores it.\"\"\"\n        assert self.map is not None, \"rule not bound\"\n\n        if self.map.host_matching:\n            domain_rule = self.host or \"\"\n        else:\n            domain_rule = self.subdomain or \"\"\n\n        self._trace = []\n        self._converters: t.Dict[str, \"BaseConverter\"] = {}\n        self._static_weights: t.List[t.Tuple[int, int]] = []\n        self._argument_weights: t.List[int] = []\n        regex_parts = []\n\n        def _build_regex(rule: str) -> None:\n            index = 0\n            for converter, arguments, variable in parse_rule(rule):\n                if converter is None:\n                    for match in re.finditer(r\"/+|[^/]+\", variable):\n                        part = match.group(0)\n                        if part.startswith(\"/\"):\n                            if self.merge_slashes:\n                                regex_parts.append(r\"/+?\")\n                                self._trace.append((False, \"/\"))\n                            else:\n                                regex_parts.append(part)\n                                self._trace.append((False, part))\n                            continue\n                        self._trace.append((False, part))\n                        regex_parts.append(re.escape(part))\n                        if part:\n                            self._static_weights.append((index, -len(part)))\n                else:\n                    if arguments:\n                        c_args, c_kwargs = parse_converter_args(arguments)\n                    else:\n                        c_args = ()\n                        c_kwargs = {}\n                    convobj = self.get_converter(variable, converter, c_args, c_kwargs)\n                    regex_parts.append(f\"(?P<{variable}>{convobj.regex})\")\n                    self._converters[variable] = convobj\n                    self._trace.append((True, variable))\n                    self._argument_weights.append(convobj.weight)\n                    self.arguments.add(str(variable))\n                index = index + 1\n\n        _build_regex(domain_rule)\n        regex_parts.append(\"\\\\|\")\n        self._trace.append((False, \"|\"))\n        _build_regex(self.rule if self.is_leaf else self.rule.rstrip(\"/\"))\n        if not self.is_leaf:\n            self._trace.append((False, \"/\"))\n\n        self._build: t.Callable[..., t.Tuple[str, str]]\n        self._build = self._compile_builder(False).__get__(self, None)  # type: ignore\n        self._build_unknown: t.Callable[..., t.Tuple[str, str]]\n        self._build_unknown = self._compile_builder(True).__get__(  # type: ignore\n            self, None\n        )\n\n        if self.build_only:\n            return\n\n        if not (self.is_leaf and self.strict_slashes):\n            reps = \"*\" if self.merge_slashes else \"?\"\n            tail = f\"(?<!/)(?P<__suffix__>/{reps})\"\n        else:\n            tail = \"\"\n\n        regex = f\"^{''.join(regex_parts)}{tail}$\"\n        self._regex = re.compile(regex)\n\n    def match(\n        self, path: str, method: t.Optional[str] = None\n    ) -> t.Optional[t.MutableMapping[str, t.Any]]:\n        \"\"\"Check if the rule matches a given path. Path is a string in the\n        form ``\"subdomain|/path\"`` and is assembled by the map.  If\n        the map is doing host matching the subdomain part will be the host\n        instead.\n\n        If the rule matches a dict with the converted values is returned,\n        otherwise the return value is `None`.\n\n        :internal:\n        \"\"\"\n        if not self.build_only:\n            require_redirect = False\n\n            m = self._regex.search(path)\n            if m is not None:\n                groups = m.groupdict()\n                # we have a folder like part of the url without a trailing\n                # slash and strict slashes enabled. raise an exception that\n                # tells the map to redirect to the same url but with a\n                # trailing slash\n                if (\n                    self.strict_slashes\n                    and not self.is_leaf\n                    and not groups.pop(\"__suffix__\")\n                    and (\n                        method is None or self.methods is None or method in self.methods\n                    )\n                ):\n                    path += \"/\"\n                    require_redirect = True\n                # if we are not in strict slashes mode we have to remove\n                # a __suffix__\n                elif not self.strict_slashes:\n                    del groups[\"__suffix__\"]\n\n                result = {}\n                for name, value in groups.items():\n                    try:\n                        value = self._converters[name].to_python(value)\n                    except ValidationError:\n                        return None\n                    result[str(name)] = value\n                if self.defaults:\n                    result.update(self.defaults)\n\n                if self.merge_slashes:\n                    new_path = \"|\".join(self.build(result, False))  # type: ignore\n                    if path.endswith(\"/\") and not new_path.endswith(\"/\"):\n                        new_path += \"/\"\n                    if new_path.count(\"/\") < path.count(\"/\"):\n                        # The URL will be encoded when MapAdapter.match\n                        # handles the RequestPath raised below. Decode\n                        # the URL here to avoid a double encoding.\n                        path = url_unquote(new_path)\n                        require_redirect = True\n\n                if require_redirect:\n                    path = path.split(\"|\", 1)[1]\n                    raise RequestPath(path)\n\n                if self.alias and self.map.redirect_defaults:\n                    raise RequestAliasRedirect(result)\n\n                return result\n\n        return None\n\n    @staticmethod\n    def _get_func_code(code: CodeType, name: str) -> t.Callable[..., t.Tuple[str, str]]:\n        globs: t.Dict[str, t.Any] = {}\n        locs: t.Dict[str, t.Any] = {}\n        exec(code, globs, locs)\n        return locs[name]  # type: ignore\n\n    def _compile_builder(\n        self, append_unknown: bool = True\n    ) -> t.Callable[..., t.Tuple[str, str]]:\n        defaults = self.defaults or {}\n        dom_ops: t.List[t.Tuple[bool, str]] = []\n        url_ops: t.List[t.Tuple[bool, str]] = []\n\n        opl = dom_ops\n        for is_dynamic, data in self._trace:\n            if data == \"|\" and opl is dom_ops:\n                opl = url_ops\n                continue\n            # this seems like a silly case to ever come up but:\n            # if a default is given for a value that appears in the rule,\n            # resolve it to a constant ahead of time\n            if is_dynamic and data in defaults:\n                data = self._converters[data].to_url(defaults[data])\n                opl.append((False, data))\n            elif not is_dynamic:\n                opl.append(\n                    (False, url_quote(_to_bytes(data, self.map.charset), safe=\"/:|+\"))\n                )\n            else:\n                opl.append((True, data))\n\n        def _convert(elem: str) -> ast.stmt:\n            ret = _prefix_names(_CALL_CONVERTER_CODE_FMT.format(elem=elem))\n            ret.args = [ast.Name(str(elem), ast.Load())]  # type: ignore  # str for py2\n            return ret\n\n        def _parts(ops: t.List[t.Tuple[bool, str]]) -> t.List[ast.AST]:\n            parts = [\n                _convert(elem) if is_dynamic else ast.Str(s=elem)\n                for is_dynamic, elem in ops\n            ]\n            parts = parts or [ast.Str(\"\")]\n            # constant fold\n            ret = [parts[0]]\n            for p in parts[1:]:\n                if isinstance(p, ast.Str) and isinstance(ret[-1], ast.Str):\n                    ret[-1] = ast.Str(ret[-1].s + p.s)\n                else:\n                    ret.append(p)\n            return ret\n\n        dom_parts = _parts(dom_ops)\n        url_parts = _parts(url_ops)\n        if not append_unknown:\n            body = []\n        else:\n            body = [_IF_KWARGS_URL_ENCODE_AST]\n            url_parts.extend(_URL_ENCODE_AST_NAMES)\n\n        def _join(parts: t.List[ast.AST]) -> ast.AST:\n            if len(parts) == 1:  # shortcut\n                return parts[0]\n            return ast.JoinedStr(parts)\n\n        body.append(\n            ast.Return(ast.Tuple([_join(dom_parts), _join(url_parts)], ast.Load()))\n        )\n\n        pargs = [\n            elem\n            for is_dynamic, elem in dom_ops + url_ops\n            if is_dynamic and elem not in defaults\n        ]\n        kargs = [str(k) for k in defaults]\n\n        func_ast: ast.FunctionDef = _prefix_names(\"def _(): pass\")  # type: ignore\n        func_ast.name = f\"<builder:{self.rule!r}>\"\n        func_ast.args.args.append(ast.arg(\".self\", None))\n        for arg in pargs + kargs:\n            func_ast.args.args.append(ast.arg(arg, None))\n        func_ast.args.kwarg = ast.arg(\".kwargs\", None)\n        for _ in kargs:\n            func_ast.args.defaults.append(ast.Str(\"\"))\n        func_ast.body = body\n\n        # use `ast.parse` instead of `ast.Module` for better portability\n        # Python 3.8 changes the signature of `ast.Module`\n        module = ast.parse(\"\")\n        module.body = [func_ast]\n\n        # mark everything as on line 1, offset 0\n        # less error-prone than `ast.fix_missing_locations`\n        # bad line numbers cause an assert to fail in debug builds\n        for node in ast.walk(module):\n            if \"lineno\" in node._attributes:\n                node.lineno = 1\n            if \"col_offset\" in node._attributes:\n                node.col_offset = 0\n\n        code = compile(module, \"<werkzeug routing>\", \"exec\")\n        return self._get_func_code(code, func_ast.name)\n\n    def build(\n        self, values: t.Mapping[str, t.Any], append_unknown: bool = True\n    ) -> t.Optional[t.Tuple[str, str]]:\n        \"\"\"Assembles the relative url for that rule and the subdomain.\n        If building doesn't work for some reasons `None` is returned.\n\n        :internal:\n        \"\"\"\n        try:\n            if append_unknown:\n                return self._build_unknown(**values)\n            else:\n                return self._build(**values)\n        except ValidationError:\n            return None\n\n    def provides_defaults_for(self, rule: \"Rule\") -> bool:\n        \"\"\"Check if this rule has defaults for a given rule.\n\n        :internal:\n        \"\"\"\n        return bool(\n            not self.build_only\n            and self.defaults\n            and self.endpoint == rule.endpoint\n            and self != rule\n            and self.arguments == rule.arguments\n        )\n\n    def suitable_for(\n        self, values: t.Mapping[str, t.Any], method: t.Optional[str] = None\n    ) -> bool:\n        \"\"\"Check if the dict of values has enough data for url generation.\n\n        :internal:\n        \"\"\"\n        # if a method was given explicitly and that method is not supported\n        # by this rule, this rule is not suitable.\n        if (\n            method is not None\n            and self.methods is not None\n            and method not in self.methods\n        ):\n            return False\n\n        defaults = self.defaults or ()\n\n        # all arguments required must be either in the defaults dict or\n        # the value dictionary otherwise it's not suitable\n        for key in self.arguments:\n            if key not in defaults and key not in values:\n                return False\n\n        # in case defaults are given we ensure that either the value was\n        # skipped or the value is the same as the default value.\n        if defaults:\n            for key, value in defaults.items():\n                if key in values and value != values[key]:\n                    return False\n\n        return True\n\n    def match_compare_key(\n        self,\n    ) -> t.Tuple[bool, int, t.Iterable[t.Tuple[int, int]], int, t.Iterable[int]]:\n        \"\"\"The match compare key for sorting.\n\n        Current implementation:\n\n        1.  rules without any arguments come first for performance\n            reasons only as we expect them to match faster and some\n            common ones usually don't have any arguments (index pages etc.)\n        2.  rules with more static parts come first so the second argument\n            is the negative length of the number of the static weights.\n        3.  we order by static weights, which is a combination of index\n            and length\n        4.  The more complex rules come first so the next argument is the\n            negative length of the number of argument weights.\n        5.  lastly we order by the actual argument weights.\n\n        :internal:\n        \"\"\"\n        return (\n            bool(self.arguments),\n            -len(self._static_weights),\n            self._static_weights,\n            -len(self._argument_weights),\n            self._argument_weights,\n        )\n\n    def build_compare_key(self) -> t.Tuple[int, int, int]:\n        \"\"\"The build compare key for sorting.\n\n        :internal:\n        \"\"\"\n        return (1 if self.alias else 0, -len(self.arguments), -len(self.defaults or ()))\n\n    def __eq__(self, other: object) -> bool:\n        return isinstance(other, type(self)) and self._trace == other._trace\n\n    __hash__ = None  # type: ignore\n\n    def __str__(self) -> str:\n        return self.rule\n\n    def __repr__(self) -> str:\n        if self.map is None:\n            return f\"<{type(self).__name__} (unbound)>\"\n        parts = []\n        for is_dynamic, data in self._trace:\n            if is_dynamic:\n                parts.append(f\"<{data}>\")\n            else:\n                parts.append(data)\n        parts = \"\".join(parts).lstrip(\"|\")\n        methods = f\" ({', '.join(self.methods)})\" if self.methods is not None else \"\"\n        return f\"<{type(self).__name__} {parts!r}{methods} -> {self.endpoint}>\"\n\n\nclass BaseConverter:\n    \"\"\"Base class for all converters.\"\"\"\n\n    regex = \"[^/]+\"\n    weight = 100\n\n    def __init__(self, map: \"Map\", *args: t.Any, **kwargs: t.Any) -> None:\n        self.map = map\n\n    def to_python(self, value: str) -> t.Any:\n        return value\n\n    def to_url(self, value: t.Any) -> str:\n        if isinstance(value, (bytes, bytearray)):\n            return _fast_url_quote(value)\n        return _fast_url_quote(str(value).encode(self.map.charset))\n\n\nclass UnicodeConverter(BaseConverter):\n    \"\"\"This converter is the default converter and accepts any string but\n    only one path segment.  Thus the string can not include a slash.\n\n    This is the default validator.\n\n    Example::\n\n        Rule('/pages/<page>'),\n        Rule('/<string(length=2):lang_code>')\n\n    :param map: the :class:`Map`.\n    :param minlength: the minimum length of the string.  Must be greater\n                      or equal 1.\n    :param maxlength: the maximum length of the string.\n    :param length: the exact length of the string.\n    \"\"\"\n\n    def __init__(\n        self,\n        map: \"Map\",\n        minlength: int = 1,\n        maxlength: t.Optional[int] = None,\n        length: t.Optional[int] = None,\n    ) -> None:\n        super().__init__(map)\n        if length is not None:\n            length_regex = f\"{{{int(length)}}}\"\n        else:\n            if maxlength is None:\n                maxlength_value = \"\"\n            else:\n                maxlength_value = str(int(maxlength))\n            length_regex = f\"{{{int(minlength)},{maxlength_value}}}\"\n        self.regex = f\"[^/]{length_regex}\"\n\n\nclass AnyConverter(BaseConverter):\n    \"\"\"Matches one of the items provided.  Items can either be Python\n    identifiers or strings::\n\n        Rule('/<any(about, help, imprint, class, \"foo,bar\"):page_name>')\n\n    :param map: the :class:`Map`.\n    :param items: this function accepts the possible items as positional\n                  arguments.\n    \"\"\"\n\n    def __init__(self, map: \"Map\", *items: str) -> None:\n        super().__init__(map)\n        self.regex = f\"(?:{'|'.join([re.escape(x) for x in items])})\"\n\n\nclass PathConverter(BaseConverter):\n    \"\"\"Like the default :class:`UnicodeConverter`, but it also matches\n    slashes.  This is useful for wikis and similar applications::\n\n        Rule('/<path:wikipage>')\n        Rule('/<path:wikipage>/edit')\n\n    :param map: the :class:`Map`.\n    \"\"\"\n\n    regex = \"[^/].*?\"\n    weight = 200\n\n\nclass NumberConverter(BaseConverter):\n    \"\"\"Baseclass for `IntegerConverter` and `FloatConverter`.\n\n    :internal:\n    \"\"\"\n\n    weight = 50\n    num_convert: t.Callable = int\n\n    def __init__(\n        self,\n        map: \"Map\",\n        fixed_digits: int = 0,\n        min: t.Optional[int] = None,\n        max: t.Optional[int] = None,\n        signed: bool = False,\n    ) -> None:\n        if signed:\n            self.regex = self.signed_regex\n        super().__init__(map)\n        self.fixed_digits = fixed_digits\n        self.min = min\n        self.max = max\n        self.signed = signed\n\n    def to_python(self, value: str) -> t.Any:\n        if self.fixed_digits and len(value) != self.fixed_digits:\n            raise ValidationError()\n        value = self.num_convert(value)\n        if (self.min is not None and value < self.min) or (\n            self.max is not None and value > self.max\n        ):\n            raise ValidationError()\n        return value\n\n    def to_url(self, value: t.Any) -> str:\n        value = str(self.num_convert(value))\n        if self.fixed_digits:\n            value = value.zfill(self.fixed_digits)\n        return value\n\n    @property\n    def signed_regex(self) -> str:\n        return f\"-?{self.regex}\"\n\n\nclass IntegerConverter(NumberConverter):\n    \"\"\"This converter only accepts integer values::\n\n        Rule(\"/page/<int:page>\")\n\n    By default it only accepts unsigned, positive values. The ``signed``\n    parameter will enable signed, negative values. ::\n\n        Rule(\"/page/<int(signed=True):page>\")\n\n    :param map: The :class:`Map`.\n    :param fixed_digits: The number of fixed digits in the URL. If you\n        set this to ``4`` for example, the rule will only match if the\n        URL looks like ``/0001/``. The default is variable length.\n    :param min: The minimal value.\n    :param max: The maximal value.\n    :param signed: Allow signed (negative) values.\n\n    .. versionadded:: 0.15\n        The ``signed`` parameter.\n    \"\"\"\n\n    regex = r\"\\d+\"\n\n\nclass FloatConverter(NumberConverter):\n    \"\"\"This converter only accepts floating point values::\n\n        Rule(\"/probability/<float:probability>\")\n\n    By default it only accepts unsigned, positive values. The ``signed``\n    parameter will enable signed, negative values. ::\n\n        Rule(\"/offset/<float(signed=True):offset>\")\n\n    :param map: The :class:`Map`.\n    :param min: The minimal value.\n    :param max: The maximal value.\n    :param signed: Allow signed (negative) values.\n\n    .. versionadded:: 0.15\n        The ``signed`` parameter.\n    \"\"\"\n\n    regex = r\"\\d+\\.\\d+\"\n    num_convert = float\n\n    def __init__(\n        self,\n        map: \"Map\",\n        min: t.Optional[float] = None,\n        max: t.Optional[float] = None,\n        signed: bool = False,\n    ) -> None:\n        super().__init__(map, min=min, max=max, signed=signed)  # type: ignore\n\n\nclass UUIDConverter(BaseConverter):\n    \"\"\"This converter only accepts UUID strings::\n\n        Rule('/object/<uuid:identifier>')\n\n    .. versionadded:: 0.10\n\n    :param map: the :class:`Map`.\n    \"\"\"\n\n    regex = (\n        r\"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-\"\n        r\"[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\"\n    )\n\n    def to_python(self, value: str) -> uuid.UUID:\n        return uuid.UUID(value)\n\n    def to_url(self, value: uuid.UUID) -> str:\n        return str(value)\n\n\n#: the default converter mapping for the map.\nDEFAULT_CONVERTERS: t.Mapping[str, t.Type[BaseConverter]] = {\n    \"default\": UnicodeConverter,\n    \"string\": UnicodeConverter,\n    \"any\": AnyConverter,\n    \"path\": PathConverter,\n    \"int\": IntegerConverter,\n    \"float\": FloatConverter,\n    \"uuid\": UUIDConverter,\n}\n\n\nclass Map:\n    \"\"\"The map class stores all the URL rules and some configuration\n    parameters.  Some of the configuration values are only stored on the\n    `Map` instance since those affect all rules, others are just defaults\n    and can be overridden for each rule.  Note that you have to specify all\n    arguments besides the `rules` as keyword arguments!\n\n    :param rules: sequence of url rules for this map.\n    :param default_subdomain: The default subdomain for rules without a\n                              subdomain defined.\n    :param charset: charset of the url. defaults to ``\"utf-8\"``\n    :param strict_slashes: If a rule ends with a slash but the matched\n        URL does not, redirect to the URL with a trailing slash.\n    :param merge_slashes: Merge consecutive slashes when matching or\n        building URLs. Matches will redirect to the normalized URL.\n        Slashes in variable parts are not merged.\n    :param redirect_defaults: This will redirect to the default rule if it\n                              wasn't visited that way. This helps creating\n                              unique URLs.\n    :param converters: A dict of converters that adds additional converters\n                       to the list of converters. If you redefine one\n                       converter this will override the original one.\n    :param sort_parameters: If set to `True` the url parameters are sorted.\n                            See `url_encode` for more details.\n    :param sort_key: The sort key function for `url_encode`.\n    :param encoding_errors: the error method to use for decoding\n    :param host_matching: if set to `True` it enables the host matching\n                          feature and disables the subdomain one.  If\n                          enabled the `host` parameter to rules is used\n                          instead of the `subdomain` one.\n\n    .. versionchanged:: 1.0\n        If ``url_scheme`` is ``ws`` or ``wss``, only WebSocket rules\n        will match.\n\n    .. versionchanged:: 1.0\n        Added ``merge_slashes``.\n\n    .. versionchanged:: 0.7\n        Added ``encoding_errors`` and ``host_matching``.\n\n    .. versionchanged:: 0.5\n        Added ``sort_parameters`` and ``sort_key``.\n    \"\"\"\n\n    #: A dict of default converters to be used.\n    default_converters = ImmutableDict(DEFAULT_CONVERTERS)\n\n    #: The type of lock to use when updating.\n    #:\n    #: .. versionadded:: 1.0\n    lock_class = Lock\n\n    def __init__(\n        self,\n        rules: t.Optional[t.Iterable[RuleFactory]] = None,\n        default_subdomain: str = \"\",\n        charset: str = \"utf-8\",\n        strict_slashes: bool = True,\n        merge_slashes: bool = True,\n        redirect_defaults: bool = True,\n        converters: t.Optional[t.Mapping[str, t.Type[BaseConverter]]] = None,\n        sort_parameters: bool = False,\n        sort_key: t.Optional[t.Callable[[t.Any], t.Any]] = None,\n        encoding_errors: str = \"replace\",\n        host_matching: bool = False,\n    ) -> None:\n        self._rules: t.List[Rule] = []\n        self._rules_by_endpoint: t.Dict[str, t.List[Rule]] = {}\n        self._remap = True\n        self._remap_lock = self.lock_class()\n\n        self.default_subdomain = default_subdomain\n        self.charset = charset\n        self.encoding_errors = encoding_errors\n        self.strict_slashes = strict_slashes\n        self.merge_slashes = merge_slashes\n        self.redirect_defaults = redirect_defaults\n        self.host_matching = host_matching\n\n        self.converters = self.default_converters.copy()\n        if converters:\n            self.converters.update(converters)\n\n        self.sort_parameters = sort_parameters\n        self.sort_key = sort_key\n\n        for rulefactory in rules or ():\n            self.add(rulefactory)\n\n    def is_endpoint_expecting(self, endpoint: str, *arguments: str) -> bool:\n        \"\"\"Iterate over all rules and check if the endpoint expects\n        the arguments provided.  This is for example useful if you have\n        some URLs that expect a language code and others that do not and\n        you want to wrap the builder a bit so that the current language\n        code is automatically added if not provided but endpoints expect\n        it.\n\n        :param endpoint: the endpoint to check.\n        :param arguments: this function accepts one or more arguments\n                          as positional arguments.  Each one of them is\n                          checked.\n        \"\"\"\n        self.update()\n        arguments = set(arguments)\n        for rule in self._rules_by_endpoint[endpoint]:\n            if arguments.issubset(rule.arguments):\n                return True\n        return False\n\n    def iter_rules(self, endpoint: t.Optional[str] = None) -> t.Iterator[Rule]:\n        \"\"\"Iterate over all rules or the rules of an endpoint.\n\n        :param endpoint: if provided only the rules for that endpoint\n                         are returned.\n        :return: an iterator\n        \"\"\"\n        self.update()\n        if endpoint is not None:\n            return iter(self._rules_by_endpoint[endpoint])\n        return iter(self._rules)\n\n    def add(self, rulefactory: RuleFactory) -> None:\n        \"\"\"Add a new rule or factory to the map and bind it.  Requires that the\n        rule is not bound to another map.\n\n        :param rulefactory: a :class:`Rule` or :class:`RuleFactory`\n        \"\"\"\n        for rule in rulefactory.get_rules(self):\n            rule.bind(self)\n            self._rules.append(rule)\n            self._rules_by_endpoint.setdefault(rule.endpoint, []).append(rule)\n        self._remap = True\n\n    def bind(\n        self,\n        server_name: str,\n        script_name: t.Optional[str] = None,\n        subdomain: t.Optional[str] = None,\n        url_scheme: str = \"http\",\n        default_method: str = \"GET\",\n        path_info: t.Optional[str] = None,\n        query_args: t.Optional[t.Union[t.Mapping[str, t.Any], str]] = None,\n    ) -> \"MapAdapter\":\n        \"\"\"Return a new :class:`MapAdapter` with the details specified to the\n        call.  Note that `script_name` will default to ``'/'`` if not further\n        specified or `None`.  The `server_name` at least is a requirement\n        because the HTTP RFC requires absolute URLs for redirects and so all\n        redirect exceptions raised by Werkzeug will contain the full canonical\n        URL.\n\n        If no path_info is passed to :meth:`match` it will use the default path\n        info passed to bind.  While this doesn't really make sense for\n        manual bind calls, it's useful if you bind a map to a WSGI\n        environment which already contains the path info.\n\n        `subdomain` will default to the `default_subdomain` for this map if\n        no defined. If there is no `default_subdomain` you cannot use the\n        subdomain feature.\n\n        .. versionchanged:: 1.0\n            If ``url_scheme`` is ``ws`` or ``wss``, only WebSocket rules\n            will match.\n\n        .. versionchanged:: 0.15\n            ``path_info`` defaults to ``'/'`` if ``None``.\n\n        .. versionchanged:: 0.8\n            ``query_args`` can be a string.\n\n        .. versionchanged:: 0.7\n            Added ``query_args``.\n        \"\"\"\n        server_name = server_name.lower()\n        if self.host_matching:\n            if subdomain is not None:\n                raise RuntimeError(\"host matching enabled and a subdomain was provided\")\n        elif subdomain is None:\n            subdomain = self.default_subdomain\n        if script_name is None:\n            script_name = \"/\"\n        if path_info is None:\n            path_info = \"/\"\n\n        try:\n            server_name = _encode_idna(server_name)  # type: ignore\n        except UnicodeError as e:\n            raise BadHost() from e\n\n        return MapAdapter(\n            self,\n            server_name,\n            script_name,\n            subdomain,\n            url_scheme,\n            path_info,\n            default_method,\n            query_args,\n        )\n\n    def bind_to_environ(\n        self,\n        environ: \"WSGIEnvironment\",\n        server_name: t.Optional[str] = None,\n        subdomain: t.Optional[str] = None,\n    ) -> \"MapAdapter\":\n        \"\"\"Like :meth:`bind` but you can pass it an WSGI environment and it\n        will fetch the information from that dictionary.  Note that because of\n        limitations in the protocol there is no way to get the current\n        subdomain and real `server_name` from the environment.  If you don't\n        provide it, Werkzeug will use `SERVER_NAME` and `SERVER_PORT` (or\n        `HTTP_HOST` if provided) as used `server_name` with disabled subdomain\n        feature.\n\n        If `subdomain` is `None` but an environment and a server name is\n        provided it will calculate the current subdomain automatically.\n        Example: `server_name` is ``'example.com'`` and the `SERVER_NAME`\n        in the wsgi `environ` is ``'staging.dev.example.com'`` the calculated\n        subdomain will be ``'staging.dev'``.\n\n        If the object passed as environ has an environ attribute, the value of\n        this attribute is used instead.  This allows you to pass request\n        objects.  Additionally `PATH_INFO` added as a default of the\n        :class:`MapAdapter` so that you don't have to pass the path info to\n        the match method.\n\n        .. versionchanged:: 1.0.0\n            If the passed server name specifies port 443, it will match\n            if the incoming scheme is ``https`` without a port.\n\n        .. versionchanged:: 1.0.0\n            A warning is shown when the passed server name does not\n            match the incoming WSGI server name.\n\n        .. versionchanged:: 0.8\n           This will no longer raise a ValueError when an unexpected server\n           name was passed.\n\n        .. versionchanged:: 0.5\n            previously this method accepted a bogus `calculate_subdomain`\n            parameter that did not have any effect.  It was removed because\n            of that.\n\n        :param environ: a WSGI environment.\n        :param server_name: an optional server name hint (see above).\n        :param subdomain: optionally the current subdomain (see above).\n        \"\"\"\n        environ = _get_environ(environ)\n        wsgi_server_name = get_host(environ).lower()\n        scheme = environ[\"wsgi.url_scheme\"]\n        upgrade = any(\n            v.strip() == \"upgrade\"\n            for v in environ.get(\"HTTP_CONNECTION\", \"\").lower().split(\",\")\n        )\n\n        if upgrade and environ.get(\"HTTP_UPGRADE\", \"\").lower() == \"websocket\":\n            scheme = \"wss\" if scheme == \"https\" else \"ws\"\n\n        if server_name is None:\n            server_name = wsgi_server_name\n        else:\n            server_name = server_name.lower()\n\n            # strip standard port to match get_host()\n            if scheme in {\"http\", \"ws\"} and server_name.endswith(\":80\"):\n                server_name = server_name[:-3]\n            elif scheme in {\"https\", \"wss\"} and server_name.endswith(\":443\"):\n                server_name = server_name[:-4]\n\n        if subdomain is None and not self.host_matching:\n            cur_server_name = wsgi_server_name.split(\".\")\n            real_server_name = server_name.split(\".\")\n            offset = -len(real_server_name)\n\n            if cur_server_name[offset:] != real_server_name:\n                # This can happen even with valid configs if the server was\n                # accessed directly by IP address under some situations.\n                # Instead of raising an exception like in Werkzeug 0.7 or\n                # earlier we go by an invalid subdomain which will result\n                # in a 404 error on matching.\n                warnings.warn(\n                    f\"Current server name {wsgi_server_name!r} doesn't match configured\"\n                    f\" server name {server_name!r}\",\n                    stacklevel=2,\n                )\n                subdomain = \"<invalid>\"\n            else:\n                subdomain = \".\".join(filter(None, cur_server_name[:offset]))\n\n        def _get_wsgi_string(name: str) -> t.Optional[str]:\n            val = environ.get(name)\n            if val is not None:\n                return _wsgi_decoding_dance(val, self.charset)\n            return None\n\n        script_name = _get_wsgi_string(\"SCRIPT_NAME\")\n        path_info = _get_wsgi_string(\"PATH_INFO\")\n        query_args = _get_wsgi_string(\"QUERY_STRING\")\n        return Map.bind(\n            self,\n            server_name,\n            script_name,\n            subdomain,\n            scheme,\n            environ[\"REQUEST_METHOD\"],\n            path_info,\n            query_args=query_args,\n        )\n\n    def update(self) -> None:\n        \"\"\"Called before matching and building to keep the compiled rules\n        in the correct order after things changed.\n        \"\"\"\n        if not self._remap:\n            return\n\n        with self._remap_lock:\n            if not self._remap:\n                return\n\n            self._rules.sort(key=lambda x: x.match_compare_key())\n            for rules in self._rules_by_endpoint.values():\n                rules.sort(key=lambda x: x.build_compare_key())\n            self._remap = False\n\n    def __repr__(self) -> str:\n        rules = self.iter_rules()\n        return f\"{type(self).__name__}({pformat(list(rules))})\"\n\n\nclass MapAdapter:\n\n    \"\"\"Returned by :meth:`Map.bind` or :meth:`Map.bind_to_environ` and does\n    the URL matching and building based on runtime information.\n    \"\"\"\n\n    def __init__(\n        self,\n        map: Map,\n        server_name: str,\n        script_name: str,\n        subdomain: t.Optional[str],\n        url_scheme: str,\n        path_info: str,\n        default_method: str,\n        query_args: t.Optional[t.Union[t.Mapping[str, t.Any], str]] = None,\n    ):\n        self.map = map\n        self.server_name = _to_str(server_name)\n        script_name = _to_str(script_name)\n        if not script_name.endswith(\"/\"):\n            script_name += \"/\"\n        self.script_name = script_name\n        self.subdomain = _to_str(subdomain)\n        self.url_scheme = _to_str(url_scheme)\n        self.path_info = _to_str(path_info)\n        self.default_method = _to_str(default_method)\n        self.query_args = query_args\n        self.websocket = self.url_scheme in {\"ws\", \"wss\"}\n\n    def dispatch(\n        self,\n        view_func: t.Callable[[str, t.Mapping[str, t.Any]], \"WSGIApplication\"],\n        path_info: t.Optional[str] = None,\n        method: t.Optional[str] = None,\n        catch_http_exceptions: bool = False,\n    ) -> \"WSGIApplication\":\n        \"\"\"Does the complete dispatching process.  `view_func` is called with\n        the endpoint and a dict with the values for the view.  It should\n        look up the view function, call it, and return a response object\n        or WSGI application.  http exceptions are not caught by default\n        so that applications can display nicer error messages by just\n        catching them by hand.  If you want to stick with the default\n        error messages you can pass it ``catch_http_exceptions=True`` and\n        it will catch the http exceptions.\n\n        Here a small example for the dispatch usage::\n\n            from werkzeug.wrappers import Request, Response\n            from werkzeug.wsgi import responder\n            from werkzeug.routing import Map, Rule\n\n            def on_index(request):\n                return Response('Hello from the index')\n\n            url_map = Map([Rule('/', endpoint='index')])\n            views = {'index': on_index}\n\n            @responder\n            def application(environ, start_response):\n                request = Request(environ)\n                urls = url_map.bind_to_environ(environ)\n                return urls.dispatch(lambda e, v: views[e](request, **v),\n                                     catch_http_exceptions=True)\n\n        Keep in mind that this method might return exception objects, too, so\n        use :class:`Response.force_type` to get a response object.\n\n        :param view_func: a function that is called with the endpoint as\n                          first argument and the value dict as second.  Has\n                          to dispatch to the actual view function with this\n                          information.  (see above)\n        :param path_info: the path info to use for matching.  Overrides the\n                          path info specified on binding.\n        :param method: the HTTP method used for matching.  Overrides the\n                       method specified on binding.\n        :param catch_http_exceptions: set to `True` to catch any of the\n                                      werkzeug :class:`HTTPException`\\\\s.\n        \"\"\"\n        try:\n            try:\n                endpoint, args = self.match(path_info, method)\n            except RequestRedirect as e:\n                return e\n            return view_func(endpoint, args)\n        except HTTPException as e:\n            if catch_http_exceptions:\n                return e\n            raise\n\n    @typing.overload\n    def match(  # type: ignore\n        self,\n        path_info: t.Optional[str] = None,\n        method: t.Optional[str] = None,\n        return_rule: \"te.Literal[False]\" = False,\n        query_args: t.Optional[t.Union[t.Mapping[str, t.Any], str]] = None,\n        websocket: t.Optional[bool] = None,\n    ) -> t.Tuple[str, t.Mapping[str, t.Any]]:\n        ...\n\n    @typing.overload\n    def match(\n        self,\n        path_info: t.Optional[str] = None,\n        method: t.Optional[str] = None,\n        return_rule: \"te.Literal[True]\" = True,\n        query_args: t.Optional[t.Union[t.Mapping[str, t.Any], str]] = None,\n        websocket: t.Optional[bool] = None,\n    ) -> t.Tuple[Rule, t.Mapping[str, t.Any]]:\n        ...\n\n    def match(\n        self,\n        path_info: t.Optional[str] = None,\n        method: t.Optional[str] = None,\n        return_rule: bool = False,\n        query_args: t.Optional[t.Union[t.Mapping[str, t.Any], str]] = None,\n        websocket: t.Optional[bool] = None,\n    ) -> t.Tuple[t.Union[str, Rule], t.Mapping[str, t.Any]]:\n        \"\"\"The usage is simple: you just pass the match method the current\n        path info as well as the method (which defaults to `GET`).  The\n        following things can then happen:\n\n        - you receive a `NotFound` exception that indicates that no URL is\n          matching.  A `NotFound` exception is also a WSGI application you\n          can call to get a default page not found page (happens to be the\n          same object as `werkzeug.exceptions.NotFound`)\n\n        - you receive a `MethodNotAllowed` exception that indicates that there\n          is a match for this URL but not for the current request method.\n          This is useful for RESTful applications.\n\n        - you receive a `RequestRedirect` exception with a `new_url`\n          attribute.  This exception is used to notify you about a request\n          Werkzeug requests from your WSGI application.  This is for example the\n          case if you request ``/foo`` although the correct URL is ``/foo/``\n          You can use the `RequestRedirect` instance as response-like object\n          similar to all other subclasses of `HTTPException`.\n\n        - you receive a ``WebsocketMismatch`` exception if the only\n          match is a WebSocket rule but the bind is an HTTP request, or\n          if the match is an HTTP rule but the bind is a WebSocket\n          request.\n\n        - you get a tuple in the form ``(endpoint, arguments)`` if there is\n          a match (unless `return_rule` is True, in which case you get a tuple\n          in the form ``(rule, arguments)``)\n\n        If the path info is not passed to the match method the default path\n        info of the map is used (defaults to the root URL if not defined\n        explicitly).\n\n        All of the exceptions raised are subclasses of `HTTPException` so they\n        can be used as WSGI responses. They will all render generic error or\n        redirect pages.\n\n        Here is a small example for matching:\n\n        >>> m = Map([\n        ...     Rule('/', endpoint='index'),\n        ...     Rule('/downloads/', endpoint='downloads/index'),\n        ...     Rule('/downloads/<int:id>', endpoint='downloads/show')\n        ... ])\n        >>> urls = m.bind(\"example.com\", \"/\")\n        >>> urls.match(\"/\", \"GET\")\n        ('index', {})\n        >>> urls.match(\"/downloads/42\")\n        ('downloads/show', {'id': 42})\n\n        And here is what happens on redirect and missing URLs:\n\n        >>> urls.match(\"/downloads\")\n        Traceback (most recent call last):\n          ...\n        RequestRedirect: http://example.com/downloads/\n        >>> urls.match(\"/missing\")\n        Traceback (most recent call last):\n          ...\n        NotFound: 404 Not Found\n\n        :param path_info: the path info to use for matching.  Overrides the\n                          path info specified on binding.\n        :param method: the HTTP method used for matching.  Overrides the\n                       method specified on binding.\n        :param return_rule: return the rule that matched instead of just the\n                            endpoint (defaults to `False`).\n        :param query_args: optional query arguments that are used for\n                           automatic redirects as string or dictionary.  It's\n                           currently not possible to use the query arguments\n                           for URL matching.\n        :param websocket: Match WebSocket instead of HTTP requests. A\n            websocket request has a ``ws`` or ``wss``\n            :attr:`url_scheme`. This overrides that detection.\n\n        .. versionadded:: 1.0\n            Added ``websocket``.\n\n        .. versionchanged:: 0.8\n            ``query_args`` can be a string.\n\n        .. versionadded:: 0.7\n            Added ``query_args``.\n\n        .. versionadded:: 0.6\n            Added ``return_rule``.\n        \"\"\"\n        self.map.update()\n        if path_info is None:\n            path_info = self.path_info\n        else:\n            path_info = _to_str(path_info, self.map.charset)\n        if query_args is None:\n            query_args = self.query_args or {}\n        method = (method or self.default_method).upper()\n\n        if websocket is None:\n            websocket = self.websocket\n\n        require_redirect = False\n\n        domain_part = self.server_name if self.map.host_matching else self.subdomain\n        path_part = f\"/{path_info.lstrip('/')}\" if path_info else \"\"\n        path = f\"{domain_part}|{path_part}\"\n\n        have_match_for = set()\n        websocket_mismatch = False\n\n        for rule in self.map._rules:\n            try:\n                rv = rule.match(path, method)\n            except RequestPath as e:\n                raise RequestRedirect(\n                    self.make_redirect_url(\n                        url_quote(e.path_info, self.map.charset, safe=\"/:|+\"),\n                        query_args,\n                    )\n                ) from None\n            except RequestAliasRedirect as e:\n                raise RequestRedirect(\n                    self.make_alias_redirect_url(\n                        path, rule.endpoint, e.matched_values, method, query_args\n                    )\n                ) from None\n            if rv is None:\n                continue\n            if rule.methods is not None and method not in rule.methods:\n                have_match_for.update(rule.methods)\n                continue\n\n            if rule.websocket != websocket:\n                websocket_mismatch = True\n                continue\n\n            if self.map.redirect_defaults:\n                redirect_url = self.get_default_redirect(rule, method, rv, query_args)\n                if redirect_url is not None:\n                    raise RequestRedirect(redirect_url)\n\n            if rule.redirect_to is not None:\n                if isinstance(rule.redirect_to, str):\n\n                    def _handle_match(match: t.Match[str]) -> str:\n                        value = rv[match.group(1)]  # type: ignore\n                        return rule._converters[match.group(1)].to_url(value)\n\n                    redirect_url = _simple_rule_re.sub(_handle_match, rule.redirect_to)\n                else:\n                    redirect_url = rule.redirect_to(self, **rv)\n\n                if self.subdomain:\n                    netloc = f\"{self.subdomain}.{self.server_name}\"\n                else:\n                    netloc = self.server_name\n\n                raise RequestRedirect(\n                    url_join(\n                        f\"{self.url_scheme or 'http'}://{netloc}{self.script_name}\",\n                        redirect_url,\n                    )\n                )\n\n            if require_redirect:\n                raise RequestRedirect(\n                    self.make_redirect_url(\n                        url_quote(path_info, self.map.charset, safe=\"/:|+\"), query_args\n                    )\n                )\n\n            if return_rule:\n                return rule, rv\n            else:\n                return rule.endpoint, rv\n\n        if have_match_for:\n            raise MethodNotAllowed(valid_methods=list(have_match_for))\n\n        if websocket_mismatch:\n            raise WebsocketMismatch()\n\n        raise NotFound()\n\n    def test(\n        self, path_info: t.Optional[str] = None, method: t.Optional[str] = None\n    ) -> bool:\n        \"\"\"Test if a rule would match.  Works like `match` but returns `True`\n        if the URL matches, or `False` if it does not exist.\n\n        :param path_info: the path info to use for matching.  Overrides the\n                          path info specified on binding.\n        :param method: the HTTP method used for matching.  Overrides the\n                       method specified on binding.\n        \"\"\"\n        try:\n            self.match(path_info, method)\n        except RequestRedirect:\n            pass\n        except HTTPException:\n            return False\n        return True\n\n    def allowed_methods(self, path_info: t.Optional[str] = None) -> t.Iterable[str]:\n        \"\"\"Returns the valid methods that match for a given path.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        try:\n            self.match(path_info, method=\"--\")\n        except MethodNotAllowed as e:\n            return e.valid_methods  # type: ignore\n        except HTTPException:\n            pass\n        return []\n\n    def get_host(self, domain_part: t.Optional[str]) -> str:\n        \"\"\"Figures out the full host name for the given domain part.  The\n        domain part is a subdomain in case host matching is disabled or\n        a full host name.\n        \"\"\"\n        if self.map.host_matching:\n            if domain_part is None:\n                return self.server_name\n            return _to_str(domain_part, \"ascii\")\n        subdomain = domain_part\n        if subdomain is None:\n            subdomain = self.subdomain\n        else:\n            subdomain = _to_str(subdomain, \"ascii\")\n\n        if subdomain:\n            return f\"{subdomain}.{self.server_name}\"\n        else:\n            return self.server_name\n\n    def get_default_redirect(\n        self,\n        rule: Rule,\n        method: str,\n        values: t.MutableMapping[str, t.Any],\n        query_args: t.Union[t.Mapping[str, t.Any], str],\n    ) -> t.Optional[str]:\n        \"\"\"A helper that returns the URL to redirect to if it finds one.\n        This is used for default redirecting only.\n\n        :internal:\n        \"\"\"\n        assert self.map.redirect_defaults\n        for r in self.map._rules_by_endpoint[rule.endpoint]:\n            # every rule that comes after this one, including ourself\n            # has a lower priority for the defaults.  We order the ones\n            # with the highest priority up for building.\n            if r is rule:\n                break\n            if r.provides_defaults_for(rule) and r.suitable_for(values, method):\n                values.update(r.defaults)  # type: ignore\n                domain_part, path = r.build(values)  # type: ignore\n                return self.make_redirect_url(path, query_args, domain_part=domain_part)\n        return None\n\n    def encode_query_args(self, query_args: t.Union[t.Mapping[str, t.Any], str]) -> str:\n        if not isinstance(query_args, str):\n            return url_encode(query_args, self.map.charset)\n        return query_args\n\n    def make_redirect_url(\n        self,\n        path_info: str,\n        query_args: t.Optional[t.Union[t.Mapping[str, t.Any], str]] = None,\n        domain_part: t.Optional[str] = None,\n    ) -> str:\n        \"\"\"Creates a redirect URL.\n\n        :internal:\n        \"\"\"\n        if query_args:\n            suffix = f\"?{self.encode_query_args(query_args)}\"\n        else:\n            suffix = \"\"\n\n        scheme = self.url_scheme or \"http\"\n        host = self.get_host(domain_part)\n        path = posixpath.join(self.script_name.strip(\"/\"), path_info.lstrip(\"/\"))\n        return f\"{scheme}://{host}/{path}{suffix}\"\n\n    def make_alias_redirect_url(\n        self,\n        path: str,\n        endpoint: str,\n        values: t.Mapping[str, t.Any],\n        method: str,\n        query_args: t.Union[t.Mapping[str, t.Any], str],\n    ) -> str:\n        \"\"\"Internally called to make an alias redirect URL.\"\"\"\n        url = self.build(\n            endpoint, values, method, append_unknown=False, force_external=True\n        )\n        if query_args:\n            url += f\"?{self.encode_query_args(query_args)}\"\n        assert url != path, \"detected invalid alias setting. No canonical URL found\"\n        return url\n\n    def _partial_build(\n        self,\n        endpoint: str,\n        values: t.Mapping[str, t.Any],\n        method: t.Optional[str],\n        append_unknown: bool,\n    ) -> t.Optional[t.Tuple[str, str, bool]]:\n        \"\"\"Helper for :meth:`build`.  Returns subdomain and path for the\n        rule that accepts this endpoint, values and method.\n\n        :internal:\n        \"\"\"\n        # in case the method is none, try with the default method first\n        if method is None:\n            rv = self._partial_build(\n                endpoint, values, self.default_method, append_unknown\n            )\n            if rv is not None:\n                return rv\n\n        # Default method did not match or a specific method is passed.\n        # Check all for first match with matching host. If no matching\n        # host is found, go with first result.\n        first_match = None\n\n        for rule in self.map._rules_by_endpoint.get(endpoint, ()):\n            if rule.suitable_for(values, method):\n                build_rv = rule.build(values, append_unknown)\n\n                if build_rv is not None:\n                    rv = (build_rv[0], build_rv[1], rule.websocket)\n                    if self.map.host_matching:\n                        if rv[0] == self.server_name:\n                            return rv\n                        elif first_match is None:\n                            first_match = rv\n                    else:\n                        return rv\n\n        return first_match\n\n    def build(\n        self,\n        endpoint: str,\n        values: t.Optional[t.Mapping[str, t.Any]] = None,\n        method: t.Optional[str] = None,\n        force_external: bool = False,\n        append_unknown: bool = True,\n        url_scheme: t.Optional[str] = None,\n    ) -> str:\n        \"\"\"Building URLs works pretty much the other way round.  Instead of\n        `match` you call `build` and pass it the endpoint and a dict of\n        arguments for the placeholders.\n\n        The `build` function also accepts an argument called `force_external`\n        which, if you set it to `True` will force external URLs. Per default\n        external URLs (include the server name) will only be used if the\n        target URL is on a different subdomain.\n\n        >>> m = Map([\n        ...     Rule('/', endpoint='index'),\n        ...     Rule('/downloads/', endpoint='downloads/index'),\n        ...     Rule('/downloads/<int:id>', endpoint='downloads/show')\n        ... ])\n        >>> urls = m.bind(\"example.com\", \"/\")\n        >>> urls.build(\"index\", {})\n        '/'\n        >>> urls.build(\"downloads/show\", {'id': 42})\n        '/downloads/42'\n        >>> urls.build(\"downloads/show\", {'id': 42}, force_external=True)\n        'http://example.com/downloads/42'\n\n        Because URLs cannot contain non ASCII data you will always get\n        bytes back.  Non ASCII characters are urlencoded with the\n        charset defined on the map instance.\n\n        Additional values are converted to strings and appended to the URL as\n        URL querystring parameters:\n\n        >>> urls.build(\"index\", {'q': 'My Searchstring'})\n        '/?q=My+Searchstring'\n\n        When processing those additional values, lists are furthermore\n        interpreted as multiple values (as per\n        :py:class:`werkzeug.datastructures.MultiDict`):\n\n        >>> urls.build(\"index\", {'q': ['a', 'b', 'c']})\n        '/?q=a&q=b&q=c'\n\n        Passing a ``MultiDict`` will also add multiple values:\n\n        >>> urls.build(\"index\", MultiDict((('p', 'z'), ('q', 'a'), ('q', 'b'))))\n        '/?p=z&q=a&q=b'\n\n        If a rule does not exist when building a `BuildError` exception is\n        raised.\n\n        The build method accepts an argument called `method` which allows you\n        to specify the method you want to have an URL built for if you have\n        different methods for the same endpoint specified.\n\n        :param endpoint: the endpoint of the URL to build.\n        :param values: the values for the URL to build.  Unhandled values are\n                       appended to the URL as query parameters.\n        :param method: the HTTP method for the rule if there are different\n                       URLs for different methods on the same endpoint.\n        :param force_external: enforce full canonical external URLs. If the URL\n                               scheme is not provided, this will generate\n                               a protocol-relative URL.\n        :param append_unknown: unknown parameters are appended to the generated\n                               URL as query string argument.  Disable this\n                               if you want the builder to ignore those.\n        :param url_scheme: Scheme to use in place of the bound\n            :attr:`url_scheme`.\n\n        .. versionchanged:: 2.0\n            Added the ``url_scheme`` parameter.\n\n        .. versionadded:: 0.6\n           Added the ``append_unknown`` parameter.\n        \"\"\"\n        self.map.update()\n\n        if values:\n            temp_values: t.Dict[str, t.Union[t.List[t.Any], t.Any]] = {}\n            always_list = isinstance(values, MultiDict)\n            key: str\n            value: t.Optional[t.Union[t.List[t.Any], t.Any]]\n\n            # For MultiDict, dict.items(values) is like values.lists()\n            # without the call or list coercion overhead.\n            for key, value in dict.items(values):  # type: ignore\n                if value is None:\n                    continue\n\n                if always_list or isinstance(value, (list, tuple)):\n                    value = [v for v in value if v is not None]\n\n                    if not value:\n                        continue\n\n                    if len(value) == 1:\n                        value = value[0]\n\n                temp_values[key] = value\n\n            values = temp_values\n        else:\n            values = {}\n\n        rv = self._partial_build(endpoint, values, method, append_unknown)\n        if rv is None:\n            raise BuildError(endpoint, values, method, self)\n\n        domain_part, path, websocket = rv\n        host = self.get_host(domain_part)\n\n        if url_scheme is None:\n            url_scheme = self.url_scheme\n\n        # Always build WebSocket routes with the scheme (browsers\n        # require full URLs). If bound to a WebSocket, ensure that HTTP\n        # routes are built with an HTTP scheme.\n        secure = url_scheme in {\"https\", \"wss\"}\n\n        if websocket:\n            force_external = True\n            url_scheme = \"wss\" if secure else \"ws\"\n        elif url_scheme:\n            url_scheme = \"https\" if secure else \"http\"\n\n        # shortcut this.\n        if not force_external and (\n            (self.map.host_matching and host == self.server_name)\n            or (not self.map.host_matching and domain_part == self.subdomain)\n        ):\n            return f\"{self.script_name.rstrip('/')}/{path.lstrip('/')}\"\n\n        scheme = f\"{url_scheme}:\" if url_scheme else \"\"\n        return f\"{scheme}//{host}{self.script_name[:-1]}/{path.lstrip('/')}\"\n", 2341], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# convert template to internal format\n#\n# Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.\n#\n# See the sre.py file for information on usage and redistribution.\n#\n\n\"\"\"Internal support module for sre\"\"\"\n\nimport _sre\nimport sre_parse\nfrom sre_constants import *\n\nassert _sre.MAGIC == MAGIC, \"SRE module mismatch\"\n\n_LITERAL_CODES = {LITERAL, NOT_LITERAL}\n_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # i\u0131\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # s\u017f\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # \u00b5\u03bc\n    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI\n    (0x345, 0x3b9, 0x1fbe), # \\u0345\u03b9\u1fbe\n    # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n    (0x390, 0x1fd3), # \u0390\u1fd3\n    # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA\n    (0x3b0, 0x1fe3), # \u03b0\u1fe3\n    # GREEK SMALL LETTER BETA, GREEK BETA SYMBOL\n    (0x3b2, 0x3d0), # \u03b2\u03d0\n    # GREEK SMALL LETTER EPSILON, GREEK LUNATE EPSILON SYMBOL\n    (0x3b5, 0x3f5), # \u03b5\u03f5\n    # GREEK SMALL LETTER THETA, GREEK THETA SYMBOL\n    (0x3b8, 0x3d1), # \u03b8\u03d1\n    # GREEK SMALL LETTER KAPPA, GREEK KAPPA SYMBOL\n    (0x3ba, 0x3f0), # \u03ba\u03f0\n    # GREEK SMALL LETTER PI, GREEK PI SYMBOL\n    (0x3c0, 0x3d6), # \u03c0\u03d6\n    # GREEK SMALL LETTER RHO, GREEK RHO SYMBOL\n    (0x3c1, 0x3f1), # \u03c1\u03f1\n    # GREEK SMALL LETTER FINAL SIGMA, GREEK SMALL LETTER SIGMA\n    (0x3c2, 0x3c3), # \u03c2\u03c3\n    # GREEK SMALL LETTER PHI, GREEK PHI SYMBOL\n    (0x3c6, 0x3d5), # \u03c6\u03d5\n    # LATIN SMALL LETTER S WITH DOT ABOVE, LATIN SMALL LETTER LONG S WITH DOT ABOVE\n    (0x1e61, 0x1e9b), # \u1e61\u1e9b\n    # LATIN SMALL LIGATURE LONG S T, LATIN SMALL LIGATURE ST\n    (0xfb05, 0xfb06), # \ufb05\ufb06\n)\n\n# Maps the lowercase code to lowercase codes which have the same uppercase.\n_ignorecase_fixes = {i: tuple(j for j in t if i != j)\n                     for t in _equivalences for i in t}\n\ndef _combine_flags(flags, add_flags, del_flags,\n                   TYPE_FLAGS=sre_parse.TYPE_FLAGS):\n    if add_flags & TYPE_FLAGS:\n        flags &= ~TYPE_FLAGS\n    return (flags | add_flags) & ~del_flags\n\ndef _compile(code, pattern, flags):\n    # internal: compile a (sub)pattern\n    emit = code.append\n    _len = len\n    LITERAL_CODES = _LITERAL_CODES\n    REPEATING_CODES = _REPEATING_CODES\n    SUCCESS_CODES = _SUCCESS_CODES\n    ASSERT_CODES = _ASSERT_CODES\n    iscased = None\n    tolower = None\n    fixes = None\n    if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\n        if flags & SRE_FLAG_UNICODE and not flags & SRE_FLAG_ASCII:\n            iscased = _sre.unicode_iscased\n            tolower = _sre.unicode_tolower\n            fixes = _ignorecase_fixes\n        else:\n            iscased = _sre.ascii_iscased\n            tolower = _sre.ascii_tolower\n    for op, av in pattern:\n        if op in LITERAL_CODES:\n            if not flags & SRE_FLAG_IGNORECASE:\n                emit(op)\n                emit(av)\n            elif flags & SRE_FLAG_LOCALE:\n                emit(OP_LOCALE_IGNORE[op])\n                emit(av)\n            elif not iscased(av):\n                emit(op)\n                emit(av)\n            else:\n                lo = tolower(av)\n                if not fixes:  # ascii\n                    emit(OP_IGNORE[op])\n                    emit(lo)\n                elif lo not in fixes:\n                    emit(OP_UNICODE_IGNORE[op])\n                    emit(lo)\n                else:\n                    emit(IN_UNI_IGNORE)\n                    skip = _len(code); emit(0)\n                    if op is NOT_LITERAL:\n                        emit(NEGATE)\n                    for k in (lo,) + fixes[lo]:\n                        emit(LITERAL)\n                        emit(k)\n                    emit(FAILURE)\n                    code[skip] = _len(code) - skip\n        elif op is IN:\n            charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\n            if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\n                emit(IN_LOC_IGNORE)\n            elif not hascased:\n                emit(IN)\n            elif not fixes:  # ascii\n                emit(IN_IGNORE)\n            else:\n                emit(IN_UNI_IGNORE)\n            skip = _len(code); emit(0)\n            _compile_charset(charset, flags, code)\n            code[skip] = _len(code) - skip\n        elif op is ANY:\n            if flags & SRE_FLAG_DOTALL:\n                emit(ANY_ALL)\n            else:\n                emit(ANY)\n        elif op in REPEATING_CODES:\n            if flags & SRE_FLAG_TEMPLATE:\n                raise error(\"internal: unsupported template operator %r\" % (op,))\n            if _simple(av[2]):\n                if op is MAX_REPEAT:\n                    emit(REPEAT_ONE)\n                else:\n                    emit(MIN_REPEAT_ONE)\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                emit(SUCCESS)\n                code[skip] = _len(code) - skip\n            else:\n                emit(REPEAT)\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                code[skip] = _len(code) - skip\n                if op is MAX_REPEAT:\n                    emit(MAX_UNTIL)\n                else:\n                    emit(MIN_UNTIL)\n        elif op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            if group:\n                emit(MARK)\n                emit((group-1)*2)\n            # _compile_info(code, p, _combine_flags(flags, add_flags, del_flags))\n            _compile(code, p, _combine_flags(flags, add_flags, del_flags))\n            if group:\n                emit(MARK)\n                emit((group-1)*2+1)\n        elif op in SUCCESS_CODES:\n            emit(op)\n        elif op in ASSERT_CODES:\n            emit(op)\n            skip = _len(code); emit(0)\n            if av[0] >= 0:\n                emit(0) # look ahead\n            else:\n                lo, hi = av[1].getwidth()\n                if lo != hi:\n                    raise error(\"look-behind requires fixed-width pattern\")\n                emit(lo) # look behind\n            _compile(code, av[1], flags)\n            emit(SUCCESS)\n            code[skip] = _len(code) - skip\n        elif op is CALL:\n            emit(op)\n            skip = _len(code); emit(0)\n            _compile(code, av, flags)\n            emit(SUCCESS)\n            code[skip] = _len(code) - skip\n        elif op is AT:\n            emit(op)\n            if flags & SRE_FLAG_MULTILINE:\n                av = AT_MULTILINE.get(av, av)\n            if flags & SRE_FLAG_LOCALE:\n                av = AT_LOCALE.get(av, av)\n            elif (flags & SRE_FLAG_UNICODE) and not (flags & SRE_FLAG_ASCII):\n                av = AT_UNICODE.get(av, av)\n            emit(av)\n        elif op is BRANCH:\n            emit(op)\n            tail = []\n            tailappend = tail.append\n            for av in av[1]:\n                skip = _len(code); emit(0)\n                # _compile_info(code, av, flags)\n                _compile(code, av, flags)\n                emit(JUMP)\n                tailappend(_len(code)); emit(0)\n                code[skip] = _len(code) - skip\n            emit(FAILURE) # end of branch\n            for tail in tail:\n                code[tail] = _len(code) - tail\n        elif op is CATEGORY:\n            emit(op)\n            if flags & SRE_FLAG_LOCALE:\n                av = CH_LOCALE[av]\n            elif (flags & SRE_FLAG_UNICODE) and not (flags & SRE_FLAG_ASCII):\n                av = CH_UNICODE[av]\n            emit(av)\n        elif op is GROUPREF:\n            if not flags & SRE_FLAG_IGNORECASE:\n                emit(op)\n            elif flags & SRE_FLAG_LOCALE:\n                emit(GROUPREF_LOC_IGNORE)\n            elif not fixes:  # ascii\n                emit(GROUPREF_IGNORE)\n            else:\n                emit(GROUPREF_UNI_IGNORE)\n            emit(av-1)\n        elif op is GROUPREF_EXISTS:\n            emit(op)\n            emit(av[0]-1)\n            skipyes = _len(code); emit(0)\n            _compile(code, av[1], flags)\n            if av[2]:\n                emit(JUMP)\n                skipno = _len(code); emit(0)\n                code[skipyes] = _len(code) - skipyes + 1\n                _compile(code, av[2], flags)\n                code[skipno] = _len(code) - skipno\n            else:\n                code[skipyes] = _len(code) - skipyes + 1\n        else:\n            raise error(\"internal: unsupported operand type %r\" % (op,))\n\ndef _compile_charset(charset, flags, code):\n    # compile charset subprogram\n    emit = code.append\n    for op, av in charset:\n        emit(op)\n        if op is NEGATE:\n            pass\n        elif op is LITERAL:\n            emit(av)\n        elif op is RANGE or op is RANGE_UNI_IGNORE:\n            emit(av[0])\n            emit(av[1])\n        elif op is CHARSET:\n            code.extend(av)\n        elif op is BIGCHARSET:\n            code.extend(av)\n        elif op is CATEGORY:\n            if flags & SRE_FLAG_LOCALE:\n                emit(CH_LOCALE[av])\n            elif (flags & SRE_FLAG_UNICODE) and not (flags & SRE_FLAG_ASCII):\n                emit(CH_UNICODE[av])\n            else:\n                emit(av)\n        else:\n            raise error(\"internal: unsupported set operator %r\" % (op,))\n    emit(FAILURE)\n\ndef _optimize_charset(charset, iscased=None, fixup=None, fixes=None):\n    # internal: optimize character set\n    out = []\n    tail = []\n    charmap = bytearray(256)\n    hascased = False\n    for op, av in charset:\n        while True:\n            try:\n                if op is LITERAL:\n                    if fixup:\n                        lo = fixup(av)\n                        charmap[lo] = 1\n                        if fixes and lo in fixes:\n                            for k in fixes[lo]:\n                                charmap[k] = 1\n                        if not hascased and iscased(av):\n                            hascased = True\n                    else:\n                        charmap[av] = 1\n                elif op is RANGE:\n                    r = range(av[0], av[1]+1)\n                    if fixup:\n                        if fixes:\n                            for i in map(fixup, r):\n                                charmap[i] = 1\n                                if i in fixes:\n                                    for k in fixes[i]:\n                                        charmap[k] = 1\n                        else:\n                            for i in map(fixup, r):\n                                charmap[i] = 1\n                        if not hascased:\n                            hascased = any(map(iscased, r))\n                    else:\n                        for i in r:\n                            charmap[i] = 1\n                elif op is NEGATE:\n                    out.append((op, av))\n                else:\n                    tail.append((op, av))\n            except IndexError:\n                if len(charmap) == 256:\n                    # character set contains non-UCS1 character codes\n                    charmap += b'\\0' * 0xff00\n                    continue\n                # Character set contains non-BMP character codes.\n                if fixup:\n                    hascased = True\n                    # There are only two ranges of cased non-BMP characters:\n                    # 10400-1044F (Deseret) and 118A0-118DF (Warang Citi),\n                    # and for both ranges RANGE_UNI_IGNORE works.\n                    if op is RANGE:\n                        op = RANGE_UNI_IGNORE\n                tail.append((op, av))\n            break\n\n    # compress character map\n    runs = []\n    q = 0\n    while True:\n        p = charmap.find(1, q)\n        if p < 0:\n            break\n        if len(runs) >= 2:\n            runs = None\n            break\n        q = charmap.find(0, p)\n        if q < 0:\n            runs.append((p, len(charmap)))\n            break\n        runs.append((p, q))\n    if runs is not None:\n        # use literal/range\n        for p, q in runs:\n            if q - p == 1:\n                out.append((LITERAL, p))\n            else:\n                out.append((RANGE, (p, q - 1)))\n        out += tail\n        # if the case was changed or new representation is more compact\n        if hascased or len(out) < len(charset):\n            return out, hascased\n        # else original character set is good enough\n        return charset, hascased\n\n    # use bitmap\n    if len(charmap) == 256:\n        data = _mk_bitmap(charmap)\n        out.append((CHARSET, data))\n        out += tail\n        return out, hascased\n\n    # To represent a big charset, first a bitmap of all characters in the\n    # set is constructed. Then, this bitmap is sliced into chunks of 256\n    # characters, duplicate chunks are eliminated, and each chunk is\n    # given a number. In the compiled expression, the charset is\n    # represented by a 32-bit word sequence, consisting of one word for\n    # the number of different chunks, a sequence of 256 bytes (64 words)\n    # of chunk numbers indexed by their original chunk position, and a\n    # sequence of 256-bit chunks (8 words each).\n\n    # Compression is normally good: in a typical charset, large ranges of\n    # Unicode will be either completely excluded (e.g. if only cyrillic\n    # letters are to be matched), or completely included (e.g. if large\n    # subranges of Kanji match). These ranges will be represented by\n    # chunks of all one-bits or all zero-bits.\n\n    # Matching can be also done efficiently: the more significant byte of\n    # the Unicode character is an index into the chunk number, and the\n    # less significant byte is a bit index in the chunk (just like the\n    # CHARSET matching).\n\n    charmap = bytes(charmap) # should be hashable\n    comps = {}\n    mapping = bytearray(256)\n    block = 0\n    data = bytearray()\n    for i in range(0, 65536, 256):\n        chunk = charmap[i: i + 256]\n        if chunk in comps:\n            mapping[i // 256] = comps[chunk]\n        else:\n            mapping[i // 256] = comps[chunk] = block\n            block += 1\n            data += chunk\n    data = _mk_bitmap(data)\n    data[0:0] = [block] + _bytes_to_codes(mapping)\n    out.append((BIGCHARSET, data))\n    out += tail\n    return out, hascased\n\n_CODEBITS = _sre.CODESIZE * 8\nMAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\n\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE\n    assert len(a) * a.itemsize == len(b)\n    return a.tolist()\n\ndef _simple(p):\n    # check if this subpattern is a \"simple\" operator\n    if len(p) != 1:\n        return False\n    op, av = p[0]\n    if op is SUBPATTERN:\n        return av[0] is None and _simple(av[-1])\n    return op in _UNIT_CODES\n\ndef _generate_overlap_table(prefix):\n    \"\"\"\n    Generate an overlap table for the following prefix.\n    An overlap table is a table of the same size as the prefix which\n    informs about the potential self-overlap for each index in the prefix:\n    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]\n    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with\n      prefix[0:k]\n    \"\"\"\n    table = [0] * len(prefix)\n    for i in range(1, len(prefix)):\n        idx = table[i - 1]\n        while prefix[i] != prefix[idx]:\n            if idx == 0:\n                table[i] = 0\n                break\n            idx = table[idx - 1]\n        else:\n            table[i] = idx + 1\n    return table\n\ndef _get_iscased(flags):\n    if not flags & SRE_FLAG_IGNORECASE:\n        return None\n    elif flags & SRE_FLAG_UNICODE and not flags & SRE_FLAG_ASCII:\n        return _sre.unicode_iscased\n    else:\n        return _sre.ascii_iscased\n\ndef _get_literal_prefix(pattern, flags):\n    # look for literal prefix\n    prefix = []\n    prefixappend = prefix.append\n    prefix_skip = None\n    iscased = _get_iscased(flags)\n    for op, av in pattern.data:\n        if op is LITERAL:\n            if iscased and iscased(av):\n                break\n            prefixappend(av)\n        elif op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            flags1 = _combine_flags(flags, add_flags, del_flags)\n            if flags1 & SRE_FLAG_IGNORECASE and flags1 & SRE_FLAG_LOCALE:\n                break\n            prefix1, prefix_skip1, got_all = _get_literal_prefix(p, flags1)\n            if prefix_skip is None:\n                if group is not None:\n                    prefix_skip = len(prefix)\n                elif prefix_skip1 is not None:\n                    prefix_skip = len(prefix) + prefix_skip1\n            prefix.extend(prefix1)\n            if not got_all:\n                break\n        else:\n            break\n    else:\n        return prefix, prefix_skip, True\n    return prefix, prefix_skip, False\n\ndef _get_charset_prefix(pattern, flags):\n    while True:\n        if not pattern.data:\n            return None\n        op, av = pattern.data[0]\n        if op is not SUBPATTERN:\n            break\n        group, add_flags, del_flags, pattern = av\n        flags = _combine_flags(flags, add_flags, del_flags)\n        if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\n            return None\n\n    iscased = _get_iscased(flags)\n    if op is LITERAL:\n        if iscased and iscased(av):\n            return None\n        return [(op, av)]\n    elif op is BRANCH:\n        charset = []\n        charsetappend = charset.append\n        for p in av[1]:\n            if not p:\n                return None\n            op, av = p[0]\n            if op is LITERAL and not (iscased and iscased(av)):\n                charsetappend((op, av))\n            else:\n                return None\n        return charset\n    elif op is IN:\n        charset = av\n        if iscased:\n            for op, av in charset:\n                if op is LITERAL:\n                    if iscased(av):\n                        return None\n                elif op is RANGE:\n                    if av[1] > 0xffff:\n                        return None\n                    if any(map(iscased, range(av[0], av[1]+1))):\n                        return None\n        return charset\n    return None\n\ndef _compile_info(code, pattern, flags):\n    # internal: compile an info block.  in the current version,\n    # this contains min/max pattern width, and an optional literal\n    # prefix or a character map\n    lo, hi = pattern.getwidth()\n    if hi > MAXCODE:\n        hi = MAXCODE\n    if lo == 0:\n        code.extend([INFO, 4, 0, lo, hi])\n        return\n    # look for a literal prefix\n    prefix = []\n    prefix_skip = 0\n    charset = [] # not used\n    if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\n        # look for literal prefix\n        prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\n        # if no prefix, look for charset prefix\n        if not prefix:\n            charset = _get_charset_prefix(pattern, flags)\n##     if prefix:\n##         print(\"*** PREFIX\", prefix, prefix_skip)\n##     if charset:\n##         print(\"*** CHARSET\", charset)\n    # add an info block\n    emit = code.append\n    emit(INFO)\n    skip = len(code); emit(0)\n    # literal flag\n    mask = 0\n    if prefix:\n        mask = SRE_INFO_PREFIX\n        if prefix_skip is None and got_all:\n            mask = mask | SRE_INFO_LITERAL\n    elif charset:\n        mask = mask | SRE_INFO_CHARSET\n    emit(mask)\n    # pattern length\n    if lo < MAXCODE:\n        emit(lo)\n    else:\n        emit(MAXCODE)\n        prefix = prefix[:MAXCODE]\n    emit(min(hi, MAXCODE))\n    # add literal prefix\n    if prefix:\n        emit(len(prefix)) # length\n        if prefix_skip is None:\n            prefix_skip =  len(prefix)\n        emit(prefix_skip) # skip\n        code.extend(prefix)\n        # generate overlap table\n        code.extend(_generate_overlap_table(prefix))\n    elif charset:\n        charset, hascased = _optimize_charset(charset)\n        assert not hascased\n        _compile_charset(charset, flags, code)\n    code[skip] = len(code) - skip\n\ndef isstring(obj):\n    return isinstance(obj, (str, bytes))\n\ndef _code(p, flags):\n\n    flags = p.pattern.flags | flags\n    code = []\n\n    # compile info block\n    _compile_info(code, p, flags)\n\n    # compile the pattern\n    _compile(code, p.data, flags)\n\n    code.append(SUCCESS)\n\n    return code\n\ndef _hex_code(code):\n    return '[%s]' % ', '.join('%#0*x' % (_sre.CODESIZE*2+2, x) for x in code)\n\ndef dis(code):\n    import sys\n\n    labels = set()\n    level = 0\n    offset_width = len(str(len(code) - 1))\n\n    def dis_(start, end):\n        def print_(*args, to=None):\n            if to is not None:\n                labels.add(to)\n                args += ('(to %d)' % (to,),)\n            print('%*d%s ' % (offset_width, start, ':' if start in labels else '.'),\n                  end='  '*(level-1))\n            print(*args)\n\n        def print_2(*args):\n            print(end=' '*(offset_width + 2*level))\n            print(*args)\n\n        nonlocal level\n        level += 1\n        i = start\n        while i < end:\n            start = i\n            op = code[i]\n            i += 1\n            op = OPCODES[op]\n            if op in (SUCCESS, FAILURE, ANY, ANY_ALL,\n                      MAX_UNTIL, MIN_UNTIL, NEGATE):\n                print_(op)\n            elif op in (LITERAL, NOT_LITERAL,\n                        LITERAL_IGNORE, NOT_LITERAL_IGNORE,\n                        LITERAL_UNI_IGNORE, NOT_LITERAL_UNI_IGNORE,\n                        LITERAL_LOC_IGNORE, NOT_LITERAL_LOC_IGNORE):\n                arg = code[i]\n                i += 1\n                print_(op, '%#02x (%r)' % (arg, chr(arg)))\n            elif op is AT:\n                arg = code[i]\n                i += 1\n                arg = str(ATCODES[arg])\n                assert arg[:3] == 'AT_'\n                print_(op, arg[3:])\n            elif op is CATEGORY:\n                arg = code[i]\n                i += 1\n                arg = str(CHCODES[arg])\n                assert arg[:9] == 'CATEGORY_'\n                print_(op, arg[9:])\n            elif op in (IN, IN_IGNORE, IN_UNI_IGNORE, IN_LOC_IGNORE):\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                dis_(i+1, i+skip)\n                i += skip\n            elif op in (RANGE, RANGE_UNI_IGNORE):\n                lo, hi = code[i: i+2]\n                i += 2\n                print_(op, '%#02x %#02x (%r-%r)' % (lo, hi, chr(lo), chr(hi)))\n            elif op is CHARSET:\n                print_(op, _hex_code(code[i: i + 256//_CODEBITS]))\n                i += 256//_CODEBITS\n            elif op is BIGCHARSET:\n                arg = code[i]\n                i += 1\n                mapping = list(b''.join(x.to_bytes(_sre.CODESIZE, sys.byteorder)\n                                        for x in code[i: i + 256//_sre.CODESIZE]))\n                print_(op, arg, mapping)\n                i += 256//_sre.CODESIZE\n                level += 1\n                for j in range(arg):\n                    print_2(_hex_code(code[i: i + 256//_CODEBITS]))\n                    i += 256//_CODEBITS\n                level -= 1\n            elif op in (MARK, GROUPREF, GROUPREF_IGNORE, GROUPREF_UNI_IGNORE,\n                        GROUPREF_LOC_IGNORE):\n                arg = code[i]\n                i += 1\n                print_(op, arg)\n            elif op is JUMP:\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                i += 1\n            elif op is BRANCH:\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                while skip:\n                    dis_(i+1, i+skip)\n                    i += skip\n                    start = i\n                    skip = code[i]\n                    if skip:\n                        print_('branch', skip, to=i+skip)\n                    else:\n                        print_(FAILURE)\n                i += 1\n            elif op in (REPEAT, REPEAT_ONE, MIN_REPEAT_ONE):\n                skip, min, max = code[i: i+3]\n                if max == MAXREPEAT:\n                    max = 'MAXREPEAT'\n                print_(op, skip, min, max, to=i+skip)\n                dis_(i+3, i+skip)\n                i += skip\n            elif op is GROUPREF_EXISTS:\n                arg, skip = code[i: i+2]\n                print_(op, arg, skip, to=i+skip)\n                i += 2\n            elif op in (ASSERT, ASSERT_NOT):\n                skip, arg = code[i: i+2]\n                print_(op, skip, arg, to=i+skip)\n                dis_(i+2, i+skip)\n                i += skip\n            elif op is INFO:\n                skip, flags, min, max = code[i: i+4]\n                if max == MAXREPEAT:\n                    max = 'MAXREPEAT'\n                print_(op, skip, bin(flags), min, max, to=i+skip)\n                start = i+4\n                if flags & SRE_INFO_PREFIX:\n                    prefix_len, prefix_skip = code[i+4: i+6]\n                    print_2('  prefix_skip', prefix_skip)\n                    start = i + 6\n                    prefix = code[start: start+prefix_len]\n                    print_2('  prefix',\n                            '[%s]' % ', '.join('%#02x' % x for x in prefix),\n                            '(%r)' % ''.join(map(chr, prefix)))\n                    start += prefix_len\n                    print_2('  overlap', code[start: start+prefix_len])\n                    start += prefix_len\n                if flags & SRE_INFO_CHARSET:\n                    level += 1\n                    print_2('in')\n                    dis_(start, i+skip)\n                    level -= 1\n                i += skip\n            else:\n                raise ValueError(op)\n\n        level -= 1\n\n    dis_(0, len(code))\n\n\ndef compile(p, flags=0):\n    # internal: convert pattern list to internal format\n\n    if isstring(p):\n        pattern = p\n        p = sre_parse.parse(p, flags)\n    else:\n        pattern = None\n\n    code = _code(p, flags)\n\n    if flags & SRE_FLAG_DEBUG:\n        print()\n        dis(code)\n\n    # map in either direction\n    groupindex = p.pattern.groupdict\n    indexgroup = [None] * p.pattern.groups\n    for k, i in groupindex.items():\n        indexgroup[i] = k\n\n    return _sre.compile(\n        pattern, flags | p.pattern.flags, code,\n        p.pattern.groups-1,\n        groupindex, tuple(indexgroup)\n        )\n", 784], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# convert re-style regular expression to sre pattern\n#\n# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.\n#\n# See the sre.py file for information on usage and redistribution.\n#\n\n\"\"\"Internal support module for sre\"\"\"\n\n# XXX: show string offset and offending character for all errors\n\nfrom sre_constants import *\n\nSPECIAL_CHARS = \".\\\\[{()*+?^$|\"\nREPEAT_CHARS = \"*+?{\"\n\nDIGITS = frozenset(\"0123456789\")\n\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\n\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))\n}\n\nCATEGORIES = {\n    r\"\\A\": (AT, AT_BEGINNING_STRING), # start of string\n    r\"\\b\": (AT, AT_BOUNDARY),\n    r\"\\B\": (AT, AT_NON_BOUNDARY),\n    r\"\\d\": (IN, [(CATEGORY, CATEGORY_DIGIT)]),\n    r\"\\D\": (IN, [(CATEGORY, CATEGORY_NOT_DIGIT)]),\n    r\"\\s\": (IN, [(CATEGORY, CATEGORY_SPACE)]),\n    r\"\\S\": (IN, [(CATEGORY, CATEGORY_NOT_SPACE)]),\n    r\"\\w\": (IN, [(CATEGORY, CATEGORY_WORD)]),\n    r\"\\W\": (IN, [(CATEGORY, CATEGORY_NOT_WORD)]),\n    r\"\\Z\": (AT, AT_END_STRING), # end of string\n}\n\nFLAGS = {\n    # standard flags\n    \"i\": SRE_FLAG_IGNORECASE,\n    \"L\": SRE_FLAG_LOCALE,\n    \"m\": SRE_FLAG_MULTILINE,\n    \"s\": SRE_FLAG_DOTALL,\n    \"x\": SRE_FLAG_VERBOSE,\n    # extensions\n    \"a\": SRE_FLAG_ASCII,\n    \"t\": SRE_FLAG_TEMPLATE,\n    \"u\": SRE_FLAG_UNICODE,\n}\n\nTYPE_FLAGS = SRE_FLAG_ASCII | SRE_FLAG_LOCALE | SRE_FLAG_UNICODE\nGLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\n\nclass Verbose(Exception):\n    pass\n\nclass Pattern:\n    # master pattern object.  keeps track of global attributes\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n    @property\n    def groups(self):\n        return len(self.groupwidths)\n    def opengroup(self, name=None):\n        gid = self.groups\n        self.groupwidths.append(None)\n        if self.groups > MAXGROUPS:\n            raise error(\"too many groups\")\n        if name is not None:\n            ogid = self.groupdict.get(name, None)\n            if ogid is not None:\n                raise error(\"redefinition of group name %r as group %d; \"\n                            \"was group %d\" % (name, gid,  ogid))\n            self.groupdict[name] = gid\n        return gid\n    def closegroup(self, gid, p):\n        self.groupwidths[gid] = p.getwidth()\n    def checkgroup(self, gid):\n        return gid < self.groups and self.groupwidths[gid] is not None\n\n    def checklookbehindgroup(self, gid, source):\n        if self.lookbehindgroups is not None:\n            if not self.checkgroup(gid):\n                raise source.error('cannot refer to an open group')\n            if gid >= self.lookbehindgroups:\n                raise source.error('cannot refer to group defined in the same '\n                                   'lookbehind subpattern')\n\nclass SubPattern:\n    # a subpattern, in intermediate form\n    def __init__(self, pattern, data=None):\n        self.pattern = pattern\n        if data is None:\n            data = []\n        self.data = data\n        self.width = None\n\n    def dump(self, level=0):\n        nl = True\n        seqtypes = (tuple, list)\n        for op, av in self.data:\n            print(level*\"  \" + str(op), end='')\n            if op is IN:\n                # member sublanguage\n                print()\n                for op, a in av:\n                    print((level+1)*\"  \" + str(op), a)\n            elif op is BRANCH:\n                print()\n                for i, a in enumerate(av[1]):\n                    if i:\n                        print(level*\"  \" + \"OR\")\n                    a.dump(level+1)\n            elif op is GROUPREF_EXISTS:\n                condgroup, item_yes, item_no = av\n                print('', condgroup)\n                item_yes.dump(level+1)\n                if item_no:\n                    print(level*\"  \" + \"ELSE\")\n                    item_no.dump(level+1)\n            elif isinstance(av, seqtypes):\n                nl = False\n                for a in av:\n                    if isinstance(a, SubPattern):\n                        if not nl:\n                            print()\n                        a.dump(level+1)\n                        nl = True\n                    else:\n                        if not nl:\n                            print(' ', end='')\n                        print(a, end='')\n                        nl = False\n                if not nl:\n                    print()\n            else:\n                print('', av)\n    def __repr__(self):\n        return repr(self.data)\n    def __len__(self):\n        return len(self.data)\n    def __delitem__(self, index):\n        del self.data[index]\n    def __getitem__(self, index):\n        if isinstance(index, slice):\n            return SubPattern(self.pattern, self.data[index])\n        return self.data[index]\n    def __setitem__(self, index, code):\n        self.data[index] = code\n    def insert(self, index, code):\n        self.data.insert(index, code)\n    def append(self, code):\n        self.data.append(code)\n    def getwidth(self):\n        # determine the width (min, max) for this subpattern\n        if self.width is not None:\n            return self.width\n        lo = hi = 0\n        for op, av in self.data:\n            if op is BRANCH:\n                i = MAXREPEAT - 1\n                j = 0\n                for av in av[1]:\n                    l, h = av.getwidth()\n                    i = min(i, l)\n                    j = max(j, h)\n                lo = lo + i\n                hi = hi + j\n            elif op is CALL:\n                i, j = av.getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op is SUBPATTERN:\n                i, j = av[-1].getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op in _REPEATCODES:\n                i, j = av[2].getwidth()\n                lo = lo + i * av[0]\n                hi = hi + j * av[1]\n            elif op in _UNITCODES:\n                lo = lo + 1\n                hi = hi + 1\n            elif op is GROUPREF:\n                i, j = self.pattern.groupwidths[av]\n                lo = lo + i\n                hi = hi + j\n            elif op is GROUPREF_EXISTS:\n                i, j = av[1].getwidth()\n                if av[2] is not None:\n                    l, h = av[2].getwidth()\n                    i = min(i, l)\n                    j = max(j, h)\n                else:\n                    i = 0\n                lo = lo + i\n                hi = hi + j\n            elif op is SUCCESS:\n                break\n        self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\n        return self.width\n\nclass Tokenizer:\n    def __init__(self, string):\n        self.istext = isinstance(string, str)\n        self.string = string\n        if not self.istext:\n            string = str(string, 'latin1')\n        self.decoded_string = string\n        self.index = 0\n        self.next = None\n        self.__next()\n    def __next(self):\n        index = self.index\n        try:\n            char = self.decoded_string[index]\n        except IndexError:\n            self.next = None\n            return\n        if char == \"\\\\\":\n            index += 1\n            try:\n                char += self.decoded_string[index]\n            except IndexError:\n                raise error(\"bad escape (end of pattern)\",\n                            self.string, len(self.string) - 1) from None\n        self.index = index + 1\n        self.next = char\n    def match(self, char):\n        if char == self.next:\n            self.__next()\n            return True\n        return False\n    def get(self):\n        this = self.next\n        self.__next()\n        return this\n    def getwhile(self, n, charset):\n        result = ''\n        for _ in range(n):\n            c = self.next\n            if c not in charset:\n                break\n            result += c\n            self.__next()\n        return result\n    def getuntil(self, terminator):\n        result = ''\n        while True:\n            c = self.next\n            self.__next()\n            if c is None:\n                if not result:\n                    raise self.error(\"missing group name\")\n                raise self.error(\"missing %s, unterminated name\" % terminator,\n                                 len(result))\n            if c == terminator:\n                if not result:\n                    raise self.error(\"missing group name\", 1)\n                break\n            result += c\n        return result\n    @property\n    def pos(self):\n        return self.index - len(self.next or '')\n    def tell(self):\n        return self.index - len(self.next or '')\n    def seek(self, index):\n        self.index = index\n        self.__next()\n\n    def error(self, msg, offset=0):\n        return error(msg, self.string, self.tell() - offset)\n\ndef _class_escape(source, escape):\n    # handle escape code inside character class\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    code = CATEGORIES.get(escape)\n    if code and code[0] is IN:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            # hexadecimal escape (exactly two digits)\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"u\" and source.istext:\n            # unicode escape (exactly four digits)\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            # unicode escape (exactly eight digits)\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c in OCTDIGITS:\n            # octal escape (up to three digits)\n            escape += source.getwhile(2, OCTDIGITS)\n            c = int(escape[1:], 8)\n            if c > 0o377:\n                raise source.error('octal escape value %s outside of '\n                                   'range 0-0o377' % escape, len(escape))\n            return LITERAL, c\n        elif c in DIGITS:\n            raise ValueError\n        if len(escape) == 2:\n            if c in ASCIILETTERS:\n                raise source.error('bad escape %s' % escape, len(escape))\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise source.error(\"bad escape %s\" % escape, len(escape))\n\ndef _escape(source, escape, state):\n    # handle escape code in expression\n    code = CATEGORIES.get(escape)\n    if code:\n        return code\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            # hexadecimal escape\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"u\" and source.istext:\n            # unicode escape (exactly four digits)\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            # unicode escape (exactly eight digits)\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c == \"0\":\n            # octal escape\n            escape += source.getwhile(2, OCTDIGITS)\n            return LITERAL, int(escape[1:], 8)\n        elif c in DIGITS:\n            # octal escape *or* decimal group reference (sigh)\n            if source.next in DIGITS:\n                escape += source.get()\n                if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and\n                    source.next in OCTDIGITS):\n                    # got three octal digits; this is an octal escape\n                    escape += source.get()\n                    c = int(escape[1:], 8)\n                    if c > 0o377:\n                        raise source.error('octal escape value %s outside of '\n                                           'range 0-0o377' % escape,\n                                           len(escape))\n                    return LITERAL, c\n            # not an octal escape, so this is a group reference\n            group = int(escape[1:])\n            if group < state.groups:\n                if not state.checkgroup(group):\n                    raise source.error(\"cannot refer to an open group\",\n                                       len(escape))\n                state.checklookbehindgroup(group, source)\n                return GROUPREF, group\n            raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)\n        if len(escape) == 2:\n            if c in ASCIILETTERS:\n                raise source.error(\"bad escape %s\" % escape, len(escape))\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise source.error(\"bad escape %s\" % escape, len(escape))\n\ndef _uniq(items):\n    if len(set(items)) == len(items):\n        return items\n    newitems = []\n    for item in items:\n        if item not in newitems:\n            newitems.append(item)\n    return newitems\n\ndef _parse_sub(source, state, verbose, nested):\n    # parse an alternation: a|b|c\n\n    items = []\n    itemsappend = items.append\n    sourcematch = source.match\n    start = source.tell()\n    while True:\n        itemsappend(_parse(source, state, verbose, nested + 1,\n                           not nested and not items))\n        if not sourcematch(\"|\"):\n            break\n\n    if len(items) == 1:\n        return items[0]\n\n    subpattern = SubPattern(state)\n\n    # check if all items share a common prefix\n    while True:\n        prefix = None\n        for item in items:\n            if not item:\n                break\n            if prefix is None:\n                prefix = item[0]\n            elif item[0] != prefix:\n                break\n        else:\n            # all subitems start with a common \"prefix\".\n            # move it out of the branch\n            for item in items:\n                del item[0]\n            subpattern.append(prefix)\n            continue # check next one\n        break\n\n    # check if the branch can be replaced by a character set\n    set = []\n    for item in items:\n        if len(item) != 1:\n            break\n        op, av = item[0]\n        if op is LITERAL:\n            set.append((op, av))\n        elif op is IN and av[0][0] is not NEGATE:\n            set.extend(av)\n        else:\n            break\n    else:\n        # we can store this as a character set instead of a\n        # branch (the compiler may optimize this even more)\n        subpattern.append((IN, _uniq(set)))\n        return subpattern\n\n    subpattern.append((BRANCH, (None, items)))\n    return subpattern\n\ndef _parse(source, state, verbose, nested, first=False):\n    # parse a simple pattern\n    subpattern = SubPattern(state)\n\n    # precompute constants into local variables\n    subpatternappend = subpattern.append\n    sourceget = source.get\n    sourcematch = source.match\n    _len = len\n    _ord = ord\n\n    while True:\n\n        this = source.next\n        if this is None:\n            break # end of pattern\n        if this in \"|)\":\n            break # end of subpattern\n        sourceget()\n\n        if verbose:\n            # skip whitespace and comments\n            if this in WHITESPACE:\n                continue\n            if this == \"#\":\n                while True:\n                    this = sourceget()\n                    if this is None or this == \"\\n\":\n                        break\n                continue\n\n        if this[0] == \"\\\\\":\n            code = _escape(source, this, state)\n            subpatternappend(code)\n\n        elif this not in SPECIAL_CHARS:\n            subpatternappend((LITERAL, _ord(this)))\n\n        elif this == \"[\":\n            here = source.tell() - 1\n            # character set\n            set = []\n            setappend = set.append\n##          if sourcematch(\":\"):\n##              pass # handle character classes\n            if source.next == '[':\n                import warnings\n                warnings.warn(\n                    'Possible nested set at position %d' % source.tell(),\n                    FutureWarning, stacklevel=nested + 6\n                )\n            negate = sourcematch(\"^\")\n            # check remaining characters\n            while True:\n                this = sourceget()\n                if this is None:\n                    raise source.error(\"unterminated character set\",\n                                       source.tell() - here)\n                if this == \"]\" and set:\n                    break\n                elif this[0] == \"\\\\\":\n                    code1 = _class_escape(source, this)\n                else:\n                    if set and this in '-&~|' and source.next == this:\n                        import warnings\n                        warnings.warn(\n                            'Possible set %s at position %d' % (\n                                'difference' if this == '-' else\n                                'intersection' if this == '&' else\n                                'symmetric difference' if this == '~' else\n                                'union',\n                                source.tell() - 1),\n                            FutureWarning, stacklevel=nested + 6\n                        )\n                    code1 = LITERAL, _ord(this)\n                if sourcematch(\"-\"):\n                    # potential range\n                    that = sourceget()\n                    if that is None:\n                        raise source.error(\"unterminated character set\",\n                                           source.tell() - here)\n                    if that == \"]\":\n                        if code1[0] is IN:\n                            code1 = code1[1][0]\n                        setappend(code1)\n                        setappend((LITERAL, _ord(\"-\")))\n                        break\n                    if that[0] == \"\\\\\":\n                        code2 = _class_escape(source, that)\n                    else:\n                        if that == '-':\n                            import warnings\n                            warnings.warn(\n                                'Possible set difference at position %d' % (\n                                    source.tell() - 2),\n                                FutureWarning, stacklevel=nested + 6\n                            )\n                        code2 = LITERAL, _ord(that)\n                    if code1[0] != LITERAL or code2[0] != LITERAL:\n                        msg = \"bad character range %s-%s\" % (this, that)\n                        raise source.error(msg, len(this) + 1 + len(that))\n                    lo = code1[1]\n                    hi = code2[1]\n                    if hi < lo:\n                        msg = \"bad character range %s-%s\" % (this, that)\n                        raise source.error(msg, len(this) + 1 + len(that))\n                    setappend((RANGE, (lo, hi)))\n                else:\n                    if code1[0] is IN:\n                        code1 = code1[1][0]\n                    setappend(code1)\n\n            set = _uniq(set)\n            # XXX: <fl> should move set optimization to compiler!\n            if _len(set) == 1 and set[0][0] is LITERAL:\n                # optimization\n                if negate:\n                    subpatternappend((NOT_LITERAL, set[0][1]))\n                else:\n                    subpatternappend(set[0])\n            else:\n                if negate:\n                    set.insert(0, (NEGATE, None))\n                # charmap optimization can't be added here because\n                # global flags still are not known\n                subpatternappend((IN, set))\n\n        elif this in REPEAT_CHARS:\n            # repeat previous item\n            here = source.tell()\n            if this == \"?\":\n                min, max = 0, 1\n            elif this == \"*\":\n                min, max = 0, MAXREPEAT\n\n            elif this == \"+\":\n                min, max = 1, MAXREPEAT\n            elif this == \"{\":\n                if source.next == \"}\":\n                    subpatternappend((LITERAL, _ord(this)))\n                    continue\n\n                min, max = 0, MAXREPEAT\n                lo = hi = \"\"\n                while source.next in DIGITS:\n                    lo += sourceget()\n                if sourcematch(\",\"):\n                    while source.next in DIGITS:\n                        hi += sourceget()\n                else:\n                    hi = lo\n                if not sourcematch(\"}\"):\n                    subpatternappend((LITERAL, _ord(this)))\n                    source.seek(here)\n                    continue\n\n                if lo:\n                    min = int(lo)\n                    if min >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                if hi:\n                    max = int(hi)\n                    if max >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                    if max < min:\n                        raise source.error(\"min repeat greater than max repeat\",\n                                           source.tell() - here)\n            else:\n                raise AssertionError(\"unsupported quantifier %r\" % (char,))\n            # figure out which item to repeat\n            if subpattern:\n                item = subpattern[-1:]\n            else:\n                item = None\n            if not item or item[0][0] is AT:\n                raise source.error(\"nothing to repeat\",\n                                   source.tell() - here + len(this))\n            if item[0][0] in _REPEATCODES:\n                raise source.error(\"multiple repeat\",\n                                   source.tell() - here + len(this))\n            if item[0][0] is SUBPATTERN:\n                group, add_flags, del_flags, p = item[0][1]\n                if group is None and not add_flags and not del_flags:\n                    item = p\n            if sourcematch(\"?\"):\n                subpattern[-1] = (MIN_REPEAT, (min, max, item))\n            else:\n                subpattern[-1] = (MAX_REPEAT, (min, max, item))\n\n        elif this == \".\":\n            subpatternappend((ANY, None))\n\n        elif this == \"(\":\n            start = source.tell() - 1\n            group = True\n            name = None\n            add_flags = 0\n            del_flags = 0\n            if sourcematch(\"?\"):\n                # options\n                char = sourceget()\n                if char is None:\n                    raise source.error(\"unexpected end of pattern\")\n                if char == \"P\":\n                    # python extensions\n                    if sourcematch(\"<\"):\n                        # named group: skip forward to end of name\n                        name = source.getuntil(\">\")\n                        if not name.isidentifier():\n                            msg = \"bad character in group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                    elif sourcematch(\"=\"):\n                        # named backreference\n                        name = source.getuntil(\")\")\n                        if not name.isidentifier():\n                            msg = \"bad character in group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                        gid = state.groupdict.get(name)\n                        if gid is None:\n                            msg = \"unknown group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                        if not state.checkgroup(gid):\n                            raise source.error(\"cannot refer to an open group\",\n                                               len(name) + 1)\n                        state.checklookbehindgroup(gid, source)\n                        subpatternappend((GROUPREF, gid))\n                        continue\n\n                    else:\n                        char = sourceget()\n                        if char is None:\n                            raise source.error(\"unexpected end of pattern\")\n                        raise source.error(\"unknown extension ?P\" + char,\n                                           len(char) + 2)\n                elif char == \":\":\n                    # non-capturing group\n                    group = None\n                elif char == \"#\":\n                    # comment\n                    while True:\n                        if source.next is None:\n                            raise source.error(\"missing ), unterminated comment\",\n                                               source.tell() - start)\n                        if sourceget() == \")\":\n                            break\n                    continue\n\n                elif char in \"=!<\":\n                    # lookahead assertions\n                    dir = 1\n                    if char == \"<\":\n                        char = sourceget()\n                        if char is None:\n                            raise source.error(\"unexpected end of pattern\")\n                        if char not in \"=!\":\n                            raise source.error(\"unknown extension ?<\" + char,\n                                               len(char) + 2)\n                        dir = -1 # lookbehind\n                        lookbehindgroups = state.lookbehindgroups\n                        if lookbehindgroups is None:\n                            state.lookbehindgroups = state.groups\n                    p = _parse_sub(source, state, verbose, nested + 1)\n                    if dir < 0:\n                        if lookbehindgroups is None:\n                            state.lookbehindgroups = None\n                    if not sourcematch(\")\"):\n                        raise source.error(\"missing ), unterminated subpattern\",\n                                           source.tell() - start)\n                    if char == \"=\":\n                        subpatternappend((ASSERT, (dir, p)))\n                    else:\n                        subpatternappend((ASSERT_NOT, (dir, p)))\n                    continue\n\n                elif char == \"(\":\n                    # conditional backreference group\n                    condname = source.getuntil(\")\")\n                    if condname.isidentifier():\n                        condgroup = state.groupdict.get(condname)\n                        if condgroup is None:\n                            msg = \"unknown group name %r\" % condname\n                            raise source.error(msg, len(condname) + 1)\n                    else:\n                        try:\n                            condgroup = int(condname)\n                            if condgroup < 0:\n                                raise ValueError\n                        except ValueError:\n                            msg = \"bad character in group name %r\" % condname\n                            raise source.error(msg, len(condname) + 1) from None\n                        if not condgroup:\n                            raise source.error(\"bad group number\",\n                                               len(condname) + 1)\n                        if condgroup >= MAXGROUPS:\n                            msg = \"invalid group reference %d\" % condgroup\n                            raise source.error(msg, len(condname) + 1)\n                    state.checklookbehindgroup(condgroup, source)\n                    item_yes = _parse(source, state, verbose, nested + 1)\n                    if source.match(\"|\"):\n                        item_no = _parse(source, state, verbose, nested + 1)\n                        if source.next == \"|\":\n                            raise source.error(\"conditional backref with more than two branches\")\n                    else:\n                        item_no = None\n                    if not source.match(\")\"):\n                        raise source.error(\"missing ), unterminated subpattern\",\n                                           source.tell() - start)\n                    subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))\n                    continue\n\n                elif char in FLAGS or char == \"-\":\n                    # flags\n                    flags = _parse_flags(source, state, char)\n                    if flags is None:  # global flags\n                        if not first or subpattern:\n                            import warnings\n                            warnings.warn(\n                                'Flags not at the start of the expression %r%s' % (\n                                    source.string[:20],  # truncate long regexes\n                                    ' (truncated)' if len(source.string) > 20 else '',\n                                ),\n                                DeprecationWarning, stacklevel=nested + 6\n                            )\n                        if (state.flags & SRE_FLAG_VERBOSE) and not verbose:\n                            raise Verbose\n                        continue\n\n                    add_flags, del_flags = flags\n                    group = None\n                else:\n                    raise source.error(\"unknown extension ?\" + char,\n                                       len(char) + 1)\n\n            # parse group contents\n            if group is not None:\n                try:\n                    group = state.opengroup(name)\n                except error as err:\n                    raise source.error(err.msg, len(name) + 1) from None\n            sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\n                           not (del_flags & SRE_FLAG_VERBOSE))\n            p = _parse_sub(source, state, sub_verbose, nested + 1)\n            if not source.match(\")\"):\n                raise source.error(\"missing ), unterminated subpattern\",\n                                   source.tell() - start)\n            if group is not None:\n                state.closegroup(group, p)\n            subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\n\n        elif this == \"^\":\n            subpatternappend((AT, AT_BEGINNING))\n\n        elif this == \"$\":\n            subpatternappend((AT, AT_END))\n\n        else:\n            raise AssertionError(\"unsupported special character %r\" % (char,))\n\n    # unpack non-capturing groups\n    for i in range(len(subpattern))[::-1]:\n        op, av = subpattern[i]\n        if op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            if group is None and not add_flags and not del_flags:\n                subpattern[i: i+1] = p\n\n    return subpattern\n\ndef _parse_flags(source, state, char):\n    sourceget = source.get\n    add_flags = 0\n    del_flags = 0\n    if char != \"-\":\n        while True:\n            flag = FLAGS[char]\n            if source.istext:\n                if char == 'L':\n                    msg = \"bad inline flags: cannot use 'L' flag with a str pattern\"\n                    raise source.error(msg)\n            else:\n                if char == 'u':\n                    msg = \"bad inline flags: cannot use 'u' flag with a bytes pattern\"\n                    raise source.error(msg)\n            add_flags |= flag\n            if (flag & TYPE_FLAGS) and (add_flags & TYPE_FLAGS) != flag:\n                msg = \"bad inline flags: flags 'a', 'u' and 'L' are incompatible\"\n                raise source.error(msg)\n            char = sourceget()\n            if char is None:\n                raise source.error(\"missing -, : or )\")\n            if char in \")-:\":\n                break\n            if char not in FLAGS:\n                msg = \"unknown flag\" if char.isalpha() else \"missing -, : or )\"\n                raise source.error(msg, len(char))\n    if char == \")\":\n        state.flags |= add_flags\n        return None\n    if add_flags & GLOBAL_FLAGS:\n        raise source.error(\"bad inline flags: cannot turn on global flag\", 1)\n    if char == \"-\":\n        char = sourceget()\n        if char is None:\n            raise source.error(\"missing flag\")\n        if char not in FLAGS:\n            msg = \"unknown flag\" if char.isalpha() else \"missing flag\"\n            raise source.error(msg, len(char))\n        while True:\n            flag = FLAGS[char]\n            if flag & TYPE_FLAGS:\n                msg = \"bad inline flags: cannot turn off flags 'a', 'u' and 'L'\"\n                raise source.error(msg)\n            del_flags |= flag\n            char = sourceget()\n            if char is None:\n                raise source.error(\"missing :\")\n            if char == \":\":\n                break\n            if char not in FLAGS:\n                msg = \"unknown flag\" if char.isalpha() else \"missing :\"\n                raise source.error(msg, len(char))\n    assert char == \":\"\n    if del_flags & GLOBAL_FLAGS:\n        raise source.error(\"bad inline flags: cannot turn off global flag\", 1)\n    if add_flags & del_flags:\n        raise source.error(\"bad inline flags: flag turned on and off\", 1)\n    return add_flags, del_flags\n\ndef fix_flags(src, flags):\n    # Check and fix flags according to the type of pattern (str or bytes)\n    if isinstance(src, str):\n        if flags & SRE_FLAG_LOCALE:\n            raise ValueError(\"cannot use LOCALE flag with a str pattern\")\n        if not flags & SRE_FLAG_ASCII:\n            flags |= SRE_FLAG_UNICODE\n        elif flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"ASCII and UNICODE flags are incompatible\")\n    else:\n        if flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"cannot use UNICODE flag with a bytes pattern\")\n        if flags & SRE_FLAG_LOCALE and flags & SRE_FLAG_ASCII:\n            raise ValueError(\"ASCII and LOCALE flags are incompatible\")\n    return flags\n\ndef parse(str, flags=0, pattern=None):\n    # parse 're' pattern into list of (opcode, argument) tuples\n\n    source = Tokenizer(str)\n\n    if pattern is None:\n        pattern = Pattern()\n    pattern.flags = flags\n    pattern.str = str\n\n    try:\n        p = _parse_sub(source, pattern, flags & SRE_FLAG_VERBOSE, 0)\n    except Verbose:\n        # the VERBOSE flag was switched on inside the pattern.  to be\n        # on the safe side, we'll parse the whole thing again...\n        pattern = Pattern()\n        pattern.flags = flags | SRE_FLAG_VERBOSE\n        pattern.str = str\n        source.seek(0)\n        p = _parse_sub(source, pattern, True, 0)\n\n    p.pattern.flags = fix_flags(str, p.pattern.flags)\n\n    if source.next is not None:\n        assert source.next == \")\"\n        raise source.error(\"unbalanced parenthesis\")\n\n    if flags & SRE_FLAG_DEBUG:\n        p.dump()\n\n    return p\n\ndef parse_template(source, pattern):\n    # parse 're' replacement string into list of literals and\n    # group references\n    s = Tokenizer(source)\n    sget = s.get\n    groups = []\n    literals = []\n    literal = []\n    lappend = literal.append\n    def addgroup(index, pos):\n        if index > pattern.groups:\n            raise s.error(\"invalid group reference %d\" % index, pos)\n        if literal:\n            literals.append(''.join(literal))\n            del literal[:]\n        groups.append((len(literals), index))\n        literals.append(None)\n    groupindex = pattern.groupindex\n    while True:\n        this = sget()\n        if this is None:\n            break # end of replacement string\n        if this[0] == \"\\\\\":\n            # group\n            c = this[1]\n            if c == \"g\":\n                name = \"\"\n                if not s.match(\"<\"):\n                    raise s.error(\"missing <\")\n                name = s.getuntil(\">\")\n                if name.isidentifier():\n                    try:\n                        index = groupindex[name]\n                    except KeyError:\n                        raise IndexError(\"unknown group name %r\" % name)\n                else:\n                    try:\n                        index = int(name)\n                        if index < 0:\n                            raise ValueError\n                    except ValueError:\n                        raise s.error(\"bad character in group name %r\" % name,\n                                      len(name) + 1) from None\n                    if index >= MAXGROUPS:\n                        raise s.error(\"invalid group reference %d\" % index,\n                                      len(name) + 1)\n                addgroup(index, len(name) + 1)\n            elif c == \"0\":\n                if s.next in OCTDIGITS:\n                    this += sget()\n                    if s.next in OCTDIGITS:\n                        this += sget()\n                lappend(chr(int(this[1:], 8) & 0xff))\n            elif c in DIGITS:\n                isoctal = False\n                if s.next in DIGITS:\n                    this += sget()\n                    if (c in OCTDIGITS and this[2] in OCTDIGITS and\n                        s.next in OCTDIGITS):\n                        this += sget()\n                        isoctal = True\n                        c = int(this[1:], 8)\n                        if c > 0o377:\n                            raise s.error('octal escape value %s outside of '\n                                          'range 0-0o377' % this, len(this))\n                        lappend(chr(c))\n                if not isoctal:\n                    addgroup(int(this[1:]), len(this) - 1)\n            else:\n                try:\n                    this = chr(ESCAPES[this][1])\n                except KeyError:\n                    if c in ASCIILETTERS:\n                        raise s.error('bad escape %s' % this, len(this))\n                lappend(this)\n        else:\n            lappend(this)\n    if literal:\n        literals.append(''.join(literal))\n    if not isinstance(source, str):\n        # The tokenizer implicitly decodes bytes objects as latin-1, we must\n        # therefore re-encode the final representation.\n        literals = [None if s is None else s.encode('latin-1') for s in literals]\n    return groups, literals\n\ndef expand_template(template, match):\n    g = match.group\n    empty = match.string[:0]\n    groups, literals = template\n    literals = literals[:]\n    try:\n        for index, group in groups:\n            literals[index] = g(group) or empty\n    except IndexError:\n        raise error(\"invalid group reference %d\" % index)\n    return empty.join(literals)\n", 1046], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py": ["import sys\nfrom types import MappingProxyType, DynamicClassAttribute\n\n# try _collections first to reduce startup cost\ntry:\n    from _collections import OrderedDict\nexcept ImportError:\n    from collections import OrderedDict\n\n\n__all__ = [\n        'EnumMeta',\n        'Enum', 'IntEnum', 'Flag', 'IntFlag',\n        'auto', 'unique',\n        ]\n\n\ndef _is_descriptor(obj):\n    \"\"\"Returns True if obj is a descriptor, False otherwise.\"\"\"\n    return (\n            hasattr(obj, '__get__') or\n            hasattr(obj, '__set__') or\n            hasattr(obj, '__delete__'))\n\n\ndef _is_dunder(name):\n    \"\"\"Returns True if a __dunder__ name, False otherwise.\"\"\"\n    return (len(name) > 4 and\n            name[:2] == name[-2:] == '__' and\n            name[2] != '_' and\n            name[-3] != '_')\n\n\ndef _is_sunder(name):\n    \"\"\"Returns True if a _sunder_ name, False otherwise.\"\"\"\n    return (len(name) > 2 and\n            name[0] == name[-1] == '_' and\n            name[1:2] != '_' and\n            name[-2:-1] != '_')\n\n\ndef _make_class_unpicklable(cls):\n    \"\"\"Make the given class un-picklable.\"\"\"\n    def _break_on_call_reduce(self, proto):\n        raise TypeError('%r cannot be pickled' % self)\n    cls.__reduce_ex__ = _break_on_call_reduce\n    cls.__module__ = '<unknown>'\n\n_auto_null = object()\nclass auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    value = _auto_null\n\n\nclass _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._member_names = []\n        self._last_values = []\n        self._ignore = []\n\n    def __setitem__(self, key, value):\n        \"\"\"Changes anything not dundered or not a descriptor.\n\n        If an enum member name is used twice, an error is raised; duplicate\n        values are not checked for.\n\n        Single underscore (sunder) names are reserved.\n\n        \"\"\"\n        if _is_sunder(key):\n            if key not in (\n                    '_order_', '_create_pseudo_member_',\n                    '_generate_next_value_', '_missing_', '_ignore_',\n                    ):\n                raise ValueError('_names_ are reserved for future Enum use')\n            if key == '_generate_next_value_':\n                setattr(self, '_generate_next_value', value)\n            elif key == '_ignore_':\n                if isinstance(value, str):\n                    value = value.replace(',',' ').split()\n                else:\n                    value = list(value)\n                self._ignore = value\n                already = set(value) & set(self._member_names)\n                if already:\n                    raise ValueError('_ignore_ cannot specify already set names: %r' % (already, ))\n        elif _is_dunder(key):\n            if key == '__order__':\n                key = '_order_'\n        elif key in self._member_names:\n            # descriptor overwriting an enum?\n            raise TypeError('Attempted to reuse key: %r' % key)\n        elif key in self._ignore:\n            pass\n        elif not _is_descriptor(value):\n            if key in self:\n                # enum overwriting a descriptor?\n                raise TypeError('%r already defined as: %r' % (key, self[key]))\n            if isinstance(value, auto):\n                if value.value == _auto_null:\n                    value.value = self._generate_next_value(key, 1, len(self._member_names), self._last_values[:])\n                value = value.value\n            self._member_names.append(key)\n            self._last_values.append(value)\n        super().__setitem__(key, value)\n\n\n# Dummy value for Enum as EnumMeta explicitly checks for it, but of course\n# until EnumMeta finishes running the first time the Enum class doesn't exist.\n# This is also why there are checks in EnumMeta like `if Enum is not None`\nEnum = None\n\n\nclass EnumMeta(type):\n    \"\"\"Metaclass for Enum\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(bases)\n        if first_enum is not None:\n            enum_dict['_generate_next_value_'] = getattr(first_enum, '_generate_next_value_', None)\n        return enum_dict\n\n    def __new__(metacls, cls, bases, classdict):\n        # an Enum class is final once enumeration items have been defined; it\n        # cannot be mixed with other types (int, float, etc.) if it has an\n        # inherited __new__ unless a new __new__ is defined (or the resulting\n        # class will fail).\n        #\n        # remove any keys listed in _ignore_\n        classdict.setdefault('_ignore_', []).append('_ignore_')\n        ignore = classdict['_ignore_']\n        for key in ignore:\n            classdict.pop(key, None)\n        member_type, first_enum = metacls._get_mixins_(bases)\n        __new__, save_new, use_args = metacls._find_new_(classdict, member_type,\n                                                        first_enum)\n\n        # save enum items into separate mapping so they don't get baked into\n        # the new class\n        enum_members = {k: classdict[k] for k in classdict._member_names}\n        for name in classdict._member_names:\n            del classdict[name]\n\n        # adjust the sunders\n        _order_ = classdict.pop('_order_', None)\n\n        # check for illegal enum names (any others?)\n        invalid_names = set(enum_members) & {'mro', ''}\n        if invalid_names:\n            raise ValueError('Invalid enum member name: {0}'.format(\n                ','.join(invalid_names)))\n\n        # create a default docstring if one has not been provided\n        if '__doc__' not in classdict:\n            classdict['__doc__'] = 'An enumeration.'\n\n        # create our new Enum type\n        enum_class = super().__new__(metacls, cls, bases, classdict)\n        enum_class._member_names_ = []               # names in definition order\n        enum_class._member_map_ = OrderedDict()      # name->value map\n        enum_class._member_type_ = member_type\n\n        # save DynamicClassAttribute attributes from super classes so we know\n        # if we can take the shortcut of storing members in the class dict\n        dynamic_attributes = {k for c in enum_class.mro()\n                              for k, v in c.__dict__.items()\n                              if isinstance(v, DynamicClassAttribute)}\n\n        # Reverse value->name map for hashable values.\n        enum_class._value2member_map_ = {}\n\n        # If a custom type is mixed into the Enum, and it does not know how\n        # to pickle itself, pickle.dumps will succeed but pickle.loads will\n        # fail.  Rather than have the error show up later and possibly far\n        # from the source, sabotage the pickle protocol for this class so\n        # that pickle.dumps also fails.\n        #\n        # However, if the new class implements its own __reduce_ex__, do not\n        # sabotage -- it's on them to make sure it works correctly.  We use\n        # __reduce_ex__ instead of any of the others as it is preferred by\n        # pickle over __reduce__, and it handles all pickle protocols.\n        if '__reduce_ex__' not in classdict:\n            if member_type is not object:\n                methods = ('__getnewargs_ex__', '__getnewargs__',\n                        '__reduce_ex__', '__reduce__')\n                if not any(m in member_type.__dict__ for m in methods):\n                    _make_class_unpicklable(enum_class)\n\n        # instantiate them, checking for duplicates as we go\n        # we instantiate first instead of checking for duplicates first in case\n        # a custom __new__ is doing something funky with the values -- such as\n        # auto-numbering ;)\n        for member_name in classdict._member_names:\n            value = enum_members[member_name]\n            if not isinstance(value, tuple):\n                args = (value, )\n            else:\n                args = value\n            if member_type is tuple:   # special case for tuple enums\n                args = (args, )     # wrap it one more time\n            if not use_args:\n                enum_member = __new__(enum_class)\n                if not hasattr(enum_member, '_value_'):\n                    enum_member._value_ = value\n            else:\n                enum_member = __new__(enum_class, *args)\n                if not hasattr(enum_member, '_value_'):\n                    if member_type is object:\n                        enum_member._value_ = value\n                    else:\n                        enum_member._value_ = member_type(*args)\n            value = enum_member._value_\n            enum_member._name_ = member_name\n            enum_member.__objclass__ = enum_class\n            enum_member.__init__(*args)\n            # If another member with the same value was already defined, the\n            # new member becomes an alias to the existing one.\n            for name, canonical_member in enum_class._member_map_.items():\n                if canonical_member._value_ == enum_member._value_:\n                    enum_member = canonical_member\n                    break\n            else:\n                # Aliases don't appear in member names (only in __members__).\n                enum_class._member_names_.append(member_name)\n            # performance boost for any member that would not shadow\n            # a DynamicClassAttribute\n            if member_name not in dynamic_attributes:\n                setattr(enum_class, member_name, enum_member)\n            # now add to _member_map_\n            enum_class._member_map_[member_name] = enum_member\n            try:\n                # This may fail if value is not hashable. We can't add the value\n                # to the map, and by-value lookups for this value will be\n                # linear.\n                enum_class._value2member_map_[value] = enum_member\n            except TypeError:\n                pass\n\n        # double check that repr and friends are not the mixin's or various\n        # things break (such as pickle)\n        for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):\n            class_method = getattr(enum_class, name)\n            obj_method = getattr(member_type, name, None)\n            enum_method = getattr(first_enum, name, None)\n            if obj_method is not None and obj_method is class_method:\n                setattr(enum_class, name, enum_method)\n\n        # replace any other __new__ with our own (as long as Enum is not None,\n        # anyway) -- again, this is to support pickle\n        if Enum is not None:\n            # if the user defined their own __new__, save it before it gets\n            # clobbered in case they subclass later\n            if save_new:\n                enum_class.__new_member__ = __new__\n            enum_class.__new__ = Enum.__new__\n\n        # py3 support for definition order (helps keep py2/py3 code in sync)\n        if _order_ is not None:\n            if isinstance(_order_, str):\n                _order_ = _order_.replace(',', ' ').split()\n            if _order_ != enum_class._member_names_:\n                raise TypeError('member order does not match _order_')\n\n        return enum_class\n\n    def __bool__(self):\n        \"\"\"\n        classes/types should always be True.\n        \"\"\"\n        return True\n\n    def __call__(cls, value, names=None, *, module=None, qualname=None, type=None, start=1):\n        \"\"\"Either returns an existing member, or creates a new enum class.\n\n        This method is used both when an enum class is given a value to match\n        to an enumeration member (i.e. Color(3)) and for the functional API\n        (i.e. Color = Enum('Color', names='RED GREEN BLUE')).\n\n        When used for the functional API:\n\n        `value` will be the name of the new class.\n\n        `names` should be either a string of white-space/comma delimited names\n        (values will start at `start`), or an iterator/mapping of name, value pairs.\n\n        `module` should be set to the module this class is being created in;\n        if it is not set, an attempt to find that module will be made, but if\n        it fails the class will not be picklable.\n\n        `qualname` should be set to the actual location this class can be found\n        at in its module; by default it is set to the global scope.  If this is\n        not correct, unpickling will fail in some circumstances.\n\n        `type`, if set, will be mixed in as the first base class.\n\n        \"\"\"\n        if names is None:  # simple value lookup\n            return cls.__new__(cls, value)\n        # otherwise, functional API: we're creating a new Enum type\n        return cls._create_(value, names, module=module, qualname=qualname, type=type, start=start)\n\n    def __contains__(cls, member):\n        if not isinstance(member, Enum):\n            import warnings\n            warnings.warn(\n                    \"using non-Enums in containment checks will raise \"\n                    \"TypeError in Python 3.8\",\n                    DeprecationWarning, 2)\n        return isinstance(member, cls) and member._name_ in cls._member_map_\n\n    def __delattr__(cls, attr):\n        # nicer error message when someone tries to delete an attribute\n        # (see issue19025).\n        if attr in cls._member_map_:\n            raise AttributeError(\n                    \"%s: cannot delete Enum member.\" % cls.__name__)\n        super().__delattr__(attr)\n\n    def __dir__(self):\n        return (['__class__', '__doc__', '__members__', '__module__'] +\n                self._member_names_)\n\n    def __getattr__(cls, name):\n        \"\"\"Return the enum member matching `name`\n\n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def __getitem__(cls, name):\n        return cls._member_map_[name]\n\n    def __iter__(cls):\n        return (cls._member_map_[name] for name in cls._member_names_)\n\n    def __len__(cls):\n        return len(cls._member_names_)\n\n    @property\n    def __members__(cls):\n        \"\"\"Returns a mapping of member name->value.\n\n        This mapping lists all enum members, including aliases. Note that this\n        is a read-only view of the internal mapping.\n\n        \"\"\"\n        return MappingProxyType(cls._member_map_)\n\n    def __repr__(cls):\n        return \"<enum %r>\" % cls.__name__\n\n    def __reversed__(cls):\n        return (cls._member_map_[name] for name in reversed(cls._member_names_))\n\n    def __setattr__(cls, name, value):\n        \"\"\"Block attempts to reassign Enum members.\n\n        A simple assignment to the class namespace only changes one of the\n        several possible ways to get an Enum member from the Enum class,\n        resulting in an inconsistent Enumeration.\n\n        \"\"\"\n        member_map = cls.__dict__.get('_member_map_', {})\n        if name in member_map:\n            raise AttributeError('Cannot reassign members.')\n        super().__setattr__(name, value)\n\n    def _create_(cls, class_name, names, *, module=None, qualname=None, type=None, start=1):\n        \"\"\"Convenience method to create a new Enum class.\n\n        `names` can be:\n\n        * A string containing member names, separated either with spaces or\n          commas.  Values are incremented by 1 from `start`.\n        * An iterable of member names.  Values are incremented by 1 from `start`.\n        * An iterable of (member name, value) pairs.\n        * A mapping of member name -> value pairs.\n\n        \"\"\"\n        metacls = cls.__class__\n        bases = (cls, ) if type is None else (type, cls)\n        _, first_enum = cls._get_mixins_(bases)\n        classdict = metacls.__prepare__(class_name, bases)\n\n        # special processing needed for names?\n        if isinstance(names, str):\n            names = names.replace(',', ' ').split()\n        if isinstance(names, (tuple, list)) and names and isinstance(names[0], str):\n            original_names, names = names, []\n            last_values = []\n            for count, name in enumerate(original_names):\n                value = first_enum._generate_next_value_(name, start, count, last_values[:])\n                last_values.append(value)\n                names.append((name, value))\n\n        # Here, names is either an iterable of (name, value) or a mapping.\n        for item in names:\n            if isinstance(item, str):\n                member_name, member_value = item, names[item]\n            else:\n                member_name, member_value = item\n            classdict[member_name] = member_value\n        enum_class = metacls.__new__(metacls, class_name, bases, classdict)\n\n        # TODO: replace the frame hack if a blessed way to know the calling\n        # module is ever developed\n        if module is None:\n            try:\n                module = sys._getframe(2).f_globals['__name__']\n            except (AttributeError, ValueError, KeyError) as exc:\n                pass\n        if module is None:\n            _make_class_unpicklable(enum_class)\n        else:\n            enum_class.__module__ = module\n        if qualname is not None:\n            enum_class.__qualname__ = qualname\n\n        return enum_class\n\n    @staticmethod\n    def _get_mixins_(bases):\n        \"\"\"Returns the type for creating enum members, and the first inherited\n        enum class.\n\n        bases: the tuple of bases that was given to __new__\n\n        \"\"\"\n        if not bases:\n            return object, Enum\n\n        def _find_data_type(bases):\n            for chain in bases:\n                for base in chain.__mro__:\n                    if base is object:\n                        continue\n                    elif '__new__' in base.__dict__:\n                        if issubclass(base, Enum):\n                            continue\n                        return base\n\n        # ensure final parent class is an Enum derivative, find any concrete\n        # data type, and check that Enum has no members\n        first_enum = bases[-1]\n        if not issubclass(first_enum, Enum):\n            raise TypeError(\"new enumerations should be created as \"\n                    \"`EnumName([mixin_type, ...] [data_type,] enum_type)`\")\n        member_type = _find_data_type(bases) or object\n        if first_enum._member_names_:\n            raise TypeError(\"Cannot extend enumerations\")\n        return member_type, first_enum\n\n    @staticmethod\n    def _find_new_(classdict, member_type, first_enum):\n        \"\"\"Returns the __new__ to be used for creating the enum members.\n\n        classdict: the class dictionary given to __new__\n        member_type: the data type whose __new__ will be used by default\n        first_enum: enumeration to check for an overriding __new__\n\n        \"\"\"\n        # now find the correct __new__, checking to see of one was defined\n        # by the user; also check earlier enum classes in case a __new__ was\n        # saved as __new_member__\n        __new__ = classdict.get('__new__', None)\n\n        # should __new__ be saved as __new_member__ later?\n        save_new = __new__ is not None\n\n        if __new__ is None:\n            # check all possibles for __new_member__ before falling back to\n            # __new__\n            for method in ('__new_member__', '__new__'):\n                for possible in (member_type, first_enum):\n                    target = getattr(possible, method, None)\n                    if target not in {\n                            None,\n                            None.__new__,\n                            object.__new__,\n                            Enum.__new__,\n                            }:\n                        __new__ = target\n                        break\n                if __new__ is not None:\n                    break\n            else:\n                __new__ = object.__new__\n\n        # if a non-object.__new__ is used then whatever value/tuple was\n        # assigned to the enum member name will be passed to __new__ and to the\n        # new enum member's __init__\n        if __new__ is object.__new__:\n            use_args = False\n        else:\n            use_args = True\n        return __new__, save_new, use_args\n\n\nclass Enum(metaclass=EnumMeta):\n    \"\"\"Generic enumeration.\n\n    Derive from this class to define new enumerations.\n\n    \"\"\"\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)\n            return value\n        # by-value search for a matching enum member\n        # see if it's in the reverse mapping (for hashable values)\n        try:\n            return cls._value2member_map_[value]\n        except KeyError:\n            # Not found, no need to do long O(n) search\n            pass\n        except TypeError:\n            # not there, now do long search -- O(n) behavior\n            for member in cls._member_map_.values():\n                if member._value_ == value:\n                    return member\n        # still not found -- try _missing_ hook\n        try:\n            exc = None\n            result = cls._missing_(value)\n        except Exception as e:\n            exc = e\n            result = None\n        if isinstance(result, cls):\n            return result\n        else:\n            ve_exc = ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n            if result is None and exc is None:\n                raise ve_exc\n            elif exc is None:\n                exc = TypeError(\n                        'error in %s._missing_: returned %r instead of None or a valid member'\n                        % (cls.__name__, result)\n                        )\n            exc.__context__ = ve_exc\n            raise exc\n\n    def _generate_next_value_(name, start, count, last_values):\n        for last_value in reversed(last_values):\n            try:\n                return last_value + 1\n            except TypeError:\n                pass\n        else:\n            return start\n\n    @classmethod\n    def _missing_(cls, value):\n        raise ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n\n    def __repr__(self):\n        return \"<%s.%s: %r>\" % (\n                self.__class__.__name__, self._name_, self._value_)\n\n    def __str__(self):\n        return \"%s.%s\" % (self.__class__.__name__, self._name_)\n\n    def __dir__(self):\n        added_behavior = [\n                m\n                for cls in self.__class__.mro()\n                for m in cls.__dict__\n                if m[0] != '_' and m not in self._member_map_\n                ]\n        return (['__class__', '__doc__', '__module__'] + added_behavior)\n\n    def __format__(self, format_spec):\n        # mixed-in Enums should use the mixed-in type's __format__, otherwise\n        # we can get strange results with the Enum name showing up instead of\n        # the value\n\n        # pure Enum branch\n        if self._member_type_ is object:\n            cls = str\n            val = str(self)\n        # mix-in branch\n        else:\n            cls = self._member_type_\n            val = self._value_\n        return cls.__format__(val, format_spec)\n\n    def __hash__(self):\n        return hash(self._name_)\n\n    def __reduce_ex__(self, proto):\n        return self.__class__, (self._value_, )\n\n    # DynamicClassAttribute is used to provide access to the `name` and\n    # `value` properties of enum members while keeping some measure of\n    # protection from modification, while still allowing for an enumeration\n    # to have members named `name` and `value`.  This works because enumeration\n    # members are not set directly on the enum class -- __getattr__ is\n    # used to look them up.\n\n    @DynamicClassAttribute\n    def name(self):\n        \"\"\"The name of the Enum member.\"\"\"\n        return self._name_\n\n    @DynamicClassAttribute\n    def value(self):\n        \"\"\"The value of the Enum member.\"\"\"\n        return self._value_\n\n    @classmethod\n    def _convert(cls, name, module, filter, source=None):\n        \"\"\"\n        Create a new Enum subclass that replaces a collection of global constants\n        \"\"\"\n        # convert all constants from source (or module) that pass filter() to\n        # a new Enum called name, and export the enum and its members back to\n        # module;\n        # also, replace the __reduce_ex__ method so unpickling works in\n        # previous Python versions\n        module_globals = vars(sys.modules[module])\n        if source:\n            source = vars(source)\n        else:\n            source = module_globals\n        # We use an OrderedDict of sorted source keys so that the\n        # _value2member_map is populated in the same order every time\n        # for a consistent reverse mapping of number to name when there\n        # are multiple names for the same number rather than varying\n        # between runs due to hash randomization of the module dictionary.\n        members = [\n                (name, source[name])\n                for name in source.keys()\n                if filter(name)]\n        try:\n            # sort by value\n            members.sort(key=lambda t: (t[1], t[0]))\n        except TypeError:\n            # unless some values aren't comparable, in which case sort by name\n            members.sort(key=lambda t: t[0])\n        cls = cls(name, members, module=module)\n        cls.__reduce_ex__ = _reduce_ex_by_name\n        module_globals.update(cls.__members__)\n        module_globals[name] = cls\n        return cls\n\n\nclass IntEnum(int, Enum):\n    \"\"\"Enum where members are also (and must be) ints\"\"\"\n\n\ndef _reduce_ex_by_name(self, proto):\n    return self.name\n\nclass Flag(Enum):\n    \"\"\"Support for flags\"\"\"\n\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n\n        name: the name of the member\n        start: the initital start value or None\n        count: the number of existing members\n        last_value: the last value assigned or None\n        \"\"\"\n        if not count:\n            return start if start is not None else 1\n        for last_value in reversed(last_values):\n            try:\n                high_bit = _high_bit(last_value)\n                break\n            except Exception:\n                raise TypeError('Invalid Flag value: %r' % last_value) from None\n        return 2 ** (high_bit+1)\n\n    @classmethod\n    def _missing_(cls, value):\n        original_value = value\n        if value < 0:\n            value = ~value\n        possible_member = cls._create_pseudo_member_(value)\n        if original_value < 0:\n            possible_member = ~possible_member\n        return possible_member\n\n    @classmethod\n    def _create_pseudo_member_(cls, value):\n        \"\"\"\n        Create a composite member iff value contains only members.\n        \"\"\"\n        pseudo_member = cls._value2member_map_.get(value, None)\n        if pseudo_member is None:\n            # verify all bits are accounted for\n            _, extra_flags = _decompose(cls, value)\n            if extra_flags:\n                raise ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n            # construct a singleton enum pseudo-member\n            pseudo_member = object.__new__(cls)\n            pseudo_member._name_ = None\n            pseudo_member._value_ = value\n            # use setdefault in case another thread already created a composite\n            # with this value\n            pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)\n        return pseudo_member\n\n    def __contains__(self, other):\n        if not isinstance(other, self.__class__):\n            import warnings\n            warnings.warn(\n                    \"using non-Flags in containment checks will raise \"\n                    \"TypeError in Python 3.8\",\n                    DeprecationWarning, 2)\n            return False\n        return other._value_ & self._value_ == other._value_\n\n    def __repr__(self):\n        cls = self.__class__\n        if self._name_ is not None:\n            return '<%s.%s: %r>' % (cls.__name__, self._name_, self._value_)\n        members, uncovered = _decompose(cls, self._value_)\n        return '<%s.%s: %r>' % (\n                cls.__name__,\n                '|'.join([str(m._name_ or m._value_) for m in members]),\n                self._value_,\n                )\n\n    def __str__(self):\n        cls = self.__class__\n        if self._name_ is not None:\n            return '%s.%s' % (cls.__name__, self._name_)\n        members, uncovered = _decompose(cls, self._value_)\n        if len(members) == 1 and members[0]._name_ is None:\n            return '%s.%r' % (cls.__name__, members[0]._value_)\n        else:\n            return '%s.%s' % (\n                    cls.__name__,\n                    '|'.join([str(m._name_ or m._value_) for m in members]),\n                    )\n\n    def __bool__(self):\n        return bool(self._value_)\n\n    def __or__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.__class__(self._value_ | other._value_)\n\n    def __and__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.__class__(self._value_ & other._value_)\n\n    def __xor__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.__class__(self._value_ ^ other._value_)\n\n    def __invert__(self):\n        members, uncovered = _decompose(self.__class__, self._value_)\n        inverted = self.__class__(0)\n        for m in self.__class__:\n            if m not in members and not (m._value_ & self._value_):\n                inverted = inverted | m\n        return self.__class__(inverted)\n\n\nclass IntFlag(int, Flag):\n    \"\"\"Support for integer-based Flags\"\"\"\n\n    @classmethod\n    def _missing_(cls, value):\n        if not isinstance(value, int):\n            raise ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n        new_member = cls._create_pseudo_member_(value)\n        return new_member\n\n    @classmethod\n    def _create_pseudo_member_(cls, value):\n        pseudo_member = cls._value2member_map_.get(value, None)\n        if pseudo_member is None:\n            need_to_create = [value]\n            # get unaccounted for bits\n            _, extra_flags = _decompose(cls, value)\n            # timer = 10\n            while extra_flags:\n                # timer -= 1\n                bit = _high_bit(extra_flags)\n                flag_value = 2 ** bit\n                if (flag_value not in cls._value2member_map_ and\n                        flag_value not in need_to_create\n                        ):\n                    need_to_create.append(flag_value)\n                if extra_flags == -flag_value:\n                    extra_flags = 0\n                else:\n                    extra_flags ^= flag_value\n            for value in reversed(need_to_create):\n                # construct singleton pseudo-members\n                pseudo_member = int.__new__(cls, value)\n                pseudo_member._name_ = None\n                pseudo_member._value_ = value\n                # use setdefault in case another thread already created a composite\n                # with this value\n                pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)\n        return pseudo_member\n\n    def __or__(self, other):\n        if not isinstance(other, (self.__class__, int)):\n            return NotImplemented\n        result = self.__class__(self._value_ | self.__class__(other)._value_)\n        return result\n\n    def __and__(self, other):\n        if not isinstance(other, (self.__class__, int)):\n            return NotImplemented\n        return self.__class__(self._value_ & self.__class__(other)._value_)\n\n    def __xor__(self, other):\n        if not isinstance(other, (self.__class__, int)):\n            return NotImplemented\n        return self.__class__(self._value_ ^ self.__class__(other)._value_)\n\n    __ror__ = __or__\n    __rand__ = __and__\n    __rxor__ = __xor__\n\n    def __invert__(self):\n        result = self.__class__(~self._value_)\n        return result\n\n\ndef _high_bit(value):\n    \"\"\"returns index of highest bit, or -1 if value is zero or negative\"\"\"\n    return value.bit_length() - 1\n\ndef unique(enumeration):\n    \"\"\"Class decorator for enumerations ensuring unique member values.\"\"\"\n    duplicates = []\n    for name, member in enumeration.__members__.items():\n        if name != member.name:\n            duplicates.append((name, member.name))\n    if duplicates:\n        alias_details = ', '.join(\n                [\"%s -> %s\" % (alias, name) for (alias, name) in duplicates])\n        raise ValueError('duplicate values found in %r: %s' %\n                (enumeration, alias_details))\n    return enumeration\n\ndef _decompose(flag, value):\n    \"\"\"Extract all members from the value.\"\"\"\n    # _decompose is only called if the value is not named\n    not_covered = value\n    negative = value < 0\n    # issue29167: wrap accesses to _value2member_map_ in a list to avoid race\n    #             conditions between iterating over it and having more pseudo-\n    #             members added to it\n    if negative:\n        # only check for named flags\n        flags_to_check = [\n                (m, v)\n                for v, m in list(flag._value2member_map_.items())\n                if m.name is not None\n                ]\n    else:\n        # check for named flags and powers-of-two flags\n        flags_to_check = [\n                (m, v)\n                for v, m in list(flag._value2member_map_.items())\n                if m.name is not None or _power_of_two(v)\n                ]\n    members = []\n    for member, member_value in flags_to_check:\n        if member_value and member_value & value == member_value:\n            members.append(member)\n            not_covered &= ~member_value\n    if not members and value in flag._value2member_map_:\n        members.append(flag._value2member_map_[value])\n    members.sort(key=lambda m: m._value_, reverse=True)\n    if len(members) > 1 and members[0].value == value:\n        # we have the breakdown, don't need the value member itself\n        members.pop(0)\n    return members, not_covered\n\ndef _power_of_two(value):\n    if value < 1:\n        return False\n    return value == 2 ** _high_bit(value)\n", 910], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# re-compatible interface for the sre matching engine\n#\n# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.\n#\n# This version of the SRE library can be redistributed under CNRI's\n# Python 1.6 license.  For any other use, please contact Secret Labs\n# AB (info@pythonware.com).\n#\n# Portions of this engine have been developed in cooperation with\n# CNRI.  Hewlett-Packard provided funding for 1.6 integration and\n# other compatibility work.\n#\n\nr\"\"\"Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nSome of the functions in this module takes flags as optional parameters:\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'.\n\n\"\"\"\n\nimport enum\nimport sre_compile\nimport sre_parse\nimport functools\ntry:\n    import _locale\nexcept ImportError:\n    _locale = None\n\n\n# public symbols\n__all__ = [\n    \"match\", \"fullmatch\", \"search\", \"sub\", \"subn\", \"split\",\n    \"findall\", \"finditer\", \"compile\", \"purge\", \"template\", \"escape\",\n    \"error\", \"Pattern\", \"Match\", \"A\", \"I\", \"L\", \"M\", \"S\", \"X\", \"U\",\n    \"ASCII\", \"IGNORECASE\", \"LOCALE\", \"MULTILINE\", \"DOTALL\", \"VERBOSE\",\n    \"UNICODE\",\n]\n\n__version__ = \"2.2.1\"\n\nclass RegexFlag(enum.IntFlag):\n    ASCII = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = sre_compile.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = sre_compile.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    A = ASCII\n    I = IGNORECASE\n    L = LOCALE\n    U = UNICODE\n    M = MULTILINE\n    S = DOTALL\n    X = VERBOSE\n    # sre extensions (experimental, don't rely on these)\n    TEMPLATE = sre_compile.SRE_FLAG_TEMPLATE # disable backtracking\n    T = TEMPLATE\n    DEBUG = sre_compile.SRE_FLAG_DEBUG # dump pattern after compilation\nglobals().update(RegexFlag.__members__)\n\n# sre exception\nerror = sre_compile.error\n\n# --------------------------------------------------------------------\n# public interface\n\ndef match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\n\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\n\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\n\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).sub(repl, string, count)\n\ndef subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).subn(repl, string, count)\n\ndef split(pattern, string, maxsplit=0, flags=0):\n    \"\"\"Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.\"\"\"\n    return _compile(pattern, flags).split(string, maxsplit)\n\ndef findall(pattern, string, flags=0):\n    \"\"\"Return a list of all non-overlapping matches in the string.\n\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).findall(string)\n\ndef finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).finditer(string)\n\ndef compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\n\ndef purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\n\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)\n# '&', '~', (extended character set operations)\n# '#' (comment) and WHITESPACE (ignored) in verbose mode\n_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\n\ndef escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')\n\nPattern = type(sre_compile.compile('', 0))\nMatch = type(sre_compile.compile('', 0).match(''))\n\n# --------------------------------------------------------------------\n# internals\n\n_cache = {}  # ordered!\n\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass\n    if isinstance(pattern, Pattern):\n        if flags:\n            raise ValueError(\n                \"cannot process flags argument with a compiled pattern\")\n        return pattern\n    if not sre_compile.isstring(pattern):\n        raise TypeError(\"first argument must be string or compiled pattern\")\n    p = sre_compile.compile(pattern, flags)\n    if not (flags & DEBUG):\n        if len(_cache) >= _MAXCACHE:\n            # Drop the oldest item\n            try:\n                del _cache[next(iter(_cache))]\n            except (StopIteration, RuntimeError, KeyError):\n                pass\n        _cache[type(pattern), pattern, flags] = p\n    return p\n\n@functools.lru_cache(_MAXCACHE)\ndef _compile_repl(repl, pattern):\n    # internal: compile replacement pattern\n    return sre_parse.parse_template(repl, pattern)\n\ndef _expand(pattern, match, template):\n    # internal: Match.expand implementation hook\n    template = sre_parse.parse_template(template, pattern)\n    return sre_parse.expand_template(template, match)\n\ndef _subx(pattern, template):\n    # internal: Pattern.sub/subn implementation helper\n    template = _compile_repl(template, pattern)\n    if not template[0] and len(template[1]) == 1:\n        # literal replacement\n        return template[1][0]\n    def filter(match, template=template):\n        return sre_parse.expand_template(template, match)\n    return filter\n\n# register myself for pickling\n\nimport copyreg\n\ndef _pickle(p):\n    return _compile, (p.pattern, p.flags)\n\ncopyreg.pickle(Pattern, _pickle, _compile)\n\n# --------------------------------------------------------------------\n# experimental stuff (see python-dev discussions for details)\n\nclass Scanner:\n    def __init__(self, lexicon, flags=0):\n        from sre_constants import BRANCH, SUBPATTERN\n        if isinstance(flags, RegexFlag):\n            flags = flags.value\n        self.lexicon = lexicon\n        # combine phrases into a compound pattern\n        p = []\n        s = sre_parse.Pattern()\n        s.flags = flags\n        for phrase, action in lexicon:\n            gid = s.opengroup()\n            p.append(sre_parse.SubPattern(s, [\n                (SUBPATTERN, (gid, 0, 0, sre_parse.parse(phrase, flags))),\n                ]))\n            s.closegroup(gid, p[-1])\n        p = sre_parse.SubPattern(s, [(BRANCH, (None, p))])\n        self.scanner = sre_compile.compile(p)\n    def scan(self, string):\n        result = []\n        append = result.append\n        match = self.scanner.scanner(string).match\n        i = 0\n        while True:\n            m = match()\n            if not m:\n                break\n            j = m.end()\n            if i == j:\n                break\n            action = self.lexicon[m.lastindex-1][1]\n            if callable(action):\n                self.match = m\n                action = action(self, m.group())\n            if action is not None:\n                append(action)\n            i = j\n        return result, string[i:]\n", 366], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py": ["import inspect\nimport logging\nimport operator\nimport re\nimport string\nimport sys\nimport typing\nimport typing as t\nfrom datetime import date\nfrom datetime import datetime\nfrom datetime import timezone\nfrom itertools import chain\nfrom weakref import WeakKeyDictionary\n\nif t.TYPE_CHECKING:\n    from _typeshed.wsgi import StartResponse\n    from _typeshed.wsgi import WSGIApplication\n    from _typeshed.wsgi import WSGIEnvironment\n    from .wrappers.request import Request  # noqa: F401\n\n_logger: t.Optional[logging.Logger] = None\n_signature_cache = WeakKeyDictionary()  # type: ignore\n_epoch_ord = date(1970, 1, 1).toordinal()\n_legal_cookie_chars = frozenset(\n    c.encode(\"ascii\")\n    for c in f\"{string.ascii_letters}{string.digits}/=!#$%&'*+-.^_`|~:\"\n)\n\n_cookie_quoting_map = {b\",\": b\"\\\\054\", b\";\": b\"\\\\073\", b'\"': b'\\\\\"', b\"\\\\\": b\"\\\\\\\\\"}\nfor _i in chain(range(32), range(127, 256)):\n    _cookie_quoting_map[_i.to_bytes(1, sys.byteorder)] = f\"\\\\{_i:03o}\".encode(\"latin1\")\n\n_octal_re = re.compile(br\"\\\\[0-3][0-7][0-7]\")\n_quote_re = re.compile(br\"[\\\\].\")\n_legal_cookie_chars_re = br\"[\\w\\d!#%&\\'~_`><@,:/\\$\\*\\+\\-\\.\\^\\|\\)\\(\\?\\}\\{\\=]\"\n_cookie_re = re.compile(\n    br\"\"\"\n    (?P<key>[^=;]+)\n    (?:\\s*=\\s*\n        (?P<val>\n            \"(?:[^\\\\\"]|\\\\.)*\" |\n             (?:.*?)\n        )\n    )?\n    \\s*;\n\"\"\",\n    flags=re.VERBOSE,\n)\n\n\nclass _Missing:\n    def __repr__(self) -> str:\n        return \"no value\"\n\n    def __reduce__(self) -> str:\n        return \"_missing\"\n\n\n_missing = _Missing()\n\n\n@typing.overload\ndef _make_encode_wrapper(reference: str) -> t.Callable[[str], str]:\n    ...\n\n\n@typing.overload\ndef _make_encode_wrapper(reference: bytes) -> t.Callable[[str], bytes]:\n    ...\n\n\ndef _make_encode_wrapper(reference: t.AnyStr) -> t.Callable[[str], t.AnyStr]:\n    \"\"\"Create a function that will be called with a string argument. If\n    the reference is bytes, values will be encoded to bytes.\n    \"\"\"\n    if isinstance(reference, str):\n        return lambda x: x\n\n    return operator.methodcaller(\"encode\", \"latin1\")\n\n\ndef _check_str_tuple(value: t.Tuple[t.AnyStr, ...]) -> None:\n    \"\"\"Ensure tuple items are all strings or all bytes.\"\"\"\n    if not value:\n        return\n\n    item_type = str if isinstance(value[0], str) else bytes\n\n    if any(not isinstance(item, item_type) for item in value):\n        raise TypeError(f\"Cannot mix str and bytes arguments (got {value!r})\")\n\n\n_default_encoding = sys.getdefaultencoding()\n\n\ndef _to_bytes(\n    x: t.Union[str, bytes], charset: str = _default_encoding, errors: str = \"strict\"\n) -> bytes:\n    if x is None or isinstance(x, bytes):\n        return x\n\n    if isinstance(x, (bytearray, memoryview)):\n        return bytes(x)\n\n    if isinstance(x, str):\n        return x.encode(charset, errors)\n\n    raise TypeError(\"Expected bytes\")\n\n\n@typing.overload\ndef _to_str(  # type: ignore\n    x: None,\n    charset: t.Optional[str] = ...,\n    errors: str = ...,\n    allow_none_charset: bool = ...,\n) -> None:\n    ...\n\n\n@typing.overload\ndef _to_str(\n    x: t.Any,\n    charset: t.Optional[str] = ...,\n    errors: str = ...,\n    allow_none_charset: bool = ...,\n) -> str:\n    ...\n\n\ndef _to_str(\n    x: t.Optional[t.Any],\n    charset: t.Optional[str] = _default_encoding,\n    errors: str = \"strict\",\n    allow_none_charset: bool = False,\n) -> t.Optional[t.Union[str, bytes]]:\n    if x is None or isinstance(x, str):\n        return x\n\n    if not isinstance(x, (bytes, bytearray)):\n        return str(x)\n\n    if charset is None:\n        if allow_none_charset:\n            return x\n\n    return x.decode(charset, errors)  # type: ignore\n\n\ndef _wsgi_decoding_dance(\n    s: str, charset: str = \"utf-8\", errors: str = \"replace\"\n) -> str:\n    return s.encode(\"latin1\").decode(charset, errors)\n\n\ndef _wsgi_encoding_dance(\n    s: str, charset: str = \"utf-8\", errors: str = \"replace\"\n) -> str:\n    if isinstance(s, bytes):\n        return s.decode(\"latin1\", errors)\n\n    return s.encode(charset).decode(\"latin1\", errors)\n\n\ndef _get_environ(obj: t.Union[\"WSGIEnvironment\", \"Request\"]) -> \"WSGIEnvironment\":\n    env = getattr(obj, \"environ\", obj)\n    assert isinstance(\n        env, dict\n    ), f\"{type(obj).__name__!r} is not a WSGI environment (has to be a dict)\"\n    return env\n\n\ndef _has_level_handler(logger: logging.Logger) -> bool:\n    \"\"\"Check if there is a handler in the logging chain that will handle\n    the given logger's effective level.\n    \"\"\"\n    level = logger.getEffectiveLevel()\n    current = logger\n\n    while current:\n        if any(handler.level <= level for handler in current.handlers):\n            return True\n\n        if not current.propagate:\n            break\n\n        current = current.parent  # type: ignore\n\n    return False\n\n\nclass _ColorStreamHandler(logging.StreamHandler):\n    \"\"\"On Windows, wrap stream with Colorama for ANSI style support.\"\"\"\n\n    def __init__(self) -> None:\n        try:\n            import colorama\n        except ImportError:\n            stream = None\n        else:\n            stream = colorama.AnsiToWin32(sys.stderr)\n\n        super().__init__(stream)\n\n\ndef _log(type: str, message: str, *args: t.Any, **kwargs: t.Any) -> None:\n    \"\"\"Log a message to the 'werkzeug' logger.\n\n    The logger is created the first time it is needed. If there is no\n    level set, it is set to :data:`logging.INFO`. If there is no handler\n    for the logger's effective level, a :class:`logging.StreamHandler`\n    is added.\n    \"\"\"\n    global _logger\n\n    if _logger is None:\n        _logger = logging.getLogger(\"werkzeug\")\n\n        if _logger.level == logging.NOTSET:\n            _logger.setLevel(logging.INFO)\n\n        if not _has_level_handler(_logger):\n            _logger.addHandler(_ColorStreamHandler())\n\n    getattr(_logger, type)(message.rstrip(), *args, **kwargs)\n\n\ndef _parse_signature(func):  # type: ignore\n    \"\"\"Return a signature object for the function.\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1 along with ``utils.bind`` and\n        ``validate_arguments``.\n    \"\"\"\n    # if we have a cached validator for this function, return it\n    parse = _signature_cache.get(func)\n    if parse is not None:\n        return parse\n\n    # inspect the function signature and collect all the information\n    tup = inspect.getfullargspec(func)\n    positional, vararg_var, kwarg_var, defaults = tup[:4]\n    defaults = defaults or ()\n    arg_count = len(positional)\n    arguments = []\n    for idx, name in enumerate(positional):\n        if isinstance(name, list):\n            raise TypeError(\n                \"cannot parse functions that unpack tuples in the function signature\"\n            )\n        try:\n            default = defaults[idx - arg_count]\n        except IndexError:\n            param = (name, False, None)\n        else:\n            param = (name, True, default)\n        arguments.append(param)\n    arguments = tuple(arguments)\n\n    def parse(args, kwargs):  # type: ignore\n        new_args = []\n        missing = []\n        extra = {}\n\n        # consume as many arguments as positional as possible\n        for idx, (name, has_default, default) in enumerate(arguments):\n            try:\n                new_args.append(args[idx])\n            except IndexError:\n                try:\n                    new_args.append(kwargs.pop(name))\n                except KeyError:\n                    if has_default:\n                        new_args.append(default)\n                    else:\n                        missing.append(name)\n            else:\n                if name in kwargs:\n                    extra[name] = kwargs.pop(name)\n\n        # handle extra arguments\n        extra_positional = args[arg_count:]\n        if vararg_var is not None:\n            new_args.extend(extra_positional)\n            extra_positional = ()\n        if kwargs and kwarg_var is None:\n            extra.update(kwargs)\n            kwargs = {}\n\n        return (\n            new_args,\n            kwargs,\n            missing,\n            extra,\n            extra_positional,\n            arguments,\n            vararg_var,\n            kwarg_var,\n        )\n\n    _signature_cache[func] = parse\n    return parse\n\n\n@typing.overload\ndef _dt_as_utc(dt: None) -> None:\n    ...\n\n\n@typing.overload\ndef _dt_as_utc(dt: datetime) -> datetime:\n    ...\n\n\ndef _dt_as_utc(dt: t.Optional[datetime]) -> t.Optional[datetime]:\n    if dt is None:\n        return dt\n\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=timezone.utc)\n    elif dt.tzinfo != timezone.utc:\n        return dt.astimezone(timezone.utc)\n\n    return dt\n\n\n_TAccessorValue = t.TypeVar(\"_TAccessorValue\")\n\n\nclass _DictAccessorProperty(t.Generic[_TAccessorValue]):\n    \"\"\"Baseclass for `environ_property` and `header_property`.\"\"\"\n\n    read_only = False\n\n    def __init__(\n        self,\n        name: str,\n        default: t.Optional[_TAccessorValue] = None,\n        load_func: t.Optional[t.Callable[[str], _TAccessorValue]] = None,\n        dump_func: t.Optional[t.Callable[[_TAccessorValue], str]] = None,\n        read_only: t.Optional[bool] = None,\n        doc: t.Optional[str] = None,\n    ) -> None:\n        self.name = name\n        self.default = default\n        self.load_func = load_func\n        self.dump_func = dump_func\n        if read_only is not None:\n            self.read_only = read_only\n        self.__doc__ = doc\n\n    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError\n\n    @typing.overload\n    def __get__(\n        self, instance: None, owner: type\n    ) -> \"_DictAccessorProperty[_TAccessorValue]\":\n        ...\n\n    @typing.overload\n    def __get__(self, instance: t.Any, owner: type) -> _TAccessorValue:\n        ...\n\n    def __get__(\n        self, instance: t.Optional[t.Any], owner: type\n    ) -> t.Union[_TAccessorValue, \"_DictAccessorProperty[_TAccessorValue]\"]:\n        if instance is None:\n            return self\n\n        storage = self.lookup(instance)\n\n        if self.name not in storage:\n            return self.default  # type: ignore\n\n        value = storage[self.name]\n\n        if self.load_func is not None:\n            try:\n                return self.load_func(value)\n            except (ValueError, TypeError):\n                return self.default  # type: ignore\n\n        return value  # type: ignore\n\n    def __set__(self, instance: t.Any, value: _TAccessorValue) -> None:\n        if self.read_only:\n            raise AttributeError(\"read only property\")\n\n        if self.dump_func is not None:\n            self.lookup(instance)[self.name] = self.dump_func(value)\n        else:\n            self.lookup(instance)[self.name] = value\n\n    def __delete__(self, instance: t.Any) -> None:\n        if self.read_only:\n            raise AttributeError(\"read only property\")\n\n        self.lookup(instance).pop(self.name, None)\n\n    def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {self.name}>\"\n\n\ndef _cookie_quote(b: bytes) -> bytes:\n    buf = bytearray()\n    all_legal = True\n    _lookup = _cookie_quoting_map.get\n    _push = buf.extend\n\n    for char_int in b:\n        char = char_int.to_bytes(1, sys.byteorder)\n        if char not in _legal_cookie_chars:\n            all_legal = False\n            char = _lookup(char, char)\n        _push(char)\n\n    if all_legal:\n        return bytes(buf)\n    return bytes(b'\"' + buf + b'\"')\n\n\ndef _cookie_unquote(b: bytes) -> bytes:\n    if len(b) < 2:\n        return b\n    if b[:1] != b'\"' or b[-1:] != b'\"':\n        return b\n\n    b = b[1:-1]\n\n    i = 0\n    n = len(b)\n    rv = bytearray()\n    _push = rv.extend\n\n    while 0 <= i < n:\n        o_match = _octal_re.search(b, i)\n        q_match = _quote_re.search(b, i)\n        if not o_match and not q_match:\n            rv.extend(b[i:])\n            break\n        j = k = -1\n        if o_match:\n            j = o_match.start(0)\n        if q_match:\n            k = q_match.start(0)\n        if q_match and (not o_match or k < j):\n            _push(b[i:k])\n            _push(b[k + 1 : k + 2])\n            i = k + 2\n        else:\n            _push(b[i:j])\n            rv.append(int(b[j + 1 : j + 4], 8))\n            i = j + 4\n\n    return bytes(rv)\n\n\ndef _cookie_parse_impl(b: bytes) -> t.Iterator[t.Tuple[bytes, bytes]]:\n    \"\"\"Lowlevel cookie parsing facility that operates on bytes.\"\"\"\n    i = 0\n    n = len(b)\n\n    while i < n:\n        match = _cookie_re.search(b + b\";\", i)\n        if not match:\n            break\n\n        key = match.group(\"key\").strip()\n        value = match.group(\"val\") or b\"\"\n        i = match.end(0)\n\n        yield key, _cookie_unquote(value)\n\n\ndef _encode_idna(domain: str) -> bytes:\n    # If we're given bytes, make sure they fit into ASCII\n    if isinstance(domain, bytes):\n        domain.decode(\"ascii\")\n        return domain\n\n    # Otherwise check if it's already ascii, then return\n    try:\n        return domain.encode(\"ascii\")\n    except UnicodeError:\n        pass\n\n    # Otherwise encode each part separately\n    return b\".\".join(p.encode(\"idna\") for p in domain.split(\".\"))\n\n\ndef _decode_idna(domain: t.Union[str, bytes]) -> str:\n    # If the input is a string try to encode it to ascii to do the idna\n    # decoding. If that fails because of a unicode error, then we\n    # already have a decoded idna domain.\n    if isinstance(domain, str):\n        try:\n            domain = domain.encode(\"ascii\")\n        except UnicodeError:\n            return domain  # type: ignore\n\n    # Decode each part separately. If a part fails, try to decode it\n    # with ascii and silently ignore errors. This makes sense because\n    # the idna codec does not have error handling.\n    def decode_part(part: bytes) -> str:\n        try:\n            return part.decode(\"idna\")\n        except UnicodeError:\n            return part.decode(\"ascii\", \"ignore\")\n\n    return \".\".join(decode_part(p) for p in domain.split(b\".\"))\n\n\n@typing.overload\ndef _make_cookie_domain(domain: None) -> None:\n    ...\n\n\n@typing.overload\ndef _make_cookie_domain(domain: str) -> bytes:\n    ...\n\n\ndef _make_cookie_domain(domain: t.Optional[str]) -> t.Optional[bytes]:\n    if domain is None:\n        return None\n    domain = _encode_idna(domain)\n    if b\":\" in domain:\n        domain = domain.split(b\":\", 1)[0]\n    if b\".\" in domain:\n        return domain\n    raise ValueError(\n        \"Setting 'domain' for a cookie on a server running locally (ex: \"\n        \"localhost) is not supported by complying browsers. You should \"\n        \"have something like: '127.0.0.1 localhost dev.localhost' on \"\n        \"your hosts file and then point your server to run on \"\n        \"'dev.localhost' and also set 'domain' for 'dev.localhost'\"\n    )\n\n\ndef _easteregg(app: t.Optional[\"WSGIApplication\"] = None) -> \"WSGIApplication\":\n    \"\"\"Like the name says.  But who knows how it works?\"\"\"\n\n    def bzzzzzzz(gyver: bytes) -> str:\n        import base64\n        import zlib\n\n        return zlib.decompress(base64.b64decode(gyver)).decode(\"ascii\")\n\n    gyver = \"\\n\".join(\n        [\n            x + (77 - len(x)) * \" \"\n            for x in bzzzzzzz(\n                b\"\"\"\neJyFlzuOJDkMRP06xRjymKgDJCDQStBYT8BCgK4gTwfQ2fcFs2a2FzvZk+hvlcRvRJD148efHt9m\n9Xz94dRY5hGt1nrYcXx7us9qlcP9HHNh28rz8dZj+q4rynVFFPdlY4zH873NKCexrDM6zxxRymzz\n4QIxzK4bth1PV7+uHn6WXZ5C4ka/+prFzx3zWLMHAVZb8RRUxtFXI5DTQ2n3Hi2sNI+HK43AOWSY\njmEzE4naFp58PdzhPMdslLVWHTGUVpSxImw+pS/D+JhzLfdS1j7PzUMxij+mc2U0I9zcbZ/HcZxc\nq1QjvvcThMYFnp93agEx392ZdLJWXbi/Ca4Oivl4h/Y1ErEqP+lrg7Xa4qnUKu5UE9UUA4xeqLJ5\njWlPKJvR2yhRI7xFPdzPuc6adXu6ovwXwRPXXnZHxlPtkSkqWHilsOrGrvcVWXgGP3daXomCj317\n8P2UOw/NnA0OOikZyFf3zZ76eN9QXNwYdD8f8/LdBRFg0BO3bB+Pe/+G8er8tDJv83XTkj7WeMBJ\nv/rnAfdO51d6sFglfi8U7zbnr0u9tyJHhFZNXYfH8Iafv2Oa+DT6l8u9UYlajV/hcEgk1x8E8L/r\nXJXl2SK+GJCxtnyhVKv6GFCEB1OO3f9YWAIEbwcRWv/6RPpsEzOkXURMN37J0PoCSYeBnJQd9Giu\nLxYQJNlYPSo/iTQwgaihbART7Fcyem2tTSCcwNCs85MOOpJtXhXDe0E7zgZJkcxWTar/zEjdIVCk\niXy87FW6j5aGZhttDBoAZ3vnmlkx4q4mMmCdLtnHkBXFMCReqthSGkQ+MDXLLCpXwBs0t+sIhsDI\ntjBB8MwqYQpLygZ56rRHHpw+OAVyGgaGRHWy2QfXez+ZQQTTBkmRXdV/A9LwH6XGZpEAZU8rs4pE\n1R4FQ3Uwt8RKEtRc0/CrANUoes3EzM6WYcFyskGZ6UTHJWenBDS7h163Eo2bpzqxNE9aVgEM2CqI\nGAJe9Yra4P5qKmta27VjzYdR04Vc7KHeY4vs61C0nbywFmcSXYjzBHdiEjraS7PGG2jHHTpJUMxN\nJlxr3pUuFvlBWLJGE3GcA1/1xxLcHmlO+LAXbhrXah1tD6Ze+uqFGdZa5FM+3eHcKNaEarutAQ0A\nQMAZHV+ve6LxAwWnXbbSXEG2DmCX5ijeLCKj5lhVFBrMm+ryOttCAeFpUdZyQLAQkA06RLs56rzG\n8MID55vqr/g64Qr/wqwlE0TVxgoiZhHrbY2h1iuuyUVg1nlkpDrQ7Vm1xIkI5XRKLedN9EjzVchu\njQhXcVkjVdgP2O99QShpdvXWoSwkp5uMwyjt3jiWCqWGSiaaPAzohjPanXVLbM3x0dNskJsaCEyz\nDTKIs+7WKJD4ZcJGfMhLFBf6hlbnNkLEePF8Cx2o2kwmYF4+MzAxa6i+6xIQkswOqGO+3x9NaZX8\nMrZRaFZpLeVTYI9F/djY6DDVVs340nZGmwrDqTCiiqD5luj3OzwpmQCiQhdRYowUYEA3i1WWGwL4\nGCtSoO4XbIPFeKGU13XPkDf5IdimLpAvi2kVDVQbzOOa4KAXMFlpi/hV8F6IDe0Y2reg3PuNKT3i\nRYhZqtkQZqSB2Qm0SGtjAw7RDwaM1roESC8HWiPxkoOy0lLTRFG39kvbLZbU9gFKFRvixDZBJmpi\nXyq3RE5lW00EJjaqwp/v3EByMSpVZYsEIJ4APaHmVtpGSieV5CALOtNUAzTBiw81GLgC0quyzf6c\nNlWknzJeCsJ5fup2R4d8CYGN77mu5vnO1UqbfElZ9E6cR6zbHjgsr9ly18fXjZoPeDjPuzlWbFwS\npdvPkhntFvkc13qb9094LL5NrA3NIq3r9eNnop9DizWOqCEbyRBFJTHn6Tt3CG1o8a4HevYh0XiJ\nsR0AVVHuGuMOIfbuQ/OKBkGRC6NJ4u7sbPX8bG/n5sNIOQ6/Y/BX3IwRlTSabtZpYLB85lYtkkgm\np1qXK3Du2mnr5INXmT/78KI12n11EFBkJHHp0wJyLe9MvPNUGYsf+170maayRoy2lURGHAIapSpQ\nkrEDuNoJCHNlZYhKpvw4mspVWxqo415n8cD62N9+EfHrAvqQnINStetek7RY2Urv8nxsnGaZfRr/\nnhXbJ6m/yl1LzYqscDZA9QHLNbdaSTTr+kFg3bC0iYbX/eQy0Bv3h4B50/SGYzKAXkCeOLI3bcAt\nmj2Z/FM1vQWgDynsRwNvrWnJHlespkrp8+vO1jNaibm+PhqXPPv30YwDZ6jApe3wUjFQobghvW9p\n7f2zLkGNv8b191cD/3vs9Q833z8t\"\"\"\n            ).splitlines()\n        ]\n    )\n\n    def easteregged(\n        environ: \"WSGIEnvironment\", start_response: \"StartResponse\"\n    ) -> t.Iterable[bytes]:\n        def injecting_start_response(\n            status: str, headers: t.List[t.Tuple[str, str]], exc_info: t.Any = None\n        ) -> t.Callable[[bytes], t.Any]:\n            headers.append((\"X-Powered-By\", \"Werkzeug\"))\n            return start_response(status, headers, exc_info)\n\n        if app is not None and environ.get(\"QUERY_STRING\") != \"macgybarchakku\":\n            return app(environ, injecting_start_response)\n        injecting_start_response(\"200 OK\", [(\"Content-Type\", \"text/html\")])\n        return [\n            f\"\"\"\\\n<!DOCTYPE html>\n<html>\n<head>\n<title>About Werkzeug</title>\n<style type=\"text/css\">\n  body {{ font: 15px Georgia, serif; text-align: center; }}\n  a {{ color: #333; text-decoration: none; }}\n  h1 {{ font-size: 30px; margin: 20px 0 10px 0; }}\n  p {{ margin: 0 0 30px 0; }}\n  pre {{ font: 11px 'Consolas', 'Monaco', monospace; line-height: 0.95; }}\n</style>\n</head>\n<body>\n<h1><a href=\"http://werkzeug.pocoo.org/\">Werkzeug</a></h1>\n<p>the Swiss Army knife of Python web development.</p>\n<pre>{gyver}\\n\\n\\n</pre>\n</body>\n</html>\"\"\".encode(\n                \"latin1\"\n            )\n        ]\n\n    return easteregged\n", 626], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py": ["\"\"\"Functions for working with URLs.\n\nContains implementations of functions from :mod:`urllib.parse` that\nhandle bytes and strings.\n\"\"\"\nimport codecs\nimport os\nimport re\nimport typing as t\nimport warnings\n\nfrom ._internal import _check_str_tuple\nfrom ._internal import _decode_idna\nfrom ._internal import _encode_idna\nfrom ._internal import _make_encode_wrapper\nfrom ._internal import _to_str\n\nif t.TYPE_CHECKING:\n    from . import datastructures as ds\n\n# A regular expression for what a valid schema looks like\n_scheme_re = re.compile(r\"^[a-zA-Z0-9+-.]+$\")\n\n# Characters that are safe in any part of an URL.\n_always_safe = frozenset(\n    bytearray(\n        b\"abcdefghijklmnopqrstuvwxyz\"\n        b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        b\"0123456789\"\n        b\"-._~\"\n    )\n)\n\n_hexdigits = \"0123456789ABCDEFabcdef\"\n_hextobyte = {\n    f\"{a}{b}\".encode(\"ascii\"): int(f\"{a}{b}\", 16)\n    for a in _hexdigits\n    for b in _hexdigits\n}\n_bytetohex = [f\"%{char:02X}\".encode(\"ascii\") for char in range(256)]\n\n\nclass _URLTuple(t.NamedTuple):\n    scheme: str\n    netloc: str\n    path: str\n    query: str\n    fragment: str\n\n\nclass BaseURL(_URLTuple):\n    \"\"\"Superclass of :py:class:`URL` and :py:class:`BytesURL`.\"\"\"\n\n    __slots__ = ()\n    _at: str\n    _colon: str\n    _lbracket: str\n    _rbracket: str\n\n    def __str__(self) -> str:\n        return self.to_url()\n\n    def replace(self, **kwargs: t.Any) -> \"BaseURL\":\n        \"\"\"Return an URL with the same values, except for those parameters\n        given new values by whichever keyword arguments are specified.\"\"\"\n        return self._replace(**kwargs)\n\n    @property\n    def host(self) -> t.Optional[str]:\n        \"\"\"The host part of the URL if available, otherwise `None`.  The\n        host is either the hostname or the IP address mentioned in the\n        URL.  It will not contain the port.\n        \"\"\"\n        return self._split_host()[0]\n\n    @property\n    def ascii_host(self) -> t.Optional[str]:\n        \"\"\"Works exactly like :attr:`host` but will return a result that\n        is restricted to ASCII.  If it finds a netloc that is not ASCII\n        it will attempt to idna decode it.  This is useful for socket\n        operations when the URL might include internationalized characters.\n        \"\"\"\n        rv = self.host\n        if rv is not None and isinstance(rv, str):\n            try:\n                rv = _encode_idna(rv)  # type: ignore\n            except UnicodeError:\n                rv = rv.encode(\"ascii\", \"ignore\")  # type: ignore\n        return _to_str(rv, \"ascii\", \"ignore\")\n\n    @property\n    def port(self) -> t.Optional[int]:\n        \"\"\"The port in the URL as an integer if it was present, `None`\n        otherwise.  This does not fill in default ports.\n        \"\"\"\n        try:\n            rv = int(_to_str(self._split_host()[1]))\n            if 0 <= rv <= 65535:\n                return rv\n        except (ValueError, TypeError):\n            pass\n        return None\n\n    @property\n    def auth(self) -> t.Optional[str]:\n        \"\"\"The authentication part in the URL if available, `None`\n        otherwise.\n        \"\"\"\n        return self._split_netloc()[0]\n\n    @property\n    def username(self) -> t.Optional[str]:\n        \"\"\"The username if it was part of the URL, `None` otherwise.\n        This undergoes URL decoding and will always be a string.\n        \"\"\"\n        rv = self._split_auth()[0]\n        if rv is not None:\n            return _url_unquote_legacy(rv)\n        return None\n\n    @property\n    def raw_username(self) -> t.Optional[str]:\n        \"\"\"The username if it was part of the URL, `None` otherwise.\n        Unlike :attr:`username` this one is not being decoded.\n        \"\"\"\n        return self._split_auth()[0]\n\n    @property\n    def password(self) -> t.Optional[str]:\n        \"\"\"The password if it was part of the URL, `None` otherwise.\n        This undergoes URL decoding and will always be a string.\n        \"\"\"\n        rv = self._split_auth()[1]\n        if rv is not None:\n            return _url_unquote_legacy(rv)\n        return None\n\n    @property\n    def raw_password(self) -> t.Optional[str]:\n        \"\"\"The password if it was part of the URL, `None` otherwise.\n        Unlike :attr:`password` this one is not being decoded.\n        \"\"\"\n        return self._split_auth()[1]\n\n    def decode_query(self, *args: t.Any, **kwargs: t.Any) -> \"ds.MultiDict[str, str]\":\n        \"\"\"Decodes the query part of the URL.  Ths is a shortcut for\n        calling :func:`url_decode` on the query argument.  The arguments and\n        keyword arguments are forwarded to :func:`url_decode` unchanged.\n        \"\"\"\n        return url_decode(self.query, *args, **kwargs)\n\n    def join(self, *args: t.Any, **kwargs: t.Any) -> \"BaseURL\":\n        \"\"\"Joins this URL with another one.  This is just a convenience\n        function for calling into :meth:`url_join` and then parsing the\n        return value again.\n        \"\"\"\n        return url_parse(url_join(self, *args, **kwargs))\n\n    def to_url(self) -> str:\n        \"\"\"Returns a URL string or bytes depending on the type of the\n        information stored.  This is just a convenience function\n        for calling :meth:`url_unparse` for this URL.\n        \"\"\"\n        return url_unparse(self)\n\n    def encode_netloc(self) -> str:\n        \"\"\"Encodes the netloc part to an ASCII safe URL as bytes.\"\"\"\n        rv = self.ascii_host or \"\"\n        if \":\" in rv:\n            rv = f\"[{rv}]\"\n        port = self.port\n        if port is not None:\n            rv = f\"{rv}:{port}\"\n        auth = \":\".join(\n            filter(\n                None,\n                [\n                    url_quote(self.raw_username or \"\", \"utf-8\", \"strict\", \"/:%\"),\n                    url_quote(self.raw_password or \"\", \"utf-8\", \"strict\", \"/:%\"),\n                ],\n            )\n        )\n        if auth:\n            rv = f\"{auth}@{rv}\"\n        return rv\n\n    def decode_netloc(self) -> str:\n        \"\"\"Decodes the netloc part into a string.\"\"\"\n        rv = _decode_idna(self.host or \"\")\n\n        if \":\" in rv:\n            rv = f\"[{rv}]\"\n        port = self.port\n        if port is not None:\n            rv = f\"{rv}:{port}\"\n        auth = \":\".join(\n            filter(\n                None,\n                [\n                    _url_unquote_legacy(self.raw_username or \"\", \"/:%@\"),\n                    _url_unquote_legacy(self.raw_password or \"\", \"/:%@\"),\n                ],\n            )\n        )\n        if auth:\n            rv = f\"{auth}@{rv}\"\n        return rv\n\n    def to_uri_tuple(self) -> \"BaseURL\":\n        \"\"\"Returns a :class:`BytesURL` tuple that holds a URI.  This will\n        encode all the information in the URL properly to ASCII using the\n        rules a web browser would follow.\n\n        It's usually more interesting to directly call :meth:`iri_to_uri` which\n        will return a string.\n        \"\"\"\n        return url_parse(iri_to_uri(self))\n\n    def to_iri_tuple(self) -> \"BaseURL\":\n        \"\"\"Returns a :class:`URL` tuple that holds a IRI.  This will try\n        to decode as much information as possible in the URL without\n        losing information similar to how a web browser does it for the\n        URL bar.\n\n        It's usually more interesting to directly call :meth:`uri_to_iri` which\n        will return a string.\n        \"\"\"\n        return url_parse(uri_to_iri(self))\n\n    def get_file_location(\n        self, pathformat: t.Optional[str] = None\n    ) -> t.Tuple[t.Optional[str], t.Optional[str]]:\n        \"\"\"Returns a tuple with the location of the file in the form\n        ``(server, location)``.  If the netloc is empty in the URL or\n        points to localhost, it's represented as ``None``.\n\n        The `pathformat` by default is autodetection but needs to be set\n        when working with URLs of a specific system.  The supported values\n        are ``'windows'`` when working with Windows or DOS paths and\n        ``'posix'`` when working with posix paths.\n\n        If the URL does not point to a local file, the server and location\n        are both represented as ``None``.\n\n        :param pathformat: The expected format of the path component.\n                           Currently ``'windows'`` and ``'posix'`` are\n                           supported.  Defaults to ``None`` which is\n                           autodetect.\n        \"\"\"\n        if self.scheme != \"file\":\n            return None, None\n\n        path = url_unquote(self.path)\n        host = self.netloc or None\n\n        if pathformat is None:\n            if os.name == \"nt\":\n                pathformat = \"windows\"\n            else:\n                pathformat = \"posix\"\n\n        if pathformat == \"windows\":\n            if path[:1] == \"/\" and path[1:2].isalpha() and path[2:3] in \"|:\":\n                path = f\"{path[1:2]}:{path[3:]}\"\n            windows_share = path[:3] in (\"\\\\\" * 3, \"/\" * 3)\n            import ntpath\n\n            path = ntpath.normpath(path)\n            # Windows shared drives are represented as ``\\\\host\\\\directory``.\n            # That results in a URL like ``file://///host/directory``, and a\n            # path like ``///host/directory``. We need to special-case this\n            # because the path contains the hostname.\n            if windows_share and host is None:\n                parts = path.lstrip(\"\\\\\").split(\"\\\\\", 1)\n                if len(parts) == 2:\n                    host, path = parts\n                else:\n                    host = parts[0]\n                    path = \"\"\n        elif pathformat == \"posix\":\n            import posixpath\n\n            path = posixpath.normpath(path)\n        else:\n            raise TypeError(f\"Invalid path format {pathformat!r}\")\n\n        if host in (\"127.0.0.1\", \"::1\", \"localhost\"):\n            host = None\n\n        return host, path\n\n    def _split_netloc(self) -> t.Tuple[t.Optional[str], str]:\n        if self._at in self.netloc:\n            auth, _, netloc = self.netloc.partition(self._at)\n            return auth, netloc\n        return None, self.netloc\n\n    def _split_auth(self) -> t.Tuple[t.Optional[str], t.Optional[str]]:\n        auth = self._split_netloc()[0]\n        if not auth:\n            return None, None\n        if self._colon not in auth:\n            return auth, None\n\n        username, _, password = auth.partition(self._colon)\n        return username, password\n\n    def _split_host(self) -> t.Tuple[t.Optional[str], t.Optional[str]]:\n        rv = self._split_netloc()[1]\n        if not rv:\n            return None, None\n\n        if not rv.startswith(self._lbracket):\n            if self._colon in rv:\n                host, _, port = rv.partition(self._colon)\n                return host, port\n            return rv, None\n\n        idx = rv.find(self._rbracket)\n        if idx < 0:\n            return rv, None\n\n        host = rv[1:idx]\n        rest = rv[idx + 1 :]\n        if rest.startswith(self._colon):\n            return host, rest[1:]\n        return host, None\n\n\nclass URL(BaseURL):\n    \"\"\"Represents a parsed URL.  This behaves like a regular tuple but\n    also has some extra attributes that give further insight into the\n    URL.\n    \"\"\"\n\n    __slots__ = ()\n    _at = \"@\"\n    _colon = \":\"\n    _lbracket = \"[\"\n    _rbracket = \"]\"\n\n    def encode(self, charset: str = \"utf-8\", errors: str = \"replace\") -> \"BytesURL\":\n        \"\"\"Encodes the URL to a tuple made out of bytes.  The charset is\n        only being used for the path, query and fragment.\n        \"\"\"\n        return BytesURL(\n            self.scheme.encode(\"ascii\"),  # type: ignore\n            self.encode_netloc(),\n            self.path.encode(charset, errors),  # type: ignore\n            self.query.encode(charset, errors),  # type: ignore\n            self.fragment.encode(charset, errors),  # type: ignore\n        )\n\n\nclass BytesURL(BaseURL):\n    \"\"\"Represents a parsed URL in bytes.\"\"\"\n\n    __slots__ = ()\n    _at = b\"@\"  # type: ignore\n    _colon = b\":\"  # type: ignore\n    _lbracket = b\"[\"  # type: ignore\n    _rbracket = b\"]\"  # type: ignore\n\n    def __str__(self) -> str:\n        return self.to_url().decode(\"utf-8\", \"replace\")  # type: ignore\n\n    def encode_netloc(self) -> bytes:  # type: ignore\n        \"\"\"Returns the netloc unchanged as bytes.\"\"\"\n        return self.netloc  # type: ignore\n\n    def decode(self, charset: str = \"utf-8\", errors: str = \"replace\") -> \"URL\":\n        \"\"\"Decodes the URL to a tuple made out of strings.  The charset is\n        only being used for the path, query and fragment.\n        \"\"\"\n        return URL(\n            self.scheme.decode(\"ascii\"),  # type: ignore\n            self.decode_netloc(),\n            self.path.decode(charset, errors),  # type: ignore\n            self.query.decode(charset, errors),  # type: ignore\n            self.fragment.decode(charset, errors),  # type: ignore\n        )\n\n\n_unquote_maps: t.Dict[t.FrozenSet[int], t.Dict[bytes, int]] = {frozenset(): _hextobyte}\n\n\ndef _unquote_to_bytes(\n    string: t.Union[str, bytes], unsafe: t.Union[str, bytes] = \"\"\n) -> bytes:\n    if isinstance(string, str):\n        string = string.encode(\"utf-8\")\n\n    if isinstance(unsafe, str):\n        unsafe = unsafe.encode(\"utf-8\")\n\n    unsafe = frozenset(bytearray(unsafe))\n    groups = iter(string.split(b\"%\"))\n    result = bytearray(next(groups, b\"\"))\n\n    try:\n        hex_to_byte = _unquote_maps[unsafe]\n    except KeyError:\n        hex_to_byte = _unquote_maps[unsafe] = {\n            h: b for h, b in _hextobyte.items() if b not in unsafe\n        }\n\n    for group in groups:\n        code = group[:2]\n\n        if code in hex_to_byte:\n            result.append(hex_to_byte[code])\n            result.extend(group[2:])\n        else:\n            result.append(37)  # %\n            result.extend(group)\n\n    return bytes(result)\n\n\ndef _url_encode_impl(\n    obj: t.Union[t.Mapping[str, str], t.Iterable[t.Tuple[str, str]]],\n    charset: str,\n    sort: bool,\n    key: t.Optional[t.Callable[[t.Tuple[str, str]], t.Any]],\n) -> t.Iterator[str]:\n    from .datastructures import iter_multi_items\n\n    iterable: t.Iterable[t.Tuple[str, str]] = iter_multi_items(obj)\n\n    if sort:\n        iterable = sorted(iterable, key=key)\n\n    for key_str, value_str in iterable:\n        if value_str is None:\n            continue\n\n        if not isinstance(key_str, bytes):\n            key_bytes = str(key_str).encode(charset)\n        else:\n            key_bytes = key_str\n\n        if not isinstance(value_str, bytes):\n            value_bytes = str(value_str).encode(charset)\n        else:\n            value_bytes = value_str\n\n        yield f\"{_fast_url_quote_plus(key_bytes)}={_fast_url_quote_plus(value_bytes)}\"\n\n\ndef _url_unquote_legacy(value: str, unsafe: str = \"\") -> str:\n    try:\n        return url_unquote(value, charset=\"utf-8\", errors=\"strict\", unsafe=unsafe)\n    except UnicodeError:\n        return url_unquote(value, charset=\"latin1\", unsafe=unsafe)\n\n\ndef url_parse(\n    url: str, scheme: t.Optional[str] = None, allow_fragments: bool = True\n) -> BaseURL:\n    \"\"\"Parses a URL from a string into a :class:`URL` tuple.  If the URL\n    is lacking a scheme it can be provided as second argument. Otherwise,\n    it is ignored.  Optionally fragments can be stripped from the URL\n    by setting `allow_fragments` to `False`.\n\n    The inverse of this function is :func:`url_unparse`.\n\n    :param url: the URL to parse.\n    :param scheme: the default schema to use if the URL is schemaless.\n    :param allow_fragments: if set to `False` a fragment will be removed\n                            from the URL.\n    \"\"\"\n    s = _make_encode_wrapper(url)\n    is_text_based = isinstance(url, str)\n\n    if scheme is None:\n        scheme = s(\"\")\n    netloc = query = fragment = s(\"\")\n    i = url.find(s(\":\"))\n    if i > 0 and _scheme_re.match(_to_str(url[:i], errors=\"replace\")):\n        # make sure \"iri\" is not actually a port number (in which case\n        # \"scheme\" is really part of the path)\n        rest = url[i + 1 :]\n        if not rest or any(c not in s(\"0123456789\") for c in rest):\n            # not a port number\n            scheme, url = url[:i].lower(), rest\n\n    if url[:2] == s(\"//\"):\n        delim = len(url)\n        for c in s(\"/?#\"):\n            wdelim = url.find(c, 2)\n            if wdelim >= 0:\n                delim = min(delim, wdelim)\n        netloc, url = url[2:delim], url[delim:]\n        if (s(\"[\") in netloc and s(\"]\") not in netloc) or (\n            s(\"]\") in netloc and s(\"[\") not in netloc\n        ):\n            raise ValueError(\"Invalid IPv6 URL\")\n\n    if allow_fragments and s(\"#\") in url:\n        url, fragment = url.split(s(\"#\"), 1)\n    if s(\"?\") in url:\n        url, query = url.split(s(\"?\"), 1)\n\n    result_type = URL if is_text_based else BytesURL\n    return result_type(scheme, netloc, url, query, fragment)\n\n\ndef _make_fast_url_quote(\n    charset: str = \"utf-8\",\n    errors: str = \"strict\",\n    safe: t.Union[str, bytes] = \"/:\",\n    unsafe: t.Union[str, bytes] = \"\",\n) -> t.Callable[[bytes], str]:\n    \"\"\"Precompile the translation table for a URL encoding function.\n\n    Unlike :func:`url_quote`, the generated function only takes the\n    string to quote.\n\n    :param charset: The charset to encode the result with.\n    :param errors: How to handle encoding errors.\n    :param safe: An optional sequence of safe characters to never encode.\n    :param unsafe: An optional sequence of unsafe characters to always encode.\n    \"\"\"\n    if isinstance(safe, str):\n        safe = safe.encode(charset, errors)\n\n    if isinstance(unsafe, str):\n        unsafe = unsafe.encode(charset, errors)\n\n    safe = (frozenset(bytearray(safe)) | _always_safe) - frozenset(bytearray(unsafe))\n    table = [chr(c) if c in safe else f\"%{c:02X}\" for c in range(256)]\n\n    def quote(string: bytes) -> str:\n        return \"\".join([table[c] for c in string])\n\n    return quote\n\n\n_fast_url_quote = _make_fast_url_quote()\n_fast_quote_plus = _make_fast_url_quote(safe=\" \", unsafe=\"+\")\n\n\ndef _fast_url_quote_plus(string: bytes) -> str:\n    return _fast_quote_plus(string).replace(\" \", \"+\")\n\n\ndef url_quote(\n    string: t.Union[str, bytes],\n    charset: str = \"utf-8\",\n    errors: str = \"strict\",\n    safe: t.Union[str, bytes] = \"/:\",\n    unsafe: t.Union[str, bytes] = \"\",\n) -> str:\n    \"\"\"URL encode a single string with a given encoding.\n\n    :param s: the string to quote.\n    :param charset: the charset to be used.\n    :param safe: an optional sequence of safe characters.\n    :param unsafe: an optional sequence of unsafe characters.\n\n    .. versionadded:: 0.9.2\n       The `unsafe` parameter was added.\n    \"\"\"\n    if not isinstance(string, (str, bytes, bytearray)):\n        string = str(string)\n    if isinstance(string, str):\n        string = string.encode(charset, errors)\n    if isinstance(safe, str):\n        safe = safe.encode(charset, errors)\n    if isinstance(unsafe, str):\n        unsafe = unsafe.encode(charset, errors)\n    safe = (frozenset(bytearray(safe)) | _always_safe) - frozenset(bytearray(unsafe))\n    rv = bytearray()\n    for char in bytearray(string):\n        if char in safe:\n            rv.append(char)\n        else:\n            rv.extend(_bytetohex[char])\n    return bytes(rv).decode(charset)\n\n\ndef url_quote_plus(\n    string: str, charset: str = \"utf-8\", errors: str = \"strict\", safe: str = \"\"\n) -> str:\n    \"\"\"URL encode a single string with the given encoding and convert\n    whitespace to \"+\".\n\n    :param s: The string to quote.\n    :param charset: The charset to be used.\n    :param safe: An optional sequence of safe characters.\n    \"\"\"\n    return url_quote(string, charset, errors, safe + \" \", \"+\").replace(\" \", \"+\")\n\n\ndef url_unparse(components: t.Tuple[str, str, str, str, str]) -> str:\n    \"\"\"The reverse operation to :meth:`url_parse`.  This accepts arbitrary\n    as well as :class:`URL` tuples and returns a URL as a string.\n\n    :param components: the parsed URL as tuple which should be converted\n                       into a URL string.\n    \"\"\"\n    _check_str_tuple(components)\n    scheme, netloc, path, query, fragment = components\n    s = _make_encode_wrapper(scheme)\n    url = s(\"\")\n\n    # We generally treat file:///x and file:/x the same which is also\n    # what browsers seem to do.  This also allows us to ignore a schema\n    # register for netloc utilization or having to differentiate between\n    # empty and missing netloc.\n    if netloc or (scheme and path.startswith(s(\"/\"))):\n        if path and path[:1] != s(\"/\"):\n            path = s(\"/\") + path\n        url = s(\"//\") + (netloc or s(\"\")) + path\n    elif path:\n        url += path\n    if scheme:\n        url = scheme + s(\":\") + url\n    if query:\n        url = url + s(\"?\") + query\n    if fragment:\n        url = url + s(\"#\") + fragment\n    return url\n\n\ndef url_unquote(\n    s: t.Union[str, bytes],\n    charset: str = \"utf-8\",\n    errors: str = \"replace\",\n    unsafe: str = \"\",\n) -> str:\n    \"\"\"URL decode a single string with a given encoding.  If the charset\n    is set to `None` no decoding is performed and raw bytes are\n    returned.\n\n    :param s: the string to unquote.\n    :param charset: the charset of the query string.  If set to `None`\n        no decoding will take place.\n    :param errors: the error handling for the charset decoding.\n    \"\"\"\n    rv = _unquote_to_bytes(s, unsafe)\n    if charset is None:\n        return rv\n    return rv.decode(charset, errors)\n\n\ndef url_unquote_plus(\n    s: t.Union[str, bytes], charset: str = \"utf-8\", errors: str = \"replace\"\n) -> str:\n    \"\"\"URL decode a single string with the given `charset` and decode \"+\" to\n    whitespace.\n\n    Per default encoding errors are ignored.  If you want a different behavior\n    you can set `errors` to ``'replace'`` or ``'strict'``.\n\n    :param s: The string to unquote.\n    :param charset: the charset of the query string.  If set to `None`\n        no decoding will take place.\n    :param errors: The error handling for the `charset` decoding.\n    \"\"\"\n    if isinstance(s, str):\n        s = s.replace(\"+\", \" \")\n    else:\n        s = s.replace(b\"+\", b\" \")\n    return url_unquote(s, charset, errors)\n\n\ndef url_fix(s: str, charset: str = \"utf-8\") -> str:\n    r\"\"\"Sometimes you get an URL by a user that just isn't a real URL because\n    it contains unsafe characters like ' ' and so on. This function can fix\n    some of the problems in a similar way browsers handle data entered by the\n    user:\n\n    >>> url_fix('http://de.wikipedia.org/wiki/Elf (Begriffskl\\xe4rung)')\n    'http://de.wikipedia.org/wiki/Elf%20(Begriffskl%C3%A4rung)'\n\n    :param s: the string with the URL to fix.\n    :param charset: The target charset for the URL if the url was given\n        as a string.\n    \"\"\"\n    # First step is to switch to text processing and to convert\n    # backslashes (which are invalid in URLs anyways) to slashes.  This is\n    # consistent with what Chrome does.\n    s = _to_str(s, charset, \"replace\").replace(\"\\\\\", \"/\")\n\n    # For the specific case that we look like a malformed windows URL\n    # we want to fix this up manually:\n    if s.startswith(\"file://\") and s[7:8].isalpha() and s[8:10] in (\":/\", \"|/\"):\n        s = f\"file:///{s[7:]}\"\n\n    url = url_parse(s)\n    path = url_quote(url.path, charset, safe=\"/%+$!*'(),\")\n    qs = url_quote_plus(url.query, charset, safe=\":&%=+$!*'(),\")\n    anchor = url_quote_plus(url.fragment, charset, safe=\":&%=+$!*'(),\")\n    return url_unparse((url.scheme, url.encode_netloc(), path, qs, anchor))\n\n\n# not-unreserved characters remain quoted when unquoting to IRI\n_to_iri_unsafe = \"\".join([chr(c) for c in range(128) if c not in _always_safe])\n\n\ndef _codec_error_url_quote(e: UnicodeError) -> t.Tuple[str, int]:\n    \"\"\"Used in :func:`uri_to_iri` after unquoting to re-quote any\n    invalid bytes.\n    \"\"\"\n    # the docs state that UnicodeError does have these attributes,\n    # but mypy isn't picking them up\n    out = _fast_url_quote(e.object[e.start : e.end])  # type: ignore\n    return out, e.end  # type: ignore\n\n\ncodecs.register_error(\"werkzeug.url_quote\", _codec_error_url_quote)\n\n\ndef uri_to_iri(\n    uri: t.Union[str, t.Tuple[str, str, str, str, str]],\n    charset: str = \"utf-8\",\n    errors: str = \"werkzeug.url_quote\",\n) -> str:\n    \"\"\"Convert a URI to an IRI. All valid UTF-8 characters are unquoted,\n    leaving all reserved and invalid characters quoted. If the URL has\n    a domain, it is decoded from Punycode.\n\n    >>> uri_to_iri(\"http://xn--n3h.net/p%C3%A5th?q=%C3%A8ry%DF\")\n    'http://\\\\u2603.net/p\\\\xe5th?q=\\\\xe8ry%DF'\n\n    :param uri: The URI to convert.\n    :param charset: The encoding to encode unquoted bytes with.\n    :param errors: Error handler to use during ``bytes.encode``. By\n        default, invalid bytes are left quoted.\n\n    .. versionchanged:: 0.15\n        All reserved and invalid characters remain quoted. Previously,\n        only some reserved characters were preserved, and invalid bytes\n        were replaced instead of left quoted.\n\n    .. versionadded:: 0.6\n    \"\"\"\n    if isinstance(uri, tuple):\n        uri = url_unparse(uri)\n\n    uri = url_parse(_to_str(uri, charset))\n    path = url_unquote(uri.path, charset, errors, _to_iri_unsafe)\n    query = url_unquote(uri.query, charset, errors, _to_iri_unsafe)\n    fragment = url_unquote(uri.fragment, charset, errors, _to_iri_unsafe)\n    return url_unparse((uri.scheme, uri.decode_netloc(), path, query, fragment))\n\n\n# reserved characters remain unquoted when quoting to URI\n_to_uri_safe = \":/?#[]@!$&'()*+,;=%\"\n\n\ndef iri_to_uri(\n    iri: t.Union[str, t.Tuple[str, str, str, str, str]],\n    charset: str = \"utf-8\",\n    errors: str = \"strict\",\n    safe_conversion: bool = False,\n) -> str:\n    \"\"\"Convert an IRI to a URI. All non-ASCII and unsafe characters are\n    quoted. If the URL has a domain, it is encoded to Punycode.\n\n    >>> iri_to_uri('http://\\\\u2603.net/p\\\\xe5th?q=\\\\xe8ry%DF')\n    'http://xn--n3h.net/p%C3%A5th?q=%C3%A8ry%DF'\n\n    :param iri: The IRI to convert.\n    :param charset: The encoding of the IRI.\n    :param errors: Error handler to use during ``bytes.encode``.\n    :param safe_conversion: Return the URL unchanged if it only contains\n        ASCII characters and no whitespace. See the explanation below.\n\n    There is a general problem with IRI conversion with some protocols\n    that are in violation of the URI specification. Consider the\n    following two IRIs::\n\n        magnet:?xt=uri:whatever\n        itms-services://?action=download-manifest\n\n    After parsing, we don't know if the scheme requires the ``//``,\n    which is dropped if empty, but conveys different meanings in the\n    final URL if it's present or not. In this case, you can use\n    ``safe_conversion``, which will return the URL unchanged if it only\n    contains ASCII characters and no whitespace. This can result in a\n    URI with unquoted characters if it was not already quoted correctly,\n    but preserves the URL's semantics. Werkzeug uses this for the\n    ``Location`` header for redirects.\n\n    .. versionchanged:: 0.15\n        All reserved characters remain unquoted. Previously, only some\n        reserved characters were left unquoted.\n\n    .. versionchanged:: 0.9.6\n       The ``safe_conversion`` parameter was added.\n\n    .. versionadded:: 0.6\n    \"\"\"\n    if isinstance(iri, tuple):\n        iri = url_unparse(iri)\n\n    if safe_conversion:\n        # If we're not sure if it's safe to convert the URL, and it only\n        # contains ASCII characters, return it unconverted.\n        try:\n            native_iri = _to_str(iri)\n            ascii_iri = native_iri.encode(\"ascii\")\n\n            # Only return if it doesn't have whitespace. (Why?)\n            if len(ascii_iri.split()) == 1:\n                return native_iri\n        except UnicodeError:\n            pass\n\n    iri = url_parse(_to_str(iri, charset, errors))\n    path = url_quote(iri.path, charset, errors, _to_uri_safe)\n    query = url_quote(iri.query, charset, errors, _to_uri_safe)\n    fragment = url_quote(iri.fragment, charset, errors, _to_uri_safe)\n    return url_unparse((iri.scheme, iri.encode_netloc(), path, query, fragment))\n\n\ndef url_decode(\n    s: t.AnyStr,\n    charset: str = \"utf-8\",\n    decode_keys: None = None,\n    include_empty: bool = True,\n    errors: str = \"replace\",\n    separator: str = \"&\",\n    cls: t.Optional[t.Type[\"ds.MultiDict\"]] = None,\n) -> \"ds.MultiDict[str, str]\":\n    \"\"\"Parse a query string and return it as a :class:`MultiDict`.\n\n    :param s: The query string to parse.\n    :param charset: Decode bytes to string with this charset. If not\n        given, bytes are returned as-is.\n    :param include_empty: Include keys with empty values in the dict.\n    :param errors: Error handling behavior when decoding bytes.\n    :param separator: Separator character between pairs.\n    :param cls: Container to hold result instead of :class:`MultiDict`.\n\n    .. versionchanged:: 2.0\n        The ``decode_keys`` parameter is deprecated and will be removed\n        in Werkzeug 2.1.\n\n    .. versionchanged:: 0.5\n        In previous versions \";\" and \"&\" could be used for url decoding.\n        Now only \"&\" is supported. If you want to use \";\", a different\n        ``separator`` can be provided.\n\n    .. versionchanged:: 0.5\n        The ``cls`` parameter was added.\n    \"\"\"\n    if decode_keys is not None:\n        warnings.warn(\n            \"'decode_keys' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n    if cls is None:\n        from .datastructures import MultiDict  # noqa: F811\n\n        cls = MultiDict\n    if isinstance(s, str) and not isinstance(separator, str):\n        separator = separator.decode(charset or \"ascii\")\n    elif isinstance(s, bytes) and not isinstance(separator, bytes):\n        separator = separator.encode(charset or \"ascii\")  # type: ignore\n    return cls(\n        _url_decode_impl(\n            s.split(separator), charset, include_empty, errors  # type: ignore\n        )\n    )\n\n\ndef url_decode_stream(\n    stream: t.IO[bytes],\n    charset: str = \"utf-8\",\n    decode_keys: None = None,\n    include_empty: bool = True,\n    errors: str = \"replace\",\n    separator: bytes = b\"&\",\n    cls: t.Optional[t.Type[\"ds.MultiDict\"]] = None,\n    limit: t.Optional[int] = None,\n    return_iterator: bool = False,\n) -> \"ds.MultiDict[str, str]\":\n    \"\"\"Works like :func:`url_decode` but decodes a stream.  The behavior\n    of stream and limit follows functions like\n    :func:`~werkzeug.wsgi.make_line_iter`.  The generator of pairs is\n    directly fed to the `cls` so you can consume the data while it's\n    parsed.\n\n    :param stream: a stream with the encoded querystring\n    :param charset: the charset of the query string.  If set to `None`\n        no decoding will take place.\n    :param include_empty: Set to `False` if you don't want empty values to\n                          appear in the dict.\n    :param errors: the decoding error behavior.\n    :param separator: the pair separator to be used, defaults to ``&``\n    :param cls: an optional dict class to use.  If this is not specified\n                       or `None` the default :class:`MultiDict` is used.\n    :param limit: the content length of the URL data.  Not necessary if\n                  a limited stream is provided.\n\n    .. versionchanged:: 2.0\n        The ``decode_keys`` and ``return_iterator`` parameters are\n        deprecated and will be removed in Werkzeug 2.1.\n\n    .. versionadded:: 0.8\n    \"\"\"\n    from .wsgi import make_chunk_iter\n\n    if decode_keys is not None:\n        warnings.warn(\n            \"'decode_keys' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n    pair_iter = make_chunk_iter(stream, separator, limit)\n    decoder = _url_decode_impl(pair_iter, charset, include_empty, errors)\n\n    if return_iterator:\n        warnings.warn(\n            \"'return_iterator' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return decoder  # type: ignore\n\n    if cls is None:\n        from .datastructures import MultiDict  # noqa: F811\n\n        cls = MultiDict\n\n    return cls(decoder)\n\n\ndef _url_decode_impl(\n    pair_iter: t.Iterable[t.AnyStr], charset: str, include_empty: bool, errors: str\n) -> t.Iterator[t.Tuple[str, str]]:\n    for pair in pair_iter:\n        if not pair:\n            continue\n        s = _make_encode_wrapper(pair)\n        equal = s(\"=\")\n        if equal in pair:\n            key, value = pair.split(equal, 1)\n        else:\n            if not include_empty:\n                continue\n            key = pair\n            value = s(\"\")\n        yield (\n            url_unquote_plus(key, charset, errors),\n            url_unquote_plus(value, charset, errors),\n        )\n\n\ndef url_encode(\n    obj: t.Union[t.Mapping[str, str], t.Iterable[t.Tuple[str, str]]],\n    charset: str = \"utf-8\",\n    encode_keys: None = None,\n    sort: bool = False,\n    key: t.Optional[t.Callable[[t.Tuple[str, str]], t.Any]] = None,\n    separator: str = \"&\",\n) -> str:\n    \"\"\"URL encode a dict/`MultiDict`.  If a value is `None` it will not appear\n    in the result string.  Per default only values are encoded into the target\n    charset strings.\n\n    :param obj: the object to encode into a query string.\n    :param charset: the charset of the query string.\n    :param sort: set to `True` if you want parameters to be sorted by `key`.\n    :param separator: the separator to be used for the pairs.\n    :param key: an optional function to be used for sorting.  For more details\n                check out the :func:`sorted` documentation.\n\n    .. versionchanged:: 2.0\n        The ``encode_keys`` parameter is deprecated and will be removed\n        in Werkzeug 2.1.\n\n    .. versionchanged:: 0.5\n        Added the ``sort``, ``key``, and ``separator`` parameters.\n    \"\"\"\n    if encode_keys is not None:\n        warnings.warn(\n            \"'encode_keys' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n    separator = _to_str(separator, \"ascii\")\n    return separator.join(_url_encode_impl(obj, charset, sort, key))\n\n\ndef url_encode_stream(\n    obj: t.Union[t.Mapping[str, str], t.Iterable[t.Tuple[str, str]]],\n    stream: t.Optional[t.IO[str]] = None,\n    charset: str = \"utf-8\",\n    encode_keys: None = None,\n    sort: bool = False,\n    key: t.Optional[t.Callable[[t.Tuple[str, str]], t.Any]] = None,\n    separator: str = \"&\",\n) -> None:\n    \"\"\"Like :meth:`url_encode` but writes the results to a stream\n    object.  If the stream is `None` a generator over all encoded\n    pairs is returned.\n\n    :param obj: the object to encode into a query string.\n    :param stream: a stream to write the encoded object into or `None` if\n                   an iterator over the encoded pairs should be returned.  In\n                   that case the separator argument is ignored.\n    :param charset: the charset of the query string.\n    :param sort: set to `True` if you want parameters to be sorted by `key`.\n    :param separator: the separator to be used for the pairs.\n    :param key: an optional function to be used for sorting.  For more details\n                check out the :func:`sorted` documentation.\n\n    .. versionchanged:: 2.0\n        The ``encode_keys`` parameter is deprecated and will be removed\n        in Werkzeug 2.1.\n\n    .. versionadded:: 0.8\n    \"\"\"\n    if encode_keys is not None:\n        warnings.warn(\n            \"'encode_keys' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n    separator = _to_str(separator, \"ascii\")\n    gen = _url_encode_impl(obj, charset, sort, key)\n    if stream is None:\n        return gen  # type: ignore\n    for idx, chunk in enumerate(gen):\n        if idx:\n            stream.write(separator)\n        stream.write(chunk)\n    return None\n\n\ndef url_join(\n    base: t.Union[str, t.Tuple[str, str, str, str, str]],\n    url: t.Union[str, t.Tuple[str, str, str, str, str]],\n    allow_fragments: bool = True,\n) -> str:\n    \"\"\"Join a base URL and a possibly relative URL to form an absolute\n    interpretation of the latter.\n\n    :param base: the base URL for the join operation.\n    :param url: the URL to join.\n    :param allow_fragments: indicates whether fragments should be allowed.\n    \"\"\"\n    if isinstance(base, tuple):\n        base = url_unparse(base)\n    if isinstance(url, tuple):\n        url = url_unparse(url)\n\n    _check_str_tuple((base, url))\n    s = _make_encode_wrapper(base)\n\n    if not base:\n        return url\n    if not url:\n        return base\n\n    bscheme, bnetloc, bpath, bquery, bfragment = url_parse(\n        base, allow_fragments=allow_fragments\n    )\n    scheme, netloc, path, query, fragment = url_parse(url, bscheme, allow_fragments)\n    if scheme != bscheme:\n        return url\n    if netloc:\n        return url_unparse((scheme, netloc, path, query, fragment))\n    netloc = bnetloc\n\n    if path[:1] == s(\"/\"):\n        segments = path.split(s(\"/\"))\n    elif not path:\n        segments = bpath.split(s(\"/\"))\n        if not query:\n            query = bquery\n    else:\n        segments = bpath.split(s(\"/\"))[:-1] + path.split(s(\"/\"))\n\n    # If the rightmost part is \"./\" we want to keep the slash but\n    # remove the dot.\n    if segments[-1] == s(\".\"):\n        segments[-1] = s(\"\")\n\n    # Resolve \"..\" and \".\"\n    segments = [segment for segment in segments if segment != s(\".\")]\n    while True:\n        i = 1\n        n = len(segments) - 1\n        while i < n:\n            if segments[i] == s(\"..\") and segments[i - 1] not in (s(\"\"), s(\"..\")):\n                del segments[i - 1 : i + 1]\n                break\n            i += 1\n        else:\n            break\n\n    # Remove trailing \"..\" if the URL is absolute\n    unwanted_marker = [s(\"\"), s(\"..\")]\n    while segments[:2] == unwanted_marker:\n        del segments[1]\n\n    path = s(\"/\").join(segments)\n    return url_unparse((scheme, netloc, path, query, fragment))\n\n\nclass Href:\n    \"\"\"Implements a callable that constructs URLs with the given base. The\n    function can be called with any number of positional and keyword\n    arguments which than are used to assemble the URL.  Works with URLs\n    and posix paths.\n\n    Positional arguments are appended as individual segments to\n    the path of the URL:\n\n    >>> href = Href('/foo')\n    >>> href('bar', 23)\n    '/foo/bar/23'\n    >>> href('foo', bar=23)\n    '/foo/foo?bar=23'\n\n    If any of the arguments (positional or keyword) evaluates to `None` it\n    will be skipped.  If no keyword arguments are given the last argument\n    can be a :class:`dict` or :class:`MultiDict` (or any other dict subclass),\n    otherwise the keyword arguments are used for the query parameters, cutting\n    off the first trailing underscore of the parameter name:\n\n    >>> href(is_=42)\n    '/foo?is=42'\n    >>> href({'foo': 'bar'})\n    '/foo?foo=bar'\n\n    Combining of both methods is not allowed:\n\n    >>> href({'foo': 'bar'}, bar=42)\n    Traceback (most recent call last):\n      ...\n    TypeError: keyword arguments and query-dicts can't be combined\n\n    Accessing attributes on the href object creates a new href object with\n    the attribute name as prefix:\n\n    >>> bar_href = href.bar\n    >>> bar_href(\"blub\")\n    '/foo/bar/blub'\n\n    If `sort` is set to `True` the items are sorted by `key` or the default\n    sorting algorithm:\n\n    >>> href = Href(\"/\", sort=True)\n    >>> href(a=1, b=2, c=3)\n    '/?a=1&b=2&c=3'\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1. Use :mod:`werkzeug.routing`\n        instead.\n\n    .. versionadded:: 0.5\n        `sort` and `key` were added.\n    \"\"\"\n\n    def __init__(  # type: ignore\n        self, base=\"./\", charset=\"utf-8\", sort=False, key=None\n    ):\n        warnings.warn(\n            \"'Href' is deprecated and will be removed in Werkzeug 2.1.\"\n            \" Use 'werkzeug.routing' instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n        if not base:\n            base = \"./\"\n        self.base = base\n        self.charset = charset\n        self.sort = sort\n        self.key = key\n\n    def __getattr__(self, name):  # type: ignore\n        if name[:2] == \"__\":\n            raise AttributeError(name)\n        base = self.base\n        if base[-1:] != \"/\":\n            base += \"/\"\n        return Href(url_join(base, name), self.charset, self.sort, self.key)\n\n    def __call__(self, *path, **query):  # type: ignore\n        if path and isinstance(path[-1], dict):\n            if query:\n                raise TypeError(\"keyword arguments and query-dicts can't be combined\")\n            query, path = path[-1], path[:-1]\n        elif query:\n            query = {k[:-1] if k.endswith(\"_\") else k: v for k, v in query.items()}\n        path = \"/\".join(\n            [\n                _to_str(url_quote(x, self.charset), \"ascii\")\n                for x in path\n                if x is not None\n            ]\n        ).lstrip(\"/\")\n        rv = self.base\n        if path:\n            if not rv.endswith(\"/\"):\n                rv += \"/\"\n            rv = url_join(rv, f\"./{path}\")\n        if query:\n            rv += \"?\" + _to_str(\n                url_encode(query, self.charset, sort=self.sort, key=self.key), \"ascii\"\n            )\n        return rv\n", 1211], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py": ["\"\"\"\nThe typing module: Support for gradual typing as defined by PEP 484.\n\nAt large scale, the structure of the module is following:\n* Imports and exports, all public names should be explicitly added to __all__.\n* Internal helper functions: these should never be used in code outside this module.\n* _SpecialForm and its instances (special forms): Any, NoReturn, ClassVar, Union, Optional\n* Two classes whose instances can be type arguments in addition to types: ForwardRef and TypeVar\n* The core of internal generics API: _GenericAlias and _VariadicGenericAlias, the latter is\n  currently only used by Tuple and Callable. All subscripted types like X[int], Union[int, str],\n  etc., are instances of either of these classes.\n* The public counterpart of the generics API consists of two classes: Generic and Protocol\n  (the latter is currently private, but will be made public after PEP 544 acceptance).\n* Public helper functions: get_type_hints, overload, cast, no_type_check,\n  no_type_check_decorator.\n* Generic aliases for collections.abc ABCs and few additional protocols.\n* Special types: NewType, NamedTuple, TypedDict (may be added soon).\n* Wrapper submodules for re and io related types.\n\"\"\"\n\nimport abc\nfrom abc import abstractmethod, abstractproperty\nimport collections\nimport collections.abc\nimport contextlib\nimport functools\nimport operator\nimport re as stdlib_re  # Avoid confusion with the re we export.\nimport sys\nimport types\nfrom types import WrapperDescriptorType, MethodWrapperType, MethodDescriptorType\n\n# Please keep __all__ alphabetized within each category.\n__all__ = [\n    # Super-special typing primitives.\n    'Any',\n    'Callable',\n    'ClassVar',\n    'ForwardRef',\n    'Generic',\n    'Optional',\n    'Tuple',\n    'Type',\n    'TypeVar',\n    'Union',\n\n    # ABCs (from collections.abc).\n    'AbstractSet',  # collections.abc.Set.\n    'ByteString',\n    'Container',\n    'ContextManager',\n    'Hashable',\n    'ItemsView',\n    'Iterable',\n    'Iterator',\n    'KeysView',\n    'Mapping',\n    'MappingView',\n    'MutableMapping',\n    'MutableSequence',\n    'MutableSet',\n    'Sequence',\n    'Sized',\n    'ValuesView',\n    'Awaitable',\n    'AsyncIterator',\n    'AsyncIterable',\n    'Coroutine',\n    'Collection',\n    'AsyncGenerator',\n    'AsyncContextManager',\n\n    # Structural checks, a.k.a. protocols.\n    'Reversible',\n    'SupportsAbs',\n    'SupportsBytes',\n    'SupportsComplex',\n    'SupportsFloat',\n    'SupportsInt',\n    'SupportsRound',\n\n    # Concrete collection types.\n    'ChainMap',\n    'Counter',\n    'Deque',\n    'Dict',\n    'DefaultDict',\n    'List',\n    'OrderedDict',\n    'Set',\n    'FrozenSet',\n    'NamedTuple',  # Not really a type.\n    'Generator',\n\n    # One-off things.\n    'AnyStr',\n    'cast',\n    'get_type_hints',\n    'NewType',\n    'no_type_check',\n    'no_type_check_decorator',\n    'NoReturn',\n    'overload',\n    'Text',\n    'TYPE_CHECKING',\n]\n\n# The pseudo-submodules 're' and 'io' are part of the public\n# namespace, but excluded from __all__ because they might stomp on\n# legitimate imports of those modules.\n\n\ndef _type_check(arg, msg, is_argument=True):\n    \"\"\"Check that the argument is a type, and return it (internal helper).\n\n    As a special case, accept None and return type(None) instead. Also wrap strings\n    into ForwardRef instances. Consider several corner cases, for example plain\n    special forms like Union are not valid, while Union[int, str] is OK, etc.\n    The msg argument is a human-readable error message, e.g::\n\n        \"Union[arg, ...]: arg should be a type.\"\n\n    We append the repr() of the actual value (truncated to 100 chars).\n    \"\"\"\n    invalid_generic_forms = (Generic, _Protocol)\n    if is_argument:\n        invalid_generic_forms = invalid_generic_forms + (ClassVar, )\n\n    if arg is None:\n        return type(None)\n    if isinstance(arg, str):\n        return ForwardRef(arg)\n    if (isinstance(arg, _GenericAlias) and\n            arg.__origin__ in invalid_generic_forms):\n        raise TypeError(f\"{arg} is not valid as type argument\")\n    if (isinstance(arg, _SpecialForm) and arg not in (Any, NoReturn) or\n            arg in (Generic, _Protocol)):\n        raise TypeError(f\"Plain {arg} is not valid as type argument\")\n    if isinstance(arg, (type, TypeVar, ForwardRef)):\n        return arg\n    if not callable(arg):\n        raise TypeError(f\"{msg} Got {arg!r:.100}.\")\n    return arg\n\n\ndef _type_repr(obj):\n    \"\"\"Return the repr() of an object, special-casing types (internal helper).\n\n    If obj is a type, we return a shorter version than the default\n    type.__repr__, based on the module and qualified name, which is\n    typically enough to uniquely identify a type.  For everything\n    else, we fall back on repr(obj).\n    \"\"\"\n    if isinstance(obj, type):\n        if obj.__module__ == 'builtins':\n            return obj.__qualname__\n        return f'{obj.__module__}.{obj.__qualname__}'\n    if obj is ...:\n        return('...')\n    if isinstance(obj, types.FunctionType):\n        return obj.__name__\n    return repr(obj)\n\n\ndef _collect_type_vars(types):\n    \"\"\"Collect all type variable contained in types in order of\n    first appearance (lexicographic order). For example::\n\n        _collect_type_vars((T, List[S, T])) == (T, S)\n    \"\"\"\n    tvars = []\n    for t in types:\n        if isinstance(t, TypeVar) and t not in tvars:\n            tvars.append(t)\n        if isinstance(t, _GenericAlias) and not t._special:\n            tvars.extend([t for t in t.__parameters__ if t not in tvars])\n    return tuple(tvars)\n\n\ndef _subs_tvars(tp, tvars, subs):\n    \"\"\"Substitute type variables 'tvars' with substitutions 'subs'.\n    These two must have the same length.\n    \"\"\"\n    if not isinstance(tp, _GenericAlias):\n        return tp\n    new_args = list(tp.__args__)\n    for a, arg in enumerate(tp.__args__):\n        if isinstance(arg, TypeVar):\n            for i, tvar in enumerate(tvars):\n                if arg == tvar:\n                    new_args[a] = subs[i]\n        else:\n            new_args[a] = _subs_tvars(arg, tvars, subs)\n    if tp.__origin__ is Union:\n        return Union[tuple(new_args)]\n    return tp.copy_with(tuple(new_args))\n\n\ndef _check_generic(cls, parameters):\n    \"\"\"Check correct count for parameters of a generic cls (internal helper).\n    This gives a nice error message in case of count mismatch.\n    \"\"\"\n    if not cls.__parameters__:\n        raise TypeError(f\"{cls} is not a generic class\")\n    alen = len(parameters)\n    elen = len(cls.__parameters__)\n    if alen != elen:\n        raise TypeError(f\"Too {'many' if alen > elen else 'few'} parameters for {cls};\"\n                        f\" actual {alen}, expected {elen}\")\n\n\ndef _remove_dups_flatten(parameters):\n    \"\"\"An internal helper for Union creation and substitution: flatten Unions\n    among parameters, then remove duplicates.\n    \"\"\"\n    # Flatten out Union[Union[...], ...].\n    params = []\n    for p in parameters:\n        if isinstance(p, _GenericAlias) and p.__origin__ is Union:\n            params.extend(p.__args__)\n        elif isinstance(p, tuple) and len(p) > 0 and p[0] is Union:\n            params.extend(p[1:])\n        else:\n            params.append(p)\n    # Weed out strict duplicates, preserving the first of each occurrence.\n    all_params = set(params)\n    if len(all_params) < len(params):\n        new_params = []\n        for t in params:\n            if t in all_params:\n                new_params.append(t)\n                all_params.remove(t)\n        params = new_params\n        assert not all_params, all_params\n    return tuple(params)\n\n\n_cleanups = []\n\n\ndef _tp_cache(func):\n    \"\"\"Internal wrapper caching __getitem__ of generic types with a fallback to\n    original function for non-hashable arguments.\n    \"\"\"\n    cached = functools.lru_cache()(func)\n    _cleanups.append(cached.cache_clear)\n\n    @functools.wraps(func)\n    def inner(*args, **kwds):\n        try:\n            return cached(*args, **kwds)\n        except TypeError:\n            pass  # All real errors (not unhashable args) are raised below.\n        return func(*args, **kwds)\n    return inner\n\n\ndef _eval_type(t, globalns, localns):\n    \"\"\"Evaluate all forward reverences in the given type t.\n    For use of globalns and localns see the docstring for get_type_hints().\n    \"\"\"\n    if isinstance(t, ForwardRef):\n        return t._evaluate(globalns, localns)\n    if isinstance(t, _GenericAlias):\n        ev_args = tuple(_eval_type(a, globalns, localns) for a in t.__args__)\n        if ev_args == t.__args__:\n            return t\n        res = t.copy_with(ev_args)\n        res._special = t._special\n        return res\n    return t\n\n\nclass _Final:\n    \"\"\"Mixin to prohibit subclassing\"\"\"\n\n    __slots__ = ('__weakref__',)\n\n    def __init_subclass__(self, *args, **kwds):\n        if '_root' not in kwds:\n            raise TypeError(\"Cannot subclass special typing classes\")\n\nclass _Immutable:\n    \"\"\"Mixin to indicate that object should not be copied.\"\"\"\n\n    def __copy__(self):\n        return self\n\n    def __deepcopy__(self, memo):\n        return self\n\n\nclass _SpecialForm(_Final, _Immutable, _root=True):\n    \"\"\"Internal indicator of special typing constructs.\n    See _doc instance attribute for specific docs.\n    \"\"\"\n\n    __slots__ = ('_name', '_doc')\n\n    def __new__(cls, *args, **kwds):\n        \"\"\"Constructor.\n\n        This only exists to give a better error message in case\n        someone tries to subclass a special typing object (not a good idea).\n        \"\"\"\n        if (len(args) == 3 and\n                isinstance(args[0], str) and\n                isinstance(args[1], tuple)):\n            # Close enough.\n            raise TypeError(f\"Cannot subclass {cls!r}\")\n        return super().__new__(cls)\n\n    def __init__(self, name, doc):\n        self._name = name\n        self._doc = doc\n\n    def __eq__(self, other):\n        if not isinstance(other, _SpecialForm):\n            return NotImplemented\n        return self._name == other._name\n\n    def __hash__(self):\n        return hash((self._name,))\n\n    def __repr__(self):\n        return 'typing.' + self._name\n\n    def __reduce__(self):\n        return self._name\n\n    def __call__(self, *args, **kwds):\n        raise TypeError(f\"Cannot instantiate {self!r}\")\n\n    def __instancecheck__(self, obj):\n        raise TypeError(f\"{self} cannot be used with isinstance()\")\n\n    def __subclasscheck__(self, cls):\n        raise TypeError(f\"{self} cannot be used with issubclass()\")\n\n    @_tp_cache\n    def __getitem__(self, parameters):\n        if self._name == 'ClassVar':\n            item = _type_check(parameters, 'ClassVar accepts only single type.')\n            return _GenericAlias(self, (item,))\n        if self._name == 'Union':\n            if parameters == ():\n                raise TypeError(\"Cannot take a Union of no types.\")\n            if not isinstance(parameters, tuple):\n                parameters = (parameters,)\n            msg = \"Union[arg, ...]: each arg must be a type.\"\n            parameters = tuple(_type_check(p, msg) for p in parameters)\n            parameters = _remove_dups_flatten(parameters)\n            if len(parameters) == 1:\n                return parameters[0]\n            return _GenericAlias(self, parameters)\n        if self._name == 'Optional':\n            arg = _type_check(parameters, \"Optional[t] requires a single type.\")\n            return Union[arg, type(None)]\n        raise TypeError(f\"{self} is not subscriptable\")\n\n\nAny = _SpecialForm('Any', doc=\n    \"\"\"Special type indicating an unconstrained type.\n\n    - Any is compatible with every type.\n    - Any assumed to have all methods.\n    - All values assumed to be instances of Any.\n\n    Note that all the above statements are true from the point of view of\n    static type checkers. At runtime, Any should not be used with instance\n    or class checks.\n    \"\"\")\n\nNoReturn = _SpecialForm('NoReturn', doc=\n    \"\"\"Special type indicating functions that never return.\n    Example::\n\n      from typing import NoReturn\n\n      def stop() -> NoReturn:\n          raise Exception('no way')\n\n    This type is invalid in other positions, e.g., ``List[NoReturn]``\n    will fail in static type checkers.\n    \"\"\")\n\nClassVar = _SpecialForm('ClassVar', doc=\n    \"\"\"Special type construct to mark class variables.\n\n    An annotation wrapped in ClassVar indicates that a given\n    attribute is intended to be used as a class variable and\n    should not be set on instances of that class. Usage::\n\n      class Starship:\n          stats: ClassVar[Dict[str, int]] = {} # class variable\n          damage: int = 10                     # instance variable\n\n    ClassVar accepts only types and cannot be further subscribed.\n\n    Note that ClassVar is not a class itself, and should not\n    be used with isinstance() or issubclass().\n    \"\"\")\n\nUnion = _SpecialForm('Union', doc=\n    \"\"\"Union type; Union[X, Y] means either X or Y.\n\n    To define a union, use e.g. Union[int, str].  Details:\n    - The arguments must be types and there must be at least one.\n    - None as an argument is a special case and is replaced by\n      type(None).\n    - Unions of unions are flattened, e.g.::\n\n        Union[Union[int, str], float] == Union[int, str, float]\n\n    - Unions of a single argument vanish, e.g.::\n\n        Union[int] == int  # The constructor actually returns int\n\n    - Redundant arguments are skipped, e.g.::\n\n        Union[int, str, int] == Union[int, str]\n\n    - When comparing unions, the argument order is ignored, e.g.::\n\n        Union[int, str] == Union[str, int]\n\n    - You cannot subclass or instantiate a union.\n    - You can use Optional[X] as a shorthand for Union[X, None].\n    \"\"\")\n\nOptional = _SpecialForm('Optional', doc=\n    \"\"\"Optional type.\n\n    Optional[X] is equivalent to Union[X, None].\n    \"\"\")\n\n\nclass ForwardRef(_Final, _root=True):\n    \"\"\"Internal wrapper to hold a forward reference.\"\"\"\n\n    __slots__ = ('__forward_arg__', '__forward_code__',\n                 '__forward_evaluated__', '__forward_value__',\n                 '__forward_is_argument__')\n\n    def __init__(self, arg, is_argument=True):\n        if not isinstance(arg, str):\n            raise TypeError(f\"Forward reference must be a string -- got {arg!r}\")\n        try:\n            code = compile(arg, '<string>', 'eval')\n        except SyntaxError:\n            raise SyntaxError(f\"Forward reference must be an expression -- got {arg!r}\")\n        self.__forward_arg__ = arg\n        self.__forward_code__ = code\n        self.__forward_evaluated__ = False\n        self.__forward_value__ = None\n        self.__forward_is_argument__ = is_argument\n\n    def _evaluate(self, globalns, localns):\n        if not self.__forward_evaluated__ or localns is not globalns:\n            if globalns is None and localns is None:\n                globalns = localns = {}\n            elif globalns is None:\n                globalns = localns\n            elif localns is None:\n                localns = globalns\n            self.__forward_value__ = _type_check(\n                eval(self.__forward_code__, globalns, localns),\n                \"Forward references must evaluate to types.\",\n                is_argument=self.__forward_is_argument__)\n            self.__forward_evaluated__ = True\n        return self.__forward_value__\n\n    def __eq__(self, other):\n        if not isinstance(other, ForwardRef):\n            return NotImplemented\n        return (self.__forward_arg__ == other.__forward_arg__ and\n                self.__forward_value__ == other.__forward_value__)\n\n    def __hash__(self):\n        return hash((self.__forward_arg__, self.__forward_value__))\n\n    def __repr__(self):\n        return f'ForwardRef({self.__forward_arg__!r})'\n\n\nclass TypeVar(_Final, _Immutable, _root=True):\n    \"\"\"Type variable.\n\n    Usage::\n\n      T = TypeVar('T')  # Can be anything\n      A = TypeVar('A', str, bytes)  # Must be str or bytes\n\n    Type variables exist primarily for the benefit of static type\n    checkers.  They serve as the parameters for generic types as well\n    as for generic function definitions.  See class Generic for more\n    information on generic types.  Generic functions work as follows:\n\n      def repeat(x: T, n: int) -> List[T]:\n          '''Return a list containing n references to x.'''\n          return [x]*n\n\n      def longest(x: A, y: A) -> A:\n          '''Return the longest of two strings.'''\n          return x if len(x) >= len(y) else y\n\n    The latter example's signature is essentially the overloading\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\n    that if the arguments are instances of some subclass of str,\n    the return type is still plain str.\n\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\n\n    Type variables defined with covariant=True or contravariant=True\n    can be used to declare covariant or contravariant generic types.\n    See PEP 484 for more details. By default generic types are invariant\n    in all type variables.\n\n    Type variables can be introspected. e.g.:\n\n      T.__name__ == 'T'\n      T.__constraints__ == ()\n      T.__covariant__ == False\n      T.__contravariant__ = False\n      A.__constraints__ == (str, bytes)\n\n    Note that only type variables defined in global scope can be pickled.\n    \"\"\"\n\n    __slots__ = ('__name__', '__bound__', '__constraints__',\n                 '__covariant__', '__contravariant__')\n\n    def __init__(self, name, *constraints, bound=None,\n                 covariant=False, contravariant=False):\n        self.__name__ = name\n        if covariant and contravariant:\n            raise ValueError(\"Bivariant types are not supported.\")\n        self.__covariant__ = bool(covariant)\n        self.__contravariant__ = bool(contravariant)\n        if constraints and bound is not None:\n            raise TypeError(\"Constraints cannot be combined with bound=...\")\n        if constraints and len(constraints) == 1:\n            raise TypeError(\"A single constraint is not allowed\")\n        msg = \"TypeVar(name, constraint, ...): constraints must be types.\"\n        self.__constraints__ = tuple(_type_check(t, msg) for t in constraints)\n        if bound:\n            self.__bound__ = _type_check(bound, \"Bound must be a type.\")\n        else:\n            self.__bound__ = None\n        def_mod = sys._getframe(1).f_globals['__name__']  # for pickling\n        if def_mod != 'typing':\n            self.__module__ = def_mod\n\n    def __repr__(self):\n        if self.__covariant__:\n            prefix = '+'\n        elif self.__contravariant__:\n            prefix = '-'\n        else:\n            prefix = '~'\n        return prefix + self.__name__\n\n    def __reduce__(self):\n        return self.__name__\n\n\n# Special typing constructs Union, Optional, Generic, Callable and Tuple\n# use three special attributes for internal bookkeeping of generic types:\n# * __parameters__ is a tuple of unique free type parameters of a generic\n#   type, for example, Dict[T, T].__parameters__ == (T,);\n# * __origin__ keeps a reference to a type that was subscripted,\n#   e.g., Union[T, int].__origin__ == Union, or the non-generic version of\n#   the type.\n# * __args__ is a tuple of all arguments used in subscripting,\n#   e.g., Dict[T, int].__args__ == (T, int).\n\n\n# Mapping from non-generic type names that have a generic alias in typing\n# but with a different name.\n_normalize_alias = {'list': 'List',\n                    'tuple': 'Tuple',\n                    'dict': 'Dict',\n                    'set': 'Set',\n                    'frozenset': 'FrozenSet',\n                    'deque': 'Deque',\n                    'defaultdict': 'DefaultDict',\n                    'type': 'Type',\n                    'Set': 'AbstractSet'}\n\ndef _is_dunder(attr):\n    return attr.startswith('__') and attr.endswith('__')\n\n\nclass _GenericAlias(_Final, _root=True):\n    \"\"\"The central part of internal API.\n\n    This represents a generic version of type 'origin' with type arguments 'params'.\n    There are two kind of these aliases: user defined and special. The special ones\n    are wrappers around builtin collections and ABCs in collections.abc. These must\n    have 'name' always set. If 'inst' is False, then the alias can't be instantiated,\n    this is used by e.g. typing.List and typing.Dict.\n    \"\"\"\n    def __init__(self, origin, params, *, inst=True, special=False, name=None):\n        self._inst = inst\n        self._special = special\n        if special and name is None:\n            orig_name = origin.__name__\n            name = _normalize_alias.get(orig_name, orig_name)\n        self._name = name\n        if not isinstance(params, tuple):\n            params = (params,)\n        self.__origin__ = origin\n        self.__args__ = tuple(... if a is _TypingEllipsis else\n                              () if a is _TypingEmpty else\n                              a for a in params)\n        self.__parameters__ = _collect_type_vars(params)\n        self.__slots__ = None  # This is not documented.\n        if not name:\n            self.__module__ = origin.__module__\n\n    @_tp_cache\n    def __getitem__(self, params):\n        if self.__origin__ in (Generic, _Protocol):\n            # Can't subscript Generic[...] or _Protocol[...].\n            raise TypeError(f\"Cannot subscript already-subscripted {self}\")\n        if not isinstance(params, tuple):\n            params = (params,)\n        msg = \"Parameters to generic types must be types.\"\n        params = tuple(_type_check(p, msg) for p in params)\n        _check_generic(self, params)\n        return _subs_tvars(self, self.__parameters__, params)\n\n    def copy_with(self, params):\n        # We don't copy self._special.\n        return _GenericAlias(self.__origin__, params, name=self._name, inst=self._inst)\n\n    def __repr__(self):\n        if (self._name != 'Callable' or\n                len(self.__args__) == 2 and self.__args__[0] is Ellipsis):\n            if self._name:\n                name = 'typing.' + self._name\n            else:\n                name = _type_repr(self.__origin__)\n            if not self._special:\n                args = f'[{\", \".join([_type_repr(a) for a in self.__args__])}]'\n            else:\n                args = ''\n            return (f'{name}{args}')\n        if self._special:\n            return 'typing.Callable'\n        return (f'typing.Callable'\n                f'[[{\", \".join([_type_repr(a) for a in self.__args__[:-1]])}], '\n                f'{_type_repr(self.__args__[-1])}]')\n\n    def __eq__(self, other):\n        if not isinstance(other, _GenericAlias):\n            return NotImplemented\n        if self.__origin__ != other.__origin__:\n            return False\n        if self.__origin__ is Union and other.__origin__ is Union:\n            return frozenset(self.__args__) == frozenset(other.__args__)\n        return self.__args__ == other.__args__\n\n    def __hash__(self):\n        if self.__origin__ is Union:\n            return hash((Union, frozenset(self.__args__)))\n        return hash((self.__origin__, self.__args__))\n\n    def __call__(self, *args, **kwargs):\n        if not self._inst:\n            raise TypeError(f\"Type {self._name} cannot be instantiated; \"\n                            f\"use {self._name.lower()}() instead\")\n        result = self.__origin__(*args, **kwargs)\n        try:\n            result.__orig_class__ = self\n        except AttributeError:\n            pass\n        return result\n\n    def __mro_entries__(self, bases):\n        if self._name:  # generic version of an ABC or built-in class\n            res = []\n            if self.__origin__ not in bases:\n                res.append(self.__origin__)\n            i = bases.index(self)\n            if not any(isinstance(b, _GenericAlias) or issubclass(b, Generic)\n                       for b in bases[i+1:]):\n                res.append(Generic)\n            return tuple(res)\n        if self.__origin__ is Generic:\n            i = bases.index(self)\n            for b in bases[i+1:]:\n                if isinstance(b, _GenericAlias) and b is not self:\n                    return ()\n        return (self.__origin__,)\n\n    def __getattr__(self, attr):\n        # We are careful for copy and pickle.\n        # Also for simplicity we just don't relay all dunder names\n        if '__origin__' in self.__dict__ and not _is_dunder(attr):\n            return getattr(self.__origin__, attr)\n        raise AttributeError(attr)\n\n    def __setattr__(self, attr, val):\n        if _is_dunder(attr) or attr in ('_name', '_inst', '_special'):\n            super().__setattr__(attr, val)\n        else:\n            setattr(self.__origin__, attr, val)\n\n    def __instancecheck__(self, obj):\n        return self.__subclasscheck__(type(obj))\n\n    def __subclasscheck__(self, cls):\n        if self._special:\n            if not isinstance(cls, _GenericAlias):\n                return issubclass(cls, self.__origin__)\n            if cls._special:\n                return issubclass(cls.__origin__, self.__origin__)\n        raise TypeError(\"Subscripted generics cannot be used with\"\n                        \" class and instance checks\")\n\n    def __reduce__(self):\n        if self._special:\n            return self._name\n\n        if self._name:\n            origin = globals()[self._name]\n        else:\n            origin = self.__origin__\n        if (origin is Callable and\n            not (len(self.__args__) == 2 and self.__args__[0] is Ellipsis)):\n            args = list(self.__args__[:-1]), self.__args__[-1]\n        else:\n            args = tuple(self.__args__)\n            if len(args) == 1 and not isinstance(args[0], tuple):\n                args, = args\n        return operator.getitem, (origin, args)\n\n\nclass _VariadicGenericAlias(_GenericAlias, _root=True):\n    \"\"\"Same as _GenericAlias above but for variadic aliases. Currently,\n    this is used only by special internal aliases: Tuple and Callable.\n    \"\"\"\n    def __getitem__(self, params):\n        if self._name != 'Callable' or not self._special:\n            return self.__getitem_inner__(params)\n        if not isinstance(params, tuple) or len(params) != 2:\n            raise TypeError(\"Callable must be used as \"\n                            \"Callable[[arg, ...], result].\")\n        args, result = params\n        if args is Ellipsis:\n            params = (Ellipsis, result)\n        else:\n            if not isinstance(args, list):\n                raise TypeError(f\"Callable[args, result]: args must be a list.\"\n                                f\" Got {args}\")\n            params = (tuple(args), result)\n        return self.__getitem_inner__(params)\n\n    @_tp_cache\n    def __getitem_inner__(self, params):\n        if self.__origin__ is tuple and self._special:\n            if params == ():\n                return self.copy_with((_TypingEmpty,))\n            if not isinstance(params, tuple):\n                params = (params,)\n            if len(params) == 2 and params[1] is ...:\n                msg = \"Tuple[t, ...]: t must be a type.\"\n                p = _type_check(params[0], msg)\n                return self.copy_with((p, _TypingEllipsis))\n            msg = \"Tuple[t0, t1, ...]: each t must be a type.\"\n            params = tuple(_type_check(p, msg) for p in params)\n            return self.copy_with(params)\n        if self.__origin__ is collections.abc.Callable and self._special:\n            args, result = params\n            msg = \"Callable[args, result]: result must be a type.\"\n            result = _type_check(result, msg)\n            if args is Ellipsis:\n                return self.copy_with((_TypingEllipsis, result))\n            msg = \"Callable[[arg, ...], result]: each arg must be a type.\"\n            args = tuple(_type_check(arg, msg) for arg in args)\n            params = args + (result,)\n            return self.copy_with(params)\n        return super().__getitem__(params)\n\n\nclass Generic:\n    \"\"\"Abstract base class for generic types.\n\n    A generic type is typically declared by inheriting from\n    this class parameterized with one or more type variables.\n    For example, a generic mapping type might be defined as::\n\n      class Mapping(Generic[KT, VT]):\n          def __getitem__(self, key: KT) -> VT:\n              ...\n          # Etc.\n\n    This class can then be used as follows::\n\n      def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n          try:\n              return mapping[key]\n          except KeyError:\n              return default\n    \"\"\"\n    __slots__ = ()\n\n    def __new__(cls, *args, **kwds):\n        if cls is Generic:\n            raise TypeError(\"Type Generic cannot be instantiated; \"\n                            \"it can be used only as a base class\")\n        if super().__new__ is object.__new__ and cls.__init__ is not object.__init__:\n            obj = super().__new__(cls)\n        else:\n            obj = super().__new__(cls, *args, **kwds)\n        return obj\n\n    @_tp_cache\n    def __class_getitem__(cls, params):\n        if not isinstance(params, tuple):\n            params = (params,)\n        if not params and cls is not Tuple:\n            raise TypeError(\n                f\"Parameter list to {cls.__qualname__}[...] cannot be empty\")\n        msg = \"Parameters to generic types must be types.\"\n        params = tuple(_type_check(p, msg) for p in params)\n        if cls is Generic:\n            # Generic can only be subscripted with unique type variables.\n            if not all(isinstance(p, TypeVar) for p in params):\n                raise TypeError(\n                    \"Parameters to Generic[...] must all be type variables\")\n            if len(set(params)) != len(params):\n                raise TypeError(\n                    \"Parameters to Generic[...] must all be unique\")\n        elif cls is _Protocol:\n            # _Protocol is internal at the moment, just skip the check\n            pass\n        else:\n            # Subscripting a regular Generic subclass.\n            _check_generic(cls, params)\n        return _GenericAlias(cls, params)\n\n    def __init_subclass__(cls, *args, **kwargs):\n        super().__init_subclass__(*args, **kwargs)\n        tvars = []\n        if '__orig_bases__' in cls.__dict__:\n            error = Generic in cls.__orig_bases__\n        else:\n            error = Generic in cls.__bases__ and cls.__name__ != '_Protocol'\n        if error:\n            raise TypeError(\"Cannot inherit from plain Generic\")\n        if '__orig_bases__' in cls.__dict__:\n            tvars = _collect_type_vars(cls.__orig_bases__)\n            # Look for Generic[T1, ..., Tn].\n            # If found, tvars must be a subset of it.\n            # If not found, tvars is it.\n            # Also check for and reject plain Generic,\n            # and reject multiple Generic[...].\n            gvars = None\n            for base in cls.__orig_bases__:\n                if (isinstance(base, _GenericAlias) and\n                        base.__origin__ is Generic):\n                    if gvars is not None:\n                        raise TypeError(\n                            \"Cannot inherit from Generic[...] multiple types.\")\n                    gvars = base.__parameters__\n            if gvars is None:\n                gvars = tvars\n            else:\n                tvarset = set(tvars)\n                gvarset = set(gvars)\n                if not tvarset <= gvarset:\n                    s_vars = ', '.join(str(t) for t in tvars if t not in gvarset)\n                    s_args = ', '.join(str(g) for g in gvars)\n                    raise TypeError(f\"Some type variables ({s_vars}) are\"\n                                    f\" not listed in Generic[{s_args}]\")\n                tvars = gvars\n        cls.__parameters__ = tuple(tvars)\n\n\nclass _TypingEmpty:\n    \"\"\"Internal placeholder for () or []. Used by TupleMeta and CallableMeta\n    to allow empty list/tuple in specific places, without allowing them\n    to sneak in where prohibited.\n    \"\"\"\n\n\nclass _TypingEllipsis:\n    \"\"\"Internal placeholder for ... (ellipsis).\"\"\"\n\n\ndef cast(typ, val):\n    \"\"\"Cast a value to a type.\n\n    This returns the value unchanged.  To the type checker this\n    signals that the return value has the designated type, but at\n    runtime we intentionally don't check anything (we want this\n    to be as fast as possible).\n    \"\"\"\n    return val\n\n\ndef _get_defaults(func):\n    \"\"\"Internal helper to extract the default arguments, by name.\"\"\"\n    try:\n        code = func.__code__\n    except AttributeError:\n        # Some built-in functions don't have __code__, __defaults__, etc.\n        return {}\n    pos_count = code.co_argcount\n    arg_names = code.co_varnames\n    arg_names = arg_names[:pos_count]\n    defaults = func.__defaults__ or ()\n    kwdefaults = func.__kwdefaults__\n    res = dict(kwdefaults) if kwdefaults else {}\n    pos_offset = pos_count - len(defaults)\n    for name, value in zip(arg_names[pos_offset:], defaults):\n        assert name not in res\n        res[name] = value\n    return res\n\n\n_allowed_types = (types.FunctionType, types.BuiltinFunctionType,\n                  types.MethodType, types.ModuleType,\n                  WrapperDescriptorType, MethodWrapperType, MethodDescriptorType)\n\n\ndef get_type_hints(obj, globalns=None, localns=None):\n    \"\"\"Return type hints for an object.\n\n    This is often the same as obj.__annotations__, but it handles\n    forward references encoded as string literals, and if necessary\n    adds Optional[t] if a default value equal to None is set.\n\n    The argument may be a module, class, method, or function. The annotations\n    are returned as a dictionary. For classes, annotations include also\n    inherited members.\n\n    TypeError is raised if the argument is not of a type that can contain\n    annotations, and an empty dictionary is returned if no annotations are\n    present.\n\n    BEWARE -- the behavior of globalns and localns is counterintuitive\n    (unless you are familiar with how eval() and exec() work).  The\n    search order is locals first, then globals.\n\n    - If no dict arguments are passed, an attempt is made to use the\n      globals from obj (or the respective module's globals for classes),\n      and these are also used as the locals.  If the object does not appear\n      to have globals, an empty dictionary is used.\n\n    - If one dict argument is passed, it is used for both globals and\n      locals.\n\n    - If two dict arguments are passed, they specify globals and\n      locals, respectively.\n    \"\"\"\n\n    if getattr(obj, '__no_type_check__', None):\n        return {}\n    # Classes require a special treatment.\n    if isinstance(obj, type):\n        hints = {}\n        for base in reversed(obj.__mro__):\n            if globalns is None:\n                base_globals = sys.modules[base.__module__].__dict__\n            else:\n                base_globals = globalns\n            ann = base.__dict__.get('__annotations__', {})\n            for name, value in ann.items():\n                if value is None:\n                    value = type(None)\n                if isinstance(value, str):\n                    value = ForwardRef(value, is_argument=False)\n                value = _eval_type(value, base_globals, localns)\n                hints[name] = value\n        return hints\n\n    if globalns is None:\n        if isinstance(obj, types.ModuleType):\n            globalns = obj.__dict__\n        else:\n            globalns = getattr(obj, '__globals__', {})\n        if localns is None:\n            localns = globalns\n    elif localns is None:\n        localns = globalns\n    hints = getattr(obj, '__annotations__', None)\n    if hints is None:\n        # Return empty annotations for something that _could_ have them.\n        if isinstance(obj, _allowed_types):\n            return {}\n        else:\n            raise TypeError('{!r} is not a module, class, method, '\n                            'or function.'.format(obj))\n    defaults = _get_defaults(obj)\n    hints = dict(hints)\n    for name, value in hints.items():\n        if value is None:\n            value = type(None)\n        if isinstance(value, str):\n            value = ForwardRef(value)\n        value = _eval_type(value, globalns, localns)\n        if name in defaults and defaults[name] is None:\n            value = Optional[value]\n        hints[name] = value\n    return hints\n\n\ndef no_type_check(arg):\n    \"\"\"Decorator to indicate that annotations are not type hints.\n\n    The argument must be a class or function; if it is a class, it\n    applies recursively to all methods and classes defined in that class\n    (but not to methods defined in its superclasses or subclasses).\n\n    This mutates the function(s) or class(es) in place.\n    \"\"\"\n    if isinstance(arg, type):\n        arg_attrs = arg.__dict__.copy()\n        for attr, val in arg.__dict__.items():\n            if val in arg.__bases__ + (arg,):\n                arg_attrs.pop(attr)\n        for obj in arg_attrs.values():\n            if isinstance(obj, types.FunctionType):\n                obj.__no_type_check__ = True\n            if isinstance(obj, type):\n                no_type_check(obj)\n    try:\n        arg.__no_type_check__ = True\n    except TypeError:  # built-in classes\n        pass\n    return arg\n\n\ndef no_type_check_decorator(decorator):\n    \"\"\"Decorator to give another decorator the @no_type_check effect.\n\n    This wraps the decorator with something that wraps the decorated\n    function in @no_type_check.\n    \"\"\"\n\n    @functools.wraps(decorator)\n    def wrapped_decorator(*args, **kwds):\n        func = decorator(*args, **kwds)\n        func = no_type_check(func)\n        return func\n\n    return wrapped_decorator\n\n\ndef _overload_dummy(*args, **kwds):\n    \"\"\"Helper for @overload to raise when called.\"\"\"\n    raise NotImplementedError(\n        \"You should not call an overloaded function. \"\n        \"A series of @overload-decorated functions \"\n        \"outside a stub module should always be followed \"\n        \"by an implementation that is not @overload-ed.\")\n\n\ndef overload(func):\n    \"\"\"Decorator for overloaded functions/methods.\n\n    In a stub file, place two or more stub definitions for the same\n    function in a row, each decorated with @overload.  For example:\n\n      @overload\n      def utf8(value: None) -> None: ...\n      @overload\n      def utf8(value: bytes) -> bytes: ...\n      @overload\n      def utf8(value: str) -> bytes: ...\n\n    In a non-stub file (i.e. a regular .py file), do the same but\n    follow it with an implementation.  The implementation should *not*\n    be decorated with @overload.  For example:\n\n      @overload\n      def utf8(value: None) -> None: ...\n      @overload\n      def utf8(value: bytes) -> bytes: ...\n      @overload\n      def utf8(value: str) -> bytes: ...\n      def utf8(value):\n          # implementation goes here\n    \"\"\"\n    return _overload_dummy\n\n\nclass _ProtocolMeta(type):\n    \"\"\"Internal metaclass for _Protocol.\n\n    This exists so _Protocol classes can be generic without deriving\n    from Generic.\n    \"\"\"\n\n    def __instancecheck__(self, obj):\n        if _Protocol not in self.__bases__:\n            return super().__instancecheck__(obj)\n        raise TypeError(\"Protocols cannot be used with isinstance().\")\n\n    def __subclasscheck__(self, cls):\n        if not self._is_protocol:\n            # No structural checks since this isn't a protocol.\n            return NotImplemented\n\n        if self is _Protocol:\n            # Every class is a subclass of the empty protocol.\n            return True\n\n        # Find all attributes defined in the protocol.\n        attrs = self._get_protocol_attrs()\n\n        for attr in attrs:\n            if not any(attr in d.__dict__ for d in cls.__mro__):\n                return False\n        return True\n\n    def _get_protocol_attrs(self):\n        # Get all Protocol base classes.\n        protocol_bases = []\n        for c in self.__mro__:\n            if getattr(c, '_is_protocol', False) and c.__name__ != '_Protocol':\n                protocol_bases.append(c)\n\n        # Get attributes included in protocol.\n        attrs = set()\n        for base in protocol_bases:\n            for attr in base.__dict__.keys():\n                # Include attributes not defined in any non-protocol bases.\n                for c in self.__mro__:\n                    if (c is not base and attr in c.__dict__ and\n                            not getattr(c, '_is_protocol', False)):\n                        break\n                else:\n                    if (not attr.startswith('_abc_') and\n                            attr != '__abstractmethods__' and\n                            attr != '__annotations__' and\n                            attr != '__weakref__' and\n                            attr != '_is_protocol' and\n                            attr != '_gorg' and\n                            attr != '__dict__' and\n                            attr != '__args__' and\n                            attr != '__slots__' and\n                            attr != '_get_protocol_attrs' and\n                            attr != '__next_in_mro__' and\n                            attr != '__parameters__' and\n                            attr != '__origin__' and\n                            attr != '__orig_bases__' and\n                            attr != '__extra__' and\n                            attr != '__tree_hash__' and\n                            attr != '__module__'):\n                        attrs.add(attr)\n\n        return attrs\n\n\nclass _Protocol(Generic, metaclass=_ProtocolMeta):\n    \"\"\"Internal base class for protocol classes.\n\n    This implements a simple-minded structural issubclass check\n    (similar but more general than the one-offs in collections.abc\n    such as Hashable).\n    \"\"\"\n\n    __slots__ = ()\n\n    _is_protocol = True\n\n    def __class_getitem__(cls, params):\n        return super().__class_getitem__(params)\n\n\n# Some unconstrained type variables.  These are used by the container types.\n# (These are not for export.)\nT = TypeVar('T')  # Any type.\nKT = TypeVar('KT')  # Key type.\nVT = TypeVar('VT')  # Value type.\nT_co = TypeVar('T_co', covariant=True)  # Any type covariant containers.\nV_co = TypeVar('V_co', covariant=True)  # Any type covariant containers.\nVT_co = TypeVar('VT_co', covariant=True)  # Value type covariant containers.\nT_contra = TypeVar('T_contra', contravariant=True)  # Ditto contravariant.\n# Internal type variable used for Type[].\nCT_co = TypeVar('CT_co', covariant=True, bound=type)\n\n# A useful type variable with constraints.  This represents string types.\n# (This one *is* for export!)\nAnyStr = TypeVar('AnyStr', bytes, str)\n\n\n# Various ABCs mimicking those in collections.abc.\ndef _alias(origin, params, inst=True):\n    return _GenericAlias(origin, params, special=True, inst=inst)\n\nHashable = _alias(collections.abc.Hashable, ())  # Not generic.\nAwaitable = _alias(collections.abc.Awaitable, T_co)\nCoroutine = _alias(collections.abc.Coroutine, (T_co, T_contra, V_co))\nAsyncIterable = _alias(collections.abc.AsyncIterable, T_co)\nAsyncIterator = _alias(collections.abc.AsyncIterator, T_co)\nIterable = _alias(collections.abc.Iterable, T_co)\nIterator = _alias(collections.abc.Iterator, T_co)\nReversible = _alias(collections.abc.Reversible, T_co)\nSized = _alias(collections.abc.Sized, ())  # Not generic.\nContainer = _alias(collections.abc.Container, T_co)\nCollection = _alias(collections.abc.Collection, T_co)\nCallable = _VariadicGenericAlias(collections.abc.Callable, (), special=True)\nCallable.__doc__ = \\\n    \"\"\"Callable type; Callable[[int], str] is a function of (int) -> str.\n\n    The subscription syntax must always be used with exactly two\n    values: the argument list and the return type.  The argument list\n    must be a list of types or ellipsis; the return type must be a single type.\n\n    There is no syntax to indicate optional or keyword arguments,\n    such function types are rarely used as callback types.\n    \"\"\"\nAbstractSet = _alias(collections.abc.Set, T_co)\nMutableSet = _alias(collections.abc.MutableSet, T)\n# NOTE: Mapping is only covariant in the value type.\nMapping = _alias(collections.abc.Mapping, (KT, VT_co))\nMutableMapping = _alias(collections.abc.MutableMapping, (KT, VT))\nSequence = _alias(collections.abc.Sequence, T_co)\nMutableSequence = _alias(collections.abc.MutableSequence, T)\nByteString = _alias(collections.abc.ByteString, ())  # Not generic\nTuple = _VariadicGenericAlias(tuple, (), inst=False, special=True)\nTuple.__doc__ = \\\n    \"\"\"Tuple type; Tuple[X, Y] is the cross-product type of X and Y.\n\n    Example: Tuple[T1, T2] is a tuple of two elements corresponding\n    to type variables T1 and T2.  Tuple[int, float, str] is a tuple\n    of an int, a float and a string.\n\n    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].\n    \"\"\"\nList = _alias(list, T, inst=False)\nDeque = _alias(collections.deque, T)\nSet = _alias(set, T, inst=False)\nFrozenSet = _alias(frozenset, T_co, inst=False)\nMappingView = _alias(collections.abc.MappingView, T_co)\nKeysView = _alias(collections.abc.KeysView, KT)\nItemsView = _alias(collections.abc.ItemsView, (KT, VT_co))\nValuesView = _alias(collections.abc.ValuesView, VT_co)\nContextManager = _alias(contextlib.AbstractContextManager, T_co)\nAsyncContextManager = _alias(contextlib.AbstractAsyncContextManager, T_co)\nDict = _alias(dict, (KT, VT), inst=False)\nDefaultDict = _alias(collections.defaultdict, (KT, VT))\nOrderedDict = _alias(collections.OrderedDict, (KT, VT))\nCounter = _alias(collections.Counter, T)\nChainMap = _alias(collections.ChainMap, (KT, VT))\nGenerator = _alias(collections.abc.Generator, (T_co, T_contra, V_co))\nAsyncGenerator = _alias(collections.abc.AsyncGenerator, (T_co, T_contra))\nType = _alias(type, CT_co, inst=False)\nType.__doc__ = \\\n    \"\"\"A special construct usable to annotate class objects.\n\n    For example, suppose we have the following classes::\n\n      class User: ...  # Abstract base for User classes\n      class BasicUser(User): ...\n      class ProUser(User): ...\n      class TeamUser(User): ...\n\n    And a function that takes a class argument that's a subclass of\n    User and returns an instance of the corresponding class::\n\n      U = TypeVar('U', bound=User)\n      def new_user(user_class: Type[U]) -> U:\n          user = user_class()\n          # (Here we could write the user object to a database)\n          return user\n\n      joe = new_user(BasicUser)\n\n    At this point the type checker knows that joe has type BasicUser.\n    \"\"\"\n\n\nclass SupportsInt(_Protocol):\n    __slots__ = ()\n\n    @abstractmethod\n    def __int__(self) -> int:\n        pass\n\n\nclass SupportsFloat(_Protocol):\n    __slots__ = ()\n\n    @abstractmethod\n    def __float__(self) -> float:\n        pass\n\n\nclass SupportsComplex(_Protocol):\n    __slots__ = ()\n\n    @abstractmethod\n    def __complex__(self) -> complex:\n        pass\n\n\nclass SupportsBytes(_Protocol):\n    __slots__ = ()\n\n    @abstractmethod\n    def __bytes__(self) -> bytes:\n        pass\n\n\nclass SupportsAbs(_Protocol[T_co]):\n    __slots__ = ()\n\n    @abstractmethod\n    def __abs__(self) -> T_co:\n        pass\n\n\nclass SupportsRound(_Protocol[T_co]):\n    __slots__ = ()\n\n    @abstractmethod\n    def __round__(self, ndigits: int = 0) -> T_co:\n        pass\n\n\ndef _make_nmtuple(name, types):\n    msg = \"NamedTuple('Name', [(f0, t0), (f1, t1), ...]); each t must be a type\"\n    types = [(n, _type_check(t, msg)) for n, t in types]\n    nm_tpl = collections.namedtuple(name, [n for n, t in types])\n    # Prior to PEP 526, only _field_types attribute was assigned.\n    # Now, both __annotations__ and _field_types are used to maintain compatibility.\n    nm_tpl.__annotations__ = nm_tpl._field_types = collections.OrderedDict(types)\n    try:\n        nm_tpl.__module__ = sys._getframe(2).f_globals.get('__name__', '__main__')\n    except (AttributeError, ValueError):\n        pass\n    return nm_tpl\n\n\n# attributes prohibited to set in NamedTuple class syntax\n_prohibited = ('__new__', '__init__', '__slots__', '__getnewargs__',\n               '_fields', '_field_defaults', '_field_types',\n               '_make', '_replace', '_asdict', '_source')\n\n_special = ('__module__', '__name__', '__qualname__', '__annotations__')\n\n\nclass NamedTupleMeta(type):\n\n    def __new__(cls, typename, bases, ns):\n        if ns.get('_root', False):\n            return super().__new__(cls, typename, bases, ns)\n        types = ns.get('__annotations__', {})\n        nm_tpl = _make_nmtuple(typename, types.items())\n        defaults = []\n        defaults_dict = {}\n        for field_name in types:\n            if field_name in ns:\n                default_value = ns[field_name]\n                defaults.append(default_value)\n                defaults_dict[field_name] = default_value\n            elif defaults:\n                raise TypeError(\"Non-default namedtuple field {field_name} cannot \"\n                                \"follow default field(s) {default_names}\"\n                                .format(field_name=field_name,\n                                        default_names=', '.join(defaults_dict.keys())))\n        nm_tpl.__new__.__annotations__ = collections.OrderedDict(types)\n        nm_tpl.__new__.__defaults__ = tuple(defaults)\n        nm_tpl._field_defaults = defaults_dict\n        # update from user namespace without overriding special namedtuple attributes\n        for key in ns:\n            if key in _prohibited:\n                raise AttributeError(\"Cannot overwrite NamedTuple attribute \" + key)\n            elif key not in _special and key not in nm_tpl._fields:\n                setattr(nm_tpl, key, ns[key])\n        return nm_tpl\n\n\nclass NamedTuple(metaclass=NamedTupleMeta):\n    \"\"\"Typed version of namedtuple.\n\n    Usage in Python versions >= 3.6::\n\n        class Employee(NamedTuple):\n            name: str\n            id: int\n\n    This is equivalent to::\n\n        Employee = collections.namedtuple('Employee', ['name', 'id'])\n\n    The resulting class has extra __annotations__ and _field_types\n    attributes, giving an ordered dict mapping field names to types.\n    __annotations__ should be preferred, while _field_types\n    is kept to maintain pre PEP 526 compatibility. (The field names\n    are in the _fields attribute, which is part of the namedtuple\n    API.) Alternative equivalent keyword syntax is also accepted::\n\n        Employee = NamedTuple('Employee', name=str, id=int)\n\n    In Python versions <= 3.5 use::\n\n        Employee = NamedTuple('Employee', [('name', str), ('id', int)])\n    \"\"\"\n    _root = True\n\n    def __new__(self, typename, fields=None, **kwargs):\n        if fields is None:\n            fields = kwargs.items()\n        elif kwargs:\n            raise TypeError(\"Either list of fields or keywords\"\n                            \" can be provided to NamedTuple, not both\")\n        return _make_nmtuple(typename, fields)\n\n\ndef NewType(name, tp):\n    \"\"\"NewType creates simple unique types with almost zero\n    runtime overhead. NewType(name, tp) is considered a subtype of tp\n    by static type checkers. At runtime, NewType(name, tp) returns\n    a dummy function that simply returns its argument. Usage::\n\n        UserId = NewType('UserId', int)\n\n        def name_by_id(user_id: UserId) -> str:\n            ...\n\n        UserId('user')          # Fails type check\n\n        name_by_id(42)          # Fails type check\n        name_by_id(UserId(42))  # OK\n\n        num = UserId(5) + 1     # type: int\n    \"\"\"\n\n    def new_type(x):\n        return x\n\n    new_type.__name__ = name\n    new_type.__supertype__ = tp\n    return new_type\n\n\n# Python-version-specific alias (Python 2: unicode; Python 3: str)\nText = str\n\n\n# Constant that's True when type checking, but False here.\nTYPE_CHECKING = False\n\n\nclass IO(Generic[AnyStr]):\n    \"\"\"Generic base class for TextIO and BinaryIO.\n\n    This is an abstract, generic version of the return of open().\n\n    NOTE: This does not distinguish between the different possible\n    classes (text vs. binary, read vs. write vs. read/write,\n    append-only, unbuffered).  The TextIO and BinaryIO subclasses\n    below capture the distinctions between text vs. binary, which is\n    pervasive in the interface; however we currently do not offer a\n    way to track the other distinctions in the type system.\n    \"\"\"\n\n    __slots__ = ()\n\n    @abstractproperty\n    def mode(self) -> str:\n        pass\n\n    @abstractproperty\n    def name(self) -> str:\n        pass\n\n    @abstractmethod\n    def close(self) -> None:\n        pass\n\n    @abstractmethod\n    def closed(self) -> bool:\n        pass\n\n    @abstractmethod\n    def fileno(self) -> int:\n        pass\n\n    @abstractmethod\n    def flush(self) -> None:\n        pass\n\n    @abstractmethod\n    def isatty(self) -> bool:\n        pass\n\n    @abstractmethod\n    def read(self, n: int = -1) -> AnyStr:\n        pass\n\n    @abstractmethod\n    def readable(self) -> bool:\n        pass\n\n    @abstractmethod\n    def readline(self, limit: int = -1) -> AnyStr:\n        pass\n\n    @abstractmethod\n    def readlines(self, hint: int = -1) -> List[AnyStr]:\n        pass\n\n    @abstractmethod\n    def seek(self, offset: int, whence: int = 0) -> int:\n        pass\n\n    @abstractmethod\n    def seekable(self) -> bool:\n        pass\n\n    @abstractmethod\n    def tell(self) -> int:\n        pass\n\n    @abstractmethod\n    def truncate(self, size: int = None) -> int:\n        pass\n\n    @abstractmethod\n    def writable(self) -> bool:\n        pass\n\n    @abstractmethod\n    def write(self, s: AnyStr) -> int:\n        pass\n\n    @abstractmethod\n    def writelines(self, lines: List[AnyStr]) -> None:\n        pass\n\n    @abstractmethod\n    def __enter__(self) -> 'IO[AnyStr]':\n        pass\n\n    @abstractmethod\n    def __exit__(self, type, value, traceback) -> None:\n        pass\n\n\nclass BinaryIO(IO[bytes]):\n    \"\"\"Typed version of the return of open() in binary mode.\"\"\"\n\n    __slots__ = ()\n\n    @abstractmethod\n    def write(self, s: Union[bytes, bytearray]) -> int:\n        pass\n\n    @abstractmethod\n    def __enter__(self) -> 'BinaryIO':\n        pass\n\n\nclass TextIO(IO[str]):\n    \"\"\"Typed version of the return of open() in text mode.\"\"\"\n\n    __slots__ = ()\n\n    @abstractproperty\n    def buffer(self) -> BinaryIO:\n        pass\n\n    @abstractproperty\n    def encoding(self) -> str:\n        pass\n\n    @abstractproperty\n    def errors(self) -> Optional[str]:\n        pass\n\n    @abstractproperty\n    def line_buffering(self) -> bool:\n        pass\n\n    @abstractproperty\n    def newlines(self) -> Any:\n        pass\n\n    @abstractmethod\n    def __enter__(self) -> 'TextIO':\n        pass\n\n\nclass io:\n    \"\"\"Wrapper namespace for IO generic classes.\"\"\"\n\n    __all__ = ['IO', 'TextIO', 'BinaryIO']\n    IO = IO\n    TextIO = TextIO\n    BinaryIO = BinaryIO\n\n\nio.__name__ = __name__ + '.io'\nsys.modules[io.__name__] = io\n\nPattern = _alias(stdlib_re.Pattern, AnyStr)\nMatch = _alias(stdlib_re.Match, AnyStr)\n\nclass re:\n    \"\"\"Wrapper namespace for re type aliases.\"\"\"\n\n    __all__ = ['Pattern', 'Match']\n    Pattern = Pattern\n    Match = Match\n\n\nre.__name__ = __name__ + '.re'\nsys.modules[re.__name__] = re\n", 1616], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py": ["\"\"\"\n    ast\n    ~~~\n\n    The `ast` module helps Python applications to process trees of the Python\n    abstract syntax grammar.  The abstract syntax itself might change with\n    each Python release; this module helps to find out programmatically what\n    the current grammar looks like and allows modifications of it.\n\n    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as\n    a flag to the `compile()` builtin function or by using the `parse()`\n    function from this module.  The result will be a tree of objects whose\n    classes all inherit from `ast.AST`.\n\n    A modified abstract syntax tree can be compiled into a Python code object\n    using the built-in `compile()` function.\n\n    Additionally various helper functions are provided that make working with\n    the trees simpler.  The main intention of the helper functions and this\n    module in general is to provide an easy to use interface for libraries\n    that work tightly with the python syntax (template engines for example).\n\n\n    :copyright: Copyright 2008 by Armin Ronacher.\n    :license: Python License.\n\"\"\"\nfrom _ast import *\n\n\ndef parse(source, filename='<unknown>', mode='exec'):\n    \"\"\"\n    Parse the source into an AST node.\n    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).\n    \"\"\"\n    return compile(source, filename, mode, PyCF_ONLY_AST)\n\n\ndef literal_eval(node_or_string):\n    \"\"\"\n    Safely evaluate an expression node or a string containing a Python\n    expression.  The string or node provided may only consist of the following\n    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,\n    sets, booleans, and None.\n    \"\"\"\n    if isinstance(node_or_string, str):\n        node_or_string = parse(node_or_string, mode='eval')\n    if isinstance(node_or_string, Expression):\n        node_or_string = node_or_string.body\n    def _convert_num(node):\n        if isinstance(node, Constant):\n            if isinstance(node.value, (int, float, complex)):\n                return node.value\n        elif isinstance(node, Num):\n            return node.n\n        raise ValueError('malformed node or string: ' + repr(node))\n    def _convert_signed_num(node):\n        if isinstance(node, UnaryOp) and isinstance(node.op, (UAdd, USub)):\n            operand = _convert_num(node.operand)\n            if isinstance(node.op, UAdd):\n                return + operand\n            else:\n                return - operand\n        return _convert_num(node)\n    def _convert(node):\n        if isinstance(node, Constant):\n            return node.value\n        elif isinstance(node, (Str, Bytes)):\n            return node.s\n        elif isinstance(node, Num):\n            return node.n\n        elif isinstance(node, Tuple):\n            return tuple(map(_convert, node.elts))\n        elif isinstance(node, List):\n            return list(map(_convert, node.elts))\n        elif isinstance(node, Set):\n            return set(map(_convert, node.elts))\n        elif isinstance(node, Dict):\n            return dict(zip(map(_convert, node.keys),\n                            map(_convert, node.values)))\n        elif isinstance(node, NameConstant):\n            return node.value\n        elif isinstance(node, BinOp) and isinstance(node.op, (Add, Sub)):\n            left = _convert_signed_num(node.left)\n            right = _convert_num(node.right)\n            if isinstance(left, (int, float)) and isinstance(right, complex):\n                if isinstance(node.op, Add):\n                    return left + right\n                else:\n                    return left - right\n        return _convert_signed_num(node)\n    return _convert(node_or_string)\n\n\ndef dump(node, annotate_fields=True, include_attributes=False):\n    \"\"\"\n    Return a formatted dump of the tree in *node*.  This is mainly useful for\n    debugging purposes.  The returned string will show the names and the values\n    for fields.  This makes the code impossible to evaluate, so if evaluation is\n    wanted *annotate_fields* must be set to False.  Attributes such as line\n    numbers and column offsets are not dumped by default.  If this is wanted,\n    *include_attributes* can be set to True.\n    \"\"\"\n    def _format(node):\n        if isinstance(node, AST):\n            fields = [(a, _format(b)) for a, b in iter_fields(node)]\n            rv = '%s(%s' % (node.__class__.__name__, ', '.join(\n                ('%s=%s' % field for field in fields)\n                if annotate_fields else\n                (b for a, b in fields)\n            ))\n            if include_attributes and node._attributes:\n                rv += fields and ', ' or ' '\n                rv += ', '.join('%s=%s' % (a, _format(getattr(node, a)))\n                                for a in node._attributes)\n            return rv + ')'\n        elif isinstance(node, list):\n            return '[%s]' % ', '.join(_format(x) for x in node)\n        return repr(node)\n    if not isinstance(node, AST):\n        raise TypeError('expected AST, got %r' % node.__class__.__name__)\n    return _format(node)\n\n\ndef copy_location(new_node, old_node):\n    \"\"\"\n    Copy source location (`lineno` and `col_offset` attributes) from\n    *old_node* to *new_node* if possible, and return *new_node*.\n    \"\"\"\n    for attr in 'lineno', 'col_offset':\n        if attr in old_node._attributes and attr in new_node._attributes \\\n           and hasattr(old_node, attr):\n            setattr(new_node, attr, getattr(old_node, attr))\n    return new_node\n\n\ndef fix_missing_locations(node):\n    \"\"\"\n    When you compile a node tree with compile(), the compiler expects lineno and\n    col_offset attributes for every node that supports them.  This is rather\n    tedious to fill in for generated nodes, so this helper adds these attributes\n    recursively where not already set, by setting them to the values of the\n    parent node.  It works recursively starting at *node*.\n    \"\"\"\n    def _fix(node, lineno, col_offset):\n        if 'lineno' in node._attributes:\n            if not hasattr(node, 'lineno'):\n                node.lineno = lineno\n            else:\n                lineno = node.lineno\n        if 'col_offset' in node._attributes:\n            if not hasattr(node, 'col_offset'):\n                node.col_offset = col_offset\n            else:\n                col_offset = node.col_offset\n        for child in iter_child_nodes(node):\n            _fix(child, lineno, col_offset)\n    _fix(node, 1, 0)\n    return node\n\n\ndef increment_lineno(node, n=1):\n    \"\"\"\n    Increment the line number of each node in the tree starting at *node* by *n*.\n    This is useful to \"move code\" to a different location in a file.\n    \"\"\"\n    for child in walk(node):\n        if 'lineno' in child._attributes:\n            child.lineno = getattr(child, 'lineno', 0) + n\n    return node\n\n\ndef iter_fields(node):\n    \"\"\"\n    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``\n    that is present on *node*.\n    \"\"\"\n    for field in node._fields:\n        try:\n            yield field, getattr(node, field)\n        except AttributeError:\n            pass\n\n\ndef iter_child_nodes(node):\n    \"\"\"\n    Yield all direct child nodes of *node*, that is, all fields that are nodes\n    and all items of fields that are lists of nodes.\n    \"\"\"\n    for name, field in iter_fields(node):\n        if isinstance(field, AST):\n            yield field\n        elif isinstance(field, list):\n            for item in field:\n                if isinstance(item, AST):\n                    yield item\n\n\ndef get_docstring(node, clean=True):\n    \"\"\"\n    Return the docstring for the given node or None if no docstring can\n    be found.  If the node provided does not have docstrings a TypeError\n    will be raised.\n\n    If *clean* is `True`, all tabs are expanded to spaces and any whitespace\n    that can be uniformly removed from the second line onwards is removed.\n    \"\"\"\n    if not isinstance(node, (AsyncFunctionDef, FunctionDef, ClassDef, Module)):\n        raise TypeError(\"%r can't have docstrings\" % node.__class__.__name__)\n    if not(node.body and isinstance(node.body[0], Expr)):\n        return None\n    node = node.body[0].value\n    if isinstance(node, Str):\n        text = node.s\n    elif isinstance(node, Constant) and isinstance(node.value, str):\n        text = node.value\n    else:\n        return None\n    if clean:\n        import inspect\n        text = inspect.cleandoc(text)\n    return text\n\n\ndef walk(node):\n    \"\"\"\n    Recursively yield all descendant nodes in the tree starting at *node*\n    (including *node* itself), in no specified order.  This is useful if you\n    only want to modify nodes in place and don't care about the context.\n    \"\"\"\n    from collections import deque\n    todo = deque([node])\n    while todo:\n        node = todo.popleft()\n        todo.extend(iter_child_nodes(node))\n        yield node\n\n\nclass NodeVisitor(object):\n    \"\"\"\n    A node visitor base class that walks the abstract syntax tree and calls a\n    visitor function for every node found.  This function may return a value\n    which is forwarded by the `visit` method.\n\n    This class is meant to be subclassed, with the subclass adding visitor\n    methods.\n\n    Per default the visitor functions for the nodes are ``'visit_'`` +\n    class name of the node.  So a `TryFinally` node visit function would\n    be `visit_TryFinally`.  This behavior can be changed by overriding\n    the `visit` method.  If no visitor function exists for a node\n    (return value `None`) the `generic_visit` visitor is used instead.\n\n    Don't use the `NodeVisitor` if you want to apply changes to nodes during\n    traversing.  For this a special visitor exists (`NodeTransformer`) that\n    allows modifications.\n    \"\"\"\n\n    def visit(self, node):\n        \"\"\"Visit a node.\"\"\"\n        method = 'visit_' + node.__class__.__name__\n        visitor = getattr(self, method, self.generic_visit)\n        return visitor(node)\n\n    def generic_visit(self, node):\n        \"\"\"Called if no explicit visitor function exists for a node.\"\"\"\n        for field, value in iter_fields(node):\n            if isinstance(value, list):\n                for item in value:\n                    if isinstance(item, AST):\n                        self.visit(item)\n            elif isinstance(value, AST):\n                self.visit(value)\n\n\nclass NodeTransformer(NodeVisitor):\n    \"\"\"\n    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and\n    allows modification of nodes.\n\n    The `NodeTransformer` will walk the AST and use the return value of the\n    visitor methods to replace or remove the old node.  If the return value of\n    the visitor method is ``None``, the node will be removed from its location,\n    otherwise it is replaced with the return value.  The return value may be the\n    original node in which case no replacement takes place.\n\n    Here is an example transformer that rewrites all occurrences of name lookups\n    (``foo``) to ``data['foo']``::\n\n       class RewriteName(NodeTransformer):\n\n           def visit_Name(self, node):\n               return copy_location(Subscript(\n                   value=Name(id='data', ctx=Load()),\n                   slice=Index(value=Str(s=node.id)),\n                   ctx=node.ctx\n               ), node)\n\n    Keep in mind that if the node you're operating on has child nodes you must\n    either transform the child nodes yourself or call the :meth:`generic_visit`\n    method for the node first.\n\n    For nodes that were part of a collection of statements (that applies to all\n    statement nodes), the visitor may also return a list of nodes rather than\n    just a single node.\n\n    Usually you use the transformer like this::\n\n       node = YourTransformer().visit(node)\n    \"\"\"\n\n    def generic_visit(self, node):\n        for field, old_value in iter_fields(node):\n            if isinstance(old_value, list):\n                new_values = []\n                for value in old_value:\n                    if isinstance(value, AST):\n                        value = self.visit(value)\n                        if value is None:\n                            continue\n                        elif not isinstance(value, AST):\n                            new_values.extend(value)\n                            continue\n                    new_values.append(value)\n                old_value[:] = new_values\n            elif isinstance(old_value, AST):\n                new_node = self.visit(old_value)\n                if new_node is None:\n                    delattr(node, field)\n                else:\n                    setattr(node, field, new_node)\n        return node\n", 331], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py": ["\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"\n\nimport os as _os\nimport sys as _sys\nimport _thread\n\nfrom time import monotonic as _time\nfrom traceback import format_exc as _format_exc\nfrom _weakrefset import WeakSet\nfrom itertools import islice as _islice, count as _count\ntry:\n    from _collections import deque as _deque\nexcept ImportError:\n    from collections import deque as _deque\n\n# Note regarding PEP 8 compliant names\n#  This threading model was originally inspired by Java, and inherited\n# the convention of camelCase function and method names from that\n# language. Those original names are not in any imminent danger of\n# being deprecated (even for Py3k),so this module provides them as an\n# alias for the PEP 8 compliant names\n# Note that using the new PEP 8 compliant names facilitates substitution\n# with the multiprocessing module, which doesn't provide the old\n# Java inspired names.\n\n__all__ = ['get_ident', 'active_count', 'Condition', 'current_thread',\n           'enumerate', 'main_thread', 'TIMEOUT_MAX',\n           'Event', 'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Thread',\n           'Barrier', 'BrokenBarrierError', 'Timer', 'ThreadError',\n           'setprofile', 'settrace', 'local', 'stack_size']\n\n# Rename some stuff so \"from threading import *\" is safe\n_start_new_thread = _thread.start_new_thread\n_allocate_lock = _thread.allocate_lock\n_set_sentinel = _thread._set_sentinel\nget_ident = _thread.get_ident\nThreadError = _thread.error\ntry:\n    _CRLock = _thread.RLock\nexcept AttributeError:\n    _CRLock = None\nTIMEOUT_MAX = _thread.TIMEOUT_MAX\ndel _thread\n\n\n# Support for profile and trace hooks\n\n_profile_hook = None\n_trace_hook = None\n\ndef setprofile(func):\n    \"\"\"Set a profile function for all threads started from the threading module.\n\n    The func will be passed to sys.setprofile() for each thread, before its\n    run() method is called.\n\n    \"\"\"\n    global _profile_hook\n    _profile_hook = func\n\ndef settrace(func):\n    \"\"\"Set a trace function for all threads started from the threading module.\n\n    The func will be passed to sys.settrace() for each thread, before its run()\n    method is called.\n\n    \"\"\"\n    global _trace_hook\n    _trace_hook = func\n\n# Synchronization classes\n\nLock = _allocate_lock\n\ndef RLock(*args, **kwargs):\n    \"\"\"Factory function that returns a new reentrant lock.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it again\n    without blocking; the thread must release it once for each time it has\n    acquired it.\n\n    \"\"\"\n    if _CRLock is None:\n        return _PyRLock(*args, **kwargs)\n    return _CRLock(*args, **kwargs)\n\nclass _RLock:\n    \"\"\"This class implements reentrant lock objects.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it\n    again without blocking; the thread must release it once for each time it\n    has acquired it.\n\n    \"\"\"\n\n    def __init__(self):\n        self._block = _allocate_lock()\n        self._owner = None\n        self._count = 0\n\n    def __repr__(self):\n        owner = self._owner\n        try:\n            owner = _active[owner].name\n        except KeyError:\n            pass\n        return \"<%s %s.%s object owner=%r count=%d at %s>\" % (\n            \"locked\" if self._block.locked() else \"unlocked\",\n            self.__class__.__module__,\n            self.__class__.__qualname__,\n            owner,\n            self._count,\n            hex(id(self))\n        )\n\n    def acquire(self, blocking=True, timeout=-1):\n        \"\"\"Acquire a lock, blocking or non-blocking.\n\n        When invoked without arguments: if this thread already owns the lock,\n        increment the recursion level by one, and return immediately. Otherwise,\n        if another thread owns the lock, block until the lock is unlocked. Once\n        the lock is unlocked (not owned by any thread), then grab ownership, set\n        the recursion level to one, and return. If more than one thread is\n        blocked waiting until the lock is unlocked, only one at a time will be\n        able to grab ownership of the lock. There is no return value in this\n        case.\n\n        When invoked with the blocking argument set to true, do the same thing\n        as when called without arguments, and return true.\n\n        When invoked with the blocking argument set to false, do not block. If a\n        call without an argument would block, return false immediately;\n        otherwise, do the same thing as when called without arguments, and\n        return true.\n\n        When invoked with the floating-point timeout argument set to a positive\n        value, block for at most the number of seconds specified by timeout\n        and as long as the lock cannot be acquired.  Return true if the lock has\n        been acquired, false if the timeout has elapsed.\n\n        \"\"\"\n        me = get_ident()\n        if self._owner == me:\n            self._count += 1\n            return 1\n        rc = self._block.acquire(blocking, timeout)\n        if rc:\n            self._owner = me\n            self._count = 1\n        return rc\n\n    __enter__ = acquire\n\n    def release(self):\n        \"\"\"Release a lock, decrementing the recursion level.\n\n        If after the decrement it is zero, reset the lock to unlocked (not owned\n        by any thread), and if any other threads are blocked waiting for the\n        lock to become unlocked, allow exactly one of them to proceed. If after\n        the decrement the recursion level is still nonzero, the lock remains\n        locked and owned by the calling thread.\n\n        Only call this method when the calling thread owns the lock. A\n        RuntimeError is raised if this method is called when the lock is\n        unlocked.\n\n        There is no return value.\n\n        \"\"\"\n        if self._owner != get_ident():\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        self._count = count = self._count - 1\n        if not count:\n            self._owner = None\n            self._block.release()\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n    # Internal methods used by condition variables\n\n    def _acquire_restore(self, state):\n        self._block.acquire()\n        self._count, self._owner = state\n\n    def _release_save(self):\n        if self._count == 0:\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        count = self._count\n        self._count = 0\n        owner = self._owner\n        self._owner = None\n        self._block.release()\n        return (count, owner)\n\n    def _is_owned(self):\n        return self._owner == get_ident()\n\n_PyRLock = _RLock\n\n\nclass Condition:\n    \"\"\"Class that implements a condition variable.\n\n    A condition variable allows one or more threads to wait until they are\n    notified by another thread.\n\n    If the lock argument is given and not None, it must be a Lock or RLock\n    object, and it is used as the underlying lock. Otherwise, a new RLock object\n    is created and used as the underlying lock.\n\n    \"\"\"\n\n    def __init__(self, lock=None):\n        if lock is None:\n            lock = RLock()\n        self._lock = lock\n        # Export the lock's acquire() and release() methods\n        self.acquire = lock.acquire\n        self.release = lock.release\n        # If the lock defines _release_save() and/or _acquire_restore(),\n        # these override the default implementations (which just call\n        # release() and acquire() on the lock).  Ditto for _is_owned().\n        try:\n            self._release_save = lock._release_save\n        except AttributeError:\n            pass\n        try:\n            self._acquire_restore = lock._acquire_restore\n        except AttributeError:\n            pass\n        try:\n            self._is_owned = lock._is_owned\n        except AttributeError:\n            pass\n        self._waiters = _deque()\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n    def __repr__(self):\n        return \"<Condition(%s, %d)>\" % (self._lock, len(self._waiters))\n\n    def _release_save(self):\n        self._lock.release()           # No state to save\n\n    def _acquire_restore(self, x):\n        self._lock.acquire()           # Ignore saved state\n\n    def _is_owned(self):\n        # Return True if lock is owned by current_thread.\n        # This method is called only if _lock doesn't have _is_owned().\n        if self._lock.acquire(0):\n            self._lock.release()\n            return False\n        else:\n            return True\n\n    def wait(self, timeout=None):\n        \"\"\"Wait until notified or until a timeout occurs.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\n        waiter = _allocate_lock()\n        waiter.acquire()\n        self._waiters.append(waiter)\n        saved_state = self._release_save()\n        gotit = False\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\n            if timeout is None:\n                waiter.acquire()\n                gotit = True\n            else:\n                if timeout > 0:\n                    gotit = waiter.acquire(True, timeout)\n                else:\n                    gotit = waiter.acquire(False)\n            return gotit\n        finally:\n            self._acquire_restore(saved_state)\n            if not gotit:\n                try:\n                    self._waiters.remove(waiter)\n                except ValueError:\n                    pass\n\n    def wait_for(self, predicate, timeout=None):\n        \"\"\"Wait until a condition evaluates to True.\n\n        predicate should be a callable which result will be interpreted as a\n        boolean value.  A timeout may be provided giving the maximum time to\n        wait.\n\n        \"\"\"\n        endtime = None\n        waittime = timeout\n        result = predicate()\n        while not result:\n            if waittime is not None:\n                if endtime is None:\n                    endtime = _time() + waittime\n                else:\n                    waittime = endtime - _time()\n                    if waittime <= 0:\n                        break\n            self.wait(waittime)\n            result = predicate()\n        return result\n\n    def notify(self, n=1):\n        \"\"\"Wake up one or more threads waiting on this condition, if any.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method wakes up at most n of the threads waiting for the condition\n        variable; it is a no-op if no threads are waiting.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot notify on un-acquired lock\")\n        all_waiters = self._waiters\n        waiters_to_notify = _deque(_islice(all_waiters, n))\n        if not waiters_to_notify:\n            return\n        for waiter in waiters_to_notify:\n            waiter.release()\n            try:\n                all_waiters.remove(waiter)\n            except ValueError:\n                pass\n\n    def notify_all(self):\n        \"\"\"Wake up all threads waiting on this condition.\n\n        If the calling thread has not acquired the lock when this method\n        is called, a RuntimeError is raised.\n\n        \"\"\"\n        self.notify(len(self._waiters))\n\n    notifyAll = notify_all\n\n\nclass Semaphore:\n    \"\"\"This class implements semaphore objects.\n\n    Semaphores manage a counter representing the number of release() calls minus\n    the number of acquire() calls, plus an initial value. The acquire() method\n    blocks if necessary until it can return without making the counter\n    negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    # After Tim Peters' semaphore class, but not quite the same (no maximum)\n\n    def __init__(self, value=1):\n        if value < 0:\n            raise ValueError(\"semaphore initial value must be >= 0\")\n        self._cond = Condition(Lock())\n        self._value = value\n\n    def acquire(self, blocking=True, timeout=None):\n        \"\"\"Acquire a semaphore, decrementing the internal counter by one.\n\n        When invoked without arguments: if the internal counter is larger than\n        zero on entry, decrement it by one and return immediately. If it is zero\n        on entry, block, waiting until some other thread has called release() to\n        make it larger than zero. This is done with proper interlocking so that\n        if multiple acquire() calls are blocked, release() will wake exactly one\n        of them up. The implementation may pick one at random, so the order in\n        which blocked threads are awakened should not be relied on. There is no\n        return value in this case.\n\n        When invoked with blocking set to true, do the same thing as when called\n        without arguments, and return true.\n\n        When invoked with blocking set to false, do not block. If a call without\n        an argument would block, return false immediately; otherwise, do the\n        same thing as when called without arguments, and return true.\n\n        When invoked with a timeout other than None, it will block for at\n        most timeout seconds.  If acquire does not complete successfully in\n        that interval, return false.  Return true otherwise.\n\n        \"\"\"\n        if not blocking and timeout is not None:\n            raise ValueError(\"can't specify timeout for non-blocking acquire\")\n        rc = False\n        endtime = None\n        with self._cond:\n            while self._value == 0:\n                if not blocking:\n                    break\n                if timeout is not None:\n                    if endtime is None:\n                        endtime = _time() + timeout\n                    else:\n                        timeout = endtime - _time()\n                        if timeout <= 0:\n                            break\n                self._cond.wait(timeout)\n            else:\n                self._value -= 1\n                rc = True\n        return rc\n\n    __enter__ = acquire\n\n    def release(self):\n        \"\"\"Release a semaphore, incrementing the internal counter by one.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        \"\"\"\n        with self._cond:\n            self._value += 1\n            self._cond.notify()\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n\nclass BoundedSemaphore(Semaphore):\n    \"\"\"Implements a bounded semaphore.\n\n    A bounded semaphore checks to make sure its current value doesn't exceed its\n    initial value. If it does, ValueError is raised. In most situations\n    semaphores are used to guard resources with limited capacity.\n\n    If the semaphore is released too many times it's a sign of a bug. If not\n    given, value defaults to 1.\n\n    Like regular semaphores, bounded semaphores manage a counter representing\n    the number of release() calls minus the number of acquire() calls, plus an\n    initial value. The acquire() method blocks if necessary until it can return\n    without making the counter negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    def __init__(self, value=1):\n        Semaphore.__init__(self, value)\n        self._initial_value = value\n\n    def release(self):\n        \"\"\"Release a semaphore, incrementing the internal counter by one.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        If the number of releases exceeds the number of acquires,\n        raise a ValueError.\n\n        \"\"\"\n        with self._cond:\n            if self._value >= self._initial_value:\n                raise ValueError(\"Semaphore released too many times\")\n            self._value += 1\n            self._cond.notify()\n\n\nclass Event:\n    \"\"\"Class implementing event objects.\n\n    Events manage a flag that can be set to true with the set() method and reset\n    to false with the clear() method. The wait() method blocks until the flag is\n    true.  The flag is initially false.\n\n    \"\"\"\n\n    # After Tim Peters' event class (without is_posted())\n\n    def __init__(self):\n        self._cond = Condition(Lock())\n        self._flag = False\n\n    def _reset_internal_locks(self):\n        # private!  called by Thread._reset_internal_locks by _after_fork()\n        self._cond.__init__(Lock())\n\n    def is_set(self):\n        \"\"\"Return true if and only if the internal flag is true.\"\"\"\n        return self._flag\n\n    isSet = is_set\n\n    def set(self):\n        \"\"\"Set the internal flag to true.\n\n        All threads waiting for it to become true are awakened. Threads\n        that call wait() once the flag is true will not block at all.\n\n        \"\"\"\n        with self._cond:\n            self._flag = True\n            self._cond.notify_all()\n\n    def clear(self):\n        \"\"\"Reset the internal flag to false.\n\n        Subsequently, threads calling wait() will block until set() is called to\n        set the internal flag to true again.\n\n        \"\"\"\n        with self._cond:\n            self._flag = False\n\n    def wait(self, timeout=None):\n        \"\"\"Block until the internal flag is true.\n\n        If the internal flag is true on entry, return immediately. Otherwise,\n        block until another thread calls set() to set the flag to true, or until\n        the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        This method returns the internal flag on exit, so it will always return\n        True except if a timeout is given and the operation times out.\n\n        \"\"\"\n        with self._cond:\n            signaled = self._flag\n            if not signaled:\n                signaled = self._cond.wait(timeout)\n            return signaled\n\n\n# A barrier class.  Inspired in part by the pthread_barrier_* api and\n# the CyclicBarrier class from Java.  See\n# http://sourceware.org/pthreads-win32/manual/pthread_barrier_init.html and\n# http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/\n#        CyclicBarrier.html\n# for information.\n# We maintain two main states, 'filling' and 'draining' enabling the barrier\n# to be cyclic.  Threads are not allowed into it until it has fully drained\n# since the previous cycle.  In addition, a 'resetting' state exists which is\n# similar to 'draining' except that threads leave with a BrokenBarrierError,\n# and a 'broken' state in which all threads get the exception.\nclass Barrier:\n    \"\"\"Implements a Barrier.\n\n    Useful for synchronizing a fixed number of threads at known synchronization\n    points.  Threads block on 'wait()' and are simultaneously awoken once they\n    have all made that call.\n\n    \"\"\"\n\n    def __init__(self, parties, action=None, timeout=None):\n        \"\"\"Create a barrier, initialised to 'parties' threads.\n\n        'action' is a callable which, when supplied, will be called by one of\n        the threads after they have all entered the barrier and just prior to\n        releasing them all. If a 'timeout' is provided, it is used as the\n        default for all subsequent 'wait()' calls.\n\n        \"\"\"\n        self._cond = Condition(Lock())\n        self._action = action\n        self._timeout = timeout\n        self._parties = parties\n        self._state = 0 #0 filling, 1, draining, -1 resetting, -2 broken\n        self._count = 0\n\n    def wait(self, timeout=None):\n        \"\"\"Wait for the barrier.\n\n        When the specified number of threads have started waiting, they are all\n        simultaneously awoken. If an 'action' was provided for the barrier, one\n        of the threads will have executed that callback prior to returning.\n        Returns an individual index number from 0 to 'parties-1'.\n\n        \"\"\"\n        if timeout is None:\n            timeout = self._timeout\n        with self._cond:\n            self._enter() # Block while the barrier drains.\n            index = self._count\n            self._count += 1\n            try:\n                if index + 1 == self._parties:\n                    # We release the barrier\n                    self._release()\n                else:\n                    # We wait until someone releases us\n                    self._wait(timeout)\n                return index\n            finally:\n                self._count -= 1\n                # Wake up any threads waiting for barrier to drain.\n                self._exit()\n\n    # Block until the barrier is ready for us, or raise an exception\n    # if it is broken.\n    def _enter(self):\n        while self._state in (-1, 1):\n            # It is draining or resetting, wait until done\n            self._cond.wait()\n        #see if the barrier is in a broken state\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 0\n\n    # Optionally run the 'action' and release the threads waiting\n    # in the barrier.\n    def _release(self):\n        try:\n            if self._action:\n                self._action()\n            # enter draining state\n            self._state = 1\n            self._cond.notify_all()\n        except:\n            #an exception during the _action handler.  Break and reraise\n            self._break()\n            raise\n\n    # Wait in the barrier until we are released.  Raise an exception\n    # if the barrier is reset or broken.\n    def _wait(self, timeout):\n        if not self._cond.wait_for(lambda : self._state != 0, timeout):\n            #timed out.  Break the barrier\n            self._break()\n            raise BrokenBarrierError\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 1\n\n    # If we are the last thread to exit the barrier, signal any threads\n    # waiting for the barrier to drain.\n    def _exit(self):\n        if self._count == 0:\n            if self._state in (-1, 1):\n                #resetting or draining\n                self._state = 0\n                self._cond.notify_all()\n\n    def reset(self):\n        \"\"\"Reset the barrier to the initial state.\n\n        Any threads currently waiting will get the BrokenBarrier exception\n        raised.\n\n        \"\"\"\n        with self._cond:\n            if self._count > 0:\n                if self._state == 0:\n                    #reset the barrier, waking up threads\n                    self._state = -1\n                elif self._state == -2:\n                    #was broken, set it to reset state\n                    #which clears when the last thread exits\n                    self._state = -1\n            else:\n                self._state = 0\n            self._cond.notify_all()\n\n    def abort(self):\n        \"\"\"Place the barrier into a 'broken' state.\n\n        Useful in case of error.  Any currently waiting threads and threads\n        attempting to 'wait()' will have BrokenBarrierError raised.\n\n        \"\"\"\n        with self._cond:\n            self._break()\n\n    def _break(self):\n        # An internal error was detected.  The barrier is set to\n        # a broken state all parties awakened.\n        self._state = -2\n        self._cond.notify_all()\n\n    @property\n    def parties(self):\n        \"\"\"Return the number of threads required to trip the barrier.\"\"\"\n        return self._parties\n\n    @property\n    def n_waiting(self):\n        \"\"\"Return the number of threads currently waiting at the barrier.\"\"\"\n        # We don't need synchronization here since this is an ephemeral result\n        # anyway.  It returns the correct value in the steady state.\n        if self._state == 0:\n            return self._count\n        return 0\n\n    @property\n    def broken(self):\n        \"\"\"Return True if the barrier is in a broken state.\"\"\"\n        return self._state == -2\n\n# exception raised by the Barrier class\nclass BrokenBarrierError(RuntimeError):\n    pass\n\n\n# Helper to generate new thread names\n_counter = _count().__next__\n_counter() # Consume 0 so first non-main thread has id 1.\ndef _newname(template=\"Thread-%d\"):\n    return template % _counter()\n\n# Active thread administration\n_active_limbo_lock = _allocate_lock()\n_active = {}    # maps thread id to Thread object\n_limbo = {}\n_dangling = WeakSet()\n# Set of Thread._tstate_lock locks of non-daemon threads used by _shutdown()\n# to wait until all Python thread states get deleted:\n# see Thread._set_tstate_lock().\n_shutdown_locks_lock = _allocate_lock()\n_shutdown_locks = set()\n\n# Main class for threads\n\nclass Thread:\n    \"\"\"A class that represents a thread of control.\n\n    This class can be safely subclassed in a limited fashion. There are two ways\n    to specify the activity: by passing a callable object to the constructor, or\n    by overriding the run() method in a subclass.\n\n    \"\"\"\n\n    _initialized = False\n    # Need to store a reference to sys.exc_info for printing\n    # out exceptions when a thread tries to use a global var. during interp.\n    # shutdown and thus raises an exception about trying to perform some\n    # operation on/with a NoneType\n    _exc_info = _sys.exc_info\n    # Keep sys.exc_clear too to clear the exception just before\n    # allowing .join() to return.\n    #XXX __exc_clear = _sys.exc_clear\n\n    def __init__(self, group=None, target=None, name=None,\n                 args=(), kwargs=None, *, daemon=None):\n        \"\"\"This constructor should always be called with keyword arguments. Arguments are:\n\n        *group* should be None; reserved for future extension when a ThreadGroup\n        class is implemented.\n\n        *target* is the callable object to be invoked by the run()\n        method. Defaults to None, meaning nothing is called.\n\n        *name* is the thread name. By default, a unique name is constructed of\n        the form \"Thread-N\" where N is a small decimal number.\n\n        *args* is the argument tuple for the target invocation. Defaults to ().\n\n        *kwargs* is a dictionary of keyword arguments for the target\n        invocation. Defaults to {}.\n\n        If a subclass overrides the constructor, it must make sure to invoke\n        the base class constructor (Thread.__init__()) before doing anything\n        else to the thread.\n\n        \"\"\"\n        assert group is None, \"group argument must be None for now\"\n        if kwargs is None:\n            kwargs = {}\n        self._target = target\n        self._name = str(name or _newname())\n        self._args = args\n        self._kwargs = kwargs\n        if daemon is not None:\n            self._daemonic = daemon\n        else:\n            self._daemonic = current_thread().daemon\n        self._ident = None\n        self._tstate_lock = None\n        self._started = Event()\n        self._is_stopped = False\n        self._initialized = True\n        # sys.stderr is not stored in the class like\n        # sys.exc_info since it can be changed between instances\n        self._stderr = _sys.stderr\n        # For debugging and _after_fork()\n        _dangling.add(self)\n\n    def _reset_internal_locks(self, is_alive):\n        # private!  Called by _after_fork() to reset our internal locks as\n        # they may be in an invalid state leading to a deadlock or crash.\n        self._started._reset_internal_locks()\n        if is_alive:\n            self._set_tstate_lock()\n        else:\n            # The thread isn't alive after fork: it doesn't have a tstate\n            # anymore.\n            self._is_stopped = True\n            self._tstate_lock = None\n\n    def __repr__(self):\n        assert self._initialized, \"Thread.__init__() was not called\"\n        status = \"initial\"\n        if self._started.is_set():\n            status = \"started\"\n        self.is_alive() # easy way to get ._is_stopped set when appropriate\n        if self._is_stopped:\n            status = \"stopped\"\n        if self._daemonic:\n            status += \" daemon\"\n        if self._ident is not None:\n            status += \" %s\" % self._ident\n        return \"<%s(%s, %s)>\" % (self.__class__.__name__, self._name, status)\n\n    def start(self):\n        \"\"\"Start the thread's activity.\n\n        It must be called at most once per thread object. It arranges for the\n        object's run() method to be invoked in a separate thread of control.\n\n        This method will raise a RuntimeError if called more than once on the\n        same thread object.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"thread.__init__() not called\")\n\n        if self._started.is_set():\n            raise RuntimeError(\"threads can only be started once\")\n        with _active_limbo_lock:\n            _limbo[self] = self\n        try:\n            _start_new_thread(self._bootstrap, ())\n        except Exception:\n            with _active_limbo_lock:\n                del _limbo[self]\n            raise\n        self._started.wait()\n\n    def run(self):\n        \"\"\"Method representing the thread's activity.\n\n        You may override this method in a subclass. The standard run() method\n        invokes the callable object passed to the object's constructor as the\n        target argument, if any, with sequential and keyword arguments taken\n        from the args and kwargs arguments, respectively.\n\n        \"\"\"\n        try:\n            if self._target:\n                self._target(*self._args, **self._kwargs)\n        finally:\n            # Avoid a refcycle if the thread is running a function with\n            # an argument that has a member that points to the thread.\n            del self._target, self._args, self._kwargs\n\n    def _bootstrap(self):\n        # Wrapper around the real bootstrap code that ignores\n        # exceptions during interpreter cleanup.  Those typically\n        # happen when a daemon thread wakes up at an unfortunate\n        # moment, finds the world around it destroyed, and raises some\n        # random exception *** while trying to report the exception in\n        # _bootstrap_inner() below ***.  Those random exceptions\n        # don't help anybody, and they confuse users, so we suppress\n        # them.  We suppress them only when it appears that the world\n        # indeed has already been destroyed, so that exceptions in\n        # _bootstrap_inner() during normal business hours are properly\n        # reported.  Also, we only suppress them for daemonic threads;\n        # if a non-daemonic encounters this, something else is wrong.\n        try:\n            self._bootstrap_inner()\n        except:\n            if self._daemonic and _sys is None:\n                return\n            raise\n\n    def _set_ident(self):\n        self._ident = get_ident()\n\n    def _set_tstate_lock(self):\n        \"\"\"\n        Set a lock object which will be released by the interpreter when\n        the underlying thread state (see pystate.h) gets deleted.\n        \"\"\"\n        self._tstate_lock = _set_sentinel()\n        self._tstate_lock.acquire()\n\n        if not self.daemon:\n            with _shutdown_locks_lock:\n                _shutdown_locks.add(self._tstate_lock)\n\n    def _bootstrap_inner(self):\n        try:\n            self._set_ident()\n            self._set_tstate_lock()\n            self._started.set()\n            with _active_limbo_lock:\n                _active[self._ident] = self\n                del _limbo[self]\n\n            if _trace_hook:\n                _sys.settrace(_trace_hook)\n            if _profile_hook:\n                _sys.setprofile(_profile_hook)\n\n            try:\n                self.run()\n            except SystemExit:\n                pass\n            except:\n                # If sys.stderr is no more (most likely from interpreter\n                # shutdown) use self._stderr.  Otherwise still use sys (as in\n                # _sys) in case sys.stderr was redefined since the creation of\n                # self.\n                if _sys and _sys.stderr is not None:\n                    print(\"Exception in thread %s:\\n%s\" %\n                          (self.name, _format_exc()), file=_sys.stderr)\n                elif self._stderr is not None:\n                    # Do the best job possible w/o a huge amt. of code to\n                    # approximate a traceback (code ideas from\n                    # Lib/traceback.py)\n                    exc_type, exc_value, exc_tb = self._exc_info()\n                    try:\n                        print((\n                            \"Exception in thread \" + self.name +\n                            \" (most likely raised during interpreter shutdown):\"), file=self._stderr)\n                        print((\n                            \"Traceback (most recent call last):\"), file=self._stderr)\n                        while exc_tb:\n                            print((\n                                '  File \"%s\", line %s, in %s' %\n                                (exc_tb.tb_frame.f_code.co_filename,\n                                    exc_tb.tb_lineno,\n                                    exc_tb.tb_frame.f_code.co_name)), file=self._stderr)\n                            exc_tb = exc_tb.tb_next\n                        print((\"%s: %s\" % (exc_type, exc_value)), file=self._stderr)\n                        self._stderr.flush()\n                    # Make sure that exc_tb gets deleted since it is a memory\n                    # hog; deleting everything else is just for thoroughness\n                    finally:\n                        del exc_type, exc_value, exc_tb\n            finally:\n                # Prevent a race in\n                # test_threading.test_no_refcycle_through_target when\n                # the exception keeps the target alive past when we\n                # assert that it's dead.\n                #XXX self._exc_clear()\n                pass\n        finally:\n            with _active_limbo_lock:\n                try:\n                    # We don't call self._delete() because it also\n                    # grabs _active_limbo_lock.\n                    del _active[get_ident()]\n                except:\n                    pass\n\n    def _stop(self):\n        # After calling ._stop(), .is_alive() returns False and .join() returns\n        # immediately.  ._tstate_lock must be released before calling ._stop().\n        #\n        # Normal case:  C code at the end of the thread's life\n        # (release_sentinel in _threadmodule.c) releases ._tstate_lock, and\n        # that's detected by our ._wait_for_tstate_lock(), called by .join()\n        # and .is_alive().  Any number of threads _may_ call ._stop()\n        # simultaneously (for example, if multiple threads are blocked in\n        # .join() calls), and they're not serialized.  That's harmless -\n        # they'll just make redundant rebindings of ._is_stopped and\n        # ._tstate_lock.  Obscure:  we rebind ._tstate_lock last so that the\n        # \"assert self._is_stopped\" in ._wait_for_tstate_lock() always works\n        # (the assert is executed only if ._tstate_lock is None).\n        #\n        # Special case:  _main_thread releases ._tstate_lock via this\n        # module's _shutdown() function.\n        lock = self._tstate_lock\n        if lock is not None:\n            assert not lock.locked()\n        self._is_stopped = True\n        self._tstate_lock = None\n        if not self.daemon:\n            with _shutdown_locks_lock:\n                _shutdown_locks.discard(lock)\n\n    def _delete(self):\n        \"Remove current thread from the dict of currently running threads.\"\n        with _active_limbo_lock:\n            del _active[get_ident()]\n            # There must not be any python code between the previous line\n            # and after the lock is released.  Otherwise a tracing function\n            # could try to acquire the lock again in the same thread, (in\n            # current_thread()), and would block.\n\n    def join(self, timeout=None):\n        \"\"\"Wait until the thread terminates.\n\n        This blocks the calling thread until the thread whose join() method is\n        called terminates -- either normally or through an unhandled exception\n        or until the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof). As join() always returns None, you must call\n        is_alive() after join() to decide whether a timeout happened -- if the\n        thread is still alive, the join() call timed out.\n\n        When the timeout argument is not present or None, the operation will\n        block until the thread terminates.\n\n        A thread can be join()ed many times.\n\n        join() raises a RuntimeError if an attempt is made to join the current\n        thread as that would cause a deadlock. It is also an error to join() a\n        thread before it has been started and attempts to do so raises the same\n        exception.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if not self._started.is_set():\n            raise RuntimeError(\"cannot join thread before it is started\")\n        if self is current_thread():\n            raise RuntimeError(\"cannot join current thread\")\n\n        if timeout is None:\n            self._wait_for_tstate_lock()\n        else:\n            # the behavior of a negative timeout isn't documented, but\n            # historically .join(timeout=x) for x<0 has acted as if timeout=0\n            self._wait_for_tstate_lock(timeout=max(timeout, 0))\n\n    def _wait_for_tstate_lock(self, block=True, timeout=-1):\n        # Issue #18808: wait for the thread state to be gone.\n        # At the end of the thread's life, after all knowledge of the thread\n        # is removed from C data structures, C code releases our _tstate_lock.\n        # This method passes its arguments to _tstate_lock.acquire().\n        # If the lock is acquired, the C code is done, and self._stop() is\n        # called.  That sets ._is_stopped to True, and ._tstate_lock to None.\n        lock = self._tstate_lock\n        if lock is None:  # already determined that the C code is done\n            assert self._is_stopped\n        elif lock.acquire(block, timeout):\n            lock.release()\n            self._stop()\n\n    @property\n    def name(self):\n        \"\"\"A string used for identification purposes only.\n\n        It has no semantics. Multiple threads may be given the same name. The\n        initial name is set by the constructor.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert self._initialized, \"Thread.__init__() not called\"\n        self._name = str(name)\n\n    @property\n    def ident(self):\n        \"\"\"Thread identifier of this thread or None if it has not been started.\n\n        This is a nonzero integer. See the get_ident() function. Thread\n        identifiers may be recycled when a thread exits and another thread is\n        created. The identifier is available even after the thread has exited.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._ident\n\n    def is_alive(self):\n        \"\"\"Return whether the thread is alive.\n\n        This method returns True just before the run() method starts until just\n        after the run() method terminates. The module function enumerate()\n        returns a list of all alive threads.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        if self._is_stopped or not self._started.is_set():\n            return False\n        self._wait_for_tstate_lock(False)\n        return not self._is_stopped\n\n    def isAlive(self):\n        \"\"\"Return whether the thread is alive.\n\n        This method is deprecated, use is_alive() instead.\n        \"\"\"\n        import warnings\n        warnings.warn('isAlive() is deprecated, use is_alive() instead',\n                      PendingDeprecationWarning, stacklevel=2)\n        return self.is_alive()\n\n    @property\n    def daemon(self):\n        \"\"\"A boolean value indicating whether this thread is a daemon thread.\n\n        This must be set before start() is called, otherwise RuntimeError is\n        raised. Its initial value is inherited from the creating thread; the\n        main thread is not a daemon thread and therefore all threads created in\n        the main thread default to daemon = False.\n\n        The entire Python program exits when no alive non-daemon threads are\n        left.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._daemonic\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if self._started.is_set():\n            raise RuntimeError(\"cannot set daemon status of active thread\")\n        self._daemonic = daemonic\n\n    def isDaemon(self):\n        return self.daemon\n\n    def setDaemon(self, daemonic):\n        self.daemon = daemonic\n\n    def getName(self):\n        return self.name\n\n    def setName(self, name):\n        self.name = name\n\n# The timer class was contributed by Itamar Shtull-Trauring\n\nclass Timer(Thread):\n    \"\"\"Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=None, kwargs=None)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"\n\n    def __init__(self, interval, function, args=None, kwargs=None):\n        Thread.__init__(self)\n        self.interval = interval\n        self.function = function\n        self.args = args if args is not None else []\n        self.kwargs = kwargs if kwargs is not None else {}\n        self.finished = Event()\n\n    def cancel(self):\n        \"\"\"Stop the timer if it hasn't finished yet.\"\"\"\n        self.finished.set()\n\n    def run(self):\n        self.finished.wait(self.interval)\n        if not self.finished.is_set():\n            self.function(*self.args, **self.kwargs)\n        self.finished.set()\n\n\n# Special thread class to represent the main thread\n\nclass _MainThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=\"MainThread\", daemon=False)\n        self._set_tstate_lock()\n        self._started.set()\n        self._set_ident()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n\n\n# Dummy thread class to represent threads not started here.\n# These aren't garbage collected when they die, nor can they be waited for.\n# If they invoke anything in threading.py that calls current_thread(), they\n# leave an entry in the _active dict forever after.\n# Their purpose is to return *something* from current_thread().\n# They are marked as daemon threads so we won't wait for them\n# when we exit (conform previous semantics).\n\nclass _DummyThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=_newname(\"Dummy-%d\"), daemon=True)\n\n        self._started.set()\n        self._set_ident()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n\n    def _stop(self):\n        pass\n\n    def is_alive(self):\n        assert not self._is_stopped and self._started.is_set()\n        return True\n\n    def join(self, timeout=None):\n        assert False, \"cannot join a dummy thread\"\n\n\n# Global API functions\n\ndef current_thread():\n    \"\"\"Return the current Thread object, corresponding to the caller's thread of control.\n\n    If the caller's thread of control was not created through the threading\n    module, a dummy thread object with limited functionality is returned.\n\n    \"\"\"\n    try:\n        return _active[get_ident()]\n    except KeyError:\n        return _DummyThread()\n\ncurrentThread = current_thread\n\ndef active_count():\n    \"\"\"Return the number of Thread objects currently alive.\n\n    The returned count is equal to the length of the list returned by\n    enumerate().\n\n    \"\"\"\n    with _active_limbo_lock:\n        return len(_active) + len(_limbo)\n\nactiveCount = active_count\n\ndef _enumerate():\n    # Same as enumerate(), but without the lock. Internal use only.\n    return list(_active.values()) + list(_limbo.values())\n\ndef enumerate():\n    \"\"\"Return a list of all Thread objects currently alive.\n\n    The list includes daemonic threads, dummy thread objects created by\n    current_thread(), and the main thread. It excludes terminated threads and\n    threads that have not yet been started.\n\n    \"\"\"\n    with _active_limbo_lock:\n        return list(_active.values()) + list(_limbo.values())\n\nfrom _thread import stack_size\n\n# Create the main thread object,\n# and make it available for the interpreter\n# (Py_Main) as threading._shutdown.\n\n_main_thread = _MainThread()\n\ndef _shutdown():\n    \"\"\"\n    Wait until the Python thread state of all non-daemon threads get deleted.\n    \"\"\"\n    # Obscure:  other threads may be waiting to join _main_thread.  That's\n    # dubious, but some code does it.  We can't wait for C code to release\n    # the main thread's tstate_lock - that won't happen until the interpreter\n    # is nearly dead.  So we release it here.  Note that just calling _stop()\n    # isn't enough:  other threads may already be waiting on _tstate_lock.\n    if _main_thread._is_stopped:\n        # _shutdown() was already called\n        return\n\n    # Main thread\n    tlock = _main_thread._tstate_lock\n    # The main thread isn't finished yet, so its thread state lock can't have\n    # been released.\n    assert tlock is not None\n    assert tlock.locked()\n    tlock.release()\n    _main_thread._stop()\n\n    # Join all non-deamon threads\n    while True:\n        with _shutdown_locks_lock:\n            locks = list(_shutdown_locks)\n            _shutdown_locks.clear()\n\n        if not locks:\n            break\n\n        for lock in locks:\n            # mimick Thread.join()\n            lock.acquire()\n            lock.release()\n\n        # new threads can be spawned while we were waiting for the other\n        # threads to complete\n\n\ndef main_thread():\n    \"\"\"Return the main thread object.\n\n    In normal conditions, the main thread is the thread from which the\n    Python interpreter was started.\n    \"\"\"\n    return _main_thread\n\n# get thread-local implementation, either from the thread\n# module, or from the python fallback\n\ntry:\n    from _thread import _local as local\nexcept ImportError:\n    from _threading_local import local\n\n\ndef _after_fork():\n    \"\"\"\n    Cleanup threading module state that should not exist after a fork.\n    \"\"\"\n    # Reset _active_limbo_lock, in case we forked while the lock was held\n    # by another (non-forked) thread.  http://bugs.python.org/issue874900\n    global _active_limbo_lock, _main_thread\n    global _shutdown_locks_lock, _shutdown_locks\n    _active_limbo_lock = _allocate_lock()\n\n    # fork() only copied the current thread; clear references to others.\n    new_active = {}\n    current = current_thread()\n    _main_thread = current\n\n    # reset _shutdown() locks: threads re-register their _tstate_lock below\n    _shutdown_locks_lock = _allocate_lock()\n    _shutdown_locks = set()\n\n    with _active_limbo_lock:\n        # Dangling thread instances must still have their locks reset,\n        # because someone may join() them.\n        threads = set(_enumerate())\n        threads.update(_dangling)\n        for thread in threads:\n            # Any lock/condition variable may be currently locked or in an\n            # invalid state, so we reinitialize them.\n            if thread is current:\n                # There is only one active thread. We reset the ident to\n                # its new value since it can have changed.\n                thread._reset_internal_locks(True)\n                ident = get_ident()\n                thread._ident = ident\n                new_active[ident] = thread\n            else:\n                # All the others are already stopped.\n                thread._reset_internal_locks(False)\n                thread._stop()\n\n        _limbo.clear()\n        _active.clear()\n        _active.update(new_active)\n        assert len(_active) == 1\n\n\nif hasattr(_os, \"register_at_fork\"):\n    _os.register_at_fork(after_in_child=_after_fork)\n", 1378], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/_weakrefset.py": ["# Access WeakSet through the weakref module.\n# This code is separated-out because it is needed\n# by abc.py to load everything else at startup.\n\nfrom _weakref import ref\n\n__all__ = ['WeakSet']\n\n\nclass _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n\n    def __enter__(self):\n        w = self.weakcontainer()\n        if w is not None:\n            w._iterating.add(self)\n        return self\n\n    def __exit__(self, e, t, b):\n        w = self.weakcontainer()\n        if w is not None:\n            s = w._iterating\n            s.remove(self)\n            if not s:\n                w._commit_removals()\n\n\nclass WeakSet:\n    def __init__(self, data=None):\n        self.data = set()\n        def _remove(item, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(item)\n                else:\n                    self.data.discard(item)\n        self._remove = _remove\n        # A list of keys to be removed\n        self._pending_removals = []\n        self._iterating = set()\n        if data is not None:\n            self.update(data)\n\n    def _commit_removals(self):\n        l = self._pending_removals\n        discard = self.data.discard\n        while l:\n            discard(l.pop())\n\n    def __iter__(self):\n        with _IterationGuard(self):\n            for itemref in self.data:\n                item = itemref()\n                if item is not None:\n                    # Caveat: the iterator will keep a strong reference to\n                    # `item` until it is resumed or closed.\n                    yield item\n\n    def __len__(self):\n        return len(self.data) - len(self._pending_removals)\n\n    def __contains__(self, item):\n        try:\n            wr = ref(item)\n        except TypeError:\n            return False\n        return wr in self.data\n\n    def __reduce__(self):\n        return (self.__class__, (list(self),),\n                getattr(self, '__dict__', None))\n\n    def add(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.add(ref(item, self._remove))\n\n    def clear(self):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.clear()\n\n    def copy(self):\n        return self.__class__(self)\n\n    def pop(self):\n        if self._pending_removals:\n            self._commit_removals()\n        while True:\n            try:\n                itemref = self.data.pop()\n            except KeyError:\n                raise KeyError('pop from empty WeakSet') from None\n            item = itemref()\n            if item is not None:\n                return item\n\n    def remove(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.remove(ref(item))\n\n    def discard(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.discard(ref(item))\n\n    def update(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        for element in other:\n            self.add(element)\n\n    def __ior__(self, other):\n        self.update(other)\n        return self\n\n    def difference(self, other):\n        newset = self.copy()\n        newset.difference_update(other)\n        return newset\n    __sub__ = difference\n\n    def difference_update(self, other):\n        self.__isub__(other)\n    def __isub__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.difference_update(ref(item) for item in other)\n        return self\n\n    def intersection(self, other):\n        return self.__class__(item for item in other if item in self)\n    __and__ = intersection\n\n    def intersection_update(self, other):\n        self.__iand__(other)\n    def __iand__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.intersection_update(ref(item) for item in other)\n        return self\n\n    def issubset(self, other):\n        return self.data.issubset(ref(item) for item in other)\n    __le__ = issubset\n\n    def __lt__(self, other):\n        return self.data < set(map(ref, other))\n\n    def issuperset(self, other):\n        return self.data.issuperset(ref(item) for item in other)\n    __ge__ = issuperset\n\n    def __gt__(self, other):\n        return self.data > set(map(ref, other))\n\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.data == set(map(ref, other))\n\n    def symmetric_difference(self, other):\n        newset = self.copy()\n        newset.symmetric_difference_update(other)\n        return newset\n    __xor__ = symmetric_difference\n\n    def symmetric_difference_update(self, other):\n        self.__ixor__(other)\n    def __ixor__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.symmetric_difference_update(ref(item, self._remove) for item in other)\n        return self\n\n    def union(self, other):\n        return self.__class__(e for s in (self, other) for e in s)\n    __or__ = union\n\n    def isdisjoint(self, other):\n        return len(self.intersection(other)) == 0\n", 196], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/genericpath.py": ["\"\"\"\nPath operations common to more than one OS\nDo not use directly.  The OS specific modules import the appropriate\nfunctions from this module themselves.\n\"\"\"\nimport os\nimport stat\n\n__all__ = ['commonprefix', 'exists', 'getatime', 'getctime', 'getmtime',\n           'getsize', 'isdir', 'isfile', 'samefile', 'sameopenfile',\n           'samestat']\n\n\n# Does a path exist?\n# This is false for dangling symbolic links on systems that support them.\ndef exists(path):\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\n    try:\n        os.stat(path)\n    except OSError:\n        return False\n    return True\n\n\n# This follows symbolic links, so both islink() and isdir() can be true\n# for the same path on systems that support symlinks\ndef isfile(path):\n    \"\"\"Test whether a path is a regular file\"\"\"\n    try:\n        st = os.stat(path)\n    except OSError:\n        return False\n    return stat.S_ISREG(st.st_mode)\n\n\n# Is a path a directory?\n# This follows symbolic links, so both islink() and isdir()\n# can be true for the same path on systems that support symlinks\ndef isdir(s):\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\n    try:\n        st = os.stat(s)\n    except OSError:\n        return False\n    return stat.S_ISDIR(st.st_mode)\n\n\ndef getsize(filename):\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_size\n\n\ndef getmtime(filename):\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_mtime\n\n\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\n\n\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n\n\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n    # Some people pass in a list of pathname parts to operate in an OS-agnostic\n    # fashion; don't try to translate in that case as that's an abuse of the\n    # API and they are already doing what they need to be OS-agnostic and so\n    # they most likely won't be using an os.PathLike object in the sublists.\n    if not isinstance(m[0], (list, tuple)):\n        m = tuple(map(os.fspath, m))\n    s1 = min(m)\n    s2 = max(m)\n    for i, c in enumerate(s1):\n        if c != s2[i]:\n            return s1[:i]\n    return s1\n\n# Are two stat buffers (obtained from stat, fstat or lstat)\n# describing the same file?\ndef samestat(s1, s2):\n    \"\"\"Test whether two stat buffers reference the same file\"\"\"\n    return (s1.st_ino == s2.st_ino and\n            s1.st_dev == s2.st_dev)\n\n\n# Are two filenames really pointing to the same file?\ndef samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file\"\"\"\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\n\n\n# Are two open files really referencing the same file?\n# (Not necessarily the same file descriptor!)\ndef sameopenfile(fp1, fp2):\n    \"\"\"Test whether two open file objects reference the same file\"\"\"\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\n# Generic implementation of splitext, to be parametrized with\n# the separators\ndef _splitext(p, sep, altsep, extsep):\n    \"\"\"Split the extension from a pathname.\n\n    Extension is everything from the last dot to the end, ignoring\n    leading dots.  Returns \"(root, ext)\"; ext may be empty.\"\"\"\n    # NOTE: This code must work for text and bytes strings.\n\n    sepIndex = p.rfind(sep)\n    if altsep:\n        altsepIndex = p.rfind(altsep)\n        sepIndex = max(sepIndex, altsepIndex)\n\n    dotIndex = p.rfind(extsep)\n    if dotIndex > sepIndex:\n        # skip all leading dots\n        filenameIndex = sepIndex + 1\n        while filenameIndex < dotIndex:\n            if p[filenameIndex:filenameIndex+1] != extsep:\n                return p[:dotIndex], p[dotIndex:]\n            filenameIndex += 1\n\n    return p, p[:0]\n\ndef _check_arg_types(funcname, *args):\n    hasstr = hasbytes = False\n    for s in args:\n        if isinstance(s, str):\n            hasstr = True\n        elif isinstance(s, bytes):\n            hasbytes = True\n        else:\n            raise TypeError('%s() argument must be str or bytes, not %r' %\n                            (funcname, s.__class__.__name__)) from None\n    if hasstr and hasbytes:\n        raise TypeError(\"Can't mix strings and bytes in path components\") from None\n", 151], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/cli.py": ["import ast\nimport inspect\nimport os\nimport platform\nimport re\nimport sys\nimport traceback\nimport warnings\nfrom functools import update_wrapper\nfrom operator import attrgetter\nfrom threading import Lock\nfrom threading import Thread\n\nimport click\nfrom werkzeug.utils import import_string\n\nfrom .globals import current_app\nfrom .helpers import get_debug_flag\nfrom .helpers import get_env\nfrom .helpers import get_load_dotenv\n\ntry:\n    import dotenv\nexcept ImportError:\n    dotenv = None\n\ntry:\n    import ssl\nexcept ImportError:\n    ssl = None  # type: ignore\n\n\nclass NoAppException(click.UsageError):\n    \"\"\"Raised if an application cannot be found or loaded.\"\"\"\n\n\ndef find_best_app(script_info, module):\n    \"\"\"Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    \"\"\"\n    from . import Flask\n\n    # Search for the most common names first.\n    for attr_name in (\"app\", \"application\"):\n        app = getattr(module, attr_name, None)\n\n        if isinstance(app, Flask):\n            return app\n\n    # Otherwise find the only object that is a Flask instance.\n    matches = [v for v in module.__dict__.values() if isinstance(v, Flask)]\n\n    if len(matches) == 1:\n        return matches[0]\n    elif len(matches) > 1:\n        raise NoAppException(\n            \"Detected multiple Flask applications in module\"\n            f\" {module.__name__!r}. Use 'FLASK_APP={module.__name__}:name'\"\n            f\" to specify the correct one.\"\n        )\n\n    # Search for app factory functions.\n    for attr_name in (\"create_app\", \"make_app\"):\n        app_factory = getattr(module, attr_name, None)\n\n        if inspect.isfunction(app_factory):\n            try:\n                app = call_factory(script_info, app_factory)\n\n                if isinstance(app, Flask):\n                    return app\n            except TypeError as e:\n                if not _called_with_wrong_args(app_factory):\n                    raise\n\n                raise NoAppException(\n                    f\"Detected factory {attr_name!r} in module {module.__name__!r},\"\n                    \" but could not call it without arguments. Use\"\n                    f\" \\\"FLASK_APP='{module.__name__}:{attr_name}(args)'\\\"\"\n                    \" to specify arguments.\"\n                ) from e\n\n    raise NoAppException(\n        \"Failed to find Flask application or factory in module\"\n        f\" {module.__name__!r}. Use 'FLASK_APP={module.__name__}:name'\"\n        \" to specify one.\"\n    )\n\n\ndef call_factory(script_info, app_factory, args=None, kwargs=None):\n    \"\"\"Takes an app factory, a ``script_info` object and  optionally a tuple\n    of arguments. Checks for the existence of a script_info argument and calls\n    the app_factory depending on that and the arguments provided.\n    \"\"\"\n    sig = inspect.signature(app_factory)\n    args = [] if args is None else args\n    kwargs = {} if kwargs is None else kwargs\n\n    if \"script_info\" in sig.parameters:\n        warnings.warn(\n            \"The 'script_info' argument is deprecated and will not be\"\n            \" passed to the app factory function in Flask 2.1.\",\n            DeprecationWarning,\n        )\n        kwargs[\"script_info\"] = script_info\n\n    if not args and len(sig.parameters) == 1:\n        first_parameter = next(iter(sig.parameters.values()))\n\n        if (\n            first_parameter.default is inspect.Parameter.empty\n            # **kwargs is reported as an empty default, ignore it\n            and first_parameter.kind is not inspect.Parameter.VAR_KEYWORD\n        ):\n            warnings.warn(\n                \"Script info is deprecated and will not be passed as the\"\n                \" single argument to the app factory function in Flask\"\n                \" 2.1.\",\n                DeprecationWarning,\n            )\n            args.append(script_info)\n\n    return app_factory(*args, **kwargs)\n\n\ndef _called_with_wrong_args(f):\n    \"\"\"Check whether calling a function raised a ``TypeError`` because\n    the call failed or because something in the factory raised the\n    error.\n\n    :param f: The function that was called.\n    :return: ``True`` if the call failed.\n    \"\"\"\n    tb = sys.exc_info()[2]\n\n    try:\n        while tb is not None:\n            if tb.tb_frame.f_code is f.__code__:\n                # In the function, it was called successfully.\n                return False\n\n            tb = tb.tb_next\n\n        # Didn't reach the function.\n        return True\n    finally:\n        # Delete tb to break a circular reference.\n        # https://docs.python.org/2/library/sys.html#sys.exc_info\n        del tb\n\n\ndef find_app_by_string(script_info, module, app_name):\n    \"\"\"Check if the given string is a variable name or a function. Call\n    a function to get the app instance, or return the variable directly.\n    \"\"\"\n    from . import Flask\n\n    # Parse app_name as a single expression to determine if it's a valid\n    # attribute name or function call.\n    try:\n        expr = ast.parse(app_name.strip(), mode=\"eval\").body\n    except SyntaxError:\n        raise NoAppException(\n            f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n        ) from None\n\n    if isinstance(expr, ast.Name):\n        name = expr.id\n        args = kwargs = None\n    elif isinstance(expr, ast.Call):\n        # Ensure the function name is an attribute name only.\n        if not isinstance(expr.func, ast.Name):\n            raise NoAppException(\n                f\"Function reference must be a simple name: {app_name!r}.\"\n            )\n\n        name = expr.func.id\n\n        # Parse the positional and keyword arguments as literals.\n        try:\n            args = [ast.literal_eval(arg) for arg in expr.args]\n            kwargs = {kw.arg: ast.literal_eval(kw.value) for kw in expr.keywords}\n        except ValueError:\n            # literal_eval gives cryptic error messages, show a generic\n            # message with the full expression instead.\n            raise NoAppException(\n                f\"Failed to parse arguments as literal values: {app_name!r}.\"\n            ) from None\n    else:\n        raise NoAppException(\n            f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n        )\n\n    try:\n        attr = getattr(module, name)\n    except AttributeError as e:\n        raise NoAppException(\n            f\"Failed to find attribute {name!r} in {module.__name__!r}.\"\n        ) from e\n\n    # If the attribute is a function, call it with any args and kwargs\n    # to get the real application.\n    if inspect.isfunction(attr):\n        try:\n            app = call_factory(script_info, attr, args, kwargs)\n        except TypeError as e:\n            if not _called_with_wrong_args(attr):\n                raise\n\n            raise NoAppException(\n                f\"The factory {app_name!r} in module\"\n                f\" {module.__name__!r} could not be called with the\"\n                \" specified arguments.\"\n            ) from e\n    else:\n        app = attr\n\n    if isinstance(app, Flask):\n        return app\n\n    raise NoAppException(\n        \"A valid Flask application was not obtained from\"\n        f\" '{module.__name__}:{app_name}'.\"\n    )\n\n\ndef prepare_import(path):\n    \"\"\"Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    \"\"\"\n    path = os.path.realpath(path)\n\n    fname, ext = os.path.splitext(path)\n    if ext == \".py\":\n        path = fname\n\n    if os.path.basename(path) == \"__init__\":\n        path = os.path.dirname(path)\n\n    module_name = []\n\n    # move up until outside package structure (no __init__.py)\n    while True:\n        path, name = os.path.split(path)\n        module_name.append(name)\n\n        if not os.path.exists(os.path.join(path, \"__init__.py\")):\n            break\n\n    if sys.path[0] != path:\n        sys.path.insert(0, path)\n\n    return \".\".join(module_name[::-1])\n\n\ndef locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n    __traceback_hide__ = True  # noqa: F841\n\n    try:\n        __import__(module_name)\n    except ImportError as e:\n        # Reraise the ImportError if it occurred within the imported module.\n        # Determine this by checking whether the trace has a depth > 1.\n        if sys.exc_info()[2].tb_next:\n            raise NoAppException(\n                f\"While importing {module_name!r}, an ImportError was raised.\"\n            ) from e\n        elif raise_if_not_found:\n            raise NoAppException(f\"Could not import {module_name!r}.\") from e\n        else:\n            return\n\n    module = sys.modules[module_name]\n\n    if app_name is None:\n        return find_best_app(script_info, module)\n    else:\n        return find_app_by_string(script_info, module, app_name)\n\n\ndef get_version(ctx, param, value):\n    if not value or ctx.resilient_parsing:\n        return\n\n    import werkzeug\n    from . import __version__\n\n    click.echo(\n        f\"Python {platform.python_version()}\\n\"\n        f\"Flask {__version__}\\n\"\n        f\"Werkzeug {werkzeug.__version__}\",\n        color=ctx.color,\n    )\n    ctx.exit()\n\n\nversion_option = click.Option(\n    [\"--version\"],\n    help=\"Show the flask version\",\n    expose_value=False,\n    callback=get_version,\n    is_flag=True,\n    is_eager=True,\n)\n\n\nclass DispatchingApp:\n    \"\"\"Special application that dispatches to a Flask application which\n    is imported by name in a background thread.  If an error happens\n    it is recorded and shown as part of the WSGI handling which in case\n    of the Werkzeug debugger means that it shows up in the browser.\n    \"\"\"\n\n    def __init__(self, loader, use_eager_loading=None):\n        self.loader = loader\n        self._app = None\n        self._lock = Lock()\n        self._bg_loading_exc = None\n\n        if use_eager_loading is None:\n            use_eager_loading = os.environ.get(\"WERKZEUG_RUN_MAIN\") != \"true\"\n\n        if use_eager_loading:\n            self._load_unlocked()\n        else:\n            self._load_in_background()\n\n    def _load_in_background(self):\n        def _load_app():\n            __traceback_hide__ = True  # noqa: F841\n            with self._lock:\n                try:\n                    self._load_unlocked()\n                except Exception as e:\n                    self._bg_loading_exc = e\n\n        t = Thread(target=_load_app, args=())\n        t.start()\n\n    def _flush_bg_loading_exception(self):\n        __traceback_hide__ = True  # noqa: F841\n        exc = self._bg_loading_exc\n\n        if exc is not None:\n            self._bg_loading_exc = None\n            raise exc\n\n    def _load_unlocked(self):\n        __traceback_hide__ = True  # noqa: F841\n        self._app = rv = self.loader()\n        self._bg_loading_exc = None\n        return rv\n\n    def __call__(self, environ, start_response):\n        __traceback_hide__ = True  # noqa: F841\n        if self._app is not None:\n            return self._app(environ, start_response)\n        self._flush_bg_loading_exception()\n        with self._lock:\n            if self._app is not None:\n                rv = self._app\n            else:\n                rv = self._load_unlocked()\n            return rv(environ, start_response)\n\n\nclass ScriptInfo:\n    \"\"\"Helper object to deal with Flask applications.  This is usually not\n    necessary to interface with as it's used internally in the dispatching\n    to click.  In future versions of Flask this object will most likely play\n    a bigger role.  Typically it's created automatically by the\n    :class:`FlaskGroup` but you can also manually create it and pass it\n    onwards as click object.\n    \"\"\"\n\n    def __init__(self, app_import_path=None, create_app=None, set_debug_flag=True):\n        #: Optionally the import path for the Flask application.\n        self.app_import_path = app_import_path or os.environ.get(\"FLASK_APP\")\n        #: Optionally a function that is passed the script info to create\n        #: the instance of the application.\n        self.create_app = create_app\n        #: A dictionary with arbitrary data that can be associated with\n        #: this script info.\n        self.data = {}\n        self.set_debug_flag = set_debug_flag\n        self._loaded_app = None\n\n    def load_app(self):\n        \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling\n        this multiple times will just result in the already loaded app to\n        be returned.\n        \"\"\"\n        __traceback_hide__ = True  # noqa: F841\n\n        if self._loaded_app is not None:\n            return self._loaded_app\n\n        if self.create_app is not None:\n            app = call_factory(self, self.create_app)\n        else:\n            if self.app_import_path:\n                path, name = (\n                    re.split(r\":(?![\\\\/])\", self.app_import_path, 1) + [None]\n                )[:2]\n                import_name = prepare_import(path)\n                app = locate_app(self, import_name, name)\n            else:\n                for path in (\"wsgi.py\", \"app.py\"):\n                    import_name = prepare_import(path)\n                    app = locate_app(self, import_name, None, raise_if_not_found=False)\n\n                    if app:\n                        break\n\n        if not app:\n            raise NoAppException(\n                \"Could not locate a Flask application. You did not provide \"\n                'the \"FLASK_APP\" environment variable, and a \"wsgi.py\" or '\n                '\"app.py\" module was not found in the current directory.'\n            )\n\n        if self.set_debug_flag:\n            # Update the app's debug flag through the descriptor so that\n            # other values repopulate as well.\n            app.debug = get_debug_flag()\n\n        self._loaded_app = app\n        return app\n\n\npass_script_info = click.make_pass_decorator(ScriptInfo, ensure=True)\n\n\ndef with_appcontext(f):\n    \"\"\"Wraps a callback so that it's guaranteed to be executed with the\n    script's application context.  If callbacks are registered directly\n    to the ``app.cli`` object then they are wrapped with this function\n    by default unless it's disabled.\n    \"\"\"\n\n    @click.pass_context\n    def decorator(__ctx, *args, **kwargs):\n        with __ctx.ensure_object(ScriptInfo).load_app().app_context():\n            return __ctx.invoke(f, *args, **kwargs)\n\n    return update_wrapper(decorator, f)\n\n\nclass AppGroup(click.Group):\n    \"\"\"This works similar to a regular click :class:`~click.Group` but it\n    changes the behavior of the :meth:`command` decorator so that it\n    automatically wraps the functions in :func:`with_appcontext`.\n\n    Not to be confused with :class:`FlaskGroup`.\n    \"\"\"\n\n    def command(self, *args, **kwargs):\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n        unless it's disabled by passing ``with_appcontext=False``.\n        \"\"\"\n        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)\n\n        def decorator(f):\n            if wrap_for_ctx:\n                f = with_appcontext(f)\n            return click.Group.command(self, *args, **kwargs)(f)\n\n        return decorator\n\n    def group(self, *args, **kwargs):\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it defaults the group class to\n        :class:`AppGroup`.\n        \"\"\"\n        kwargs.setdefault(\"cls\", AppGroup)\n        return click.Group.group(self, *args, **kwargs)\n\n\nclass FlaskGroup(AppGroup):\n    \"\"\"Special subclass of the :class:`AppGroup` group that supports\n    loading more commands from the configured Flask app.  Normally a\n    developer does not have to interface with this class but there are\n    some very advanced use cases for which it makes sense to create an\n    instance of this. see :ref:`custom-scripts`.\n\n    :param add_default_commands: if this is True then the default run and\n        shell commands will be added.\n    :param add_version_option: adds the ``--version`` option.\n    :param create_app: an optional callback that is passed the script info and\n        returns the loaded app.\n    :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n        files to set environment variables. Will also change the working\n        directory to the directory containing the first file found.\n    :param set_debug_flag: Set the app's debug flag based on the active\n        environment\n\n    .. versionchanged:: 1.0\n        If installed, python-dotenv will be used to load environment variables\n        from :file:`.env` and :file:`.flaskenv` files.\n    \"\"\"\n\n    def __init__(\n        self,\n        add_default_commands=True,\n        create_app=None,\n        add_version_option=True,\n        load_dotenv=True,\n        set_debug_flag=True,\n        **extra,\n    ):\n        params = list(extra.pop(\"params\", None) or ())\n\n        if add_version_option:\n            params.append(version_option)\n\n        AppGroup.__init__(self, params=params, **extra)\n        self.create_app = create_app\n        self.load_dotenv = load_dotenv\n        self.set_debug_flag = set_debug_flag\n\n        if add_default_commands:\n            self.add_command(run_command)\n            self.add_command(shell_command)\n            self.add_command(routes_command)\n\n        self._loaded_plugin_commands = False\n\n    def _load_plugin_commands(self):\n        if self._loaded_plugin_commands:\n            return\n        try:\n            import pkg_resources\n        except ImportError:\n            self._loaded_plugin_commands = True\n            return\n\n        for ep in pkg_resources.iter_entry_points(\"flask.commands\"):\n            self.add_command(ep.load(), ep.name)\n        self._loaded_plugin_commands = True\n\n    def get_command(self, ctx, name):\n        self._load_plugin_commands()\n        # Look up built-in and plugin commands, which should be\n        # available even if the app fails to load.\n        rv = super().get_command(ctx, name)\n\n        if rv is not None:\n            return rv\n\n        info = ctx.ensure_object(ScriptInfo)\n\n        # Look up commands provided by the app, showing an error and\n        # continuing if the app couldn't be loaded.\n        try:\n            return info.load_app().cli.get_command(ctx, name)\n        except NoAppException as e:\n            click.secho(f\"Error: {e.format_message()}\\n\", err=True, fg=\"red\")\n\n    def list_commands(self, ctx):\n        self._load_plugin_commands()\n        # Start with the built-in and plugin commands.\n        rv = set(super().list_commands(ctx))\n        info = ctx.ensure_object(ScriptInfo)\n\n        # Add commands provided by the app, showing an error and\n        # continuing if the app couldn't be loaded.\n        try:\n            rv.update(info.load_app().cli.list_commands(ctx))\n        except NoAppException as e:\n            # When an app couldn't be loaded, show the error message\n            # without the traceback.\n            click.secho(f\"Error: {e.format_message()}\\n\", err=True, fg=\"red\")\n        except Exception:\n            # When any other errors occurred during loading, show the\n            # full traceback.\n            click.secho(f\"{traceback.format_exc()}\\n\", err=True, fg=\"red\")\n\n        return sorted(rv)\n\n    def main(self, *args, **kwargs):\n        # Set a global flag that indicates that we were invoked from the\n        # command line interface. This is detected by Flask.run to make the\n        # call into a no-op. This is necessary to avoid ugly errors when the\n        # script that is loaded here also attempts to start a server.\n        os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"\n\n        if get_load_dotenv(self.load_dotenv):\n            load_dotenv()\n\n        obj = kwargs.get(\"obj\")\n\n        if obj is None:\n            obj = ScriptInfo(\n                create_app=self.create_app, set_debug_flag=self.set_debug_flag\n            )\n\n        kwargs[\"obj\"] = obj\n        kwargs.setdefault(\"auto_envvar_prefix\", \"FLASK\")\n        return super().main(*args, **kwargs)\n\n\ndef _path_is_ancestor(path, other):\n    \"\"\"Take ``other`` and remove the length of ``path`` from it. Then join it\n    to ``path``. If it is the original value, ``path`` is an ancestor of\n    ``other``.\"\"\"\n    return os.path.join(path, other[len(path) :].lstrip(os.sep)) == other\n\n\ndef load_dotenv(path=None):\n    \"\"\"Load \"dotenv\" files in order of precedence to set environment variables.\n\n    If an env var is already set it is not overwritten, so earlier files in the\n    list are preferred over later files.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location instead of searching.\n    :return: ``True`` if a file was loaded.\n\n    .. versionchanged:: 1.1.0\n        Returns ``False`` when python-dotenv is not installed, or when\n        the given path isn't a file.\n\n    .. versionchanged:: 2.0\n        When loading the env files, set the default encoding to UTF-8.\n\n    .. versionadded:: 1.0\n    \"\"\"\n    if dotenv is None:\n        if path or os.path.isfile(\".env\") or os.path.isfile(\".flaskenv\"):\n            click.secho(\n                \" * Tip: There are .env or .flaskenv files present.\"\n                ' Do \"pip install python-dotenv\" to use them.',\n                fg=\"yellow\",\n                err=True,\n            )\n\n        return False\n\n    # if the given path specifies the actual file then return True,\n    # else False\n    if path is not None:\n        if os.path.isfile(path):\n            return dotenv.load_dotenv(path, encoding=\"utf-8\")\n\n        return False\n\n    new_dir = None\n\n    for name in (\".env\", \".flaskenv\"):\n        path = dotenv.find_dotenv(name, usecwd=True)\n\n        if not path:\n            continue\n\n        if new_dir is None:\n            new_dir = os.path.dirname(path)\n\n        dotenv.load_dotenv(path, encoding=\"utf-8\")\n\n    return new_dir is not None  # at least one file was located and loaded\n\n\ndef show_server_banner(env, debug, app_import_path, eager_loading):\n    \"\"\"Show extra startup messages the first time the server is run,\n    ignoring the reloader.\n    \"\"\"\n    if os.environ.get(\"WERKZEUG_RUN_MAIN\") == \"true\":\n        return\n\n    if app_import_path is not None:\n        message = f\" * Serving Flask app {app_import_path!r}\"\n\n        if not eager_loading:\n            message += \" (lazy loading)\"\n\n        click.echo(message)\n\n    click.echo(f\" * Environment: {env}\")\n\n    if env == \"production\":\n        click.secho(\n            \"   WARNING: This is a development server. Do not use it in\"\n            \" a production deployment.\",\n            fg=\"red\",\n        )\n        click.secho(\"   Use a production WSGI server instead.\", dim=True)\n\n    if debug is not None:\n        click.echo(f\" * Debug mode: {'on' if debug else 'off'}\")\n\n\nclass CertParamType(click.ParamType):\n    \"\"\"Click option type for the ``--cert`` option. Allows either an\n    existing file, the string ``'adhoc'``, or an import for a\n    :class:`~ssl.SSLContext` object.\n    \"\"\"\n\n    name = \"path\"\n\n    def __init__(self):\n        self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)\n\n    def convert(self, value, param, ctx):\n        if ssl is None:\n            raise click.BadParameter(\n                'Using \"--cert\" requires Python to be compiled with SSL support.',\n                ctx,\n                param,\n            )\n\n        try:\n            return self.path_type(value, param, ctx)\n        except click.BadParameter:\n            value = click.STRING(value, param, ctx).lower()\n\n            if value == \"adhoc\":\n                try:\n                    import cryptography  # noqa: F401\n                except ImportError:\n                    raise click.BadParameter(\n                        \"Using ad-hoc certificates requires the cryptography library.\",\n                        ctx,\n                        param,\n                    ) from None\n\n                return value\n\n            obj = import_string(value, silent=True)\n\n            if isinstance(obj, ssl.SSLContext):\n                return obj\n\n            raise\n\n\ndef _validate_key(ctx, param, value):\n    \"\"\"The ``--key`` option must be specified when ``--cert`` is a file.\n    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.\n    \"\"\"\n    cert = ctx.params.get(\"cert\")\n    is_adhoc = cert == \"adhoc\"\n    is_context = ssl and isinstance(cert, ssl.SSLContext)\n\n    if value is not None:\n        if is_adhoc:\n            raise click.BadParameter(\n                'When \"--cert\" is \"adhoc\", \"--key\" is not used.', ctx, param\n            )\n\n        if is_context:\n            raise click.BadParameter(\n                'When \"--cert\" is an SSLContext object, \"--key is not used.', ctx, param\n            )\n\n        if not cert:\n            raise click.BadParameter('\"--cert\" must also be specified.', ctx, param)\n\n        ctx.params[\"cert\"] = cert, value\n\n    else:\n        if cert and not (is_adhoc or is_context):\n            raise click.BadParameter('Required when using \"--cert\".', ctx, param)\n\n    return value\n\n\nclass SeparatedPathType(click.Path):\n    \"\"\"Click option type that accepts a list of values separated by the\n    OS's path separator (``:``, ``;`` on Windows). Each value is\n    validated as a :class:`click.Path` type.\n    \"\"\"\n\n    def convert(self, value, param, ctx):\n        items = self.split_envvar_value(value)\n        super_convert = super().convert\n        return [super_convert(item, param, ctx) for item in items]\n\n\n@click.command(\"run\", short_help=\"Run a development server.\")\n@click.option(\"--host\", \"-h\", default=\"127.0.0.1\", help=\"The interface to bind to.\")\n@click.option(\"--port\", \"-p\", default=5000, help=\"The port to bind to.\")\n@click.option(\n    \"--cert\", type=CertParamType(), help=\"Specify a certificate file to use HTTPS.\"\n)\n@click.option(\n    \"--key\",\n    type=click.Path(exists=True, dir_okay=False, resolve_path=True),\n    callback=_validate_key,\n    expose_value=False,\n    help=\"The key file to use when specifying a certificate.\",\n)\n@click.option(\n    \"--reload/--no-reload\",\n    default=None,\n    help=\"Enable or disable the reloader. By default the reloader \"\n    \"is active if debug is enabled.\",\n)\n@click.option(\n    \"--debugger/--no-debugger\",\n    default=None,\n    help=\"Enable or disable the debugger. By default the debugger \"\n    \"is active if debug is enabled.\",\n)\n@click.option(\n    \"--eager-loading/--lazy-loading\",\n    default=None,\n    help=\"Enable or disable eager loading. By default eager \"\n    \"loading is enabled if the reloader is disabled.\",\n)\n@click.option(\n    \"--with-threads/--without-threads\",\n    default=True,\n    help=\"Enable or disable multithreading.\",\n)\n@click.option(\n    \"--extra-files\",\n    default=None,\n    type=SeparatedPathType(),\n    help=(\n        \"Extra files that trigger a reload on change. Multiple paths\"\n        f\" are separated by {os.path.pathsep!r}.\"\n    ),\n)\n@pass_script_info\ndef run_command(\n    info, host, port, reload, debugger, eager_loading, with_threads, cert, extra_files\n):\n    \"\"\"Run a local development server.\n\n    This server is for development purposes only. It does not provide\n    the stability, security, or performance of production WSGI servers.\n\n    The reloader and debugger are enabled by default if\n    FLASK_ENV=development or FLASK_DEBUG=1.\n    \"\"\"\n    debug = get_debug_flag()\n\n    if reload is None:\n        reload = debug\n\n    if debugger is None:\n        debugger = debug\n\n    show_server_banner(get_env(), debug, info.app_import_path, eager_loading)\n    app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)\n\n    from werkzeug.serving import run_simple\n\n    run_simple(\n        host,\n        port,\n        app,\n        use_reloader=reload,\n        use_debugger=debugger,\n        threaded=with_threads,\n        ssl_context=cert,\n        extra_files=extra_files,\n    )\n\n\n@click.command(\"shell\", short_help=\"Run a shell in the app context.\")\n@with_appcontext\ndef shell_command() -> None:\n    \"\"\"Run an interactive Python shell in the context of a given\n    Flask application.  The application will populate the default\n    namespace of this shell according to its configuration.\n\n    This is useful for executing small snippets of management code\n    without having to manually configure the application.\n    \"\"\"\n    import code\n    from .globals import _app_ctx_stack\n\n    app = _app_ctx_stack.top.app\n    banner = (\n        f\"Python {sys.version} on {sys.platform}\\n\"\n        f\"App: {app.import_name} [{app.env}]\\n\"\n        f\"Instance: {app.instance_path}\"\n    )\n    ctx: dict = {}\n\n    # Support the regular Python interpreter startup script if someone\n    # is using it.\n    startup = os.environ.get(\"PYTHONSTARTUP\")\n    if startup and os.path.isfile(startup):\n        with open(startup) as f:\n            eval(compile(f.read(), startup, \"exec\"), ctx)\n\n    ctx.update(app.make_shell_context())\n\n    # Site, customize, or startup script can set a hook to call when\n    # entering interactive mode. The default one sets up readline with\n    # tab and history completion.\n    interactive_hook = getattr(sys, \"__interactivehook__\", None)\n\n    if interactive_hook is not None:\n        try:\n            import readline\n            from rlcompleter import Completer\n        except ImportError:\n            pass\n        else:\n            # rlcompleter uses __main__.__dict__ by default, which is\n            # flask.__main__. Use the shell context instead.\n            readline.set_completer(Completer(ctx).complete)\n\n        interactive_hook()\n\n    code.interact(banner=banner, local=ctx)\n\n\n@click.command(\"routes\", short_help=\"Show the routes for the app.\")\n@click.option(\n    \"--sort\",\n    \"-s\",\n    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),\n    default=\"endpoint\",\n    help=(\n        'Method to sort routes by. \"match\" is the order that Flask will match '\n        \"routes when dispatching a request.\"\n    ),\n)\n@click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n@with_appcontext\ndef routes_command(sort: str, all_methods: bool) -> None:\n    \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n\n    rules = list(current_app.url_map.iter_rules())\n    if not rules:\n        click.echo(\"No routes were registered.\")\n        return\n\n    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n\n    if sort in (\"endpoint\", \"rule\"):\n        rules = sorted(rules, key=attrgetter(sort))\n    elif sort == \"methods\":\n        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n\n    rule_methods = [\n        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n        for rule in rules\n    ]\n\n    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n    widths = (\n        max(len(rule.endpoint) for rule in rules),\n        max(len(methods) for methods in rule_methods),\n        max(len(rule.rule) for rule in rules),\n    )\n    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n\n    click.echo(row.format(*headers).strip())\n    click.echo(row.format(*(\"-\" * width for width in widths)))\n\n    for rule, methods in zip(rules, rule_methods):\n        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n\n\ncli = FlaskGroup(\n    help=\"\"\"\\\nA general utility script for Flask applications.\n\nProvides commands from Flask, extensions, and the application. Loads the\napplication defined in the FLASK_APP environment variable, or from a wsgi.py\nfile. Setting the FLASK_ENV environment variable to 'development' will enable\ndebug mode.\n\n\\b\n  {prefix}{cmd} FLASK_APP=hello.py\n  {prefix}{cmd} FLASK_ENV=development\n  {prefix}flask run\n\"\"\".format(\n        cmd=\"export\" if os.name == \"posix\" else \"set\",\n        prefix=\"$ \" if os.name == \"posix\" else \"> \",\n    )\n)\n\n\ndef main() -> None:\n    if int(click.__version__[0]) < 8:\n        warnings.warn(\n            \"Using the `flask` cli with Click 7 is deprecated and\"\n            \" will not be supported starting with Flask 2.1.\"\n            \" Please upgrade to Click 8 as soon as possible.\",\n            DeprecationWarning,\n        )\n    # TODO omit sys.argv once https://github.com/pallets/click/issues/536 is fixed\n    cli.main(args=sys.argv[1:])\n\n\nif __name__ == \"__main__\":\n    main()\n", 998], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/templating.py": ["import typing as t\n\nfrom jinja2 import BaseLoader\nfrom jinja2 import Environment as BaseEnvironment\nfrom jinja2 import Template\nfrom jinja2 import TemplateNotFound\n\nfrom .globals import _app_ctx_stack\nfrom .globals import _request_ctx_stack\nfrom .signals import before_render_template\nfrom .signals import template_rendered\n\nif t.TYPE_CHECKING:\n    from .app import Flask\n    from .scaffold import Scaffold\n\n\ndef _default_template_ctx_processor() -> t.Dict[str, t.Any]:\n    \"\"\"Default template context processor.  Injects `request`,\n    `session` and `g`.\n    \"\"\"\n    reqctx = _request_ctx_stack.top\n    appctx = _app_ctx_stack.top\n    rv = {}\n    if appctx is not None:\n        rv[\"g\"] = appctx.g\n    if reqctx is not None:\n        rv[\"request\"] = reqctx.request\n        rv[\"session\"] = reqctx.session\n    return rv\n\n\nclass Environment(BaseEnvironment):\n    \"\"\"Works like a regular Jinja2 environment but has some additional\n    knowledge of how Flask's blueprint works so that it can prepend the\n    name of the blueprint to referenced templates if necessary.\n    \"\"\"\n\n    def __init__(self, app: \"Flask\", **options: t.Any) -> None:\n        if \"loader\" not in options:\n            options[\"loader\"] = app.create_global_jinja_loader()\n        BaseEnvironment.__init__(self, **options)\n        self.app = app\n\n\nclass DispatchingJinjaLoader(BaseLoader):\n    \"\"\"A loader that looks for templates in the application and all\n    the blueprint folders.\n    \"\"\"\n\n    def __init__(self, app: \"Flask\") -> None:\n        self.app = app\n\n    def get_source(  # type: ignore\n        self, environment: Environment, template: str\n    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:\n        if self.app.config[\"EXPLAIN_TEMPLATE_LOADING\"]:\n            return self._get_source_explained(environment, template)\n        return self._get_source_fast(environment, template)\n\n    def _get_source_explained(\n        self, environment: Environment, template: str\n    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:\n        attempts = []\n        rv: t.Optional[t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]]\n        trv: t.Optional[\n            t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]\n        ] = None\n\n        for srcobj, loader in self._iter_loaders(template):\n            try:\n                rv = loader.get_source(environment, template)\n                if trv is None:\n                    trv = rv\n            except TemplateNotFound:\n                rv = None\n            attempts.append((loader, srcobj, rv))\n\n        from .debughelpers import explain_template_loading_attempts\n\n        explain_template_loading_attempts(self.app, template, attempts)\n\n        if trv is not None:\n            return trv\n        raise TemplateNotFound(template)\n\n    def _get_source_fast(\n        self, environment: Environment, template: str\n    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:\n        for _srcobj, loader in self._iter_loaders(template):\n            try:\n                return loader.get_source(environment, template)\n            except TemplateNotFound:\n                continue\n        raise TemplateNotFound(template)\n\n    def _iter_loaders(\n        self, template: str\n    ) -> t.Generator[t.Tuple[\"Scaffold\", BaseLoader], None, None]:\n        loader = self.app.jinja_loader\n        if loader is not None:\n            yield self.app, loader\n\n        for blueprint in self.app.iter_blueprints():\n            loader = blueprint.jinja_loader\n            if loader is not None:\n                yield blueprint, loader\n\n    def list_templates(self) -> t.List[str]:\n        result = set()\n        loader = self.app.jinja_loader\n        if loader is not None:\n            result.update(loader.list_templates())\n\n        for blueprint in self.app.iter_blueprints():\n            loader = blueprint.jinja_loader\n            if loader is not None:\n                for template in loader.list_templates():\n                    result.add(template)\n\n        return list(result)\n\n\ndef _render(template: Template, context: dict, app: \"Flask\") -> str:\n    \"\"\"Renders the template and fires the signal\"\"\"\n\n    before_render_template.send(app, template=template, context=context)\n    rv = template.render(context)\n    template_rendered.send(app, template=template, context=context)\n    return rv\n\n\ndef render_template(\n    template_name_or_list: t.Union[str, t.List[str]], **context: t.Any\n) -> str:\n    \"\"\"Renders a template from the template folder with the given\n    context.\n\n    :param template_name_or_list: the name of the template to be\n                                  rendered, or an iterable with template names\n                                  the first one existing will be rendered\n    :param context: the variables that should be available in the\n                    context of the template.\n    \"\"\"\n    ctx = _app_ctx_stack.top\n    ctx.app.update_template_context(context)\n    return _render(\n        ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n        context,\n        ctx.app,\n    )\n\n\ndef render_template_string(source: str, **context: t.Any) -> str:\n    \"\"\"Renders a template from the given template source string\n    with the given context. Template variables will be autoescaped.\n\n    :param source: the source code of the template to be\n                   rendered\n    :param context: the variables that should be available in the\n                    context of the template.\n    \"\"\"\n    ctx = _app_ctx_stack.top\n    ctx.app.update_template_context(context)\n    return _render(ctx.app.jinja_env.from_string(source), context, ctx.app)\n", 165], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/utils.py": ["import enum\nimport json\nimport os\nimport re\nimport typing as t\nimport warnings\nfrom collections import abc\nfrom collections import deque\nfrom random import choice\nfrom random import randrange\nfrom threading import Lock\nfrom types import CodeType\nfrom urllib.parse import quote_from_bytes\n\nimport markupsafe\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te\n\nF = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])\n\n# special singleton representing missing values for the runtime\nmissing: t.Any = type(\"MissingType\", (), {\"__repr__\": lambda x: \"missing\"})()\n\ninternal_code: t.MutableSet[CodeType] = set()\n\nconcat = \"\".join\n\n\ndef pass_context(f: F) -> F:\n    \"\"\"Pass the :class:`~jinja2.runtime.Context` as the first argument\n    to the decorated function when called while rendering a template.\n\n    Can be used on functions, filters, and tests.\n\n    If only ``Context.eval_context`` is needed, use\n    :func:`pass_eval_context`. If only ``Context.environment`` is\n    needed, use :func:`pass_environment`.\n\n    .. versionadded:: 3.0.0\n        Replaces ``contextfunction`` and ``contextfilter``.\n    \"\"\"\n    f.jinja_pass_arg = _PassArg.context  # type: ignore\n    return f\n\n\ndef pass_eval_context(f: F) -> F:\n    \"\"\"Pass the :class:`~jinja2.nodes.EvalContext` as the first argument\n    to the decorated function when called while rendering a template.\n    See :ref:`eval-context`.\n\n    Can be used on functions, filters, and tests.\n\n    If only ``EvalContext.environment`` is needed, use\n    :func:`pass_environment`.\n\n    .. versionadded:: 3.0.0\n        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.\n    \"\"\"\n    f.jinja_pass_arg = _PassArg.eval_context  # type: ignore\n    return f\n\n\ndef pass_environment(f: F) -> F:\n    \"\"\"Pass the :class:`~jinja2.Environment` as the first argument to\n    the decorated function when called while rendering a template.\n\n    Can be used on functions, filters, and tests.\n\n    .. versionadded:: 3.0.0\n        Replaces ``environmentfunction`` and ``environmentfilter``.\n    \"\"\"\n    f.jinja_pass_arg = _PassArg.environment  # type: ignore\n    return f\n\n\nclass _PassArg(enum.Enum):\n    context = enum.auto()\n    eval_context = enum.auto()\n    environment = enum.auto()\n\n    @classmethod\n    def from_obj(cls, obj: F) -> t.Optional[\"_PassArg\"]:\n        if hasattr(obj, \"jinja_pass_arg\"):\n            return obj.jinja_pass_arg  # type: ignore\n\n        for prefix in \"context\", \"eval_context\", \"environment\":\n            squashed = prefix.replace(\"_\", \"\")\n\n            for name in f\"{squashed}function\", f\"{squashed}filter\":\n                if getattr(obj, name, False) is True:\n                    warnings.warn(\n                        f\"{name!r} is deprecated and will stop working\"\n                        f\" in Jinja 3.1. Use 'pass_{prefix}' instead.\",\n                        DeprecationWarning,\n                        stacklevel=2,\n                    )\n                    return cls[prefix]\n\n        return None\n\n\ndef contextfunction(f: F) -> F:\n    \"\"\"Pass the context as the first argument to the decorated function.\n\n    .. deprecated:: 3.0\n        Will be removed in Jinja 3.1. Use :func:`~jinja2.pass_context`\n        instead.\n    \"\"\"\n    warnings.warn(\n        \"'contextfunction' is renamed to 'pass_context', the old name\"\n        \" will be removed in Jinja 3.1.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return pass_context(f)\n\n\ndef evalcontextfunction(f: F) -> F:\n    \"\"\"Pass the eval context as the first argument to the decorated\n    function.\n\n    .. deprecated:: 3.0\n        Will be removed in Jinja 3.1. Use\n        :func:`~jinja2.pass_eval_context` instead.\n\n    .. versionadded:: 2.4\n    \"\"\"\n    warnings.warn(\n        \"'evalcontextfunction' is renamed to 'pass_eval_context', the\"\n        \" old name will be removed in Jinja 3.1.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return pass_eval_context(f)\n\n\ndef environmentfunction(f: F) -> F:\n    \"\"\"Pass the environment as the first argument to the decorated\n    function.\n\n    .. deprecated:: 3.0\n        Will be removed in Jinja 3.1. Use\n        :func:`~jinja2.pass_environment` instead.\n    \"\"\"\n    warnings.warn(\n        \"'environmentfunction' is renamed to 'pass_environment', the\"\n        \" old name will be removed in Jinja 3.1.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return pass_environment(f)\n\n\ndef internalcode(f: F) -> F:\n    \"\"\"Marks the function as internally used\"\"\"\n    internal_code.add(f.__code__)\n    return f\n\n\ndef is_undefined(obj: t.Any) -> bool:\n    \"\"\"Check if the object passed is undefined.  This does nothing more than\n    performing an instance check against :class:`Undefined` but looks nicer.\n    This can be used for custom filters or tests that want to react to\n    undefined variables.  For example a custom default filter can look like\n    this::\n\n        def default(var, default=''):\n            if is_undefined(var):\n                return default\n            return var\n    \"\"\"\n    from .runtime import Undefined\n\n    return isinstance(obj, Undefined)\n\n\ndef consume(iterable: t.Iterable[t.Any]) -> None:\n    \"\"\"Consumes an iterable without doing anything with it.\"\"\"\n    for _ in iterable:\n        pass\n\n\ndef clear_caches() -> None:\n    \"\"\"Jinja keeps internal caches for environments and lexers.  These are\n    used so that Jinja doesn't have to recreate environments and lexers all\n    the time.  Normally you don't have to care about that but if you are\n    measuring memory consumption you may want to clean the caches.\n    \"\"\"\n    from .environment import get_spontaneous_environment\n    from .lexer import _lexer_cache\n\n    get_spontaneous_environment.cache_clear()\n    _lexer_cache.clear()\n\n\ndef import_string(import_name: str, silent: bool = False) -> t.Any:\n    \"\"\"Imports an object based on a string.  This is useful if you want to\n    use import paths as endpoints or something similar.  An import path can\n    be specified either in dotted notation (``xml.sax.saxutils.escape``)\n    or with a colon as object delimiter (``xml.sax.saxutils:escape``).\n\n    If the `silent` is True the return value will be `None` if the import\n    fails.\n\n    :return: imported object\n    \"\"\"\n    try:\n        if \":\" in import_name:\n            module, obj = import_name.split(\":\", 1)\n        elif \".\" in import_name:\n            module, _, obj = import_name.rpartition(\".\")\n        else:\n            return __import__(import_name)\n        return getattr(__import__(module, None, None, [obj]), obj)\n    except (ImportError, AttributeError):\n        if not silent:\n            raise\n\n\ndef open_if_exists(filename: str, mode: str = \"rb\") -> t.Optional[t.IO]:\n    \"\"\"Returns a file descriptor for the filename if that file exists,\n    otherwise ``None``.\n    \"\"\"\n    if not os.path.isfile(filename):\n        return None\n\n    return open(filename, mode)\n\n\ndef object_type_repr(obj: t.Any) -> str:\n    \"\"\"Returns the name of the object's type.  For some recognized\n    singletons the name of the object is returned instead. (For\n    example for `None` and `Ellipsis`).\n    \"\"\"\n    if obj is None:\n        return \"None\"\n    elif obj is Ellipsis:\n        return \"Ellipsis\"\n\n    cls = type(obj)\n\n    if cls.__module__ == \"builtins\":\n        return f\"{cls.__name__} object\"\n\n    return f\"{cls.__module__}.{cls.__name__} object\"\n\n\ndef pformat(obj: t.Any) -> str:\n    \"\"\"Format an object using :func:`pprint.pformat`.\"\"\"\n    from pprint import pformat  # type: ignore\n\n    return pformat(obj)\n\n\n_http_re = re.compile(\n    r\"\"\"\n    ^\n    (\n        (https?://|www\\.)  # scheme or www\n        (([\\w%-]+\\.)+)?  # subdomain\n        (\n            [a-z]{2,63}  # basic tld\n        |\n            xn--[\\w%]{2,59}  # idna tld\n        )\n    |\n        ([\\w%-]{2,63}\\.)+  # basic domain\n        (com|net|int|edu|gov|org|info|mil)  # basic tld\n    |\n        (https?://)  # scheme\n        (\n            (([\\d]{1,3})(\\.[\\d]{1,3}){3})  # IPv4\n        |\n            (\\[([\\da-f]{0,4}:){2}([\\da-f]{0,4}:?){1,6}])  # IPv6\n        )\n    )\n    (?::[\\d]{1,5})?  # port\n    (?:[/?#]\\S*)?  # path, query, and fragment\n    $\n    \"\"\",\n    re.IGNORECASE | re.VERBOSE,\n)\n_email_re = re.compile(r\"^\\S+@\\w[\\w.-]*\\.\\w+$\")\n\n\ndef urlize(\n    text: str,\n    trim_url_limit: t.Optional[int] = None,\n    rel: t.Optional[str] = None,\n    target: t.Optional[str] = None,\n    extra_schemes: t.Optional[t.Iterable[str]] = None,\n) -> str:\n    \"\"\"Convert URLs in text into clickable links.\n\n    This may not recognize links in some situations. Usually, a more\n    comprehensive formatter, such as a Markdown library, is a better\n    choice.\n\n    Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param text: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior.\n\n    .. versionchanged:: 3.0\n        The ``extra_schemes`` parameter was added.\n\n    .. versionchanged:: 3.0\n        Generate ``https://`` links for URLs without a scheme.\n\n    .. versionchanged:: 3.0\n        The parsing rules were updated. Recognize email addresses with\n        or without the ``mailto:`` scheme. Validate IP addresses. Ignore\n        parentheses and brackets in more cases.\n    \"\"\"\n    if trim_url_limit is not None:\n\n        def trim_url(x: str) -> str:\n            if len(x) > trim_url_limit:  # type: ignore\n                return f\"{x[:trim_url_limit]}...\"\n\n            return x\n\n    else:\n\n        def trim_url(x: str) -> str:\n            return x\n\n    words = re.split(r\"(\\s+)\", str(markupsafe.escape(text)))\n    rel_attr = f' rel=\"{markupsafe.escape(rel)}\"' if rel else \"\"\n    target_attr = f' target=\"{markupsafe.escape(target)}\"' if target else \"\"\n\n    for i, word in enumerate(words):\n        head, middle, tail = \"\", word, \"\"\n        match = re.match(r\"^([(<]|&lt;)+\", middle)\n\n        if match:\n            head = match.group()\n            middle = middle[match.end() :]\n\n        # Unlike lead, which is anchored to the start of the string,\n        # need to check that the string ends with any of the characters\n        # before trying to match all of them, to avoid backtracking.\n        if middle.endswith((\")\", \">\", \".\", \",\", \"\\n\", \"&gt;\")):\n            match = re.search(r\"([)>.,\\n]|&gt;)+$\", middle)\n\n            if match:\n                tail = match.group()\n                middle = middle[: match.start()]\n\n        # Prefer balancing parentheses in URLs instead of ignoring a\n        # trailing character.\n        for start_char, end_char in (\"(\", \")\"), (\"<\", \">\"), (\"&lt;\", \"&gt;\"):\n            start_count = middle.count(start_char)\n\n            if start_count <= middle.count(end_char):\n                # Balanced, or lighter on the left\n                continue\n\n            # Move as many as possible from the tail to balance\n            for _ in range(min(start_count, tail.count(end_char))):\n                end_index = tail.index(end_char) + len(end_char)\n                # Move anything in the tail before the end char too\n                middle += tail[:end_index]\n                tail = tail[end_index:]\n\n        if _http_re.match(middle):\n            if middle.startswith(\"https://\") or middle.startswith(\"http://\"):\n                middle = (\n                    f'<a href=\"{middle}\"{rel_attr}{target_attr}>{trim_url(middle)}</a>'\n                )\n            else:\n                middle = (\n                    f'<a href=\"https://{middle}\"{rel_attr}{target_attr}>'\n                    f\"{trim_url(middle)}</a>\"\n                )\n\n        elif middle.startswith(\"mailto:\") and _email_re.match(middle[7:]):\n            middle = f'<a href=\"{middle}\">{middle[7:]}</a>'\n\n        elif (\n            \"@\" in middle\n            and not middle.startswith(\"www.\")\n            and \":\" not in middle\n            and _email_re.match(middle)\n        ):\n            middle = f'<a href=\"mailto:{middle}\">{middle}</a>'\n\n        elif extra_schemes is not None:\n            for scheme in extra_schemes:\n                if middle != scheme and middle.startswith(scheme):\n                    middle = f'<a href=\"{middle}\"{rel_attr}{target_attr}>{middle}</a>'\n\n        words[i] = f\"{head}{middle}{tail}\"\n\n    return \"\".join(words)\n\n\ndef generate_lorem_ipsum(\n    n: int = 5, html: bool = True, min: int = 20, max: int = 100\n) -> str:\n    \"\"\"Generate some lorem ipsum for the template.\"\"\"\n    from .constants import LOREM_IPSUM_WORDS\n\n    words = LOREM_IPSUM_WORDS.split()\n    result = []\n\n    for _ in range(n):\n        next_capitalized = True\n        last_comma = last_fullstop = 0\n        word = None\n        last = None\n        p = []\n\n        # each paragraph contains out of 20 to 100 words.\n        for idx, _ in enumerate(range(randrange(min, max))):\n            while True:\n                word = choice(words)\n                if word != last:\n                    last = word\n                    break\n            if next_capitalized:\n                word = word.capitalize()\n                next_capitalized = False\n            # add commas\n            if idx - randrange(3, 8) > last_comma:\n                last_comma = idx\n                last_fullstop += 2\n                word += \",\"\n            # add end of sentences\n            if idx - randrange(10, 20) > last_fullstop:\n                last_comma = last_fullstop = idx\n                word += \".\"\n                next_capitalized = True\n            p.append(word)\n\n        # ensure that the paragraph ends with a dot.\n        p_str = \" \".join(p)\n\n        if p_str.endswith(\",\"):\n            p_str = p_str[:-1] + \".\"\n        elif not p_str.endswith(\".\"):\n            p_str += \".\"\n\n        result.append(p_str)\n\n    if not html:\n        return \"\\n\\n\".join(result)\n    return markupsafe.Markup(\n        \"\\n\".join(f\"<p>{markupsafe.escape(x)}</p>\" for x in result)\n    )\n\n\ndef url_quote(obj: t.Any, charset: str = \"utf-8\", for_qs: bool = False) -> str:\n    \"\"\"Quote a string for use in a URL using the given charset.\n\n    :param obj: String or bytes to quote. Other types are converted to\n        string then encoded to bytes using the given charset.\n    :param charset: Encode text to bytes using this charset.\n    :param for_qs: Quote \"/\" and use \"+\" for spaces.\n    \"\"\"\n    if not isinstance(obj, bytes):\n        if not isinstance(obj, str):\n            obj = str(obj)\n\n        obj = obj.encode(charset)\n\n    safe = b\"\" if for_qs else b\"/\"\n    rv = quote_from_bytes(obj, safe)\n\n    if for_qs:\n        rv = rv.replace(\"%20\", \"+\")\n\n    return rv\n\n\ndef unicode_urlencode(obj: t.Any, charset: str = \"utf-8\", for_qs: bool = False) -> str:\n    import warnings\n\n    warnings.warn(\n        \"'unicode_urlencode' has been renamed to 'url_quote'. The old\"\n        \" name will be removed in Jinja 3.1.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return url_quote(obj, charset=charset, for_qs=for_qs)\n\n\n@abc.MutableMapping.register\nclass LRUCache:\n    \"\"\"A simple LRU Cache implementation.\"\"\"\n\n    # this is fast for small capacities (something below 1000) but doesn't\n    # scale.  But as long as it's only used as storage for templates this\n    # won't do any harm.\n\n    def __init__(self, capacity: int) -> None:\n        self.capacity = capacity\n        self._mapping: t.Dict[t.Any, t.Any] = {}\n        self._queue: \"te.Deque[t.Any]\" = deque()\n        self._postinit()\n\n    def _postinit(self) -> None:\n        # alias all queue methods for faster lookup\n        self._popleft = self._queue.popleft\n        self._pop = self._queue.pop\n        self._remove = self._queue.remove\n        self._wlock = Lock()\n        self._append = self._queue.append\n\n    def __getstate__(self) -> t.Mapping[str, t.Any]:\n        return {\n            \"capacity\": self.capacity,\n            \"_mapping\": self._mapping,\n            \"_queue\": self._queue,\n        }\n\n    def __setstate__(self, d: t.Mapping[str, t.Any]) -> None:\n        self.__dict__.update(d)\n        self._postinit()\n\n    def __getnewargs__(self) -> t.Tuple:\n        return (self.capacity,)\n\n    def copy(self) -> \"LRUCache\":\n        \"\"\"Return a shallow copy of the instance.\"\"\"\n        rv = self.__class__(self.capacity)\n        rv._mapping.update(self._mapping)\n        rv._queue.extend(self._queue)\n        return rv\n\n    def get(self, key: t.Any, default: t.Any = None) -> t.Any:\n        \"\"\"Return an item from the cache dict or `default`\"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def setdefault(self, key: t.Any, default: t.Any = None) -> t.Any:\n        \"\"\"Set `default` if the key is not in the cache otherwise\n        leave unchanged. Return the value of this key.\n        \"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return default\n\n    def clear(self) -> None:\n        \"\"\"Clear the cache.\"\"\"\n        with self._wlock:\n            self._mapping.clear()\n            self._queue.clear()\n\n    def __contains__(self, key: t.Any) -> bool:\n        \"\"\"Check if a key exists in this cache.\"\"\"\n        return key in self._mapping\n\n    def __len__(self) -> int:\n        \"\"\"Return the current size of the cache.\"\"\"\n        return len(self._mapping)\n\n    def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {self._mapping!r}>\"\n\n    def __getitem__(self, key: t.Any) -> t.Any:\n        \"\"\"Get an item from the cache. Moves the item up so that it has the\n        highest priority then.\n\n        Raise a `KeyError` if it does not exist.\n        \"\"\"\n        with self._wlock:\n            rv = self._mapping[key]\n\n            if self._queue[-1] != key:\n                try:\n                    self._remove(key)\n                except ValueError:\n                    # if something removed the key from the container\n                    # when we read, ignore the ValueError that we would\n                    # get otherwise.\n                    pass\n\n                self._append(key)\n\n            return rv\n\n    def __setitem__(self, key: t.Any, value: t.Any) -> None:\n        \"\"\"Sets the value for an item. Moves the item up so that it\n        has the highest priority then.\n        \"\"\"\n        with self._wlock:\n            if key in self._mapping:\n                self._remove(key)\n            elif len(self._mapping) == self.capacity:\n                del self._mapping[self._popleft()]\n\n            self._append(key)\n            self._mapping[key] = value\n\n    def __delitem__(self, key: t.Any) -> None:\n        \"\"\"Remove an item from the cache dict.\n        Raise a `KeyError` if it does not exist.\n        \"\"\"\n        with self._wlock:\n            del self._mapping[key]\n\n            try:\n                self._remove(key)\n            except ValueError:\n                pass\n\n    def items(self) -> t.Iterable[t.Tuple[t.Any, t.Any]]:\n        \"\"\"Return a list of items.\"\"\"\n        result = [(key, self._mapping[key]) for key in list(self._queue)]\n        result.reverse()\n        return result\n\n    def values(self) -> t.Iterable[t.Any]:\n        \"\"\"Return a list of all values.\"\"\"\n        return [x[1] for x in self.items()]\n\n    def keys(self) -> t.Iterable[t.Any]:\n        \"\"\"Return a list of all keys ordered by most recent usage.\"\"\"\n        return list(self)\n\n    def __iter__(self) -> t.Iterator[t.Any]:\n        return reversed(tuple(self._queue))\n\n    def __reversed__(self) -> t.Iterator[t.Any]:\n        \"\"\"Iterate over the keys in the cache dict, oldest items\n        coming first.\n        \"\"\"\n        return iter(tuple(self._queue))\n\n    __copy__ = copy\n\n\ndef select_autoescape(\n    enabled_extensions: t.Collection[str] = (\"html\", \"htm\", \"xml\"),\n    disabled_extensions: t.Collection[str] = (),\n    default_for_string: bool = True,\n    default: bool = False,\n) -> t.Callable[[t.Optional[str]], bool]:\n    \"\"\"Intelligently sets the initial value of autoescaping based on the\n    filename of the template.  This is the recommended way to configure\n    autoescaping if you do not want to write a custom function yourself.\n\n    If you want to enable it for all templates created from strings or\n    for all templates with `.html` and `.xml` extensions::\n\n        from jinja2 import Environment, select_autoescape\n        env = Environment(autoescape=select_autoescape(\n            enabled_extensions=('html', 'xml'),\n            default_for_string=True,\n        ))\n\n    Example configuration to turn it on at all times except if the template\n    ends with `.txt`::\n\n        from jinja2 import Environment, select_autoescape\n        env = Environment(autoescape=select_autoescape(\n            disabled_extensions=('txt',),\n            default_for_string=True,\n            default=True,\n        ))\n\n    The `enabled_extensions` is an iterable of all the extensions that\n    autoescaping should be enabled for.  Likewise `disabled_extensions` is\n    a list of all templates it should be disabled for.  If a template is\n    loaded from a string then the default from `default_for_string` is used.\n    If nothing matches then the initial value of autoescaping is set to the\n    value of `default`.\n\n    For security reasons this function operates case insensitive.\n\n    .. versionadded:: 2.9\n    \"\"\"\n    enabled_patterns = tuple(f\".{x.lstrip('.').lower()}\" for x in enabled_extensions)\n    disabled_patterns = tuple(f\".{x.lstrip('.').lower()}\" for x in disabled_extensions)\n\n    def autoescape(template_name: t.Optional[str]) -> bool:\n        if template_name is None:\n            return default_for_string\n        template_name = template_name.lower()\n        if template_name.endswith(enabled_patterns):\n            return True\n        if template_name.endswith(disabled_patterns):\n            return False\n        return default\n\n    return autoescape\n\n\ndef htmlsafe_json_dumps(\n    obj: t.Any, dumps: t.Optional[t.Callable[..., str]] = None, **kwargs: t.Any\n) -> markupsafe.Markup:\n    \"\"\"Serialize an object to a string of JSON with :func:`json.dumps`,\n    then replace HTML-unsafe characters with Unicode escapes and mark\n    the result safe with :class:`~markupsafe.Markup`.\n\n    This is available in templates as the ``|tojson`` filter.\n\n    The following characters are escaped: ``<``, ``>``, ``&``, ``'``.\n\n    The returned string is safe to render in HTML documents and\n    ``<script>`` tags. The exception is in HTML attributes that are\n    double quoted; either use single quotes or the ``|forceescape``\n    filter.\n\n    :param obj: The object to serialize to JSON.\n    :param dumps: The ``dumps`` function to use. Defaults to\n        ``env.policies[\"json.dumps_function\"]``, which defaults to\n        :func:`json.dumps`.\n    :param kwargs: Extra arguments to pass to ``dumps``. Merged onto\n        ``env.policies[\"json.dumps_kwargs\"]``.\n\n    .. versionchanged:: 3.0\n        The ``dumper`` parameter is renamed to ``dumps``.\n\n    .. versionadded:: 2.9\n    \"\"\"\n    if dumps is None:\n        dumps = json.dumps\n\n    return markupsafe.Markup(\n        dumps(obj, **kwargs)\n        .replace(\"<\", \"\\\\u003c\")\n        .replace(\">\", \"\\\\u003e\")\n        .replace(\"&\", \"\\\\u0026\")\n        .replace(\"'\", \"\\\\u0027\")\n    )\n\n\nclass Cycler:\n    \"\"\"Cycle through values by yield them one at a time, then restarting\n    once the end is reached. Available as ``cycler`` in templates.\n\n    Similar to ``loop.cycle``, but can be used outside loops or across\n    multiple loops. For example, render a list of folders and files in a\n    list, alternating giving them \"odd\" and \"even\" classes.\n\n    .. code-block:: html+jinja\n\n        {% set row_class = cycler(\"odd\", \"even\") %}\n        <ul class=\"browser\">\n        {% for folder in folders %}\n          <li class=\"folder {{ row_class.next() }}\">{{ folder }}\n        {% endfor %}\n        {% for file in files %}\n          <li class=\"file {{ row_class.next() }}\">{{ file }}\n        {% endfor %}\n        </ul>\n\n    :param items: Each positional argument will be yielded in the order\n        given for each cycle.\n\n    .. versionadded:: 2.1\n    \"\"\"\n\n    def __init__(self, *items: t.Any) -> None:\n        if not items:\n            raise RuntimeError(\"at least one item has to be provided\")\n        self.items = items\n        self.pos = 0\n\n    def reset(self) -> None:\n        \"\"\"Resets the current item to the first item.\"\"\"\n        self.pos = 0\n\n    @property\n    def current(self) -> t.Any:\n        \"\"\"Return the current item. Equivalent to the item that will be\n        returned next time :meth:`next` is called.\n        \"\"\"\n        return self.items[self.pos]\n\n    def next(self) -> t.Any:\n        \"\"\"Return the current item, then advance :attr:`current` to the\n        next item.\n        \"\"\"\n        rv = self.current\n        self.pos = (self.pos + 1) % len(self.items)\n        return rv\n\n    __next__ = next\n\n\nclass Joiner:\n    \"\"\"A joining helper for templates.\"\"\"\n\n    def __init__(self, sep: str = \", \") -> None:\n        self.sep = sep\n        self.used = False\n\n    def __call__(self) -> str:\n        if not self.used:\n            self.used = True\n            return \"\"\n        return self.sep\n\n\nclass Namespace:\n    \"\"\"A namespace object that can hold arbitrary attributes.  It may be\n    initialized from a dictionary or with keyword arguments.\"\"\"\n\n    def __init__(*args: t.Any, **kwargs: t.Any) -> None:  # noqa: B902\n        self, args = args[0], args[1:]\n        self.__attrs = dict(*args, **kwargs)\n\n    def __getattribute__(self, name: str) -> t.Any:\n        # __class__ is needed for the awaitable check in async mode\n        if name in {\"_Namespace__attrs\", \"__class__\"}:\n            return object.__getattribute__(self, name)\n        try:\n            return self.__attrs[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def __setitem__(self, name: str, value: t.Any) -> None:\n        self.__attrs[name] = value\n\n    def __repr__(self) -> str:\n        return f\"<Namespace {self.__attrs!r}>\"\n\n\nclass Markup(markupsafe.Markup):\n    def __new__(cls, base=\"\", encoding=None, errors=\"strict\"):  # type: ignore\n        warnings.warn(\n            \"'jinja2.Markup' is deprecated and will be removed in Jinja\"\n            \" 3.1. Import 'markupsafe.Markup' instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return super().__new__(cls, base, encoding, errors)\n\n\ndef escape(s: t.Any) -> str:\n    warnings.warn(\n        \"'jinja2.escape' is deprecated and will be removed in Jinja\"\n        \" 3.1. Import 'markupsafe.escape' instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return markupsafe.escape(s)\n", 854], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py": ["\"\"\"Classes for managing templates and their runtime and compile time\noptions.\n\"\"\"\nimport os\nimport sys\nimport typing\nimport typing as t\nimport weakref\nfrom collections import ChainMap\nfrom functools import lru_cache\nfrom functools import partial\nfrom functools import reduce\nfrom types import CodeType\n\nfrom markupsafe import Markup\n\nfrom . import nodes\nfrom .compiler import CodeGenerator\nfrom .compiler import generate\nfrom .defaults import BLOCK_END_STRING\nfrom .defaults import BLOCK_START_STRING\nfrom .defaults import COMMENT_END_STRING\nfrom .defaults import COMMENT_START_STRING\nfrom .defaults import DEFAULT_FILTERS\nfrom .defaults import DEFAULT_NAMESPACE\nfrom .defaults import DEFAULT_POLICIES\nfrom .defaults import DEFAULT_TESTS\nfrom .defaults import KEEP_TRAILING_NEWLINE\nfrom .defaults import LINE_COMMENT_PREFIX\nfrom .defaults import LINE_STATEMENT_PREFIX\nfrom .defaults import LSTRIP_BLOCKS\nfrom .defaults import NEWLINE_SEQUENCE\nfrom .defaults import TRIM_BLOCKS\nfrom .defaults import VARIABLE_END_STRING\nfrom .defaults import VARIABLE_START_STRING\nfrom .exceptions import TemplateNotFound\nfrom .exceptions import TemplateRuntimeError\nfrom .exceptions import TemplatesNotFound\nfrom .exceptions import TemplateSyntaxError\nfrom .exceptions import UndefinedError\nfrom .lexer import get_lexer\nfrom .lexer import Lexer\nfrom .lexer import TokenStream\nfrom .nodes import EvalContext\nfrom .parser import Parser\nfrom .runtime import Context\nfrom .runtime import new_context\nfrom .runtime import Undefined\nfrom .utils import _PassArg\nfrom .utils import concat\nfrom .utils import consume\nfrom .utils import import_string\nfrom .utils import internalcode\nfrom .utils import LRUCache\nfrom .utils import missing\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te\n    from .bccache import BytecodeCache\n    from .ext import Extension\n    from .loaders import BaseLoader\n\n_env_bound = t.TypeVar(\"_env_bound\", bound=\"Environment\")\n\n\n# for direct template usage we have up to ten living environments\n@lru_cache(maxsize=10)\ndef get_spontaneous_environment(cls: t.Type[_env_bound], *args: t.Any) -> _env_bound:\n    \"\"\"Return a new spontaneous environment. A spontaneous environment\n    is used for templates created directly rather than through an\n    existing environment.\n\n    :param cls: Environment class to create.\n    :param args: Positional arguments passed to environment.\n    \"\"\"\n    env = cls(*args)\n    env.shared = True\n    return env\n\n\ndef create_cache(\n    size: int,\n) -> t.Optional[t.MutableMapping[t.Tuple[weakref.ref, str], \"Template\"]]:\n    \"\"\"Return the cache class for the given size.\"\"\"\n    if size == 0:\n        return None\n\n    if size < 0:\n        return {}\n\n    return LRUCache(size)  # type: ignore\n\n\ndef copy_cache(\n    cache: t.Optional[t.MutableMapping],\n) -> t.Optional[t.MutableMapping[t.Tuple[weakref.ref, str], \"Template\"]]:\n    \"\"\"Create an empty copy of the given cache.\"\"\"\n    if cache is None:\n        return None\n\n    if type(cache) is dict:\n        return {}\n\n    return LRUCache(cache.capacity)  # type: ignore\n\n\ndef load_extensions(\n    environment: \"Environment\",\n    extensions: t.Sequence[t.Union[str, t.Type[\"Extension\"]]],\n) -> t.Dict[str, \"Extension\"]:\n    \"\"\"Load the extensions from the list and bind it to the environment.\n    Returns a dict of instantiated extensions.\n    \"\"\"\n    result = {}\n\n    for extension in extensions:\n        if isinstance(extension, str):\n            extension = t.cast(t.Type[\"Extension\"], import_string(extension))\n\n        result[extension.identifier] = extension(environment)\n\n    return result\n\n\ndef _environment_config_check(environment: \"Environment\") -> \"Environment\":\n    \"\"\"Perform a sanity check on the environment.\"\"\"\n    assert issubclass(\n        environment.undefined, Undefined\n    ), \"'undefined' must be a subclass of 'jinja2.Undefined'.\"\n    assert (\n        environment.block_start_string\n        != environment.variable_start_string\n        != environment.comment_start_string\n    ), \"block, variable and comment start strings must be different.\"\n    assert environment.newline_sequence in {\n        \"\\r\",\n        \"\\r\\n\",\n        \"\\n\",\n    }, \"'newline_sequence' must be one of '\\\\n', '\\\\r\\\\n', or '\\\\r'.\"\n    return environment\n\n\nclass Environment:\n    r\"\"\"The core component of Jinja is the `Environment`.  It contains\n    important shared variables like configuration, filters, tests,\n    globals and others.  Instances of this class may be modified if\n    they are not shared and if no template was loaded so far.\n    Modifications on environments after the first template was loaded\n    will lead to surprising effects and undefined behavior.\n\n    Here are the possible initialization parameters:\n\n        `block_start_string`\n            The string marking the beginning of a block.  Defaults to ``'{%'``.\n\n        `block_end_string`\n            The string marking the end of a block.  Defaults to ``'%}'``.\n\n        `variable_start_string`\n            The string marking the beginning of a print statement.\n            Defaults to ``'{{'``.\n\n        `variable_end_string`\n            The string marking the end of a print statement.  Defaults to\n            ``'}}'``.\n\n        `comment_start_string`\n            The string marking the beginning of a comment.  Defaults to ``'{#'``.\n\n        `comment_end_string`\n            The string marking the end of a comment.  Defaults to ``'#}'``.\n\n        `line_statement_prefix`\n            If given and a string, this will be used as prefix for line based\n            statements.  See also :ref:`line-statements`.\n\n        `line_comment_prefix`\n            If given and a string, this will be used as prefix for line based\n            comments.  See also :ref:`line-statements`.\n\n            .. versionadded:: 2.2\n\n        `trim_blocks`\n            If this is set to ``True`` the first newline after a block is\n            removed (block, not variable tag!).  Defaults to `False`.\n\n        `lstrip_blocks`\n            If this is set to ``True`` leading spaces and tabs are stripped\n            from the start of a line to a block.  Defaults to `False`.\n\n        `newline_sequence`\n            The sequence that starts a newline.  Must be one of ``'\\r'``,\n            ``'\\n'`` or ``'\\r\\n'``.  The default is ``'\\n'`` which is a\n            useful default for Linux and OS X systems as well as web\n            applications.\n\n        `keep_trailing_newline`\n            Preserve the trailing newline when rendering templates.\n            The default is ``False``, which causes a single newline,\n            if present, to be stripped from the end of the template.\n\n            .. versionadded:: 2.7\n\n        `extensions`\n            List of Jinja extensions to use.  This can either be import paths\n            as strings or extension classes.  For more information have a\n            look at :ref:`the extensions documentation <jinja-extensions>`.\n\n        `optimized`\n            should the optimizer be enabled?  Default is ``True``.\n\n        `undefined`\n            :class:`Undefined` or a subclass of it that is used to represent\n            undefined values in the template.\n\n        `finalize`\n            A callable that can be used to process the result of a variable\n            expression before it is output.  For example one can convert\n            ``None`` implicitly into an empty string here.\n\n        `autoescape`\n            If set to ``True`` the XML/HTML autoescaping feature is enabled by\n            default.  For more details about autoescaping see\n            :class:`~markupsafe.Markup`.  As of Jinja 2.4 this can also\n            be a callable that is passed the template name and has to\n            return ``True`` or ``False`` depending on autoescape should be\n            enabled by default.\n\n            .. versionchanged:: 2.4\n               `autoescape` can now be a function\n\n        `loader`\n            The template loader for this environment.\n\n        `cache_size`\n            The size of the cache.  Per default this is ``400`` which means\n            that if more than 400 templates are loaded the loader will clean\n            out the least recently used template.  If the cache size is set to\n            ``0`` templates are recompiled all the time, if the cache size is\n            ``-1`` the cache will not be cleaned.\n\n            .. versionchanged:: 2.8\n               The cache size was increased to 400 from a low 50.\n\n        `auto_reload`\n            Some loaders load templates from locations where the template\n            sources may change (ie: file system or database).  If\n            ``auto_reload`` is set to ``True`` (default) every time a template is\n            requested the loader checks if the source changed and if yes, it\n            will reload the template.  For higher performance it's possible to\n            disable that.\n\n        `bytecode_cache`\n            If set to a bytecode cache object, this object will provide a\n            cache for the internal Jinja bytecode so that templates don't\n            have to be parsed if they were not changed.\n\n            See :ref:`bytecode-cache` for more information.\n\n        `enable_async`\n            If set to true this enables async template execution which\n            allows using async functions and generators.\n    \"\"\"\n\n    #: if this environment is sandboxed.  Modifying this variable won't make\n    #: the environment sandboxed though.  For a real sandboxed environment\n    #: have a look at jinja2.sandbox.  This flag alone controls the code\n    #: generation by the compiler.\n    sandboxed = False\n\n    #: True if the environment is just an overlay\n    overlayed = False\n\n    #: the environment this environment is linked to if it is an overlay\n    linked_to: t.Optional[\"Environment\"] = None\n\n    #: shared environments have this set to `True`.  A shared environment\n    #: must not be modified\n    shared = False\n\n    #: the class that is used for code generation.  See\n    #: :class:`~jinja2.compiler.CodeGenerator` for more information.\n    code_generator_class: t.Type[\"CodeGenerator\"] = CodeGenerator\n\n    #: the context class that is used for templates.  See\n    #: :class:`~jinja2.runtime.Context` for more information.\n    context_class: t.Type[Context] = Context\n\n    template_class: t.Type[\"Template\"]\n\n    def __init__(\n        self,\n        block_start_string: str = BLOCK_START_STRING,\n        block_end_string: str = BLOCK_END_STRING,\n        variable_start_string: str = VARIABLE_START_STRING,\n        variable_end_string: str = VARIABLE_END_STRING,\n        comment_start_string: str = COMMENT_START_STRING,\n        comment_end_string: str = COMMENT_END_STRING,\n        line_statement_prefix: t.Optional[str] = LINE_STATEMENT_PREFIX,\n        line_comment_prefix: t.Optional[str] = LINE_COMMENT_PREFIX,\n        trim_blocks: bool = TRIM_BLOCKS,\n        lstrip_blocks: bool = LSTRIP_BLOCKS,\n        newline_sequence: \"te.Literal['\\\\n', '\\\\r\\\\n', '\\\\r']\" = NEWLINE_SEQUENCE,\n        keep_trailing_newline: bool = KEEP_TRAILING_NEWLINE,\n        extensions: t.Sequence[t.Union[str, t.Type[\"Extension\"]]] = (),\n        optimized: bool = True,\n        undefined: t.Type[Undefined] = Undefined,\n        finalize: t.Optional[t.Callable[..., t.Any]] = None,\n        autoescape: t.Union[bool, t.Callable[[t.Optional[str]], bool]] = False,\n        loader: t.Optional[\"BaseLoader\"] = None,\n        cache_size: int = 400,\n        auto_reload: bool = True,\n        bytecode_cache: t.Optional[\"BytecodeCache\"] = None,\n        enable_async: bool = False,\n    ):\n        # !!Important notice!!\n        #   The constructor accepts quite a few arguments that should be\n        #   passed by keyword rather than position.  However it's important to\n        #   not change the order of arguments because it's used at least\n        #   internally in those cases:\n        #       -   spontaneous environments (i18n extension and Template)\n        #       -   unittests\n        #   If parameter changes are required only add parameters at the end\n        #   and don't change the arguments (or the defaults!) of the arguments\n        #   existing already.\n\n        # lexer / parser information\n        self.block_start_string = block_start_string\n        self.block_end_string = block_end_string\n        self.variable_start_string = variable_start_string\n        self.variable_end_string = variable_end_string\n        self.comment_start_string = comment_start_string\n        self.comment_end_string = comment_end_string\n        self.line_statement_prefix = line_statement_prefix\n        self.line_comment_prefix = line_comment_prefix\n        self.trim_blocks = trim_blocks\n        self.lstrip_blocks = lstrip_blocks\n        self.newline_sequence = newline_sequence\n        self.keep_trailing_newline = keep_trailing_newline\n\n        # runtime information\n        self.undefined: t.Type[Undefined] = undefined\n        self.optimized = optimized\n        self.finalize = finalize\n        self.autoescape = autoescape\n\n        # defaults\n        self.filters = DEFAULT_FILTERS.copy()\n        self.tests = DEFAULT_TESTS.copy()\n        self.globals = DEFAULT_NAMESPACE.copy()\n\n        # set the loader provided\n        self.loader = loader\n        self.cache = create_cache(cache_size)\n        self.bytecode_cache = bytecode_cache\n        self.auto_reload = auto_reload\n\n        # configurable policies\n        self.policies = DEFAULT_POLICIES.copy()\n\n        # load extensions\n        self.extensions = load_extensions(self, extensions)\n\n        self.is_async = enable_async\n        _environment_config_check(self)\n\n    def add_extension(self, extension: t.Union[str, t.Type[\"Extension\"]]) -> None:\n        \"\"\"Adds an extension after the environment was created.\n\n        .. versionadded:: 2.5\n        \"\"\"\n        self.extensions.update(load_extensions(self, [extension]))\n\n    def extend(self, **attributes: t.Any) -> None:\n        \"\"\"Add the items to the instance of the environment if they do not exist\n        yet.  This is used by :ref:`extensions <writing-extensions>` to register\n        callbacks and configuration values without breaking inheritance.\n        \"\"\"\n        for key, value in attributes.items():\n            if not hasattr(self, key):\n                setattr(self, key, value)\n\n    def overlay(\n        self,\n        block_start_string: str = missing,\n        block_end_string: str = missing,\n        variable_start_string: str = missing,\n        variable_end_string: str = missing,\n        comment_start_string: str = missing,\n        comment_end_string: str = missing,\n        line_statement_prefix: t.Optional[str] = missing,\n        line_comment_prefix: t.Optional[str] = missing,\n        trim_blocks: bool = missing,\n        lstrip_blocks: bool = missing,\n        extensions: t.Sequence[t.Union[str, t.Type[\"Extension\"]]] = missing,\n        optimized: bool = missing,\n        undefined: t.Type[Undefined] = missing,\n        finalize: t.Optional[t.Callable[..., t.Any]] = missing,\n        autoescape: t.Union[bool, t.Callable[[t.Optional[str]], bool]] = missing,\n        loader: t.Optional[\"BaseLoader\"] = missing,\n        cache_size: int = missing,\n        auto_reload: bool = missing,\n        bytecode_cache: t.Optional[\"BytecodeCache\"] = missing,\n    ) -> \"Environment\":\n        \"\"\"Create a new overlay environment that shares all the data with the\n        current environment except for cache and the overridden attributes.\n        Extensions cannot be removed for an overlayed environment.  An overlayed\n        environment automatically gets all the extensions of the environment it\n        is linked to plus optional extra extensions.\n\n        Creating overlays should happen after the initial environment was set\n        up completely.  Not all attributes are truly linked, some are just\n        copied over so modifications on the original environment may not shine\n        through.\n        \"\"\"\n        args = dict(locals())\n        del args[\"self\"], args[\"cache_size\"], args[\"extensions\"]\n\n        rv = object.__new__(self.__class__)\n        rv.__dict__.update(self.__dict__)\n        rv.overlayed = True\n        rv.linked_to = self\n\n        for key, value in args.items():\n            if value is not missing:\n                setattr(rv, key, value)\n\n        if cache_size is not missing:\n            rv.cache = create_cache(cache_size)\n        else:\n            rv.cache = copy_cache(self.cache)\n\n        rv.extensions = {}\n        for key, value in self.extensions.items():\n            rv.extensions[key] = value.bind(rv)\n        if extensions is not missing:\n            rv.extensions.update(load_extensions(rv, extensions))\n\n        return _environment_config_check(rv)\n\n    @property\n    def lexer(self) -> Lexer:\n        \"\"\"The lexer for this environment.\"\"\"\n        return get_lexer(self)\n\n    def iter_extensions(self) -> t.Iterator[\"Extension\"]:\n        \"\"\"Iterates over the extensions by priority.\"\"\"\n        return iter(sorted(self.extensions.values(), key=lambda x: x.priority))\n\n    def getitem(\n        self, obj: t.Any, argument: t.Union[str, t.Any]\n    ) -> t.Union[t.Any, Undefined]:\n        \"\"\"Get an item or attribute of an object but prefer the item.\"\"\"\n        try:\n            return obj[argument]\n        except (AttributeError, TypeError, LookupError):\n            if isinstance(argument, str):\n                try:\n                    attr = str(argument)\n                except Exception:\n                    pass\n                else:\n                    try:\n                        return getattr(obj, attr)\n                    except AttributeError:\n                        pass\n            return self.undefined(obj=obj, name=argument)\n\n    def getattr(self, obj: t.Any, attribute: str) -> t.Any:\n        \"\"\"Get an item or attribute of an object but prefer the attribute.\n        Unlike :meth:`getitem` the attribute *must* be a string.\n        \"\"\"\n        try:\n            return getattr(obj, attribute)\n        except AttributeError:\n            pass\n        try:\n            return obj[attribute]\n        except (TypeError, LookupError, AttributeError):\n            return self.undefined(obj=obj, name=attribute)\n\n    def _filter_test_common(\n        self,\n        name: t.Union[str, Undefined],\n        value: t.Any,\n        args: t.Optional[t.Sequence[t.Any]],\n        kwargs: t.Optional[t.Mapping[str, t.Any]],\n        context: t.Optional[Context],\n        eval_ctx: t.Optional[EvalContext],\n        is_filter: bool,\n    ) -> t.Any:\n        if is_filter:\n            env_map = self.filters\n            type_name = \"filter\"\n        else:\n            env_map = self.tests\n            type_name = \"test\"\n\n        func = env_map.get(name)  # type: ignore\n\n        if func is None:\n            msg = f\"No {type_name} named {name!r}.\"\n\n            if isinstance(name, Undefined):\n                try:\n                    name._fail_with_undefined_error()\n                except Exception as e:\n                    msg = f\"{msg} ({e}; did you forget to quote the callable name?)\"\n\n            raise TemplateRuntimeError(msg)\n\n        args = [value, *(args if args is not None else ())]\n        kwargs = kwargs if kwargs is not None else {}\n        pass_arg = _PassArg.from_obj(func)\n\n        if pass_arg is _PassArg.context:\n            if context is None:\n                raise TemplateRuntimeError(\n                    f\"Attempted to invoke a context {type_name} without context.\"\n                )\n\n            args.insert(0, context)\n        elif pass_arg is _PassArg.eval_context:\n            if eval_ctx is None:\n                if context is not None:\n                    eval_ctx = context.eval_ctx\n                else:\n                    eval_ctx = EvalContext(self)\n\n            args.insert(0, eval_ctx)\n        elif pass_arg is _PassArg.environment:\n            args.insert(0, self)\n\n        return func(*args, **kwargs)\n\n    def call_filter(\n        self,\n        name: str,\n        value: t.Any,\n        args: t.Optional[t.Sequence[t.Any]] = None,\n        kwargs: t.Optional[t.Mapping[str, t.Any]] = None,\n        context: t.Optional[Context] = None,\n        eval_ctx: t.Optional[EvalContext] = None,\n    ) -> t.Any:\n        \"\"\"Invoke a filter on a value the same way the compiler does.\n\n        This might return a coroutine if the filter is running from an\n        environment in async mode and the filter supports async\n        execution. It's your responsibility to await this if needed.\n\n        .. versionadded:: 2.7\n        \"\"\"\n        return self._filter_test_common(\n            name, value, args, kwargs, context, eval_ctx, True\n        )\n\n    def call_test(\n        self,\n        name: str,\n        value: t.Any,\n        args: t.Optional[t.Sequence[t.Any]] = None,\n        kwargs: t.Optional[t.Mapping[str, t.Any]] = None,\n        context: t.Optional[Context] = None,\n        eval_ctx: t.Optional[EvalContext] = None,\n    ) -> t.Any:\n        \"\"\"Invoke a test on a value the same way the compiler does.\n\n        This might return a coroutine if the test is running from an\n        environment in async mode and the test supports async execution.\n        It's your responsibility to await this if needed.\n\n        .. versionchanged:: 3.0\n            Tests support ``@pass_context``, etc. decorators. Added\n            the ``context`` and ``eval_ctx`` parameters.\n\n        .. versionadded:: 2.7\n        \"\"\"\n        return self._filter_test_common(\n            name, value, args, kwargs, context, eval_ctx, False\n        )\n\n    @internalcode\n    def parse(\n        self,\n        source: str,\n        name: t.Optional[str] = None,\n        filename: t.Optional[str] = None,\n    ) -> nodes.Template:\n        \"\"\"Parse the sourcecode and return the abstract syntax tree.  This\n        tree of nodes is used by the compiler to convert the template into\n        executable source- or bytecode.  This is useful for debugging or to\n        extract information from templates.\n\n        If you are :ref:`developing Jinja extensions <writing-extensions>`\n        this gives you a good overview of the node tree generated.\n        \"\"\"\n        try:\n            return self._parse(source, name, filename)\n        except TemplateSyntaxError:\n            self.handle_exception(source=source)\n\n    def _parse(\n        self, source: str, name: t.Optional[str], filename: t.Optional[str]\n    ) -> nodes.Template:\n        \"\"\"Internal parsing function used by `parse` and `compile`.\"\"\"\n        return Parser(self, source, name, filename).parse()\n\n    def lex(\n        self,\n        source: str,\n        name: t.Optional[str] = None,\n        filename: t.Optional[str] = None,\n    ) -> t.Iterator[t.Tuple[int, str, str]]:\n        \"\"\"Lex the given sourcecode and return a generator that yields\n        tokens as tuples in the form ``(lineno, token_type, value)``.\n        This can be useful for :ref:`extension development <writing-extensions>`\n        and debugging templates.\n\n        This does not perform preprocessing.  If you want the preprocessing\n        of the extensions to be applied you have to filter source through\n        the :meth:`preprocess` method.\n        \"\"\"\n        source = str(source)\n        try:\n            return self.lexer.tokeniter(source, name, filename)\n        except TemplateSyntaxError:\n            self.handle_exception(source=source)\n\n    def preprocess(\n        self,\n        source: str,\n        name: t.Optional[str] = None,\n        filename: t.Optional[str] = None,\n    ) -> str:\n        \"\"\"Preprocesses the source with all extensions.  This is automatically\n        called for all parsing and compiling methods but *not* for :meth:`lex`\n        because there you usually only want the actual source tokenized.\n        \"\"\"\n        return reduce(\n            lambda s, e: e.preprocess(s, name, filename),\n            self.iter_extensions(),\n            str(source),\n        )\n\n    def _tokenize(\n        self,\n        source: str,\n        name: t.Optional[str],\n        filename: t.Optional[str] = None,\n        state: t.Optional[str] = None,\n    ) -> TokenStream:\n        \"\"\"Called by the parser to do the preprocessing and filtering\n        for all the extensions.  Returns a :class:`~jinja2.lexer.TokenStream`.\n        \"\"\"\n        source = self.preprocess(source, name, filename)\n        stream = self.lexer.tokenize(source, name, filename, state)\n\n        for ext in self.iter_extensions():\n            stream = ext.filter_stream(stream)  # type: ignore\n\n            if not isinstance(stream, TokenStream):\n                stream = TokenStream(stream, name, filename)  # type: ignore\n\n        return stream\n\n    def _generate(\n        self,\n        source: nodes.Template,\n        name: t.Optional[str],\n        filename: t.Optional[str],\n        defer_init: bool = False,\n    ) -> str:\n        \"\"\"Internal hook that can be overridden to hook a different generate\n        method in.\n\n        .. versionadded:: 2.5\n        \"\"\"\n        return generate(  # type: ignore\n            source,\n            self,\n            name,\n            filename,\n            defer_init=defer_init,\n            optimized=self.optimized,\n        )\n\n    def _compile(self, source: str, filename: str) -> CodeType:\n        \"\"\"Internal hook that can be overridden to hook a different compile\n        method in.\n\n        .. versionadded:: 2.5\n        \"\"\"\n        return compile(source, filename, \"exec\")  # type: ignore\n\n    @typing.overload\n    def compile(  # type: ignore\n        self,\n        source: t.Union[str, nodes.Template],\n        name: t.Optional[str] = None,\n        filename: t.Optional[str] = None,\n        raw: \"te.Literal[False]\" = False,\n        defer_init: bool = False,\n    ) -> CodeType:\n        ...\n\n    @typing.overload\n    def compile(\n        self,\n        source: t.Union[str, nodes.Template],\n        name: t.Optional[str] = None,\n        filename: t.Optional[str] = None,\n        raw: \"te.Literal[True]\" = ...,\n        defer_init: bool = False,\n    ) -> str:\n        ...\n\n    @internalcode\n    def compile(\n        self,\n        source: t.Union[str, nodes.Template],\n        name: t.Optional[str] = None,\n        filename: t.Optional[str] = None,\n        raw: bool = False,\n        defer_init: bool = False,\n    ) -> t.Union[str, CodeType]:\n        \"\"\"Compile a node or template source code.  The `name` parameter is\n        the load name of the template after it was joined using\n        :meth:`join_path` if necessary, not the filename on the file system.\n        the `filename` parameter is the estimated filename of the template on\n        the file system.  If the template came from a database or memory this\n        can be omitted.\n\n        The return value of this method is a python code object.  If the `raw`\n        parameter is `True` the return value will be a string with python\n        code equivalent to the bytecode returned otherwise.  This method is\n        mainly used internally.\n\n        `defer_init` is use internally to aid the module code generator.  This\n        causes the generated code to be able to import without the global\n        environment variable to be set.\n\n        .. versionadded:: 2.4\n           `defer_init` parameter added.\n        \"\"\"\n        source_hint = None\n        try:\n            if isinstance(source, str):\n                source_hint = source\n                source = self._parse(source, name, filename)\n            source = self._generate(source, name, filename, defer_init=defer_init)\n            if raw:\n                return source\n            if filename is None:\n                filename = \"<template>\"\n            return self._compile(source, filename)\n        except TemplateSyntaxError:\n            self.handle_exception(source=source_hint)\n\n    def compile_expression(\n        self, source: str, undefined_to_none: bool = True\n    ) -> \"TemplateExpression\":\n        \"\"\"A handy helper method that returns a callable that accepts keyword\n        arguments that appear as variables in the expression.  If called it\n        returns the result of the expression.\n\n        This is useful if applications want to use the same rules as Jinja\n        in template \"configuration files\" or similar situations.\n\n        Example usage:\n\n        >>> env = Environment()\n        >>> expr = env.compile_expression('foo == 42')\n        >>> expr(foo=23)\n        False\n        >>> expr(foo=42)\n        True\n\n        Per default the return value is converted to `None` if the\n        expression returns an undefined value.  This can be changed\n        by setting `undefined_to_none` to `False`.\n\n        >>> env.compile_expression('var')() is None\n        True\n        >>> env.compile_expression('var', undefined_to_none=False)()\n        Undefined\n\n        .. versionadded:: 2.1\n        \"\"\"\n        parser = Parser(self, source, state=\"variable\")\n        try:\n            expr = parser.parse_expression()\n            if not parser.stream.eos:\n                raise TemplateSyntaxError(\n                    \"chunk after expression\", parser.stream.current.lineno, None, None\n                )\n            expr.set_environment(self)\n        except TemplateSyntaxError:\n            self.handle_exception(source=source)\n\n        body = [nodes.Assign(nodes.Name(\"result\", \"store\"), expr, lineno=1)]\n        template = self.from_string(nodes.Template(body, lineno=1))\n        return TemplateExpression(template, undefined_to_none)\n\n    def compile_templates(\n        self,\n        target: t.Union[str, os.PathLike],\n        extensions: t.Optional[t.Collection[str]] = None,\n        filter_func: t.Optional[t.Callable[[str], bool]] = None,\n        zip: t.Optional[str] = \"deflated\",\n        log_function: t.Optional[t.Callable[[str], None]] = None,\n        ignore_errors: bool = True,\n    ) -> None:\n        \"\"\"Finds all the templates the loader can find, compiles them\n        and stores them in `target`.  If `zip` is `None`, instead of in a\n        zipfile, the templates will be stored in a directory.\n        By default a deflate zip algorithm is used. To switch to\n        the stored algorithm, `zip` can be set to ``'stored'``.\n\n        `extensions` and `filter_func` are passed to :meth:`list_templates`.\n        Each template returned will be compiled to the target folder or\n        zipfile.\n\n        By default template compilation errors are ignored.  In case a\n        log function is provided, errors are logged.  If you want template\n        syntax errors to abort the compilation you can set `ignore_errors`\n        to `False` and you will get an exception on syntax errors.\n\n        .. versionadded:: 2.4\n        \"\"\"\n        from .loaders import ModuleLoader\n\n        if log_function is None:\n\n            def log_function(x: str) -> None:\n                pass\n\n        assert log_function is not None\n        assert self.loader is not None, \"No loader configured.\"\n\n        def write_file(filename: str, data: str) -> None:\n            if zip:\n                info = ZipInfo(filename)\n                info.external_attr = 0o755 << 16\n                zip_file.writestr(info, data)\n            else:\n                with open(os.path.join(target, filename), \"wb\") as f:\n                    f.write(data.encode(\"utf8\"))\n\n        if zip is not None:\n            from zipfile import ZipFile, ZipInfo, ZIP_DEFLATED, ZIP_STORED\n\n            zip_file = ZipFile(\n                target, \"w\", dict(deflated=ZIP_DEFLATED, stored=ZIP_STORED)[zip]\n            )\n            log_function(f\"Compiling into Zip archive {target!r}\")\n        else:\n            if not os.path.isdir(target):\n                os.makedirs(target)\n            log_function(f\"Compiling into folder {target!r}\")\n\n        try:\n            for name in self.list_templates(extensions, filter_func):\n                source, filename, _ = self.loader.get_source(self, name)\n                try:\n                    code = self.compile(source, name, filename, True, True)\n                except TemplateSyntaxError as e:\n                    if not ignore_errors:\n                        raise\n                    log_function(f'Could not compile \"{name}\": {e}')\n                    continue\n\n                filename = ModuleLoader.get_module_filename(name)\n\n                write_file(filename, code)\n                log_function(f'Compiled \"{name}\" as {filename}')\n        finally:\n            if zip:\n                zip_file.close()\n\n        log_function(\"Finished compiling templates\")\n\n    def list_templates(\n        self,\n        extensions: t.Optional[t.Collection[str]] = None,\n        filter_func: t.Optional[t.Callable[[str], bool]] = None,\n    ) -> t.List[str]:\n        \"\"\"Returns a list of templates for this environment.  This requires\n        that the loader supports the loader's\n        :meth:`~BaseLoader.list_templates` method.\n\n        If there are other files in the template folder besides the\n        actual templates, the returned list can be filtered.  There are two\n        ways: either `extensions` is set to a list of file extensions for\n        templates, or a `filter_func` can be provided which is a callable that\n        is passed a template name and should return `True` if it should end up\n        in the result list.\n\n        If the loader does not support that, a :exc:`TypeError` is raised.\n\n        .. versionadded:: 2.4\n        \"\"\"\n        assert self.loader is not None, \"No loader configured.\"\n        names = self.loader.list_templates()\n\n        if extensions is not None:\n            if filter_func is not None:\n                raise TypeError(\n                    \"either extensions or filter_func can be passed, but not both\"\n                )\n\n            def filter_func(x: str) -> bool:\n                return \".\" in x and x.rsplit(\".\", 1)[1] in extensions  # type: ignore\n\n        if filter_func is not None:\n            names = [name for name in names if filter_func(name)]\n\n        return names\n\n    def handle_exception(self, source: t.Optional[str] = None) -> \"te.NoReturn\":\n        \"\"\"Exception handling helper.  This is used internally to either raise\n        rewritten exceptions or return a rendered traceback for the template.\n        \"\"\"\n        from .debug import rewrite_traceback_stack\n\n        raise rewrite_traceback_stack(source=source)\n\n    def join_path(self, template: str, parent: str) -> str:\n        \"\"\"Join a template with the parent.  By default all the lookups are\n        relative to the loader root so this method returns the `template`\n        parameter unchanged, but if the paths should be relative to the\n        parent template, this function can be used to calculate the real\n        template name.\n\n        Subclasses may override this method and implement template path\n        joining here.\n        \"\"\"\n        return template\n\n    @internalcode\n    def _load_template(\n        self, name: str, globals: t.Optional[t.Mapping[str, t.Any]]\n    ) -> \"Template\":\n        if self.loader is None:\n            raise TypeError(\"no loader for this environment specified\")\n        cache_key = (weakref.ref(self.loader), name)\n        if self.cache is not None:\n            template = self.cache.get(cache_key)\n            if template is not None and (\n                not self.auto_reload or template.is_up_to_date\n            ):\n                # template.globals is a ChainMap, modifying it will only\n                # affect the template, not the environment globals.\n                if globals:\n                    template.globals.update(globals)\n\n                return template\n\n        template = self.loader.load(self, name, self.make_globals(globals))\n\n        if self.cache is not None:\n            self.cache[cache_key] = template\n        return template\n\n    @internalcode\n    def get_template(\n        self,\n        name: t.Union[str, \"Template\"],\n        parent: t.Optional[str] = None,\n        globals: t.Optional[t.Mapping[str, t.Any]] = None,\n    ) -> \"Template\":\n        \"\"\"Load a template by name with :attr:`loader` and return a\n        :class:`Template`. If the template does not exist a\n        :exc:`TemplateNotFound` exception is raised.\n\n        :param name: Name of the template to load.\n        :param parent: The name of the parent template importing this\n            template. :meth:`join_path` can be used to implement name\n            transformations with this.\n        :param globals: Extend the environment :attr:`globals` with\n            these extra variables available for all renders of this\n            template. If the template has already been loaded and\n            cached, its globals are updated with any new items.\n\n        .. versionchanged:: 3.0\n            If a template is loaded from cache, ``globals`` will update\n            the template's globals instead of ignoring the new values.\n\n        .. versionchanged:: 2.4\n            If ``name`` is a :class:`Template` object it is returned\n            unchanged.\n        \"\"\"\n        if isinstance(name, Template):\n            return name\n        if parent is not None:\n            name = self.join_path(name, parent)\n\n        return self._load_template(name, globals)\n\n    @internalcode\n    def select_template(\n        self,\n        names: t.Iterable[t.Union[str, \"Template\"]],\n        parent: t.Optional[str] = None,\n        globals: t.Optional[t.Mapping[str, t.Any]] = None,\n    ) -> \"Template\":\n        \"\"\"Like :meth:`get_template`, but tries loading multiple names.\n        If none of the names can be loaded a :exc:`TemplatesNotFound`\n        exception is raised.\n\n        :param names: List of template names to try loading in order.\n        :param parent: The name of the parent template importing this\n            template. :meth:`join_path` can be used to implement name\n            transformations with this.\n        :param globals: Extend the environment :attr:`globals` with\n            these extra variables available for all renders of this\n            template. If the template has already been loaded and\n            cached, its globals are updated with any new items.\n\n        .. versionchanged:: 3.0\n            If a template is loaded from cache, ``globals`` will update\n            the template's globals instead of ignoring the new values.\n\n        .. versionchanged:: 2.11\n            If ``names`` is :class:`Undefined`, an :exc:`UndefinedError`\n            is raised instead. If no templates were found and ``names``\n            contains :class:`Undefined`, the message is more helpful.\n\n        .. versionchanged:: 2.4\n            If ``names`` contains a :class:`Template` object it is\n            returned unchanged.\n\n        .. versionadded:: 2.3\n        \"\"\"\n        if isinstance(names, Undefined):\n            names._fail_with_undefined_error()\n\n        if not names:\n            raise TemplatesNotFound(\n                message=\"Tried to select from an empty list of templates.\"\n            )\n\n        for name in names:\n            if isinstance(name, Template):\n                return name\n            if parent is not None:\n                name = self.join_path(name, parent)\n            try:\n                return self._load_template(name, globals)\n            except (TemplateNotFound, UndefinedError):\n                pass\n        raise TemplatesNotFound(names)  # type: ignore\n\n    @internalcode\n    def get_or_select_template(\n        self,\n        template_name_or_list: t.Union[\n            str, \"Template\", t.List[t.Union[str, \"Template\"]]\n        ],\n        parent: t.Optional[str] = None,\n        globals: t.Optional[t.Mapping[str, t.Any]] = None,\n    ) -> \"Template\":\n        \"\"\"Use :meth:`select_template` if an iterable of template names\n        is given, or :meth:`get_template` if one name is given.\n\n        .. versionadded:: 2.3\n        \"\"\"\n        if isinstance(template_name_or_list, (str, Undefined)):\n            return self.get_template(template_name_or_list, parent, globals)\n        elif isinstance(template_name_or_list, Template):\n            return template_name_or_list\n        return self.select_template(template_name_or_list, parent, globals)\n\n    def from_string(\n        self,\n        source: t.Union[str, nodes.Template],\n        globals: t.Optional[t.Mapping[str, t.Any]] = None,\n        template_class: t.Optional[t.Type[\"Template\"]] = None,\n    ) -> \"Template\":\n        \"\"\"Load a template from a source string without using\n        :attr:`loader`.\n\n        :param source: Jinja source to compile into a template.\n        :param globals: Extend the environment :attr:`globals` with\n            these extra variables available for all renders of this\n            template. If the template has already been loaded and\n            cached, its globals are updated with any new items.\n        :param template_class: Return an instance of this\n            :class:`Template` class.\n        \"\"\"\n        gs = self.make_globals(globals)\n        cls = template_class or self.template_class\n        return cls.from_code(self, self.compile(source), gs, None)\n\n    def make_globals(\n        self, d: t.Optional[t.Mapping[str, t.Any]]\n    ) -> t.MutableMapping[str, t.Any]:\n        \"\"\"Make the globals map for a template. Any given template\n        globals overlay the environment :attr:`globals`.\n\n        Returns a :class:`collections.ChainMap`. This allows any changes\n        to a template's globals to only affect that template, while\n        changes to the environment's globals are still reflected.\n        However, avoid modifying any globals after a template is loaded.\n\n        :param d: Dict of template-specific globals.\n\n        .. versionchanged:: 3.0\n            Use :class:`collections.ChainMap` to always prevent mutating\n            environment globals.\n        \"\"\"\n        if d is None:\n            d = {}\n\n        return ChainMap(d, self.globals)\n\n\nclass Template:\n    \"\"\"A compiled template that can be rendered.\n\n    Use the methods on :class:`Environment` to create or load templates.\n    The environment is used to configure how templates are compiled and\n    behave.\n\n    It is also possible to create a template object directly. This is\n    not usually recommended. The constructor takes most of the same\n    arguments as :class:`Environment`. All templates created with the\n    same environment arguments share the same ephemeral ``Environment``\n    instance behind the scenes.\n\n    A template object should be considered immutable. Modifications on\n    the object are not supported.\n    \"\"\"\n\n    #: Type of environment to create when creating a template directly\n    #: rather than through an existing environment.\n    environment_class: t.Type[Environment] = Environment\n\n    environment: Environment\n    globals: t.MutableMapping[str, t.Any]\n    name: t.Optional[str]\n    filename: t.Optional[str]\n    blocks: t.Dict[str, t.Callable[[Context], t.Iterator[str]]]\n    root_render_func: t.Callable[[Context], t.Iterator[str]]\n    _module: t.Optional[\"TemplateModule\"]\n    _debug_info: str\n    _uptodate: t.Optional[t.Callable[[], bool]]\n\n    def __new__(\n        cls,\n        source: t.Union[str, nodes.Template],\n        block_start_string: str = BLOCK_START_STRING,\n        block_end_string: str = BLOCK_END_STRING,\n        variable_start_string: str = VARIABLE_START_STRING,\n        variable_end_string: str = VARIABLE_END_STRING,\n        comment_start_string: str = COMMENT_START_STRING,\n        comment_end_string: str = COMMENT_END_STRING,\n        line_statement_prefix: t.Optional[str] = LINE_STATEMENT_PREFIX,\n        line_comment_prefix: t.Optional[str] = LINE_COMMENT_PREFIX,\n        trim_blocks: bool = TRIM_BLOCKS,\n        lstrip_blocks: bool = LSTRIP_BLOCKS,\n        newline_sequence: \"te.Literal['\\\\n', '\\\\r\\\\n', '\\\\r']\" = NEWLINE_SEQUENCE,\n        keep_trailing_newline: bool = KEEP_TRAILING_NEWLINE,\n        extensions: t.Sequence[t.Union[str, t.Type[\"Extension\"]]] = (),\n        optimized: bool = True,\n        undefined: t.Type[Undefined] = Undefined,\n        finalize: t.Optional[t.Callable[..., t.Any]] = None,\n        autoescape: t.Union[bool, t.Callable[[t.Optional[str]], bool]] = False,\n        enable_async: bool = False,\n    ) -> t.Any:  # it returns a `Template`, but this breaks the sphinx build...\n        env = get_spontaneous_environment(\n            cls.environment_class,  # type: ignore\n            block_start_string,\n            block_end_string,\n            variable_start_string,\n            variable_end_string,\n            comment_start_string,\n            comment_end_string,\n            line_statement_prefix,\n            line_comment_prefix,\n            trim_blocks,\n            lstrip_blocks,\n            newline_sequence,\n            keep_trailing_newline,\n            frozenset(extensions),\n            optimized,\n            undefined,  # type: ignore\n            finalize,\n            autoescape,\n            None,\n            0,\n            False,\n            None,\n            enable_async,\n        )\n        return env.from_string(source, template_class=cls)\n\n    @classmethod\n    def from_code(\n        cls,\n        environment: Environment,\n        code: CodeType,\n        globals: t.MutableMapping[str, t.Any],\n        uptodate: t.Optional[t.Callable[[], bool]] = None,\n    ) -> \"Template\":\n        \"\"\"Creates a template object from compiled code and the globals.  This\n        is used by the loaders and environment to create a template object.\n        \"\"\"\n        namespace = {\"environment\": environment, \"__file__\": code.co_filename}\n        exec(code, namespace)\n        rv = cls._from_namespace(environment, namespace, globals)\n        rv._uptodate = uptodate\n        return rv\n\n    @classmethod\n    def from_module_dict(\n        cls,\n        environment: Environment,\n        module_dict: t.MutableMapping[str, t.Any],\n        globals: t.MutableMapping[str, t.Any],\n    ) -> \"Template\":\n        \"\"\"Creates a template object from a module.  This is used by the\n        module loader to create a template object.\n\n        .. versionadded:: 2.4\n        \"\"\"\n        return cls._from_namespace(environment, module_dict, globals)\n\n    @classmethod\n    def _from_namespace(\n        cls,\n        environment: Environment,\n        namespace: t.MutableMapping[str, t.Any],\n        globals: t.MutableMapping[str, t.Any],\n    ) -> \"Template\":\n        t: \"Template\" = object.__new__(cls)\n        t.environment = environment\n        t.globals = globals\n        t.name = namespace[\"name\"]\n        t.filename = namespace[\"__file__\"]\n        t.blocks = namespace[\"blocks\"]\n\n        # render function and module\n        t.root_render_func = namespace[\"root\"]  # type: ignore\n        t._module = None\n\n        # debug and loader helpers\n        t._debug_info = namespace[\"debug_info\"]\n        t._uptodate = None\n\n        # store the reference\n        namespace[\"environment\"] = environment\n        namespace[\"__jinja_template__\"] = t\n\n        return t\n\n    def render(self, *args: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"This method accepts the same arguments as the `dict` constructor:\n        A dict, a dict subclass or some keyword arguments.  If no arguments\n        are given the context will be empty.  These two calls do the same::\n\n            template.render(knights='that say nih')\n            template.render({'knights': 'that say nih'})\n\n        This will return the rendered template as a string.\n        \"\"\"\n        if self.environment.is_async:\n            import asyncio\n\n            close = False\n\n            if sys.version_info < (3, 7):\n                loop = asyncio.get_event_loop()\n            else:\n                try:\n                    loop = asyncio.get_running_loop()\n                except RuntimeError:\n                    loop = asyncio.new_event_loop()\n                    close = True\n\n            try:\n                return loop.run_until_complete(self.render_async(*args, **kwargs))\n            finally:\n                if close:\n                    loop.close()\n\n        ctx = self.new_context(dict(*args, **kwargs))\n\n        try:\n            return concat(self.root_render_func(ctx))  # type: ignore\n        except Exception:\n            self.environment.handle_exception()\n\n    async def render_async(self, *args: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"This works similar to :meth:`render` but returns a coroutine\n        that when awaited returns the entire rendered template string.  This\n        requires the async feature to be enabled.\n\n        Example usage::\n\n            await template.render_async(knights='that say nih; asynchronously')\n        \"\"\"\n        if not self.environment.is_async:\n            raise RuntimeError(\n                \"The environment was not created with async mode enabled.\"\n            )\n\n        ctx = self.new_context(dict(*args, **kwargs))\n\n        try:\n            return concat([n async for n in self.root_render_func(ctx)])  # type: ignore\n        except Exception:\n            return self.environment.handle_exception()\n\n    def stream(self, *args: t.Any, **kwargs: t.Any) -> \"TemplateStream\":\n        \"\"\"Works exactly like :meth:`generate` but returns a\n        :class:`TemplateStream`.\n        \"\"\"\n        return TemplateStream(self.generate(*args, **kwargs))\n\n    def generate(self, *args: t.Any, **kwargs: t.Any) -> t.Iterator[str]:\n        \"\"\"For very large templates it can be useful to not render the whole\n        template at once but evaluate each statement after another and yield\n        piece for piece.  This method basically does exactly that and returns\n        a generator that yields one item after another as strings.\n\n        It accepts the same arguments as :meth:`render`.\n        \"\"\"\n        if self.environment.is_async:\n            import asyncio\n\n            async def to_list() -> t.List[str]:\n                return [x async for x in self.generate_async(*args, **kwargs)]\n\n            if sys.version_info < (3, 7):\n                loop = asyncio.get_event_loop()\n                out = loop.run_until_complete(to_list())\n            else:\n                out = asyncio.run(to_list())\n\n            yield from out\n            return\n\n        ctx = self.new_context(dict(*args, **kwargs))\n\n        try:\n            yield from self.root_render_func(ctx)  # type: ignore\n        except Exception:\n            yield self.environment.handle_exception()\n\n    async def generate_async(\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.AsyncIterator[str]:\n        \"\"\"An async version of :meth:`generate`.  Works very similarly but\n        returns an async iterator instead.\n        \"\"\"\n        if not self.environment.is_async:\n            raise RuntimeError(\n                \"The environment was not created with async mode enabled.\"\n            )\n\n        ctx = self.new_context(dict(*args, **kwargs))\n\n        try:\n            async for event in self.root_render_func(ctx):  # type: ignore\n                yield event\n        except Exception:\n            yield self.environment.handle_exception()\n\n    def new_context(\n        self,\n        vars: t.Optional[t.Dict[str, t.Any]] = None,\n        shared: bool = False,\n        locals: t.Optional[t.Mapping[str, t.Any]] = None,\n    ) -> Context:\n        \"\"\"Create a new :class:`Context` for this template.  The vars\n        provided will be passed to the template.  Per default the globals\n        are added to the context.  If shared is set to `True` the data\n        is passed as is to the context without adding the globals.\n\n        `locals` can be a dict of local variables for internal usage.\n        \"\"\"\n        return new_context(\n            self.environment, self.name, self.blocks, vars, shared, self.globals, locals\n        )\n\n    def make_module(\n        self,\n        vars: t.Optional[t.Dict[str, t.Any]] = None,\n        shared: bool = False,\n        locals: t.Optional[t.Mapping[str, t.Any]] = None,\n    ) -> \"TemplateModule\":\n        \"\"\"This method works like the :attr:`module` attribute when called\n        without arguments but it will evaluate the template on every call\n        rather than caching it.  It's also possible to provide\n        a dict which is then used as context.  The arguments are the same\n        as for the :meth:`new_context` method.\n        \"\"\"\n        ctx = self.new_context(vars, shared, locals)\n        return TemplateModule(self, ctx)\n\n    async def make_module_async(\n        self,\n        vars: t.Optional[t.Dict[str, t.Any]] = None,\n        shared: bool = False,\n        locals: t.Optional[t.Mapping[str, t.Any]] = None,\n    ) -> \"TemplateModule\":\n        \"\"\"As template module creation can invoke template code for\n        asynchronous executions this method must be used instead of the\n        normal :meth:`make_module` one.  Likewise the module attribute\n        becomes unavailable in async mode.\n        \"\"\"\n        ctx = self.new_context(vars, shared, locals)\n        return TemplateModule(\n            self, ctx, [x async for x in self.root_render_func(ctx)]  # type: ignore\n        )\n\n    @internalcode\n    def _get_default_module(self, ctx: t.Optional[Context] = None) -> \"TemplateModule\":\n        \"\"\"If a context is passed in, this means that the template was\n        imported. Imported templates have access to the current\n        template's globals by default, but they can only be accessed via\n        the context during runtime.\n\n        If there are new globals, we need to create a new module because\n        the cached module is already rendered and will not have access\n        to globals from the current context. This new module is not\n        cached because the template can be imported elsewhere, and it\n        should have access to only the current template's globals.\n        \"\"\"\n        if self.environment.is_async:\n            raise RuntimeError(\"Module is not available in async mode.\")\n\n        if ctx is not None:\n            keys = ctx.globals_keys - self.globals.keys()\n\n            if keys:\n                return self.make_module({k: ctx.parent[k] for k in keys})\n\n        if self._module is None:\n            self._module = self.make_module()\n\n        return self._module\n\n    async def _get_default_module_async(\n        self, ctx: t.Optional[Context] = None\n    ) -> \"TemplateModule\":\n        if ctx is not None:\n            keys = ctx.globals_keys - self.globals.keys()\n\n            if keys:\n                return await self.make_module_async({k: ctx.parent[k] for k in keys})\n\n        if self._module is None:\n            self._module = await self.make_module_async()\n\n        return self._module\n\n    @property\n    def module(self) -> \"TemplateModule\":\n        \"\"\"The template as module.  This is used for imports in the\n        template runtime but is also useful if one wants to access\n        exported template variables from the Python layer:\n\n        >>> t = Template('{% macro foo() %}42{% endmacro %}23')\n        >>> str(t.module)\n        '23'\n        >>> t.module.foo() == u'42'\n        True\n\n        This attribute is not available if async mode is enabled.\n        \"\"\"\n        return self._get_default_module()\n\n    def get_corresponding_lineno(self, lineno: int) -> int:\n        \"\"\"Return the source line number of a line number in the\n        generated bytecode as they are not in sync.\n        \"\"\"\n        for template_line, code_line in reversed(self.debug_info):\n            if code_line <= lineno:\n                return template_line\n        return 1\n\n    @property\n    def is_up_to_date(self) -> bool:\n        \"\"\"If this variable is `False` there is a newer version available.\"\"\"\n        if self._uptodate is None:\n            return True\n        return self._uptodate()\n\n    @property\n    def debug_info(self) -> t.List[t.Tuple[int, int]]:\n        \"\"\"The debug info mapping.\"\"\"\n        if self._debug_info:\n            return [\n                tuple(map(int, x.split(\"=\")))  # type: ignore\n                for x in self._debug_info.split(\"&\")\n            ]\n\n        return []\n\n    def __repr__(self) -> str:\n        if self.name is None:\n            name = f\"memory:{id(self):x}\"\n        else:\n            name = repr(self.name)\n        return f\"<{type(self).__name__} {name}>\"\n\n\nclass TemplateModule:\n    \"\"\"Represents an imported template.  All the exported names of the\n    template are available as attributes on this object.  Additionally\n    converting it into a string renders the contents.\n    \"\"\"\n\n    def __init__(\n        self,\n        template: Template,\n        context: Context,\n        body_stream: t.Optional[t.Iterable[str]] = None,\n    ) -> None:\n        if body_stream is None:\n            if context.environment.is_async:\n                raise RuntimeError(\n                    \"Async mode requires a body stream to be passed to\"\n                    \" a template module. Use the async methods of the\"\n                    \" API you are using.\"\n                )\n\n            body_stream = list(template.root_render_func(context))  # type: ignore\n\n        self._body_stream = body_stream\n        self.__dict__.update(context.get_exported())\n        self.__name__ = template.name\n\n    def __html__(self) -> Markup:\n        return Markup(concat(self._body_stream))\n\n    def __str__(self) -> str:\n        return concat(self._body_stream)\n\n    def __repr__(self) -> str:\n        if self.__name__ is None:\n            name = f\"memory:{id(self):x}\"\n        else:\n            name = repr(self.__name__)\n        return f\"<{type(self).__name__} {name}>\"\n\n\nclass TemplateExpression:\n    \"\"\"The :meth:`jinja2.Environment.compile_expression` method returns an\n    instance of this object.  It encapsulates the expression-like access\n    to the template with an expression it wraps.\n    \"\"\"\n\n    def __init__(self, template: Template, undefined_to_none: bool) -> None:\n        self._template = template\n        self._undefined_to_none = undefined_to_none\n\n    def __call__(self, *args: t.Any, **kwargs: t.Any) -> t.Optional[t.Any]:\n        context = self._template.new_context(dict(*args, **kwargs))\n        consume(self._template.root_render_func(context))  # type: ignore\n        rv = context.vars[\"result\"]\n        if self._undefined_to_none and isinstance(rv, Undefined):\n            rv = None\n        return rv\n\n\nclass TemplateStream:\n    \"\"\"A template stream works pretty much like an ordinary python generator\n    but it can buffer multiple items to reduce the number of total iterations.\n    Per default the output is unbuffered which means that for every unbuffered\n    instruction in the template one string is yielded.\n\n    If buffering is enabled with a buffer size of 5, five items are combined\n    into a new string.  This is mainly useful if you are streaming\n    big templates to a client via WSGI which flushes after each iteration.\n    \"\"\"\n\n    def __init__(self, gen: t.Iterator[str]) -> None:\n        self._gen = gen\n        self.disable_buffering()\n\n    def dump(\n        self,\n        fp: t.Union[str, t.IO],\n        encoding: t.Optional[str] = None,\n        errors: t.Optional[str] = \"strict\",\n    ) -> None:\n        \"\"\"Dump the complete stream into a file or file-like object.\n        Per default strings are written, if you want to encode\n        before writing specify an `encoding`.\n\n        Example usage::\n\n            Template('Hello {{ name }}!').stream(name='foo').dump('hello.html')\n        \"\"\"\n        close = False\n\n        if isinstance(fp, str):\n            if encoding is None:\n                encoding = \"utf-8\"\n\n            fp = open(fp, \"wb\")\n            close = True\n        try:\n            if encoding is not None:\n                iterable = (x.encode(encoding, errors) for x in self)  # type: ignore\n            else:\n                iterable = self  # type: ignore\n\n            if hasattr(fp, \"writelines\"):\n                fp.writelines(iterable)\n            else:\n                for item in iterable:\n                    fp.write(item)\n        finally:\n            if close:\n                fp.close()\n\n    def disable_buffering(self) -> None:\n        \"\"\"Disable the output buffering.\"\"\"\n        self._next = partial(next, self._gen)\n        self.buffered = False\n\n    def _buffered_generator(self, size: int) -> t.Iterator[str]:\n        buf: t.List[str] = []\n        c_size = 0\n        push = buf.append\n\n        while True:\n            try:\n                while c_size < size:\n                    c = next(self._gen)\n                    push(c)\n                    if c:\n                        c_size += 1\n            except StopIteration:\n                if not c_size:\n                    return\n            yield concat(buf)\n            del buf[:]\n            c_size = 0\n\n    def enable_buffering(self, size: int = 5) -> None:\n        \"\"\"Enable buffering.  Buffer `size` items before yielding them.\"\"\"\n        if size <= 1:\n            raise ValueError(\"buffer size too small\")\n\n        self.buffered = True\n        self._next = partial(next, self._buffered_generator(size))\n\n    def __iter__(self) -> \"TemplateStream\":\n        return self\n\n    def __next__(self) -> str:\n        return self._next()  # type: ignore\n\n\n# hook in default template class.  if anyone reads this comment: ignore that\n# it's possible to use custom templates ;-)\nEnvironment.template_class = Template\n", 1661], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py": ["import codecs\nimport io\nimport os\nimport re\nimport sys\nimport typing as t\nfrom weakref import WeakKeyDictionary\n\nCYGWIN = sys.platform.startswith(\"cygwin\")\nMSYS2 = sys.platform.startswith(\"win\") and (\"GCC\" in sys.version)\n# Determine local App Engine environment, per Google's own suggestion\nAPP_ENGINE = \"APPENGINE_RUNTIME\" in os.environ and \"Development/\" in os.environ.get(\n    \"SERVER_SOFTWARE\", \"\"\n)\nWIN = sys.platform.startswith(\"win\") and not APP_ENGINE and not MSYS2\nauto_wrap_for_ansi: t.Optional[t.Callable[[t.TextIO], t.TextIO]] = None\n_ansi_re = re.compile(r\"\\033\\[[;?0-9]*[a-zA-Z]\")\n\n\ndef get_filesystem_encoding() -> str:\n    return sys.getfilesystemencoding() or sys.getdefaultencoding()\n\n\ndef _make_text_stream(\n    stream: t.BinaryIO,\n    encoding: t.Optional[str],\n    errors: t.Optional[str],\n    force_readable: bool = False,\n    force_writable: bool = False,\n) -> t.TextIO:\n    if encoding is None:\n        encoding = get_best_encoding(stream)\n    if errors is None:\n        errors = \"replace\"\n    return _NonClosingTextIOWrapper(\n        stream,\n        encoding,\n        errors,\n        line_buffering=True,\n        force_readable=force_readable,\n        force_writable=force_writable,\n    )\n\n\ndef is_ascii_encoding(encoding: str) -> bool:\n    \"\"\"Checks if a given encoding is ascii.\"\"\"\n    try:\n        return codecs.lookup(encoding).name == \"ascii\"\n    except LookupError:\n        return False\n\n\ndef get_best_encoding(stream: t.IO) -> str:\n    \"\"\"Returns the default stream encoding if not found.\"\"\"\n    rv = getattr(stream, \"encoding\", None) or sys.getdefaultencoding()\n    if is_ascii_encoding(rv):\n        return \"utf-8\"\n    return rv\n\n\nclass _NonClosingTextIOWrapper(io.TextIOWrapper):\n    def __init__(\n        self,\n        stream: t.BinaryIO,\n        encoding: t.Optional[str],\n        errors: t.Optional[str],\n        force_readable: bool = False,\n        force_writable: bool = False,\n        **extra: t.Any,\n    ) -> None:\n        self._stream = stream = t.cast(\n            t.BinaryIO, _FixupStream(stream, force_readable, force_writable)\n        )\n        super().__init__(stream, encoding, errors, **extra)\n\n    def __del__(self) -> None:\n        try:\n            self.detach()\n        except Exception:\n            pass\n\n    def isatty(self) -> bool:\n        # https://bitbucket.org/pypy/pypy/issue/1803\n        return self._stream.isatty()\n\n\nclass _FixupStream:\n    \"\"\"The new io interface needs more from streams than streams\n    traditionally implement.  As such, this fix-up code is necessary in\n    some circumstances.\n\n    The forcing of readable and writable flags are there because some tools\n    put badly patched objects on sys (one such offender are certain version\n    of jupyter notebook).\n    \"\"\"\n\n    def __init__(\n        self,\n        stream: t.BinaryIO,\n        force_readable: bool = False,\n        force_writable: bool = False,\n    ):\n        self._stream = stream\n        self._force_readable = force_readable\n        self._force_writable = force_writable\n\n    def __getattr__(self, name: str) -> t.Any:\n        return getattr(self._stream, name)\n\n    def read1(self, size: int) -> bytes:\n        f = getattr(self._stream, \"read1\", None)\n\n        if f is not None:\n            return t.cast(bytes, f(size))\n\n        return self._stream.read(size)\n\n    def readable(self) -> bool:\n        if self._force_readable:\n            return True\n        x = getattr(self._stream, \"readable\", None)\n        if x is not None:\n            return t.cast(bool, x())\n        try:\n            self._stream.read(0)\n        except Exception:\n            return False\n        return True\n\n    def writable(self) -> bool:\n        if self._force_writable:\n            return True\n        x = getattr(self._stream, \"writable\", None)\n        if x is not None:\n            return t.cast(bool, x())\n        try:\n            self._stream.write(\"\")  # type: ignore\n        except Exception:\n            try:\n                self._stream.write(b\"\")\n            except Exception:\n                return False\n        return True\n\n    def seekable(self) -> bool:\n        x = getattr(self._stream, \"seekable\", None)\n        if x is not None:\n            return t.cast(bool, x())\n        try:\n            self._stream.seek(self._stream.tell())\n        except Exception:\n            return False\n        return True\n\n\ndef _is_binary_reader(stream: t.IO, default: bool = False) -> bool:\n    try:\n        return isinstance(stream.read(0), bytes)\n    except Exception:\n        return default\n        # This happens in some cases where the stream was already\n        # closed.  In this case, we assume the default.\n\n\ndef _is_binary_writer(stream: t.IO, default: bool = False) -> bool:\n    try:\n        stream.write(b\"\")\n    except Exception:\n        try:\n            stream.write(\"\")\n            return False\n        except Exception:\n            pass\n        return default\n    return True\n\n\ndef _find_binary_reader(stream: t.IO) -> t.Optional[t.BinaryIO]:\n    # We need to figure out if the given stream is already binary.\n    # This can happen because the official docs recommend detaching\n    # the streams to get binary streams.  Some code might do this, so\n    # we need to deal with this case explicitly.\n    if _is_binary_reader(stream, False):\n        return t.cast(t.BinaryIO, stream)\n\n    buf = getattr(stream, \"buffer\", None)\n\n    # Same situation here; this time we assume that the buffer is\n    # actually binary in case it's closed.\n    if buf is not None and _is_binary_reader(buf, True):\n        return t.cast(t.BinaryIO, buf)\n\n    return None\n\n\ndef _find_binary_writer(stream: t.IO) -> t.Optional[t.BinaryIO]:\n    # We need to figure out if the given stream is already binary.\n    # This can happen because the official docs recommend detaching\n    # the streams to get binary streams.  Some code might do this, so\n    # we need to deal with this case explicitly.\n    if _is_binary_writer(stream, False):\n        return t.cast(t.BinaryIO, stream)\n\n    buf = getattr(stream, \"buffer\", None)\n\n    # Same situation here; this time we assume that the buffer is\n    # actually binary in case it's closed.\n    if buf is not None and _is_binary_writer(buf, True):\n        return t.cast(t.BinaryIO, buf)\n\n    return None\n\n\ndef _stream_is_misconfigured(stream: t.TextIO) -> bool:\n    \"\"\"A stream is misconfigured if its encoding is ASCII.\"\"\"\n    # If the stream does not have an encoding set, we assume it's set\n    # to ASCII.  This appears to happen in certain unittest\n    # environments.  It's not quite clear what the correct behavior is\n    # but this at least will force Click to recover somehow.\n    return is_ascii_encoding(getattr(stream, \"encoding\", None) or \"ascii\")\n\n\ndef _is_compat_stream_attr(stream: t.TextIO, attr: str, value: t.Optional[str]) -> bool:\n    \"\"\"A stream attribute is compatible if it is equal to the\n    desired value or the desired value is unset and the attribute\n    has a value.\n    \"\"\"\n    stream_value = getattr(stream, attr, None)\n    return stream_value == value or (value is None and stream_value is not None)\n\n\ndef _is_compatible_text_stream(\n    stream: t.TextIO, encoding: t.Optional[str], errors: t.Optional[str]\n) -> bool:\n    \"\"\"Check if a stream's encoding and errors attributes are\n    compatible with the desired values.\n    \"\"\"\n    return _is_compat_stream_attr(\n        stream, \"encoding\", encoding\n    ) and _is_compat_stream_attr(stream, \"errors\", errors)\n\n\ndef _force_correct_text_stream(\n    text_stream: t.IO,\n    encoding: t.Optional[str],\n    errors: t.Optional[str],\n    is_binary: t.Callable[[t.IO, bool], bool],\n    find_binary: t.Callable[[t.IO], t.Optional[t.BinaryIO]],\n    force_readable: bool = False,\n    force_writable: bool = False,\n) -> t.TextIO:\n    if is_binary(text_stream, False):\n        binary_reader = t.cast(t.BinaryIO, text_stream)\n    else:\n        text_stream = t.cast(t.TextIO, text_stream)\n        # If the stream looks compatible, and won't default to a\n        # misconfigured ascii encoding, return it as-is.\n        if _is_compatible_text_stream(text_stream, encoding, errors) and not (\n            encoding is None and _stream_is_misconfigured(text_stream)\n        ):\n            return text_stream\n\n        # Otherwise, get the underlying binary reader.\n        possible_binary_reader = find_binary(text_stream)\n\n        # If that's not possible, silently use the original reader\n        # and get mojibake instead of exceptions.\n        if possible_binary_reader is None:\n            return text_stream\n\n        binary_reader = possible_binary_reader\n\n    # Default errors to replace instead of strict in order to get\n    # something that works.\n    if errors is None:\n        errors = \"replace\"\n\n    # Wrap the binary stream in a text stream with the correct\n    # encoding parameters.\n    return _make_text_stream(\n        binary_reader,\n        encoding,\n        errors,\n        force_readable=force_readable,\n        force_writable=force_writable,\n    )\n\n\ndef _force_correct_text_reader(\n    text_reader: t.IO,\n    encoding: t.Optional[str],\n    errors: t.Optional[str],\n    force_readable: bool = False,\n) -> t.TextIO:\n    return _force_correct_text_stream(\n        text_reader,\n        encoding,\n        errors,\n        _is_binary_reader,\n        _find_binary_reader,\n        force_readable=force_readable,\n    )\n\n\ndef _force_correct_text_writer(\n    text_writer: t.IO,\n    encoding: t.Optional[str],\n    errors: t.Optional[str],\n    force_writable: bool = False,\n) -> t.TextIO:\n    return _force_correct_text_stream(\n        text_writer,\n        encoding,\n        errors,\n        _is_binary_writer,\n        _find_binary_writer,\n        force_writable=force_writable,\n    )\n\n\ndef get_binary_stdin() -> t.BinaryIO:\n    reader = _find_binary_reader(sys.stdin)\n    if reader is None:\n        raise RuntimeError(\"Was not able to determine binary stream for sys.stdin.\")\n    return reader\n\n\ndef get_binary_stdout() -> t.BinaryIO:\n    writer = _find_binary_writer(sys.stdout)\n    if writer is None:\n        raise RuntimeError(\"Was not able to determine binary stream for sys.stdout.\")\n    return writer\n\n\ndef get_binary_stderr() -> t.BinaryIO:\n    writer = _find_binary_writer(sys.stderr)\n    if writer is None:\n        raise RuntimeError(\"Was not able to determine binary stream for sys.stderr.\")\n    return writer\n\n\ndef get_text_stdin(\n    encoding: t.Optional[str] = None, errors: t.Optional[str] = None\n) -> t.TextIO:\n    rv = _get_windows_console_stream(sys.stdin, encoding, errors)\n    if rv is not None:\n        return rv\n    return _force_correct_text_reader(sys.stdin, encoding, errors, force_readable=True)\n\n\ndef get_text_stdout(\n    encoding: t.Optional[str] = None, errors: t.Optional[str] = None\n) -> t.TextIO:\n    rv = _get_windows_console_stream(sys.stdout, encoding, errors)\n    if rv is not None:\n        return rv\n    return _force_correct_text_writer(sys.stdout, encoding, errors, force_writable=True)\n\n\ndef get_text_stderr(\n    encoding: t.Optional[str] = None, errors: t.Optional[str] = None\n) -> t.TextIO:\n    rv = _get_windows_console_stream(sys.stderr, encoding, errors)\n    if rv is not None:\n        return rv\n    return _force_correct_text_writer(sys.stderr, encoding, errors, force_writable=True)\n\n\ndef _wrap_io_open(\n    file: t.Union[str, os.PathLike, int],\n    mode: str,\n    encoding: t.Optional[str],\n    errors: t.Optional[str],\n) -> t.IO:\n    \"\"\"Handles not passing ``encoding`` and ``errors`` in binary mode.\"\"\"\n    if \"b\" in mode:\n        return open(file, mode)\n\n    return open(file, mode, encoding=encoding, errors=errors)\n\n\ndef open_stream(\n    filename: str,\n    mode: str = \"r\",\n    encoding: t.Optional[str] = None,\n    errors: t.Optional[str] = \"strict\",\n    atomic: bool = False,\n) -> t.Tuple[t.IO, bool]:\n    binary = \"b\" in mode\n\n    # Standard streams first.  These are simple because they don't need\n    # special handling for the atomic flag.  It's entirely ignored.\n    if filename == \"-\":\n        if any(m in mode for m in [\"w\", \"a\", \"x\"]):\n            if binary:\n                return get_binary_stdout(), False\n            return get_text_stdout(encoding=encoding, errors=errors), False\n        if binary:\n            return get_binary_stdin(), False\n        return get_text_stdin(encoding=encoding, errors=errors), False\n\n    # Non-atomic writes directly go out through the regular open functions.\n    if not atomic:\n        return _wrap_io_open(filename, mode, encoding, errors), True\n\n    # Some usability stuff for atomic writes\n    if \"a\" in mode:\n        raise ValueError(\n            \"Appending to an existing file is not supported, because that\"\n            \" would involve an expensive `copy`-operation to a temporary\"\n            \" file. Open the file in normal `w`-mode and copy explicitly\"\n            \" if that's what you're after.\"\n        )\n    if \"x\" in mode:\n        raise ValueError(\"Use the `overwrite`-parameter instead.\")\n    if \"w\" not in mode:\n        raise ValueError(\"Atomic writes only make sense with `w`-mode.\")\n\n    # Atomic writes are more complicated.  They work by opening a file\n    # as a proxy in the same folder and then using the fdopen\n    # functionality to wrap it in a Python file.  Then we wrap it in an\n    # atomic file that moves the file over on close.\n    import errno\n    import random\n\n    try:\n        perm: t.Optional[int] = os.stat(filename).st_mode\n    except OSError:\n        perm = None\n\n    flags = os.O_RDWR | os.O_CREAT | os.O_EXCL\n\n    if binary:\n        flags |= getattr(os, \"O_BINARY\", 0)\n\n    while True:\n        tmp_filename = os.path.join(\n            os.path.dirname(filename),\n            f\".__atomic-write{random.randrange(1 << 32):08x}\",\n        )\n        try:\n            fd = os.open(tmp_filename, flags, 0o666 if perm is None else perm)\n            break\n        except OSError as e:\n            if e.errno == errno.EEXIST or (\n                os.name == \"nt\"\n                and e.errno == errno.EACCES\n                and os.path.isdir(e.filename)\n                and os.access(e.filename, os.W_OK)\n            ):\n                continue\n            raise\n\n    if perm is not None:\n        os.chmod(tmp_filename, perm)  # in case perm includes bits in umask\n\n    f = _wrap_io_open(fd, mode, encoding, errors)\n    af = _AtomicFile(f, tmp_filename, os.path.realpath(filename))\n    return t.cast(t.IO, af), True\n\n\nclass _AtomicFile:\n    def __init__(self, f: t.IO, tmp_filename: str, real_filename: str) -> None:\n        self._f = f\n        self._tmp_filename = tmp_filename\n        self._real_filename = real_filename\n        self.closed = False\n\n    @property\n    def name(self) -> str:\n        return self._real_filename\n\n    def close(self, delete: bool = False) -> None:\n        if self.closed:\n            return\n        self._f.close()\n        os.replace(self._tmp_filename, self._real_filename)\n        self.closed = True\n\n    def __getattr__(self, name: str) -> t.Any:\n        return getattr(self._f, name)\n\n    def __enter__(self) -> \"_AtomicFile\":\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):  # type: ignore\n        self.close(delete=exc_type is not None)\n\n    def __repr__(self) -> str:\n        return repr(self._f)\n\n\ndef strip_ansi(value: str) -> str:\n    return _ansi_re.sub(\"\", value)\n\n\ndef _is_jupyter_kernel_output(stream: t.IO) -> bool:\n    while isinstance(stream, (_FixupStream, _NonClosingTextIOWrapper)):\n        stream = stream._stream\n\n    return stream.__class__.__module__.startswith(\"ipykernel.\")\n\n\ndef should_strip_ansi(\n    stream: t.Optional[t.IO] = None, color: t.Optional[bool] = None\n) -> bool:\n    if color is None:\n        if stream is None:\n            stream = sys.stdin\n        return not isatty(stream) and not _is_jupyter_kernel_output(stream)\n    return not color\n\n\n# On Windows, wrap the output streams with colorama to support ANSI\n# color codes.\n# NOTE: double check is needed so mypy does not analyze this on Linux\nif sys.platform.startswith(\"win\") and WIN:\n    from ._winconsole import _get_windows_console_stream\n\n    def _get_argv_encoding() -> str:\n        import locale\n\n        return locale.getpreferredencoding()\n\n    _ansi_stream_wrappers: t.MutableMapping[t.TextIO, t.TextIO] = WeakKeyDictionary()\n\n    def auto_wrap_for_ansi(\n        stream: t.TextIO, color: t.Optional[bool] = None\n    ) -> t.TextIO:\n        \"\"\"Support ANSI color and style codes on Windows by wrapping a\n        stream with colorama.\n        \"\"\"\n        try:\n            cached = _ansi_stream_wrappers.get(stream)\n        except Exception:\n            cached = None\n\n        if cached is not None:\n            return cached\n\n        import colorama\n\n        strip = should_strip_ansi(stream, color)\n        ansi_wrapper = colorama.AnsiToWin32(stream, strip=strip)\n        rv = t.cast(t.TextIO, ansi_wrapper.stream)\n        _write = rv.write\n\n        def _safe_write(s):\n            try:\n                return _write(s)\n            except BaseException:\n                ansi_wrapper.reset_all()\n                raise\n\n        rv.write = _safe_write\n\n        try:\n            _ansi_stream_wrappers[stream] = rv\n        except Exception:\n            pass\n\n        return rv\n\n\nelse:\n\n    def _get_argv_encoding() -> str:\n        return getattr(sys.stdin, \"encoding\", None) or get_filesystem_encoding()\n\n    def _get_windows_console_stream(\n        f: t.TextIO, encoding: t.Optional[str], errors: t.Optional[str]\n    ) -> t.Optional[t.TextIO]:\n        return None\n\n\ndef term_len(x: str) -> int:\n    return len(strip_ansi(x))\n\n\ndef isatty(stream: t.IO) -> bool:\n    try:\n        return stream.isatty()\n    except Exception:\n        return False\n\n\ndef _make_cached_stream_func(\n    src_func: t.Callable[[], t.TextIO], wrapper_func: t.Callable[[], t.TextIO]\n) -> t.Callable[[], t.TextIO]:\n    cache: t.MutableMapping[t.TextIO, t.TextIO] = WeakKeyDictionary()\n\n    def func() -> t.TextIO:\n        stream = src_func()\n        try:\n            rv = cache.get(stream)\n        except Exception:\n            rv = None\n        if rv is not None:\n            return rv\n        rv = wrapper_func()\n        try:\n            cache[stream] = rv\n        except Exception:\n            pass\n        return rv\n\n    return func\n\n\n_default_text_stdin = _make_cached_stream_func(lambda: sys.stdin, get_text_stdin)\n_default_text_stdout = _make_cached_stream_func(lambda: sys.stdout, get_text_stdout)\n_default_text_stderr = _make_cached_stream_func(lambda: sys.stderr, get_text_stderr)\n\n\nbinary_streams: t.Mapping[str, t.Callable[[], t.BinaryIO]] = {\n    \"stdin\": get_binary_stdin,\n    \"stdout\": get_binary_stdout,\n    \"stderr\": get_binary_stderr,\n}\n\ntext_streams: t.Mapping[\n    str, t.Callable[[t.Optional[str], t.Optional[str]], t.TextIO]\n] = {\n    \"stdin\": get_text_stdin,\n    \"stdout\": get_text_stdout,\n    \"stderr\": get_text_stderr,\n}\n", 627], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py": ["\"\"\"Weak reference support for Python.\n\nThis module is an implementation of PEP 205:\n\nhttp://www.python.org/dev/peps/pep-0205/\n\"\"\"\n\n# Naming convention: Variables named \"wr\" are weak reference objects;\n# they are called this instead of \"ref\" to avoid name collisions with\n# the module-global ref() function imported from _weakref.\n\nfrom _weakref import (\n     getweakrefcount,\n     getweakrefs,\n     ref,\n     proxy,\n     CallableProxyType,\n     ProxyType,\n     ReferenceType,\n     _remove_dead_weakref)\n\nfrom _weakrefset import WeakSet, _IterationGuard\n\nimport _collections_abc  # Import after _weakref to avoid circular import.\nimport sys\nimport itertools\n\nProxyTypes = (ProxyType, CallableProxyType)\n\n__all__ = [\"ref\", \"proxy\", \"getweakrefcount\", \"getweakrefs\",\n           \"WeakKeyDictionary\", \"ReferenceType\", \"ProxyType\",\n           \"CallableProxyType\", \"ProxyTypes\", \"WeakValueDictionary\",\n           \"WeakSet\", \"WeakMethod\", \"finalize\"]\n\n\nclass WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"\n\n    __slots__ = \"_func_ref\", \"_meth_type\", \"_alive\", \"__weakref__\"\n\n    def __new__(cls, meth, callback=None):\n        try:\n            obj = meth.__self__\n            func = meth.__func__\n        except AttributeError:\n            raise TypeError(\"argument should be a bound method, not {}\"\n                            .format(type(meth))) from None\n        def _cb(arg):\n            # The self-weakref trick is needed to avoid creating a reference\n            # cycle.\n            self = self_wr()\n            if self._alive:\n                self._alive = False\n                if callback is not None:\n                    callback(self)\n        self = ref.__new__(cls, obj, _cb)\n        self._func_ref = ref(func, _cb)\n        self._meth_type = type(meth)\n        self._alive = True\n        self_wr = ref(self)\n        return self\n\n    def __call__(self):\n        obj = super().__call__()\n        func = self._func_ref()\n        if obj is None or func is None:\n            return None\n        return self._meth_type(func, obj)\n\n    def __eq__(self, other):\n        if isinstance(other, WeakMethod):\n            if not self._alive or not other._alive:\n                return self is other\n            return ref.__eq__(self, other) and self._func_ref == other._func_ref\n        return False\n\n    def __ne__(self, other):\n        if isinstance(other, WeakMethod):\n            if not self._alive or not other._alive:\n                return self is not other\n            return ref.__ne__(self, other) or self._func_ref != other._func_ref\n        return True\n\n    __hash__ = ref.__hash__\n\n\nclass WeakValueDictionary(_collections_abc.MutableMapping):\n    \"\"\"Mapping class that references values weakly.\n\n    Entries in the dictionary will be discarded when no strong\n    reference to the value exists anymore\n    \"\"\"\n    # We inherit the constructor without worrying about the input\n    # dictionary; since it uses our .update() method, we get the right\n    # checks (if the other dictionary is a WeakValueDictionary,\n    # objects are unwrapped on the way out, and we always wrap on the\n    # way in).\n\n    def __init__(*args, **kw):\n        if not args:\n            raise TypeError(\"descriptor '__init__' of 'WeakValueDictionary' \"\n                            \"object needs an argument\")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n        def remove(wr, selfref=ref(self), _atomic_removal=_remove_dead_weakref):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(wr.key)\n                else:\n                    # Atomic removal is necessary since this function\n                    # can be called asynchronously by the GC\n                    _atomic_removal(d, wr.key)\n        self._remove = remove\n        # A list of keys to be removed\n        self._pending_removals = []\n        self._iterating = set()\n        self.data = d = {}\n        self.update(*args, **kw)\n\n    def _commit_removals(self):\n        l = self._pending_removals\n        d = self.data\n        # We shouldn't encounter any KeyError, because this method should\n        # always be called *before* mutating the dict.\n        while l:\n            key = l.pop()\n            _remove_dead_weakref(d, key)\n\n    def __getitem__(self, key):\n        if self._pending_removals:\n            self._commit_removals()\n        o = self.data[key]()\n        if o is None:\n            raise KeyError(key)\n        else:\n            return o\n\n    def __delitem__(self, key):\n        if self._pending_removals:\n            self._commit_removals()\n        del self.data[key]\n\n    def __len__(self):\n        if self._pending_removals:\n            self._commit_removals()\n        return len(self.data)\n\n    def __contains__(self, key):\n        if self._pending_removals:\n            self._commit_removals()\n        try:\n            o = self.data[key]()\n        except KeyError:\n            return False\n        return o is not None\n\n    def __repr__(self):\n        return \"<%s at %#x>\" % (self.__class__.__name__, id(self))\n\n    def __setitem__(self, key, value):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data[key] = KeyedRef(value, self._remove, key)\n\n    def copy(self):\n        if self._pending_removals:\n            self._commit_removals()\n        new = WeakValueDictionary()\n        with _IterationGuard(self):\n            for key, wr in self.data.items():\n                o = wr()\n                if o is not None:\n                    new[key] = o\n        return new\n\n    __copy__ = copy\n\n    def __deepcopy__(self, memo):\n        from copy import deepcopy\n        if self._pending_removals:\n            self._commit_removals()\n        new = self.__class__()\n        with _IterationGuard(self):\n            for key, wr in self.data.items():\n                o = wr()\n                if o is not None:\n                    new[deepcopy(key, memo)] = o\n        return new\n\n    def get(self, key, default=None):\n        if self._pending_removals:\n            self._commit_removals()\n        try:\n            wr = self.data[key]\n        except KeyError:\n            return default\n        else:\n            o = wr()\n            if o is None:\n                # This should only happen\n                return default\n            else:\n                return o\n\n    def items(self):\n        if self._pending_removals:\n            self._commit_removals()\n        with _IterationGuard(self):\n            for k, wr in self.data.items():\n                v = wr()\n                if v is not None:\n                    yield k, v\n\n    def keys(self):\n        if self._pending_removals:\n            self._commit_removals()\n        with _IterationGuard(self):\n            for k, wr in self.data.items():\n                if wr() is not None:\n                    yield k\n\n    __iter__ = keys\n\n    def itervaluerefs(self):\n        \"\"\"Return an iterator that yields the weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        \"\"\"\n        if self._pending_removals:\n            self._commit_removals()\n        with _IterationGuard(self):\n            yield from self.data.values()\n\n    def values(self):\n        if self._pending_removals:\n            self._commit_removals()\n        with _IterationGuard(self):\n            for wr in self.data.values():\n                obj = wr()\n                if obj is not None:\n                    yield obj\n\n    def popitem(self):\n        if self._pending_removals:\n            self._commit_removals()\n        while True:\n            key, wr = self.data.popitem()\n            o = wr()\n            if o is not None:\n                return key, o\n\n    def pop(self, key, *args):\n        if self._pending_removals:\n            self._commit_removals()\n        try:\n            o = self.data.pop(key)()\n        except KeyError:\n            o = None\n        if o is None:\n            if args:\n                return args[0]\n            else:\n                raise KeyError(key)\n        else:\n            return o\n\n    def setdefault(self, key, default=None):\n        try:\n            o = self.data[key]()\n        except KeyError:\n            o = None\n        if o is None:\n            if self._pending_removals:\n                self._commit_removals()\n            self.data[key] = KeyedRef(default, self._remove, key)\n            return default\n        else:\n            return o\n\n    def update(*args, **kwargs):\n        if not args:\n            raise TypeError(\"descriptor 'update' of 'WeakValueDictionary' \"\n                            \"object needs an argument\")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n        dict = args[0] if args else None\n        if self._pending_removals:\n            self._commit_removals()\n        d = self.data\n        if dict is not None:\n            if not hasattr(dict, \"items\"):\n                dict = type({})(dict)\n            for key, o in dict.items():\n                d[key] = KeyedRef(o, self._remove, key)\n        if len(kwargs):\n            self.update(kwargs)\n\n    def valuerefs(self):\n        \"\"\"Return a list of weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        \"\"\"\n        if self._pending_removals:\n            self._commit_removals()\n        return list(self.data.values())\n\n\nclass KeyedRef(ref):\n    \"\"\"Specialized reference that includes a key corresponding to the value.\n\n    This is used in the WeakValueDictionary to avoid having to create\n    a function object for each key stored in the mapping.  A shared\n    callback object can use the 'key' attribute of a KeyedRef instead\n    of getting a reference to the key from an enclosing scope.\n\n    \"\"\"\n\n    __slots__ = \"key\",\n\n    def __new__(type, ob, callback, key):\n        self = ref.__new__(type, ob, callback)\n        self.key = key\n        return self\n\n    def __init__(self, ob, callback, key):\n        super().__init__(ob, callback)\n\n\nclass WeakKeyDictionary(_collections_abc.MutableMapping):\n    \"\"\" Mapping class that references keys weakly.\n\n    Entries in the dictionary will be discarded when there is no\n    longer a strong reference to the key. This can be used to\n    associate additional data with an object owned by other parts of\n    an application without adding attributes to those objects. This\n    can be especially useful with objects that override attribute\n    accesses.\n    \"\"\"\n\n    def __init__(self, dict=None):\n        self.data = {}\n        def remove(k, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(k)\n                else:\n                    del self.data[k]\n        self._remove = remove\n        # A list of dead weakrefs (keys to be removed)\n        self._pending_removals = []\n        self._iterating = set()\n        self._dirty_len = False\n        if dict is not None:\n            self.update(dict)\n\n    def _commit_removals(self):\n        # NOTE: We don't need to call this method before mutating the dict,\n        # because a dead weakref never compares equal to a live weakref,\n        # even if they happened to refer to equal objects.\n        # However, it means keys may already have been removed.\n        l = self._pending_removals\n        d = self.data\n        while l:\n            try:\n                del d[l.pop()]\n            except KeyError:\n                pass\n\n    def _scrub_removals(self):\n        d = self.data\n        self._pending_removals = [k for k in self._pending_removals if k in d]\n        self._dirty_len = False\n\n    def __delitem__(self, key):\n        self._dirty_len = True\n        del self.data[ref(key)]\n\n    def __getitem__(self, key):\n        return self.data[ref(key)]\n\n    def __len__(self):\n        if self._dirty_len and self._pending_removals:\n            # self._pending_removals may still contain keys which were\n            # explicitly removed, we have to scrub them (see issue #21173).\n            self._scrub_removals()\n        return len(self.data) - len(self._pending_removals)\n\n    def __repr__(self):\n        return \"<%s at %#x>\" % (self.__class__.__name__, id(self))\n\n    def __setitem__(self, key, value):\n        self.data[ref(key, self._remove)] = value\n\n    def copy(self):\n        new = WeakKeyDictionary()\n        with _IterationGuard(self):\n            for key, value in self.data.items():\n                o = key()\n                if o is not None:\n                    new[o] = value\n        return new\n\n    __copy__ = copy\n\n    def __deepcopy__(self, memo):\n        from copy import deepcopy\n        new = self.__class__()\n        with _IterationGuard(self):\n            for key, value in self.data.items():\n                o = key()\n                if o is not None:\n                    new[o] = deepcopy(value, memo)\n        return new\n\n    def get(self, key, default=None):\n        return self.data.get(ref(key),default)\n\n    def __contains__(self, key):\n        try:\n            wr = ref(key)\n        except TypeError:\n            return False\n        return wr in self.data\n\n    def items(self):\n        with _IterationGuard(self):\n            for wr, value in self.data.items():\n                key = wr()\n                if key is not None:\n                    yield key, value\n\n    def keys(self):\n        with _IterationGuard(self):\n            for wr in self.data:\n                obj = wr()\n                if obj is not None:\n                    yield obj\n\n    __iter__ = keys\n\n    def values(self):\n        with _IterationGuard(self):\n            for wr, value in self.data.items():\n                if wr() is not None:\n                    yield value\n\n    def keyrefs(self):\n        \"\"\"Return a list of weak references to the keys.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the keys around longer than needed.\n\n        \"\"\"\n        return list(self.data)\n\n    def popitem(self):\n        self._dirty_len = True\n        while True:\n            key, value = self.data.popitem()\n            o = key()\n            if o is not None:\n                return o, value\n\n    def pop(self, key, *args):\n        self._dirty_len = True\n        return self.data.pop(ref(key), *args)\n\n    def setdefault(self, key, default=None):\n        return self.data.setdefault(ref(key, self._remove),default)\n\n    def update(self, dict=None, **kwargs):\n        d = self.data\n        if dict is not None:\n            if not hasattr(dict, \"items\"):\n                dict = type({})(dict)\n            for key, value in dict.items():\n                d[ref(key, self._remove)] = value\n        if len(kwargs):\n            self.update(kwargs)\n\n\nclass finalize:\n    \"\"\"Class for finalization of weakrefable objects\n\n    finalize(obj, func, *args, **kwargs) returns a callable finalizer\n    object which will be called when obj is garbage collected. The\n    first time the finalizer is called it evaluates func(*arg, **kwargs)\n    and returns the result. After this the finalizer is dead, and\n    calling it just returns None.\n\n    When the program exits any remaining finalizers for which the\n    atexit attribute is true will be run in reverse order of creation.\n    By default atexit is true.\n    \"\"\"\n\n    # Finalizer objects don't have any state of their own.  They are\n    # just used as keys to lookup _Info objects in the registry.  This\n    # ensures that they cannot be part of a ref-cycle.\n\n    __slots__ = ()\n    _registry = {}\n    _shutdown = False\n    _index_iter = itertools.count()\n    _dirty = False\n    _registered_with_atexit = False\n\n    class _Info:\n        __slots__ = (\"weakref\", \"func\", \"args\", \"kwargs\", \"atexit\", \"index\")\n\n    def __init__(*args, **kwargs):\n        if len(args) >= 3:\n            self, obj, func, *args = args\n        elif not args:\n            raise TypeError(\"descriptor '__init__' of 'finalize' object \"\n                            \"needs an argument\")\n        else:\n            if 'func' not in kwargs:\n                raise TypeError('finalize expected at least 2 positional '\n                                'arguments, got %d' % (len(args)-1))\n            func = kwargs.pop('func')\n            if len(args) >= 2:\n                self, obj, *args = args\n            else:\n                if 'obj' not in kwargs:\n                    raise TypeError('finalize expected at least 2 positional '\n                                    'arguments, got %d' % (len(args)-1))\n                obj = kwargs.pop('obj')\n                self, *args = args\n        args = tuple(args)\n\n        if not self._registered_with_atexit:\n            # We may register the exit function more than once because\n            # of a thread race, but that is harmless\n            import atexit\n            atexit.register(self._exitfunc)\n            finalize._registered_with_atexit = True\n        info = self._Info()\n        info.weakref = ref(obj, self)\n        info.func = func\n        info.args = args\n        info.kwargs = kwargs or None\n        info.atexit = True\n        info.index = next(self._index_iter)\n        self._registry[self] = info\n        finalize._dirty = True\n\n    def __call__(self, _=None):\n        \"\"\"If alive then mark as dead and return func(*args, **kwargs);\n        otherwise return None\"\"\"\n        info = self._registry.pop(self, None)\n        if info and not self._shutdown:\n            return info.func(*info.args, **(info.kwargs or {}))\n\n    def detach(self):\n        \"\"\"If alive then mark as dead and return (obj, func, args, kwargs);\n        otherwise return None\"\"\"\n        info = self._registry.get(self)\n        obj = info and info.weakref()\n        if obj is not None and self._registry.pop(self, None):\n            return (obj, info.func, info.args, info.kwargs or {})\n\n    def peek(self):\n        \"\"\"If alive then return (obj, func, args, kwargs);\n        otherwise return None\"\"\"\n        info = self._registry.get(self)\n        obj = info and info.weakref()\n        if obj is not None:\n            return (obj, info.func, info.args, info.kwargs or {})\n\n    @property\n    def alive(self):\n        \"\"\"Whether finalizer is alive\"\"\"\n        return self in self._registry\n\n    @property\n    def atexit(self):\n        \"\"\"Whether finalizer should be called at exit\"\"\"\n        info = self._registry.get(self)\n        return bool(info) and info.atexit\n\n    @atexit.setter\n    def atexit(self, value):\n        info = self._registry.get(self)\n        if info:\n            info.atexit = bool(value)\n\n    def __repr__(self):\n        info = self._registry.get(self)\n        obj = info and info.weakref()\n        if obj is None:\n            return '<%s object at %#x; dead>' % (type(self).__name__, id(self))\n        else:\n            return '<%s object at %#x; for %r at %#x>' % \\\n                (type(self).__name__, id(self), type(obj).__name__, id(obj))\n\n    @classmethod\n    def _select_for_exit(cls):\n        # Return live finalizers marked for exit, oldest first\n        L = [(f,i) for (f,i) in cls._registry.items() if i.atexit]\n        L.sort(key=lambda item:item[1].index)\n        return [f for (f,i) in L]\n\n    @classmethod\n    def _exitfunc(cls):\n        # At shutdown invoke finalizers for which atexit is true.\n        # This is called once all other non-daemonic threads have been\n        # joined.\n        reenable_gc = False\n        try:\n            if cls._registry:\n                import gc\n                if gc.isenabled():\n                    reenable_gc = True\n                    gc.disable()\n                pending = None\n                while True:\n                    if pending is None or finalize._dirty:\n                        pending = cls._select_for_exit()\n                        finalize._dirty = False\n                    if not pending:\n                        break\n                    f = pending.pop()\n                    try:\n                        # gc is disabled, so (assuming no daemonic\n                        # threads) the following is the only line in\n                        # this function which might trigger creation\n                        # of a new finalizer\n                        f()\n                    except Exception:\n                        sys.excepthook(*sys.exc_info())\n                    assert f not in cls._registry\n        finally:\n            # prevent any more finalizers from executing during shutdown\n            finalize._shutdown = True\n            if reenable_gc:\n                gc.enable()\n", 656], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py": ["import typing\nimport typing as t\nfrom threading import local\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te\n    from .core import Context\n\n_local = local()\n\n\n@typing.overload\ndef get_current_context(silent: \"te.Literal[False]\" = False) -> \"Context\":\n    ...\n\n\n@typing.overload\ndef get_current_context(silent: bool = ...) -> t.Optional[\"Context\"]:\n    ...\n\n\ndef get_current_context(silent: bool = False) -> t.Optional[\"Context\"]:\n    \"\"\"Returns the current click context.  This can be used as a way to\n    access the current context object from anywhere.  This is a more implicit\n    alternative to the :func:`pass_context` decorator.  This function is\n    primarily useful for helpers such as :func:`echo` which might be\n    interested in changing its behavior based on the current context.\n\n    To push the current context, :meth:`Context.scope` can be used.\n\n    .. versionadded:: 5.0\n\n    :param silent: if set to `True` the return value is `None` if no context\n                   is available.  The default behavior is to raise a\n                   :exc:`RuntimeError`.\n    \"\"\"\n    try:\n        return t.cast(\"Context\", _local.stack[-1])\n    except (AttributeError, IndexError) as e:\n        if not silent:\n            raise RuntimeError(\"There is no active click context.\") from e\n\n    return None\n\n\ndef push_context(ctx: \"Context\") -> None:\n    \"\"\"Pushes a new context to the current stack.\"\"\"\n    _local.__dict__.setdefault(\"stack\", []).append(ctx)\n\n\ndef pop_context() -> None:\n    \"\"\"Removes the top level from the stack.\"\"\"\n    _local.stack.pop()\n\n\ndef resolve_color_default(color: t.Optional[bool] = None) -> t.Optional[bool]:\n    \"\"\"Internal helper to get the default value of the color flag.  If a\n    value is passed it's returned unchanged, otherwise it's looked up from\n    the current context.\n    \"\"\"\n    if color is not None:\n        return color\n\n    ctx = get_current_context(silent=True)\n\n    if ctx is not None:\n        return ctx.color\n\n    return None\n", 69], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/utils.py": ["import os\nimport sys\nimport typing as t\nfrom functools import update_wrapper\nfrom types import ModuleType\n\nfrom ._compat import _default_text_stderr\nfrom ._compat import _default_text_stdout\nfrom ._compat import _find_binary_writer\nfrom ._compat import auto_wrap_for_ansi\nfrom ._compat import binary_streams\nfrom ._compat import get_filesystem_encoding\nfrom ._compat import open_stream\nfrom ._compat import should_strip_ansi\nfrom ._compat import strip_ansi\nfrom ._compat import text_streams\nfrom ._compat import WIN\nfrom .globals import resolve_color_default\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te\n\nF = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])\n\n\ndef _posixify(name: str) -> str:\n    return \"-\".join(name.split()).lower()\n\n\ndef safecall(func: F) -> F:\n    \"\"\"Wraps a function so that it swallows exceptions.\"\"\"\n\n    def wrapper(*args, **kwargs):  # type: ignore\n        try:\n            return func(*args, **kwargs)\n        except Exception:\n            pass\n\n    return update_wrapper(t.cast(F, wrapper), func)\n\n\ndef make_str(value: t.Any) -> str:\n    \"\"\"Converts a value into a valid string.\"\"\"\n    if isinstance(value, bytes):\n        try:\n            return value.decode(get_filesystem_encoding())\n        except UnicodeError:\n            return value.decode(\"utf-8\", \"replace\")\n    return str(value)\n\n\ndef make_default_short_help(help: str, max_length: int = 45) -> str:\n    \"\"\"Returns a condensed version of help string.\"\"\"\n    # Consider only the first paragraph.\n    paragraph_end = help.find(\"\\n\\n\")\n\n    if paragraph_end != -1:\n        help = help[:paragraph_end]\n\n    # Collapse newlines, tabs, and spaces.\n    words = help.split()\n\n    if not words:\n        return \"\"\n\n    # The first paragraph started with a \"no rewrap\" marker, ignore it.\n    if words[0] == \"\\b\":\n        words = words[1:]\n\n    total_length = 0\n    last_index = len(words) - 1\n\n    for i, word in enumerate(words):\n        total_length += len(word) + (i > 0)\n\n        if total_length > max_length:  # too long, truncate\n            break\n\n        if word[-1] == \".\":  # sentence end, truncate without \"...\"\n            return \" \".join(words[: i + 1])\n\n        if total_length == max_length and i != last_index:\n            break  # not at sentence end, truncate with \"...\"\n    else:\n        return \" \".join(words)  # no truncation needed\n\n    # Account for the length of the suffix.\n    total_length += len(\"...\")\n\n    # remove words until the length is short enough\n    while i > 0:\n        total_length -= len(words[i]) + (i > 0)\n\n        if total_length <= max_length:\n            break\n\n        i -= 1\n\n    return \" \".join(words[:i]) + \"...\"\n\n\nclass LazyFile:\n    \"\"\"A lazy file works like a regular file but it does not fully open\n    the file but it does perform some basic checks early to see if the\n    filename parameter does make sense.  This is useful for safely opening\n    files for writing.\n    \"\"\"\n\n    def __init__(\n        self,\n        filename: str,\n        mode: str = \"r\",\n        encoding: t.Optional[str] = None,\n        errors: t.Optional[str] = \"strict\",\n        atomic: bool = False,\n    ):\n        self.name = filename\n        self.mode = mode\n        self.encoding = encoding\n        self.errors = errors\n        self.atomic = atomic\n        self._f: t.Optional[t.IO]\n\n        if filename == \"-\":\n            self._f, self.should_close = open_stream(filename, mode, encoding, errors)\n        else:\n            if \"r\" in mode:\n                # Open and close the file in case we're opening it for\n                # reading so that we can catch at least some errors in\n                # some cases early.\n                open(filename, mode).close()\n            self._f = None\n            self.should_close = True\n\n    def __getattr__(self, name: str) -> t.Any:\n        return getattr(self.open(), name)\n\n    def __repr__(self) -> str:\n        if self._f is not None:\n            return repr(self._f)\n        return f\"<unopened file '{self.name}' {self.mode}>\"\n\n    def open(self) -> t.IO:\n        \"\"\"Opens the file if it's not yet open.  This call might fail with\n        a :exc:`FileError`.  Not handling this error will produce an error\n        that Click shows.\n        \"\"\"\n        if self._f is not None:\n            return self._f\n        try:\n            rv, self.should_close = open_stream(\n                self.name, self.mode, self.encoding, self.errors, atomic=self.atomic\n            )\n        except OSError as e:  # noqa: E402\n            from .exceptions import FileError\n\n            raise FileError(self.name, hint=e.strerror) from e\n        self._f = rv\n        return rv\n\n    def close(self) -> None:\n        \"\"\"Closes the underlying file, no matter what.\"\"\"\n        if self._f is not None:\n            self._f.close()\n\n    def close_intelligently(self) -> None:\n        \"\"\"This function only closes the file if it was opened by the lazy\n        file wrapper.  For instance this will never close stdin.\n        \"\"\"\n        if self.should_close:\n            self.close()\n\n    def __enter__(self) -> \"LazyFile\":\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):  # type: ignore\n        self.close_intelligently()\n\n    def __iter__(self) -> t.Iterator[t.AnyStr]:\n        self.open()\n        return iter(self._f)  # type: ignore\n\n\nclass KeepOpenFile:\n    def __init__(self, file: t.IO) -> None:\n        self._file = file\n\n    def __getattr__(self, name: str) -> t.Any:\n        return getattr(self._file, name)\n\n    def __enter__(self) -> \"KeepOpenFile\":\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):  # type: ignore\n        pass\n\n    def __repr__(self) -> str:\n        return repr(self._file)\n\n    def __iter__(self) -> t.Iterator[t.AnyStr]:\n        return iter(self._file)\n\n\ndef echo(\n    message: t.Optional[t.Any] = None,\n    file: t.Optional[t.IO] = None,\n    nl: bool = True,\n    err: bool = False,\n    color: t.Optional[bool] = None,\n) -> None:\n    \"\"\"Print a message and newline to stdout or a file. This should be\n    used instead of :func:`print` because it provides better support\n    for different data, files, and environments.\n\n    Compared to :func:`print`, this does the following:\n\n    -   Ensures that the output encoding is not misconfigured on Linux.\n    -   Supports Unicode in the Windows console.\n    -   Supports writing to binary outputs, and supports writing bytes\n        to text outputs.\n    -   Supports colors and styles on Windows.\n    -   Removes ANSI color and style codes if the output does not look\n        like an interactive terminal.\n    -   Always flushes the output.\n\n    :param message: The string or bytes to output. Other objects are\n        converted to strings.\n    :param file: The file to write to. Defaults to ``stdout``.\n    :param err: Write to ``stderr`` instead of ``stdout``.\n    :param nl: Print a newline after the message. Enabled by default.\n    :param color: Force showing or hiding colors and other styles. By\n        default Click will remove color if the output does not look like\n        an interactive terminal.\n\n    .. versionchanged:: 6.0\n        Support Unicode output on the Windows console. Click does not\n        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``\n        will still not support Unicode.\n\n    .. versionchanged:: 4.0\n        Added the ``color`` parameter.\n\n    .. versionadded:: 3.0\n        Added the ``err`` parameter.\n\n    .. versionchanged:: 2.0\n        Support colors on Windows if colorama is installed.\n    \"\"\"\n    if file is None:\n        if err:\n            file = _default_text_stderr()\n        else:\n            file = _default_text_stdout()\n\n    # Convert non bytes/text into the native string type.\n    if message is not None and not isinstance(message, (str, bytes, bytearray)):\n        out: t.Optional[t.Union[str, bytes]] = str(message)\n    else:\n        out = message\n\n    if nl:\n        out = out or \"\"\n        if isinstance(out, str):\n            out += \"\\n\"\n        else:\n            out += b\"\\n\"\n\n    if not out:\n        file.flush()\n        return\n\n    # If there is a message and the value looks like bytes, we manually\n    # need to find the binary stream and write the message in there.\n    # This is done separately so that most stream types will work as you\n    # would expect. Eg: you can write to StringIO for other cases.\n    if isinstance(out, (bytes, bytearray)):\n        binary_file = _find_binary_writer(file)\n\n        if binary_file is not None:\n            file.flush()\n            binary_file.write(out)\n            binary_file.flush()\n            return\n\n    # ANSI style code support. For no message or bytes, nothing happens.\n    # When outputting to a file instead of a terminal, strip codes.\n    else:\n        color = resolve_color_default(color)\n\n        if should_strip_ansi(file, color):\n            out = strip_ansi(out)\n        elif WIN:\n            if auto_wrap_for_ansi is not None:\n                file = auto_wrap_for_ansi(file)  # type: ignore\n            elif not color:\n                out = strip_ansi(out)\n\n    file.write(out)  # type: ignore\n    file.flush()\n\n\ndef get_binary_stream(name: \"te.Literal['stdin', 'stdout', 'stderr']\") -> t.BinaryIO:\n    \"\"\"Returns a system stream for byte processing.\n\n    :param name: the name of the stream to open.  Valid names are ``'stdin'``,\n                 ``'stdout'`` and ``'stderr'``\n    \"\"\"\n    opener = binary_streams.get(name)\n    if opener is None:\n        raise TypeError(f\"Unknown standard stream '{name}'\")\n    return opener()\n\n\ndef get_text_stream(\n    name: \"te.Literal['stdin', 'stdout', 'stderr']\",\n    encoding: t.Optional[str] = None,\n    errors: t.Optional[str] = \"strict\",\n) -> t.TextIO:\n    \"\"\"Returns a system stream for text processing.  This usually returns\n    a wrapped stream around a binary stream returned from\n    :func:`get_binary_stream` but it also can take shortcuts for already\n    correctly configured streams.\n\n    :param name: the name of the stream to open.  Valid names are ``'stdin'``,\n                 ``'stdout'`` and ``'stderr'``\n    :param encoding: overrides the detected default encoding.\n    :param errors: overrides the default error mode.\n    \"\"\"\n    opener = text_streams.get(name)\n    if opener is None:\n        raise TypeError(f\"Unknown standard stream '{name}'\")\n    return opener(encoding, errors)\n\n\ndef open_file(\n    filename: str,\n    mode: str = \"r\",\n    encoding: t.Optional[str] = None,\n    errors: t.Optional[str] = \"strict\",\n    lazy: bool = False,\n    atomic: bool = False,\n) -> t.IO:\n    \"\"\"This is similar to how the :class:`File` works but for manual\n    usage.  Files are opened non lazy by default.  This can open regular\n    files as well as stdin/stdout if ``'-'`` is passed.\n\n    If stdin/stdout is returned the stream is wrapped so that the context\n    manager will not close the stream accidentally.  This makes it possible\n    to always use the function like this without having to worry to\n    accidentally close a standard stream::\n\n        with open_file(filename) as f:\n            ...\n\n    .. versionadded:: 3.0\n\n    :param filename: the name of the file to open (or ``'-'`` for stdin/stdout).\n    :param mode: the mode in which to open the file.\n    :param encoding: the encoding to use.\n    :param errors: the error handling for this file.\n    :param lazy: can be flipped to true to open the file lazily.\n    :param atomic: in atomic mode writes go into a temporary file and it's\n                   moved on close.\n    \"\"\"\n    if lazy:\n        return t.cast(t.IO, LazyFile(filename, mode, encoding, errors, atomic=atomic))\n    f, should_close = open_stream(filename, mode, encoding, errors, atomic=atomic)\n    if not should_close:\n        f = t.cast(t.IO, KeepOpenFile(f))\n    return f\n\n\ndef get_os_args() -> t.Sequence[str]:\n    \"\"\"Returns the argument part of ``sys.argv``, removing the first\n    value which is the name of the script.\n\n    .. deprecated:: 8.0\n        Will be removed in Click 8.1. Access ``sys.argv[1:]`` directly\n        instead.\n    \"\"\"\n    import warnings\n\n    warnings.warn(\n        \"'get_os_args' is deprecated and will be removed in Click 8.1.\"\n        \" Access 'sys.argv[1:]' directly instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return sys.argv[1:]\n\n\ndef format_filename(\n    filename: t.Union[str, bytes, os.PathLike], shorten: bool = False\n) -> str:\n    \"\"\"Formats a filename for user display.  The main purpose of this\n    function is to ensure that the filename can be displayed at all.  This\n    will decode the filename to unicode if necessary in a way that it will\n    not fail.  Optionally, it can shorten the filename to not include the\n    full path to the filename.\n\n    :param filename: formats a filename for UI display.  This will also convert\n                     the filename into unicode without failing.\n    :param shorten: this optionally shortens the filename to strip of the\n                    path that leads up to it.\n    \"\"\"\n    if shorten:\n        filename = os.path.basename(filename)\n\n    return os.fsdecode(filename)\n\n\ndef get_app_dir(app_name: str, roaming: bool = True, force_posix: bool = False) -> str:\n    r\"\"\"Returns the config folder for the application.  The default behavior\n    is to return whatever is most appropriate for the operating system.\n\n    To give you an idea, for an app called ``\"Foo Bar\"``, something like\n    the following folders could be returned:\n\n    Mac OS X:\n      ``~/Library/Application Support/Foo Bar``\n    Mac OS X (POSIX):\n      ``~/.foo-bar``\n    Unix:\n      ``~/.config/foo-bar``\n    Unix (POSIX):\n      ``~/.foo-bar``\n    Windows (roaming):\n      ``C:\\Users\\<user>\\AppData\\Roaming\\Foo Bar``\n    Windows (not roaming):\n      ``C:\\Users\\<user>\\AppData\\Local\\Foo Bar``\n\n    .. versionadded:: 2.0\n\n    :param app_name: the application name.  This should be properly capitalized\n                     and can contain whitespace.\n    :param roaming: controls if the folder should be roaming or not on Windows.\n                    Has no affect otherwise.\n    :param force_posix: if this is set to `True` then on any POSIX system the\n                        folder will be stored in the home folder with a leading\n                        dot instead of the XDG config home or darwin's\n                        application support folder.\n    \"\"\"\n    if WIN:\n        key = \"APPDATA\" if roaming else \"LOCALAPPDATA\"\n        folder = os.environ.get(key)\n        if folder is None:\n            folder = os.path.expanduser(\"~\")\n        return os.path.join(folder, app_name)\n    if force_posix:\n        return os.path.join(os.path.expanduser(f\"~/.{_posixify(app_name)}\"))\n    if sys.platform == \"darwin\":\n        return os.path.join(\n            os.path.expanduser(\"~/Library/Application Support\"), app_name\n        )\n    return os.path.join(\n        os.environ.get(\"XDG_CONFIG_HOME\", os.path.expanduser(\"~/.config\")),\n        _posixify(app_name),\n    )\n\n\nclass PacifyFlushWrapper:\n    \"\"\"This wrapper is used to catch and suppress BrokenPipeErrors resulting\n    from ``.flush()`` being called on broken pipe during the shutdown/final-GC\n    of the Python interpreter. Notably ``.flush()`` is always called on\n    ``sys.stdout`` and ``sys.stderr``. So as to have minimal impact on any\n    other cleanup code, and the case where the underlying file is not a broken\n    pipe, all calls and attributes are proxied.\n    \"\"\"\n\n    def __init__(self, wrapped: t.IO) -> None:\n        self.wrapped = wrapped\n\n    def flush(self) -> None:\n        try:\n            self.wrapped.flush()\n        except OSError as e:\n            import errno\n\n            if e.errno != errno.EPIPE:\n                raise\n\n    def __getattr__(self, attr: str) -> t.Any:\n        return getattr(self.wrapped, attr)\n\n\ndef _detect_program_name(\n    path: t.Optional[str] = None, _main: ModuleType = sys.modules[\"__main__\"]\n) -> str:\n    \"\"\"Determine the command used to run the program, for use in help\n    text. If a file or entry point was executed, the file name is\n    returned. If ``python -m`` was used to execute a module or package,\n    ``python -m name`` is returned.\n\n    This doesn't try to be too precise, the goal is to give a concise\n    name for help text. Files are only shown as their name without the\n    path. ``python`` is only shown for modules, and the full path to\n    ``sys.executable`` is not shown.\n\n    :param path: The Python file being executed. Python puts this in\n        ``sys.argv[0]``, which is used by default.\n    :param _main: The ``__main__`` module. This should only be passed\n        during internal testing.\n\n    .. versionadded:: 8.0\n        Based on command args detection in the Werkzeug reloader.\n\n    :meta private:\n    \"\"\"\n    if not path:\n        path = sys.argv[0]\n\n    # The value of __package__ indicates how Python was called. It may\n    # not exist if a setuptools script is installed as an egg. It may be\n    # set incorrectly for entry points created with pip on Windows.\n    if getattr(_main, \"__package__\", None) is None or (\n        os.name == \"nt\"\n        and _main.__package__ == \"\"\n        and not os.path.exists(path)\n        and os.path.exists(f\"{path}.exe\")\n    ):\n        # Executed a file, like \"python app.py\".\n        return os.path.basename(path)\n\n    # Executed a module, like \"python -m example\".\n    # Rewritten by Python from \"-m script\" to \"/path/to/script.py\".\n    # Need to look at main module to determine how it was executed.\n    py_module = t.cast(str, _main.__package__)\n    name = os.path.splitext(os.path.basename(path))[0]\n\n    # A submodule like \"example.cli\".\n    if name != \"__main__\":\n        py_module = f\"{py_module}.{name}\"\n\n    return f\"python -m {py_module.lstrip('.')}\"\n\n\ndef _expand_args(\n    args: t.Iterable[str],\n    *,\n    user: bool = True,\n    env: bool = True,\n    glob_recursive: bool = True,\n) -> t.List[str]:\n    \"\"\"Simulate Unix shell expansion with Python functions.\n\n    See :func:`glob.glob`, :func:`os.path.expanduser`, and\n    :func:`os.path.expandvars`.\n\n    This intended for use on Windows, where the shell does not do any\n    expansion. It may not exactly match what a Unix shell would do.\n\n    :param args: List of command line arguments to expand.\n    :param user: Expand user home directory.\n    :param env: Expand environment variables.\n    :param glob_recursive: ``**`` matches directories recursively.\n\n    .. versionadded:: 8.0\n\n    :meta private:\n    \"\"\"\n    from glob import glob\n\n    out = []\n\n    for arg in args:\n        if user:\n            arg = os.path.expanduser(arg)\n\n        if env:\n            arg = os.path.expandvars(arg)\n\n        matches = glob(arg, recursive=glob_recursive)\n\n        if not matches:\n            out.append(arg)\n        else:\n            out.extend(matches)\n\n    return out\n", 579], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py": ["import inspect\nimport io\nimport itertools\nimport os\nimport sys\nimport typing\nimport typing as t\nfrom gettext import gettext as _\n\nfrom ._compat import isatty\nfrom ._compat import strip_ansi\nfrom ._compat import WIN\nfrom .exceptions import Abort\nfrom .exceptions import UsageError\nfrom .globals import resolve_color_default\nfrom .types import Choice\nfrom .types import convert_type\nfrom .types import ParamType\nfrom .utils import echo\nfrom .utils import LazyFile\n\nif t.TYPE_CHECKING:\n    from ._termui_impl import ProgressBar\n\nV = t.TypeVar(\"V\")\n\n# The prompt functions to use.  The doc tools currently override these\n# functions to customize how they work.\nvisible_prompt_func: t.Callable[[str], str] = input\n\n_ansi_colors = {\n    \"black\": 30,\n    \"red\": 31,\n    \"green\": 32,\n    \"yellow\": 33,\n    \"blue\": 34,\n    \"magenta\": 35,\n    \"cyan\": 36,\n    \"white\": 37,\n    \"reset\": 39,\n    \"bright_black\": 90,\n    \"bright_red\": 91,\n    \"bright_green\": 92,\n    \"bright_yellow\": 93,\n    \"bright_blue\": 94,\n    \"bright_magenta\": 95,\n    \"bright_cyan\": 96,\n    \"bright_white\": 97,\n}\n_ansi_reset_all = \"\\033[0m\"\n\n\ndef hidden_prompt_func(prompt: str) -> str:\n    import getpass\n\n    return getpass.getpass(prompt)\n\n\ndef _build_prompt(\n    text: str,\n    suffix: str,\n    show_default: bool = False,\n    default: t.Optional[t.Any] = None,\n    show_choices: bool = True,\n    type: t.Optional[ParamType] = None,\n) -> str:\n    prompt = text\n    if type is not None and show_choices and isinstance(type, Choice):\n        prompt += f\" ({', '.join(map(str, type.choices))})\"\n    if default is not None and show_default:\n        prompt = f\"{prompt} [{_format_default(default)}]\"\n    return f\"{prompt}{suffix}\"\n\n\ndef _format_default(default: t.Any) -> t.Any:\n    if isinstance(default, (io.IOBase, LazyFile)) and hasattr(default, \"name\"):\n        return default.name  # type: ignore\n\n    return default\n\n\ndef prompt(\n    text: str,\n    default: t.Optional[t.Any] = None,\n    hide_input: bool = False,\n    confirmation_prompt: t.Union[bool, str] = False,\n    type: t.Optional[t.Union[ParamType, t.Any]] = None,\n    value_proc: t.Optional[t.Callable[[str], t.Any]] = None,\n    prompt_suffix: str = \": \",\n    show_default: bool = True,\n    err: bool = False,\n    show_choices: bool = True,\n) -> t.Any:\n    \"\"\"Prompts a user for input.  This is a convenience function that can\n    be used to prompt a user for input later.\n\n    If the user aborts the input by sending a interrupt signal, this\n    function will catch it and raise a :exc:`Abort` exception.\n\n    :param text: the text to show for the prompt.\n    :param default: the default value to use if no input happens.  If this\n                    is not given it will prompt until it's aborted.\n    :param hide_input: if this is set to true then the input value will\n                       be hidden.\n    :param confirmation_prompt: Prompt a second time to confirm the\n        value. Can be set to a string instead of ``True`` to customize\n        the message.\n    :param type: the type to use to check the value against.\n    :param value_proc: if this parameter is provided it's a function that\n                       is invoked instead of the type conversion to\n                       convert a value.\n    :param prompt_suffix: a suffix that should be added to the prompt.\n    :param show_default: shows or hides the default value in the prompt.\n    :param err: if set to true the file defaults to ``stderr`` instead of\n                ``stdout``, the same as with echo.\n    :param show_choices: Show or hide choices if the passed type is a Choice.\n                         For example if type is a Choice of either day or week,\n                         show_choices is true and text is \"Group by\" then the\n                         prompt will be \"Group by (day, week): \".\n\n    .. versionadded:: 8.0\n        ``confirmation_prompt`` can be a custom string.\n\n    .. versionadded:: 7.0\n        Added the ``show_choices`` parameter.\n\n    .. versionadded:: 6.0\n        Added unicode support for cmd.exe on Windows.\n\n    .. versionadded:: 4.0\n        Added the `err` parameter.\n\n    \"\"\"\n\n    def prompt_func(text: str) -> str:\n        f = hidden_prompt_func if hide_input else visible_prompt_func\n        try:\n            # Write the prompt separately so that we get nice\n            # coloring through colorama on Windows\n            echo(text.rstrip(\" \"), nl=False, err=err)\n            # Echo a space to stdout to work around an issue where\n            # readline causes backspace to clear the whole line.\n            return f(\" \")\n        except (KeyboardInterrupt, EOFError):\n            # getpass doesn't print a newline if the user aborts input with ^C.\n            # Allegedly this behavior is inherited from getpass(3).\n            # A doc bug has been filed at https://bugs.python.org/issue24711\n            if hide_input:\n                echo(None, err=err)\n            raise Abort() from None\n\n    if value_proc is None:\n        value_proc = convert_type(type, default)\n\n    prompt = _build_prompt(\n        text, prompt_suffix, show_default, default, show_choices, type\n    )\n\n    if confirmation_prompt:\n        if confirmation_prompt is True:\n            confirmation_prompt = _(\"Repeat for confirmation\")\n\n        confirmation_prompt = t.cast(str, confirmation_prompt)\n        confirmation_prompt = _build_prompt(confirmation_prompt, prompt_suffix)\n\n    while True:\n        while True:\n            value = prompt_func(prompt)\n            if value:\n                break\n            elif default is not None:\n                value = default\n                break\n        try:\n            result = value_proc(value)\n        except UsageError as e:\n            if hide_input:\n                echo(_(\"Error: The value you entered was invalid.\"), err=err)\n            else:\n                echo(_(\"Error: {e.message}\").format(e=e), err=err)  # noqa: B306\n            continue\n        if not confirmation_prompt:\n            return result\n        while True:\n            confirmation_prompt = t.cast(str, confirmation_prompt)\n            value2 = prompt_func(confirmation_prompt)\n            if value2:\n                break\n        if value == value2:\n            return result\n        echo(_(\"Error: The two entered values do not match.\"), err=err)\n\n\ndef confirm(\n    text: str,\n    default: t.Optional[bool] = False,\n    abort: bool = False,\n    prompt_suffix: str = \": \",\n    show_default: bool = True,\n    err: bool = False,\n) -> bool:\n    \"\"\"Prompts for confirmation (yes/no question).\n\n    If the user aborts the input by sending a interrupt signal this\n    function will catch it and raise a :exc:`Abort` exception.\n\n    :param text: the question to ask.\n    :param default: The default value to use when no input is given. If\n        ``None``, repeat until input is given.\n    :param abort: if this is set to `True` a negative answer aborts the\n                  exception by raising :exc:`Abort`.\n    :param prompt_suffix: a suffix that should be added to the prompt.\n    :param show_default: shows or hides the default value in the prompt.\n    :param err: if set to true the file defaults to ``stderr`` instead of\n                ``stdout``, the same as with echo.\n\n    .. versionchanged:: 8.0\n        Repeat until input is given if ``default`` is ``None``.\n\n    .. versionadded:: 4.0\n        Added the ``err`` parameter.\n    \"\"\"\n    prompt = _build_prompt(\n        text,\n        prompt_suffix,\n        show_default,\n        \"y/n\" if default is None else (\"Y/n\" if default else \"y/N\"),\n    )\n\n    while True:\n        try:\n            # Write the prompt separately so that we get nice\n            # coloring through colorama on Windows\n            echo(prompt.rstrip(\" \"), nl=False, err=err)\n            # Echo a space to stdout to work around an issue where\n            # readline causes backspace to clear the whole line.\n            value = visible_prompt_func(\" \").lower().strip()\n        except (KeyboardInterrupt, EOFError):\n            raise Abort() from None\n        if value in (\"y\", \"yes\"):\n            rv = True\n        elif value in (\"n\", \"no\"):\n            rv = False\n        elif default is not None and value == \"\":\n            rv = default\n        else:\n            echo(_(\"Error: invalid input\"), err=err)\n            continue\n        break\n    if abort and not rv:\n        raise Abort()\n    return rv\n\n\ndef get_terminal_size() -> os.terminal_size:\n    \"\"\"Returns the current size of the terminal as tuple in the form\n    ``(width, height)`` in columns and rows.\n\n    .. deprecated:: 8.0\n        Will be removed in Click 8.1. Use\n        :func:`shutil.get_terminal_size` instead.\n    \"\"\"\n    import shutil\n    import warnings\n\n    warnings.warn(\n        \"'click.get_terminal_size()' is deprecated and will be removed\"\n        \" in Click 8.1. Use 'shutil.get_terminal_size()' instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return shutil.get_terminal_size()\n\n\ndef echo_via_pager(\n    text_or_generator: t.Union[t.Iterable[str], t.Callable[[], t.Iterable[str]], str],\n    color: t.Optional[bool] = None,\n) -> None:\n    \"\"\"This function takes a text and shows it via an environment specific\n    pager on stdout.\n\n    .. versionchanged:: 3.0\n       Added the `color` flag.\n\n    :param text_or_generator: the text to page, or alternatively, a\n                              generator emitting the text to page.\n    :param color: controls if the pager supports ANSI colors or not.  The\n                  default is autodetection.\n    \"\"\"\n    color = resolve_color_default(color)\n\n    if inspect.isgeneratorfunction(text_or_generator):\n        i = t.cast(t.Callable[[], t.Iterable[str]], text_or_generator)()\n    elif isinstance(text_or_generator, str):\n        i = [text_or_generator]\n    else:\n        i = iter(t.cast(t.Iterable[str], text_or_generator))\n\n    # convert every element of i to a text type if necessary\n    text_generator = (el if isinstance(el, str) else str(el) for el in i)\n\n    from ._termui_impl import pager\n\n    return pager(itertools.chain(text_generator, \"\\n\"), color)\n\n\ndef progressbar(\n    iterable: t.Optional[t.Iterable[V]] = None,\n    length: t.Optional[int] = None,\n    label: t.Optional[str] = None,\n    show_eta: bool = True,\n    show_percent: t.Optional[bool] = None,\n    show_pos: bool = False,\n    item_show_func: t.Optional[t.Callable[[t.Optional[V]], t.Optional[str]]] = None,\n    fill_char: str = \"#\",\n    empty_char: str = \"-\",\n    bar_template: str = \"%(label)s  [%(bar)s]  %(info)s\",\n    info_sep: str = \"  \",\n    width: int = 36,\n    file: t.Optional[t.TextIO] = None,\n    color: t.Optional[bool] = None,\n    update_min_steps: int = 1,\n) -> \"ProgressBar[V]\":\n    \"\"\"This function creates an iterable context manager that can be used\n    to iterate over something while showing a progress bar.  It will\n    either iterate over the `iterable` or `length` items (that are counted\n    up).  While iteration happens, this function will print a rendered\n    progress bar to the given `file` (defaults to stdout) and will attempt\n    to calculate remaining time and more.  By default, this progress bar\n    will not be rendered if the file is not a terminal.\n\n    The context manager creates the progress bar.  When the context\n    manager is entered the progress bar is already created.  With every\n    iteration over the progress bar, the iterable passed to the bar is\n    advanced and the bar is updated.  When the context manager exits,\n    a newline is printed and the progress bar is finalized on screen.\n\n    Note: The progress bar is currently designed for use cases where the\n    total progress can be expected to take at least several seconds.\n    Because of this, the ProgressBar class object won't display\n    progress that is considered too fast, and progress where the time\n    between steps is less than a second.\n\n    No printing must happen or the progress bar will be unintentionally\n    destroyed.\n\n    Example usage::\n\n        with progressbar(items) as bar:\n            for item in bar:\n                do_something_with(item)\n\n    Alternatively, if no iterable is specified, one can manually update the\n    progress bar through the `update()` method instead of directly\n    iterating over the progress bar.  The update method accepts the number\n    of steps to increment the bar with::\n\n        with progressbar(length=chunks.total_bytes) as bar:\n            for chunk in chunks:\n                process_chunk(chunk)\n                bar.update(chunks.bytes)\n\n    The ``update()`` method also takes an optional value specifying the\n    ``current_item`` at the new position. This is useful when used\n    together with ``item_show_func`` to customize the output for each\n    manual step::\n\n        with click.progressbar(\n            length=total_size,\n            label='Unzipping archive',\n            item_show_func=lambda a: a.filename\n        ) as bar:\n            for archive in zip_file:\n                archive.extract()\n                bar.update(archive.size, archive)\n\n    :param iterable: an iterable to iterate over.  If not provided the length\n                     is required.\n    :param length: the number of items to iterate over.  By default the\n                   progressbar will attempt to ask the iterator about its\n                   length, which might or might not work.  If an iterable is\n                   also provided this parameter can be used to override the\n                   length.  If an iterable is not provided the progress bar\n                   will iterate over a range of that length.\n    :param label: the label to show next to the progress bar.\n    :param show_eta: enables or disables the estimated time display.  This is\n                     automatically disabled if the length cannot be\n                     determined.\n    :param show_percent: enables or disables the percentage display.  The\n                         default is `True` if the iterable has a length or\n                         `False` if not.\n    :param show_pos: enables or disables the absolute position display.  The\n                     default is `False`.\n    :param item_show_func: A function called with the current item which\n        can return a string to show next to the progress bar. If the\n        function returns ``None`` nothing is shown. The current item can\n        be ``None``, such as when entering and exiting the bar.\n    :param fill_char: the character to use to show the filled part of the\n                      progress bar.\n    :param empty_char: the character to use to show the non-filled part of\n                       the progress bar.\n    :param bar_template: the format string to use as template for the bar.\n                         The parameters in it are ``label`` for the label,\n                         ``bar`` for the progress bar and ``info`` for the\n                         info section.\n    :param info_sep: the separator between multiple info items (eta etc.)\n    :param width: the width of the progress bar in characters, 0 means full\n                  terminal width\n    :param file: The file to write to. If this is not a terminal then\n        only the label is printed.\n    :param color: controls if the terminal supports ANSI colors or not.  The\n                  default is autodetection.  This is only needed if ANSI\n                  codes are included anywhere in the progress bar output\n                  which is not the case by default.\n    :param update_min_steps: Render only when this many updates have\n        completed. This allows tuning for very fast iterators.\n\n    .. versionchanged:: 8.0\n        Output is shown even if execution time is less than 0.5 seconds.\n\n    .. versionchanged:: 8.0\n        ``item_show_func`` shows the current item, not the previous one.\n\n    .. versionchanged:: 8.0\n        Labels are echoed if the output is not a TTY. Reverts a change\n        in 7.0 that removed all output.\n\n    .. versionadded:: 8.0\n       Added the ``update_min_steps`` parameter.\n\n    .. versionchanged:: 4.0\n        Added the ``color`` parameter. Added the ``update`` method to\n        the object.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    from ._termui_impl import ProgressBar\n\n    color = resolve_color_default(color)\n    return ProgressBar(\n        iterable=iterable,\n        length=length,\n        show_eta=show_eta,\n        show_percent=show_percent,\n        show_pos=show_pos,\n        item_show_func=item_show_func,\n        fill_char=fill_char,\n        empty_char=empty_char,\n        bar_template=bar_template,\n        info_sep=info_sep,\n        file=file,\n        label=label,\n        width=width,\n        color=color,\n        update_min_steps=update_min_steps,\n    )\n\n\ndef clear() -> None:\n    \"\"\"Clears the terminal screen.  This will have the effect of clearing\n    the whole visible space of the terminal and moving the cursor to the\n    top left.  This does not do anything if not connected to a terminal.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    if not isatty(sys.stdout):\n        return\n    if WIN:\n        os.system(\"cls\")\n    else:\n        sys.stdout.write(\"\\033[2J\\033[1;1H\")\n\n\ndef _interpret_color(\n    color: t.Union[int, t.Tuple[int, int, int], str], offset: int = 0\n) -> str:\n    if isinstance(color, int):\n        return f\"{38 + offset};5;{color:d}\"\n\n    if isinstance(color, (tuple, list)):\n        r, g, b = color\n        return f\"{38 + offset};2;{r:d};{g:d};{b:d}\"\n\n    return str(_ansi_colors[color] + offset)\n\n\ndef style(\n    text: t.Any,\n    fg: t.Optional[t.Union[int, t.Tuple[int, int, int], str]] = None,\n    bg: t.Optional[t.Union[int, t.Tuple[int, int, int], str]] = None,\n    bold: t.Optional[bool] = None,\n    dim: t.Optional[bool] = None,\n    underline: t.Optional[bool] = None,\n    overline: t.Optional[bool] = None,\n    italic: t.Optional[bool] = None,\n    blink: t.Optional[bool] = None,\n    reverse: t.Optional[bool] = None,\n    strikethrough: t.Optional[bool] = None,\n    reset: bool = True,\n) -> str:\n    \"\"\"Styles a text with ANSI styles and returns the new string.  By\n    default the styling is self contained which means that at the end\n    of the string a reset code is issued.  This can be prevented by\n    passing ``reset=False``.\n\n    Examples::\n\n        click.echo(click.style('Hello World!', fg='green'))\n        click.echo(click.style('ATTENTION!', blink=True))\n        click.echo(click.style('Some things', reverse=True, fg='cyan'))\n        click.echo(click.style('More colors', fg=(255, 12, 128), bg=117))\n\n    Supported color names:\n\n    * ``black`` (might be a gray)\n    * ``red``\n    * ``green``\n    * ``yellow`` (might be an orange)\n    * ``blue``\n    * ``magenta``\n    * ``cyan``\n    * ``white`` (might be light gray)\n    * ``bright_black``\n    * ``bright_red``\n    * ``bright_green``\n    * ``bright_yellow``\n    * ``bright_blue``\n    * ``bright_magenta``\n    * ``bright_cyan``\n    * ``bright_white``\n    * ``reset`` (reset the color code only)\n\n    If the terminal supports it, color may also be specified as:\n\n    -   An integer in the interval [0, 255]. The terminal must support\n        8-bit/256-color mode.\n    -   An RGB tuple of three integers in [0, 255]. The terminal must\n        support 24-bit/true-color mode.\n\n    See https://en.wikipedia.org/wiki/ANSI_color and\n    https://gist.github.com/XVilka/8346728 for more information.\n\n    :param text: the string to style with ansi codes.\n    :param fg: if provided this will become the foreground color.\n    :param bg: if provided this will become the background color.\n    :param bold: if provided this will enable or disable bold mode.\n    :param dim: if provided this will enable or disable dim mode.  This is\n                badly supported.\n    :param underline: if provided this will enable or disable underline.\n    :param overline: if provided this will enable or disable overline.\n    :param italic: if provided this will enable or disable italic.\n    :param blink: if provided this will enable or disable blinking.\n    :param reverse: if provided this will enable or disable inverse\n                    rendering (foreground becomes background and the\n                    other way round).\n    :param strikethrough: if provided this will enable or disable\n        striking through text.\n    :param reset: by default a reset-all code is added at the end of the\n                  string which means that styles do not carry over.  This\n                  can be disabled to compose styles.\n\n    .. versionchanged:: 8.0\n        A non-string ``message`` is converted to a string.\n\n    .. versionchanged:: 8.0\n       Added support for 256 and RGB color codes.\n\n    .. versionchanged:: 8.0\n        Added the ``strikethrough``, ``italic``, and ``overline``\n        parameters.\n\n    .. versionchanged:: 7.0\n        Added support for bright colors.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    if not isinstance(text, str):\n        text = str(text)\n\n    bits = []\n\n    if fg:\n        try:\n            bits.append(f\"\\033[{_interpret_color(fg)}m\")\n        except KeyError:\n            raise TypeError(f\"Unknown color {fg!r}\") from None\n\n    if bg:\n        try:\n            bits.append(f\"\\033[{_interpret_color(bg, 10)}m\")\n        except KeyError:\n            raise TypeError(f\"Unknown color {bg!r}\") from None\n\n    if bold is not None:\n        bits.append(f\"\\033[{1 if bold else 22}m\")\n    if dim is not None:\n        bits.append(f\"\\033[{2 if dim else 22}m\")\n    if underline is not None:\n        bits.append(f\"\\033[{4 if underline else 24}m\")\n    if overline is not None:\n        bits.append(f\"\\033[{53 if overline else 55}m\")\n    if italic is not None:\n        bits.append(f\"\\033[{3 if italic else 23}m\")\n    if blink is not None:\n        bits.append(f\"\\033[{5 if blink else 25}m\")\n    if reverse is not None:\n        bits.append(f\"\\033[{7 if reverse else 27}m\")\n    if strikethrough is not None:\n        bits.append(f\"\\033[{9 if strikethrough else 29}m\")\n    bits.append(text)\n    if reset:\n        bits.append(_ansi_reset_all)\n    return \"\".join(bits)\n\n\ndef unstyle(text: str) -> str:\n    \"\"\"Removes ANSI styling information from a string.  Usually it's not\n    necessary to use this function as Click's echo function will\n    automatically remove styling if necessary.\n\n    .. versionadded:: 2.0\n\n    :param text: the text to remove style information from.\n    \"\"\"\n    return strip_ansi(text)\n\n\ndef secho(\n    message: t.Optional[t.Any] = None,\n    file: t.Optional[t.IO] = None,\n    nl: bool = True,\n    err: bool = False,\n    color: t.Optional[bool] = None,\n    **styles: t.Any,\n) -> None:\n    \"\"\"This function combines :func:`echo` and :func:`style` into one\n    call.  As such the following two calls are the same::\n\n        click.secho('Hello World!', fg='green')\n        click.echo(click.style('Hello World!', fg='green'))\n\n    All keyword arguments are forwarded to the underlying functions\n    depending on which one they go with.\n\n    Non-string types will be converted to :class:`str`. However,\n    :class:`bytes` are passed directly to :meth:`echo` without applying\n    style. If you want to style bytes that represent text, call\n    :meth:`bytes.decode` first.\n\n    .. versionchanged:: 8.0\n        A non-string ``message`` is converted to a string. Bytes are\n        passed through without style applied.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    if message is not None and not isinstance(message, (bytes, bytearray)):\n        message = style(message, **styles)\n\n    return echo(message, file=file, nl=nl, err=err, color=color)\n\n\ndef edit(\n    text: t.Optional[t.AnyStr] = None,\n    editor: t.Optional[str] = None,\n    env: t.Optional[t.Mapping[str, str]] = None,\n    require_save: bool = True,\n    extension: str = \".txt\",\n    filename: t.Optional[str] = None,\n) -> t.Optional[t.AnyStr]:\n    r\"\"\"Edits the given text in the defined editor.  If an editor is given\n    (should be the full path to the executable but the regular operating\n    system search path is used for finding the executable) it overrides\n    the detected editor.  Optionally, some environment variables can be\n    used.  If the editor is closed without changes, `None` is returned.  In\n    case a file is edited directly the return value is always `None` and\n    `require_save` and `extension` are ignored.\n\n    If the editor cannot be opened a :exc:`UsageError` is raised.\n\n    Note for Windows: to simplify cross-platform usage, the newlines are\n    automatically converted from POSIX to Windows and vice versa.  As such,\n    the message here will have ``\\n`` as newline markers.\n\n    :param text: the text to edit.\n    :param editor: optionally the editor to use.  Defaults to automatic\n                   detection.\n    :param env: environment variables to forward to the editor.\n    :param require_save: if this is true, then not saving in the editor\n                         will make the return value become `None`.\n    :param extension: the extension to tell the editor about.  This defaults\n                      to `.txt` but changing this might change syntax\n                      highlighting.\n    :param filename: if provided it will edit this file instead of the\n                     provided text contents.  It will not use a temporary\n                     file as an indirection in that case.\n    \"\"\"\n    from ._termui_impl import Editor\n\n    ed = Editor(editor=editor, env=env, require_save=require_save, extension=extension)\n\n    if filename is None:\n        return ed.edit(text)\n\n    ed.edit_file(filename)\n    return None\n\n\ndef launch(url: str, wait: bool = False, locate: bool = False) -> int:\n    \"\"\"This function launches the given URL (or filename) in the default\n    viewer application for this file type.  If this is an executable, it\n    might launch the executable in a new session.  The return value is\n    the exit code of the launched application.  Usually, ``0`` indicates\n    success.\n\n    Examples::\n\n        click.launch('https://click.palletsprojects.com/')\n        click.launch('/my/downloaded/file', locate=True)\n\n    .. versionadded:: 2.0\n\n    :param url: URL or filename of the thing to launch.\n    :param wait: Wait for the program to exit before returning. This\n        only works if the launched program blocks. In particular,\n        ``xdg-open`` on Linux does not block.\n    :param locate: if this is set to `True` then instead of launching the\n                   application associated with the URL it will attempt to\n                   launch a file manager with the file located.  This\n                   might have weird effects if the URL does not point to\n                   the filesystem.\n    \"\"\"\n    from ._termui_impl import open_url\n\n    return open_url(url, wait=wait, locate=locate)\n\n\n# If this is provided, getchar() calls into this instead.  This is used\n# for unittesting purposes.\n_getchar: t.Optional[t.Callable[[bool], str]] = None\n\n\ndef getchar(echo: bool = False) -> str:\n    \"\"\"Fetches a single character from the terminal and returns it.  This\n    will always return a unicode character and under certain rare\n    circumstances this might return more than one character.  The\n    situations which more than one character is returned is when for\n    whatever reason multiple characters end up in the terminal buffer or\n    standard input was not actually a terminal.\n\n    Note that this will always read from the terminal, even if something\n    is piped into the standard input.\n\n    Note for Windows: in rare cases when typing non-ASCII characters, this\n    function might wait for a second character and then return both at once.\n    This is because certain Unicode characters look like special-key markers.\n\n    .. versionadded:: 2.0\n\n    :param echo: if set to `True`, the character read will also show up on\n                 the terminal.  The default is to not show it.\n    \"\"\"\n    global _getchar\n\n    if _getchar is None:\n        from ._termui_impl import getchar as f\n\n        _getchar = f\n\n    return _getchar(echo)\n\n\ndef raw_terminal() -> t.ContextManager[int]:\n    from ._termui_impl import raw_terminal as f\n\n    return f()\n\n\ndef pause(info: t.Optional[str] = None, err: bool = False) -> None:\n    \"\"\"This command stops execution and waits for the user to press any\n    key to continue.  This is similar to the Windows batch \"pause\"\n    command.  If the program is not run through a terminal, this command\n    will instead do nothing.\n\n    .. versionadded:: 2.0\n\n    .. versionadded:: 4.0\n       Added the `err` parameter.\n\n    :param info: The message to print before pausing. Defaults to\n        ``\"Press any key to continue...\"``.\n    :param err: if set to message goes to ``stderr`` instead of\n                ``stdout``, the same as with echo.\n    \"\"\"\n    if not isatty(sys.stdin) or not isatty(sys.stdout):\n        return\n\n    if info is None:\n        info = _(\"Press any key to continue...\")\n\n    try:\n        if info:\n            echo(info, nl=False, err=err)\n        try:\n            getchar()\n        except (KeyboardInterrupt, EOFError):\n            pass\n    finally:\n        if info:\n            echo(err=err)\n", 809], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py": ["\"\"\"A WSGI and HTTP server for use **during development only**. This\nserver is convenient to use, but is not designed to be particularly\nstable, secure, or efficient. Use a dedicate WSGI server and HTTP\nserver when deploying to production.\n\nIt provides features like interactive debugging and code reloading. Use\n``run_simple`` to start the server. Put this in a ``run.py`` script:\n\n.. code-block:: python\n\n    from myapp import create_app\n    from werkzeug import run_simple\n\"\"\"\nimport io\nimport os\nimport platform\nimport signal\nimport socket\nimport socketserver\nimport sys\nimport typing as t\nimport warnings\nfrom datetime import datetime as dt\nfrom datetime import timedelta\nfrom datetime import timezone\nfrom http.server import BaseHTTPRequestHandler\nfrom http.server import HTTPServer\n\nfrom ._internal import _log\nfrom ._internal import _wsgi_encoding_dance\nfrom .exceptions import InternalServerError\nfrom .urls import uri_to_iri\nfrom .urls import url_parse\nfrom .urls import url_unquote\n\ntry:\n    import ssl\nexcept ImportError:\n\n    class _SslDummy:\n        def __getattr__(self, name: str) -> t.Any:\n            raise RuntimeError(\"SSL support unavailable\")  # noqa: B904\n\n    ssl = _SslDummy()  # type: ignore\n\n_log_add_style = True\n\nif os.name == \"nt\":\n    try:\n        __import__(\"colorama\")\n    except ImportError:\n        _log_add_style = False\n\ncan_fork = hasattr(os, \"fork\")\n\nif can_fork:\n    ForkingMixIn = socketserver.ForkingMixIn\nelse:\n\n    class ForkingMixIn:  # type: ignore\n        pass\n\n\ntry:\n    af_unix = socket.AF_UNIX\nexcept AttributeError:\n    af_unix = None  # type: ignore\n\nLISTEN_QUEUE = 128\ncan_open_by_fd = not platform.system() == \"Windows\" and hasattr(socket, \"fromfd\")\n\n_TSSLContextArg = t.Optional[\n    t.Union[\"ssl.SSLContext\", t.Tuple[str, t.Optional[str]], \"te.Literal['adhoc']\"]\n]\n\nif t.TYPE_CHECKING:\n    import typing_extensions as te  # noqa: F401\n    from _typeshed.wsgi import WSGIApplication\n    from _typeshed.wsgi import WSGIEnvironment\n    from cryptography.hazmat.primitives.asymmetric.rsa import (\n        RSAPrivateKeyWithSerialization,\n    )\n    from cryptography.x509 import Certificate\n\n\nclass DechunkedInput(io.RawIOBase):\n    \"\"\"An input stream that handles Transfer-Encoding 'chunked'\"\"\"\n\n    def __init__(self, rfile: t.IO[bytes]) -> None:\n        self._rfile = rfile\n        self._done = False\n        self._len = 0\n\n    def readable(self) -> bool:\n        return True\n\n    def read_chunk_len(self) -> int:\n        try:\n            line = self._rfile.readline().decode(\"latin1\")\n            _len = int(line.strip(), 16)\n        except ValueError as e:\n            raise OSError(\"Invalid chunk header\") from e\n        if _len < 0:\n            raise OSError(\"Negative chunk length not allowed\")\n        return _len\n\n    def readinto(self, buf: bytearray) -> int:  # type: ignore\n        read = 0\n        while not self._done and read < len(buf):\n            if self._len == 0:\n                # This is the first chunk or we fully consumed the previous\n                # one. Read the next length of the next chunk\n                self._len = self.read_chunk_len()\n\n            if self._len == 0:\n                # Found the final chunk of size 0. The stream is now exhausted,\n                # but there is still a final newline that should be consumed\n                self._done = True\n\n            if self._len > 0:\n                # There is data (left) in this chunk, so append it to the\n                # buffer. If this operation fully consumes the chunk, this will\n                # reset self._len to 0.\n                n = min(len(buf), self._len)\n\n                # If (read + chunk size) becomes more than len(buf), buf will\n                # grow beyond the original size and read more data than\n                # required. So only read as much data as can fit in buf.\n                if read + n > len(buf):\n                    buf[read:] = self._rfile.read(len(buf) - read)\n                    self._len -= len(buf) - read\n                    read = len(buf)\n                else:\n                    buf[read : read + n] = self._rfile.read(n)\n                    self._len -= n\n                    read += n\n\n            if self._len == 0:\n                # Skip the terminating newline of a chunk that has been fully\n                # consumed. This also applies to the 0-sized final chunk\n                terminator = self._rfile.readline()\n                if terminator not in (b\"\\n\", b\"\\r\\n\", b\"\\r\"):\n                    raise OSError(\"Missing chunk terminating newline\")\n\n        return read\n\n\nclass WSGIRequestHandler(BaseHTTPRequestHandler):\n    \"\"\"A request handler that implements WSGI dispatching.\"\"\"\n\n    server: \"BaseWSGIServer\"\n\n    @property\n    def server_version(self) -> str:  # type: ignore\n        from . import __version__\n\n        return f\"Werkzeug/{__version__}\"\n\n    def make_environ(self) -> \"WSGIEnvironment\":\n        request_url = url_parse(self.path)\n\n        def shutdown_server() -> None:\n            warnings.warn(\n                \"The 'environ['werkzeug.server.shutdown']' function is\"\n                \" deprecated and will be removed in Werkzeug 2.1.\",\n                stacklevel=2,\n            )\n            self.server.shutdown_signal = True\n\n        url_scheme = \"http\" if self.server.ssl_context is None else \"https\"\n\n        if not self.client_address:\n            self.client_address = (\"<local>\", 0)\n        elif isinstance(self.client_address, str):\n            self.client_address = (self.client_address, 0)\n\n        # If there was no scheme but the path started with two slashes,\n        # the first segment may have been incorrectly parsed as the\n        # netloc, prepend it to the path again.\n        if not request_url.scheme and request_url.netloc:\n            path_info = f\"/{request_url.netloc}{request_url.path}\"\n        else:\n            path_info = request_url.path\n\n        path_info = url_unquote(path_info)\n\n        environ: \"WSGIEnvironment\" = {\n            \"wsgi.version\": (1, 0),\n            \"wsgi.url_scheme\": url_scheme,\n            \"wsgi.input\": self.rfile,\n            \"wsgi.errors\": sys.stderr,\n            \"wsgi.multithread\": self.server.multithread,\n            \"wsgi.multiprocess\": self.server.multiprocess,\n            \"wsgi.run_once\": False,\n            \"werkzeug.server.shutdown\": shutdown_server,\n            \"werkzeug.socket\": self.connection,\n            \"SERVER_SOFTWARE\": self.server_version,\n            \"REQUEST_METHOD\": self.command,\n            \"SCRIPT_NAME\": \"\",\n            \"PATH_INFO\": _wsgi_encoding_dance(path_info),\n            \"QUERY_STRING\": _wsgi_encoding_dance(request_url.query),\n            # Non-standard, added by mod_wsgi, uWSGI\n            \"REQUEST_URI\": _wsgi_encoding_dance(self.path),\n            # Non-standard, added by gunicorn\n            \"RAW_URI\": _wsgi_encoding_dance(self.path),\n            \"REMOTE_ADDR\": self.address_string(),\n            \"REMOTE_PORT\": self.port_integer(),\n            \"SERVER_NAME\": self.server.server_address[0],\n            \"SERVER_PORT\": str(self.server.server_address[1]),\n            \"SERVER_PROTOCOL\": self.request_version,\n        }\n\n        for key, value in self.headers.items():\n            key = key.upper().replace(\"-\", \"_\")\n            value = value.replace(\"\\r\\n\", \"\")\n            if key not in (\"CONTENT_TYPE\", \"CONTENT_LENGTH\"):\n                key = f\"HTTP_{key}\"\n                if key in environ:\n                    value = f\"{environ[key]},{value}\"\n            environ[key] = value\n\n        if environ.get(\"HTTP_TRANSFER_ENCODING\", \"\").strip().lower() == \"chunked\":\n            environ[\"wsgi.input_terminated\"] = True\n            environ[\"wsgi.input\"] = DechunkedInput(environ[\"wsgi.input\"])\n\n        # Per RFC 2616, if the URL is absolute, use that as the host.\n        # We're using \"has a scheme\" to indicate an absolute URL.\n        if request_url.scheme and request_url.netloc:\n            environ[\"HTTP_HOST\"] = request_url.netloc\n\n        try:\n            # binary_form=False gives nicer information, but wouldn't be compatible with\n            # what Nginx or Apache could return.\n            peer_cert = self.connection.getpeercert(binary_form=True)\n            if peer_cert is not None:\n                # Nginx and Apache use PEM format.\n                environ[\"SSL_CLIENT_CERT\"] = ssl.DER_cert_to_PEM_cert(peer_cert)\n        except ValueError:\n            # SSL handshake hasn't finished.\n            self.server.log(\"error\", \"Cannot fetch SSL peer certificate info\")\n        except AttributeError:\n            # Not using TLS, the socket will not have getpeercert().\n            pass\n\n        return environ\n\n    def run_wsgi(self) -> None:\n        if self.headers.get(\"Expect\", \"\").lower().strip() == \"100-continue\":\n            self.wfile.write(b\"HTTP/1.1 100 Continue\\r\\n\\r\\n\")\n\n        self.environ = environ = self.make_environ()\n        status_set: t.Optional[str] = None\n        headers_set: t.Optional[t.List[t.Tuple[str, str]]] = None\n        status_sent: t.Optional[str] = None\n        headers_sent: t.Optional[t.List[t.Tuple[str, str]]] = None\n\n        def write(data: bytes) -> None:\n            nonlocal status_sent, headers_sent\n            assert status_set is not None, \"write() before start_response\"\n            assert headers_set is not None, \"write() before start_response\"\n            if status_sent is None:\n                status_sent = status_set\n                headers_sent = headers_set\n                try:\n                    code_str, msg = status_sent.split(None, 1)\n                except ValueError:\n                    code_str, msg = status_sent, \"\"\n                code = int(code_str)\n                self.send_response(code, msg)\n                header_keys = set()\n                for key, value in headers_sent:\n                    self.send_header(key, value)\n                    key = key.lower()\n                    header_keys.add(key)\n                if not (\n                    \"content-length\" in header_keys\n                    or environ[\"REQUEST_METHOD\"] == \"HEAD\"\n                    or code < 200\n                    or code in (204, 304)\n                ):\n                    self.close_connection = True\n                    self.send_header(\"Connection\", \"close\")\n                if \"server\" not in header_keys:\n                    self.send_header(\"Server\", self.version_string())\n                if \"date\" not in header_keys:\n                    self.send_header(\"Date\", self.date_time_string())\n                self.end_headers()\n\n            assert isinstance(data, bytes), \"applications must write bytes\"\n            self.wfile.write(data)\n            self.wfile.flush()\n\n        def start_response(status, headers, exc_info=None):  # type: ignore\n            nonlocal status_set, headers_set\n            if exc_info:\n                try:\n                    if headers_sent:\n                        raise exc_info[1].with_traceback(exc_info[2])\n                finally:\n                    exc_info = None\n            elif headers_set:\n                raise AssertionError(\"Headers already set\")\n            status_set = status\n            headers_set = headers\n            return write\n\n        def execute(app: \"WSGIApplication\") -> None:\n            application_iter = app(environ, start_response)\n            try:\n                for data in application_iter:\n                    write(data)\n                if not headers_sent:\n                    write(b\"\")\n            finally:\n                if hasattr(application_iter, \"close\"):\n                    application_iter.close()  # type: ignore\n\n        try:\n            execute(self.server.app)\n        except (ConnectionError, socket.timeout) as e:\n            self.connection_dropped(e, environ)\n        except Exception:\n            if self.server.passthrough_errors:\n                raise\n            from .debug.tbtools import get_current_traceback\n\n            traceback = get_current_traceback(ignore_system_exceptions=True)\n            try:\n                # if we haven't yet sent the headers but they are set\n                # we roll back to be able to set them again.\n                if status_sent is None:\n                    status_set = None\n                    headers_set = None\n                execute(InternalServerError())\n            except Exception:\n                pass\n            self.server.log(\"error\", \"Error on request:\\n%s\", traceback.plaintext)\n\n    def handle(self) -> None:\n        \"\"\"Handles a request ignoring dropped connections.\"\"\"\n        try:\n            BaseHTTPRequestHandler.handle(self)\n        except (ConnectionError, socket.timeout) as e:\n            self.connection_dropped(e)\n        except Exception as e:\n            if self.server.ssl_context is not None and is_ssl_error(e):\n                self.log_error(\"SSL error occurred: %s\", e)\n            else:\n                raise\n        if self.server.shutdown_signal:\n            self.initiate_shutdown()\n\n    def initiate_shutdown(self) -> None:\n        if is_running_from_reloader():\n            # Windows does not provide SIGKILL, go with SIGTERM then.\n            sig = getattr(signal, \"SIGKILL\", signal.SIGTERM)\n            os.kill(os.getpid(), sig)\n\n        self.server._BaseServer__shutdown_request = True  # type: ignore\n\n    def connection_dropped(\n        self, error: BaseException, environ: t.Optional[\"WSGIEnvironment\"] = None\n    ) -> None:\n        \"\"\"Called if the connection was closed by the client.  By default\n        nothing happens.\n        \"\"\"\n\n    def handle_one_request(self) -> None:\n        \"\"\"Handle a single HTTP request.\"\"\"\n        self.raw_requestline = self.rfile.readline()\n        if not self.raw_requestline:\n            self.close_connection = True\n        elif self.parse_request():\n            self.run_wsgi()\n\n    def send_response(self, code: int, message: t.Optional[str] = None) -> None:\n        \"\"\"Send the response header and log the response code.\"\"\"\n        self.log_request(code)\n        if message is None:\n            message = self.responses[code][0] if code in self.responses else \"\"\n        if self.request_version != \"HTTP/0.9\":\n            hdr = f\"{self.protocol_version} {code} {message}\\r\\n\"\n            self.wfile.write(hdr.encode(\"ascii\"))\n\n    def version_string(self) -> str:\n        return super().version_string().strip()\n\n    def address_string(self) -> str:\n        if getattr(self, \"environ\", None):\n            return self.environ[\"REMOTE_ADDR\"]  # type: ignore\n\n        if not self.client_address:\n            return \"<local>\"\n\n        return self.client_address[0]\n\n    def port_integer(self) -> int:\n        return self.client_address[1]\n\n    def log_request(\n        self, code: t.Union[int, str] = \"-\", size: t.Union[int, str] = \"-\"\n    ) -> None:\n        try:\n            path = uri_to_iri(self.path)\n            msg = f\"{self.command} {path} {self.request_version}\"\n        except AttributeError:\n            # path isn't set if the requestline was bad\n            msg = self.requestline\n\n        code = str(code)\n\n        if _log_add_style:\n            if code[0] == \"1\":  # 1xx - Informational\n                msg = _ansi_style(msg, \"bold\")\n            elif code == \"200\":  # 2xx - Success\n                pass\n            elif code == \"304\":  # 304 - Resource Not Modified\n                msg = _ansi_style(msg, \"cyan\")\n            elif code[0] == \"3\":  # 3xx - Redirection\n                msg = _ansi_style(msg, \"green\")\n            elif code == \"404\":  # 404 - Resource Not Found\n                msg = _ansi_style(msg, \"yellow\")\n            elif code[0] == \"4\":  # 4xx - Client Error\n                msg = _ansi_style(msg, \"bold\", \"red\")\n            else:  # 5xx, or any other response\n                msg = _ansi_style(msg, \"bold\", \"magenta\")\n\n        self.log(\"info\", '\"%s\" %s %s', msg, code, size)\n\n    def log_error(self, format: str, *args: t.Any) -> None:\n        self.log(\"error\", format, *args)\n\n    def log_message(self, format: str, *args: t.Any) -> None:\n        self.log(\"info\", format, *args)\n\n    def log(self, type: str, message: str, *args: t.Any) -> None:\n        _log(\n            type,\n            f\"{self.address_string()} - - [{self.log_date_time_string()}] {message}\\n\",\n            *args,\n        )\n\n\ndef _ansi_style(value: str, *styles: str) -> str:\n    codes = {\n        \"bold\": 1,\n        \"red\": 31,\n        \"green\": 32,\n        \"yellow\": 33,\n        \"magenta\": 35,\n        \"cyan\": 36,\n    }\n\n    for style in styles:\n        value = f\"\\x1b[{codes[style]}m{value}\"\n\n    return f\"{value}\\x1b[0m\"\n\n\ndef generate_adhoc_ssl_pair(\n    cn: t.Optional[str] = None,\n) -> t.Tuple[\"Certificate\", \"RSAPrivateKeyWithSerialization\"]:\n    try:\n        from cryptography import x509\n        from cryptography.x509.oid import NameOID\n        from cryptography.hazmat.backends import default_backend\n        from cryptography.hazmat.primitives import hashes\n        from cryptography.hazmat.primitives.asymmetric import rsa\n    except ImportError:\n        raise TypeError(\n            \"Using ad-hoc certificates requires the cryptography library.\"\n        ) from None\n\n    backend = default_backend()\n    pkey = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=backend\n    )\n\n    # pretty damn sure that this is not actually accepted by anyone\n    if cn is None:\n        cn = \"*\"\n\n    subject = x509.Name(\n        [\n            x509.NameAttribute(NameOID.ORGANIZATION_NAME, \"Dummy Certificate\"),\n            x509.NameAttribute(NameOID.COMMON_NAME, cn),\n        ]\n    )\n\n    backend = default_backend()\n    cert = (\n        x509.CertificateBuilder()\n        .subject_name(subject)\n        .issuer_name(subject)\n        .public_key(pkey.public_key())\n        .serial_number(x509.random_serial_number())\n        .not_valid_before(dt.now(timezone.utc))\n        .not_valid_after(dt.now(timezone.utc) + timedelta(days=365))\n        .add_extension(x509.ExtendedKeyUsage([x509.OID_SERVER_AUTH]), critical=False)\n        .add_extension(x509.SubjectAlternativeName([x509.DNSName(cn)]), critical=False)\n        .sign(pkey, hashes.SHA256(), backend)\n    )\n    return cert, pkey\n\n\ndef make_ssl_devcert(\n    base_path: str, host: t.Optional[str] = None, cn: t.Optional[str] = None\n) -> t.Tuple[str, str]:\n    \"\"\"Creates an SSL key for development.  This should be used instead of\n    the ``'adhoc'`` key which generates a new cert on each server start.\n    It accepts a path for where it should store the key and cert and\n    either a host or CN.  If a host is given it will use the CN\n    ``*.host/CN=host``.\n\n    For more information see :func:`run_simple`.\n\n    .. versionadded:: 0.9\n\n    :param base_path: the path to the certificate and key.  The extension\n                      ``.crt`` is added for the certificate, ``.key`` is\n                      added for the key.\n    :param host: the name of the host.  This can be used as an alternative\n                 for the `cn`.\n    :param cn: the `CN` to use.\n    \"\"\"\n\n    if host is not None:\n        cn = f\"*.{host}/CN={host}\"\n    cert, pkey = generate_adhoc_ssl_pair(cn=cn)\n\n    from cryptography.hazmat.primitives import serialization\n\n    cert_file = f\"{base_path}.crt\"\n    pkey_file = f\"{base_path}.key\"\n\n    with open(cert_file, \"wb\") as f:\n        f.write(cert.public_bytes(serialization.Encoding.PEM))\n    with open(pkey_file, \"wb\") as f:\n        f.write(\n            pkey.private_bytes(\n                encoding=serialization.Encoding.PEM,\n                format=serialization.PrivateFormat.TraditionalOpenSSL,\n                encryption_algorithm=serialization.NoEncryption(),\n            )\n        )\n\n    return cert_file, pkey_file\n\n\ndef generate_adhoc_ssl_context() -> \"ssl.SSLContext\":\n    \"\"\"Generates an adhoc SSL context for the development server.\"\"\"\n    import tempfile\n    import atexit\n\n    cert, pkey = generate_adhoc_ssl_pair()\n\n    from cryptography.hazmat.primitives import serialization\n\n    cert_handle, cert_file = tempfile.mkstemp()\n    pkey_handle, pkey_file = tempfile.mkstemp()\n    atexit.register(os.remove, pkey_file)\n    atexit.register(os.remove, cert_file)\n\n    os.write(cert_handle, cert.public_bytes(serialization.Encoding.PEM))\n    os.write(\n        pkey_handle,\n        pkey.private_bytes(\n            encoding=serialization.Encoding.PEM,\n            format=serialization.PrivateFormat.TraditionalOpenSSL,\n            encryption_algorithm=serialization.NoEncryption(),\n        ),\n    )\n\n    os.close(cert_handle)\n    os.close(pkey_handle)\n    ctx = load_ssl_context(cert_file, pkey_file)\n    return ctx\n\n\ndef load_ssl_context(\n    cert_file: str, pkey_file: t.Optional[str] = None, protocol: t.Optional[int] = None\n) -> \"ssl.SSLContext\":\n    \"\"\"Loads SSL context from cert/private key files and optional protocol.\n    Many parameters are directly taken from the API of\n    :py:class:`ssl.SSLContext`.\n\n    :param cert_file: Path of the certificate to use.\n    :param pkey_file: Path of the private key to use. If not given, the key\n                      will be obtained from the certificate file.\n    :param protocol: A ``PROTOCOL`` constant from the :mod:`ssl` module.\n        Defaults to :data:`ssl.PROTOCOL_TLS_SERVER`.\n    \"\"\"\n    if protocol is None:\n        protocol = ssl.PROTOCOL_TLS_SERVER\n\n    ctx = ssl.SSLContext(protocol)\n    ctx.load_cert_chain(cert_file, pkey_file)\n    return ctx\n\n\ndef is_ssl_error(error: t.Optional[Exception] = None) -> bool:\n    \"\"\"Checks if the given error (or the current one) is an SSL error.\"\"\"\n    if error is None:\n        error = t.cast(Exception, sys.exc_info()[1])\n    return isinstance(error, ssl.SSLError)\n\n\ndef select_address_family(host: str, port: int) -> socket.AddressFamily:\n    \"\"\"Return ``AF_INET4``, ``AF_INET6``, or ``AF_UNIX`` depending on\n    the host and port.\"\"\"\n    if host.startswith(\"unix://\"):\n        return socket.AF_UNIX\n    elif \":\" in host and hasattr(socket, \"AF_INET6\"):\n        return socket.AF_INET6\n    return socket.AF_INET\n\n\ndef get_sockaddr(\n    host: str, port: int, family: socket.AddressFamily\n) -> t.Union[t.Tuple[str, int], str]:\n    \"\"\"Return a fully qualified socket address that can be passed to\n    :func:`socket.bind`.\"\"\"\n    if family == af_unix:\n        return host.split(\"://\", 1)[1]\n    try:\n        res = socket.getaddrinfo(\n            host, port, family, socket.SOCK_STREAM, socket.IPPROTO_TCP\n        )\n    except socket.gaierror:\n        return host, port\n    return res[0][4]  # type: ignore\n\n\ndef get_interface_ip(family: socket.AddressFamily) -> str:\n    \"\"\"Get the IP address of an external interface. Used when binding to\n    0.0.0.0 or ::1 to show a more useful URL.\n\n    :meta private:\n    \"\"\"\n    # arbitrary private address\n    host = \"fd31:f903:5ab5:1::1\" if family == socket.AF_INET6 else \"10.253.155.219\"\n\n    with socket.socket(family, socket.SOCK_DGRAM) as s:\n        try:\n            s.connect((host, 58162))\n        except OSError:\n            return \"::1\" if family == socket.AF_INET6 else \"127.0.0.1\"\n\n        return s.getsockname()[0]  # type: ignore\n\n\nclass BaseWSGIServer(HTTPServer):\n\n    \"\"\"Simple single-threaded, single-process WSGI server.\"\"\"\n\n    multithread = False\n    multiprocess = False\n    request_queue_size = LISTEN_QUEUE\n\n    def __init__(\n        self,\n        host: str,\n        port: int,\n        app: \"WSGIApplication\",\n        handler: t.Optional[t.Type[WSGIRequestHandler]] = None,\n        passthrough_errors: bool = False,\n        ssl_context: t.Optional[_TSSLContextArg] = None,\n        fd: t.Optional[int] = None,\n    ) -> None:\n        if handler is None:\n            handler = WSGIRequestHandler\n\n        self.address_family = select_address_family(host, port)\n\n        if fd is not None:\n            real_sock = socket.fromfd(fd, self.address_family, socket.SOCK_STREAM)\n            port = 0\n\n        server_address = get_sockaddr(host, int(port), self.address_family)\n\n        # remove socket file if it already exists\n        if self.address_family == af_unix:\n            server_address = t.cast(str, server_address)\n\n            if os.path.exists(server_address):\n                os.unlink(server_address)\n\n        super().__init__(server_address, handler)  # type: ignore\n\n        self.app = app\n        self.passthrough_errors = passthrough_errors\n        self.shutdown_signal = False\n        self.host = host\n        self.port = self.socket.getsockname()[1]\n\n        # Patch in the original socket.\n        if fd is not None:\n            self.socket.close()\n            self.socket = real_sock\n            self.server_address = self.socket.getsockname()\n\n        if ssl_context is not None:\n            if isinstance(ssl_context, tuple):\n                ssl_context = load_ssl_context(*ssl_context)\n            if ssl_context == \"adhoc\":\n                ssl_context = generate_adhoc_ssl_context()\n\n            self.socket = ssl_context.wrap_socket(self.socket, server_side=True)\n            self.ssl_context: t.Optional[\"ssl.SSLContext\"] = ssl_context\n        else:\n            self.ssl_context = None\n\n    def log(self, type: str, message: str, *args: t.Any) -> None:\n        _log(type, message, *args)\n\n    def serve_forever(self, poll_interval: float = 0.5) -> None:\n        self.shutdown_signal = False\n        try:\n            super().serve_forever(poll_interval=poll_interval)\n        except KeyboardInterrupt:\n            pass\n        finally:\n            self.server_close()\n\n    def handle_error(self, request: t.Any, client_address: t.Tuple[str, int]) -> None:\n        if self.passthrough_errors:\n            raise\n\n        return super().handle_error(request, client_address)\n\n\nclass ThreadedWSGIServer(socketserver.ThreadingMixIn, BaseWSGIServer):\n\n    \"\"\"A WSGI server that does threading.\"\"\"\n\n    multithread = True\n    daemon_threads = True\n\n\nclass ForkingWSGIServer(ForkingMixIn, BaseWSGIServer):\n\n    \"\"\"A WSGI server that does forking.\"\"\"\n\n    multiprocess = True\n\n    def __init__(\n        self,\n        host: str,\n        port: int,\n        app: \"WSGIApplication\",\n        processes: int = 40,\n        handler: t.Optional[t.Type[WSGIRequestHandler]] = None,\n        passthrough_errors: bool = False,\n        ssl_context: t.Optional[_TSSLContextArg] = None,\n        fd: t.Optional[int] = None,\n    ) -> None:\n        if not can_fork:\n            raise ValueError(\"Your platform does not support forking.\")\n        BaseWSGIServer.__init__(\n            self, host, port, app, handler, passthrough_errors, ssl_context, fd\n        )\n        self.max_children = processes\n\n\ndef make_server(\n    host: str,\n    port: int,\n    app: \"WSGIApplication\",\n    threaded: bool = False,\n    processes: int = 1,\n    request_handler: t.Optional[t.Type[WSGIRequestHandler]] = None,\n    passthrough_errors: bool = False,\n    ssl_context: t.Optional[_TSSLContextArg] = None,\n    fd: t.Optional[int] = None,\n) -> BaseWSGIServer:\n    \"\"\"Create a new server instance that is either threaded, or forks\n    or just processes one request after another.\n    \"\"\"\n    if threaded and processes > 1:\n        raise ValueError(\"cannot have a multithreaded and multi process server.\")\n    elif threaded:\n        return ThreadedWSGIServer(\n            host, port, app, request_handler, passthrough_errors, ssl_context, fd=fd\n        )\n    elif processes > 1:\n        return ForkingWSGIServer(\n            host,\n            port,\n            app,\n            processes,\n            request_handler,\n            passthrough_errors,\n            ssl_context,\n            fd=fd,\n        )\n    else:\n        return BaseWSGIServer(\n            host, port, app, request_handler, passthrough_errors, ssl_context, fd=fd\n        )\n\n\ndef is_running_from_reloader() -> bool:\n    \"\"\"Checks if the application is running from within the Werkzeug\n    reloader subprocess.\n\n    .. versionadded:: 0.10\n    \"\"\"\n    return os.environ.get(\"WERKZEUG_RUN_MAIN\") == \"true\"\n\n\ndef run_simple(\n    hostname: str,\n    port: int,\n    application: \"WSGIApplication\",\n    use_reloader: bool = False,\n    use_debugger: bool = False,\n    use_evalex: bool = True,\n    extra_files: t.Optional[t.Iterable[str]] = None,\n    exclude_patterns: t.Optional[t.Iterable[str]] = None,\n    reloader_interval: int = 1,\n    reloader_type: str = \"auto\",\n    threaded: bool = False,\n    processes: int = 1,\n    request_handler: t.Optional[t.Type[WSGIRequestHandler]] = None,\n    static_files: t.Optional[t.Dict[str, t.Union[str, t.Tuple[str, str]]]] = None,\n    passthrough_errors: bool = False,\n    ssl_context: t.Optional[_TSSLContextArg] = None,\n) -> None:\n    \"\"\"Start a WSGI application. Optional features include a reloader,\n    multithreading and fork support.\n\n    This function has a command-line interface too::\n\n        python -m werkzeug.serving --help\n\n    .. versionchanged:: 2.0\n        Added ``exclude_patterns`` parameter.\n\n    .. versionadded:: 0.5\n       `static_files` was added to simplify serving of static files as well\n       as `passthrough_errors`.\n\n    .. versionadded:: 0.6\n       support for SSL was added.\n\n    .. versionadded:: 0.8\n       Added support for automatically loading a SSL context from certificate\n       file and private key.\n\n    .. versionadded:: 0.9\n       Added command-line interface.\n\n    .. versionadded:: 0.10\n       Improved the reloader and added support for changing the backend\n       through the `reloader_type` parameter.  See :ref:`reloader`\n       for more information.\n\n    .. versionchanged:: 0.15\n        Bind to a Unix socket by passing a path that starts with\n        ``unix://`` as the ``hostname``.\n\n    :param hostname: The host to bind to, for example ``'localhost'``.\n        If the value is a path that starts with ``unix://`` it will bind\n        to a Unix socket instead of a TCP socket..\n    :param port: The port for the server.  eg: ``8080``\n    :param application: the WSGI application to execute\n    :param use_reloader: should the server automatically restart the python\n                         process if modules were changed?\n    :param use_debugger: should the werkzeug debugging system be used?\n    :param use_evalex: should the exception evaluation feature be enabled?\n    :param extra_files: a list of files the reloader should watch\n                        additionally to the modules.  For example configuration\n                        files.\n    :param exclude_patterns: List of :mod:`fnmatch` patterns to ignore\n        when running the reloader. For example, ignore cache files that\n        shouldn't reload when updated.\n    :param reloader_interval: the interval for the reloader in seconds.\n    :param reloader_type: the type of reloader to use.  The default is\n                          auto detection.  Valid values are ``'stat'`` and\n                          ``'watchdog'``. See :ref:`reloader` for more\n                          information.\n    :param threaded: should the process handle each request in a separate\n                     thread?\n    :param processes: if greater than 1 then handle each request in a new process\n                      up to this maximum number of concurrent processes.\n    :param request_handler: optional parameter that can be used to replace\n                            the default one.  You can use this to replace it\n                            with a different\n                            :class:`~BaseHTTPServer.BaseHTTPRequestHandler`\n                            subclass.\n    :param static_files: a list or dict of paths for static files.  This works\n                         exactly like :class:`SharedDataMiddleware`, it's actually\n                         just wrapping the application in that middleware before\n                         serving.\n    :param passthrough_errors: set this to `True` to disable the error catching.\n                               This means that the server will die on errors but\n                               it can be useful to hook debuggers in (pdb etc.)\n    :param ssl_context: an SSL context for the connection. Either an\n                        :class:`ssl.SSLContext`, a tuple in the form\n                        ``(cert_file, pkey_file)``, the string ``'adhoc'`` if\n                        the server should automatically create one, or ``None``\n                        to disable SSL (which is the default).\n    \"\"\"\n    if not isinstance(port, int):\n        raise TypeError(\"port must be an integer\")\n    if use_debugger:\n        from .debug import DebuggedApplication\n\n        application = DebuggedApplication(application, use_evalex)\n    if static_files:\n        from .middleware.shared_data import SharedDataMiddleware\n\n        application = SharedDataMiddleware(application, static_files)\n\n    def log_startup(sock: socket.socket) -> None:\n        all_addresses_message = (\n            \" * Running on all addresses.\\n\"\n            \"   WARNING: This is a development server. Do not use it in\"\n            \" a production deployment.\"\n        )\n\n        if sock.family == af_unix:\n            _log(\"info\", \" * Running on %s (Press CTRL+C to quit)\", hostname)\n        else:\n            if hostname == \"0.0.0.0\":\n                _log(\"warning\", all_addresses_message)\n                display_hostname = get_interface_ip(socket.AF_INET)\n            elif hostname == \"::\":\n                _log(\"warning\", all_addresses_message)\n                display_hostname = get_interface_ip(socket.AF_INET6)\n            else:\n                display_hostname = hostname\n\n            if \":\" in display_hostname:\n                display_hostname = f\"[{display_hostname}]\"\n\n            _log(\n                \"info\",\n                \" * Running on %s://%s:%d/ (Press CTRL+C to quit)\",\n                \"http\" if ssl_context is None else \"https\",\n                display_hostname,\n                sock.getsockname()[1],\n            )\n\n    def inner() -> None:\n        try:\n            fd: t.Optional[int] = int(os.environ[\"WERKZEUG_SERVER_FD\"])\n        except (LookupError, ValueError):\n            fd = None\n        srv = make_server(\n            hostname,\n            port,\n            application,\n            threaded,\n            processes,\n            request_handler,\n            passthrough_errors,\n            ssl_context,\n            fd=fd,\n        )\n        if fd is None:\n            log_startup(srv.socket)\n        srv.serve_forever()\n\n    if use_reloader:\n        # If we're not running already in the subprocess that is the\n        # reloader we want to open up a socket early to make sure the\n        # port is actually available.\n        if not is_running_from_reloader():\n            if port == 0 and not can_open_by_fd:\n                raise ValueError(\n                    \"Cannot bind to a random port with enabled \"\n                    \"reloader if the Python interpreter does \"\n                    \"not support socket opening by fd.\"\n                )\n\n            # Create and destroy a socket so that any exceptions are\n            # raised before we spawn a separate Python interpreter and\n            # lose this ability.\n            address_family = select_address_family(hostname, port)\n            server_address = get_sockaddr(hostname, port, address_family)\n            s = socket.socket(address_family, socket.SOCK_STREAM)\n            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            s.bind(server_address)\n            s.set_inheritable(True)\n\n            # If we can open the socket by file descriptor, then we can just\n            # reuse this one and our socket will survive the restarts.\n            if can_open_by_fd:\n                os.environ[\"WERKZEUG_SERVER_FD\"] = str(s.fileno())\n                s.listen(LISTEN_QUEUE)\n                log_startup(s)\n            else:\n                s.close()\n                if address_family == af_unix:\n                    server_address = t.cast(str, server_address)\n                    _log(\"info\", \"Unlinking %s\", server_address)\n                    os.unlink(server_address)\n\n        from ._reloader import run_with_reloader as _rwr\n\n        _rwr(\n            inner,\n            extra_files=extra_files,\n            exclude_patterns=exclude_patterns,\n            interval=reloader_interval,\n            reloader_type=reloader_type,\n        )\n    else:\n        inner()\n\n\ndef run_with_reloader(*args: t.Any, **kwargs: t.Any) -> None:\n    \"\"\"Run a process with the reloader. This is not a public API, do\n    not use this function.\n\n    .. deprecated:: 2.0\n        Will be removed in Werkzeug 2.1.\n    \"\"\"\n    from ._reloader import run_with_reloader as _rwr\n\n    warnings.warn(\n        (\n            \"'run_with_reloader' is a private API, it will no longer be\"\n            \" accessible in Werkzeug 2.1. Use 'run_simple' instead.\"\n        ),\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    _rwr(*args, **kwargs)\n\n\ndef main() -> None:\n    \"\"\"A simple command-line interface for :py:func:`run_simple`.\"\"\"\n    import argparse\n    from .utils import import_string\n\n    _log(\"warning\", \"This CLI is deprecated and will be removed in version 2.1.\")\n\n    parser = argparse.ArgumentParser(\n        description=\"Run the given WSGI application with the development server.\",\n        allow_abbrev=False,\n    )\n    parser.add_argument(\n        \"-b\",\n        \"--bind\",\n        dest=\"address\",\n        help=\"The hostname:port the app should listen on.\",\n    )\n    parser.add_argument(\n        \"-d\",\n        \"--debug\",\n        action=\"store_true\",\n        help=\"Show the interactive debugger for unhandled exceptions.\",\n    )\n    parser.add_argument(\n        \"-r\",\n        \"--reload\",\n        action=\"store_true\",\n        help=\"Reload the process if modules change.\",\n    )\n    parser.add_argument(\n        \"application\", help=\"Application to import and serve, in the form module:app.\"\n    )\n    args = parser.parse_args()\n    hostname, port = None, None\n\n    if args.address:\n        hostname, _, port = args.address.partition(\":\")\n\n    run_simple(\n        hostname=hostname or \"127.0.0.1\",\n        port=int(port or 5000),\n        application=import_string(args.application),\n        use_reloader=args.reload,\n        use_debugger=args.debug,\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n", 1081], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/__init__.py": ["\"\"\" Standard \"encodings\" Package\n\n    Standard Python encoding modules are stored in this package\n    directory.\n\n    Codec modules must have names corresponding to normalized encoding\n    names as defined in the normalize_encoding() function below, e.g.\n    'utf-8' must be implemented by the module 'utf_8.py'.\n\n    Each codec module must export the following interface:\n\n    * getregentry() -> codecs.CodecInfo object\n    The getregentry() API must return a CodecInfo object with encoder, decoder,\n    incrementalencoder, incrementaldecoder, streamwriter and streamreader\n    atttributes which adhere to the Python Codec Interface Standard.\n\n    In addition, a module may optionally also define the following\n    APIs which are then used by the package's codec search function:\n\n    * getaliases() -> sequence of encoding name strings to use as aliases\n\n    Alias names returned by getaliases() must be normalized encoding\n    names as defined by normalize_encoding().\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n\"\"\"#\"\n\nimport codecs\nimport sys\nfrom . import aliases\n\n_cache = {}\n_unknown = '--unknown--'\n_import_tail = ['*']\n_aliases = aliases.aliases\n\nclass CodecRegistryError(LookupError, SystemError):\n    pass\n\ndef normalize_encoding(encoding):\n\n    \"\"\" Normalize an encoding name.\n\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n\n        Note that encoding names should be ASCII only; if they do use\n        non-ASCII characters, these must be Latin-1 compatible.\n\n    \"\"\"\n    if isinstance(encoding, bytes):\n        encoding = str(encoding, \"ascii\")\n\n    chars = []\n    punct = False\n    for c in encoding:\n        if c.isalnum() or c == '.':\n            if punct and chars:\n                chars.append('_')\n            chars.append(c)\n            punct = False\n        else:\n            punct = True\n    return ''.join(chars)\n\ndef search_function(encoding):\n\n    # Cache lookup\n    entry = _cache.get(encoding, _unknown)\n    if entry is not _unknown:\n        return entry\n\n    # Import the module:\n    #\n    # First try to find an alias for the normalized encoding\n    # name and lookup the module using the aliased name, then try to\n    # lookup the module using the standard import scheme, i.e. first\n    # try in the encodings package, then at top-level.\n    #\n    norm_encoding = normalize_encoding(encoding)\n    aliased_encoding = _aliases.get(norm_encoding) or \\\n                       _aliases.get(norm_encoding.replace('.', '_'))\n    if aliased_encoding is not None:\n        modnames = [aliased_encoding,\n                    norm_encoding]\n    else:\n        modnames = [norm_encoding]\n    for modname in modnames:\n        if not modname or '.' in modname:\n            continue\n        try:\n            # Import is absolute to prevent the possibly malicious import of a\n            # module with side-effects that is not in the 'encodings' package.\n            mod = __import__('encodings.' + modname, fromlist=_import_tail,\n                             level=0)\n        except ImportError:\n            # ImportError may occur because 'encodings.(modname)' does not exist,\n            # or because it imports a name that does not exist (see mbcs and oem)\n            pass\n        else:\n            break\n    else:\n        mod = None\n\n    try:\n        getregentry = mod.getregentry\n    except AttributeError:\n        # Not a codec module\n        mod = None\n\n    if mod is None:\n        # Cache misses\n        _cache[encoding] = None\n        return None\n\n    # Now ask the module for the registry entry\n    entry = getregentry()\n    if not isinstance(entry, codecs.CodecInfo):\n        if not 4 <= len(entry) <= 7:\n            raise CodecRegistryError('module \"%s\" (%s) failed to register'\n                                     % (mod.__name__, mod.__file__))\n        if not callable(entry[0]) or not callable(entry[1]) or \\\n           (entry[2] is not None and not callable(entry[2])) or \\\n           (entry[3] is not None and not callable(entry[3])) or \\\n           (len(entry) > 4 and entry[4] is not None and not callable(entry[4])) or \\\n           (len(entry) > 5 and entry[5] is not None and not callable(entry[5])):\n            raise CodecRegistryError('incompatible codecs in module \"%s\" (%s)'\n                                     % (mod.__name__, mod.__file__))\n        if len(entry)<7 or entry[6] is None:\n            entry += (None,)*(6-len(entry)) + (mod.__name__.split(\".\", 1)[1],)\n        entry = codecs.CodecInfo(*entry)\n\n    # Cache the codec registry entry\n    _cache[encoding] = entry\n\n    # Register its aliases (without overwriting previously registered\n    # aliases)\n    try:\n        codecaliases = mod.getaliases()\n    except AttributeError:\n        pass\n    else:\n        for alias in codecaliases:\n            if alias not in _aliases:\n                _aliases[alias] = modname\n\n    # Return the registry entry\n    return entry\n\n# Register the search_function in the Python codec registry\ncodecs.register(search_function)\n\nif sys.platform == 'win32':\n    def _alias_mbcs(encoding):\n        try:\n            import _winapi\n            ansi_code_page = \"cp%s\" % _winapi.GetACP()\n            if encoding == ansi_code_page:\n                import encodings.mbcs\n                return encodings.mbcs.getregentry()\n        except ImportError:\n            # Imports may fail while we are shutting down\n            pass\n\n    codecs.register(_alias_mbcs)\n", 170], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/stringprep.py": ["# This file is generated by mkstringprep.py. DO NOT EDIT.\n\"\"\"Library that exposes various tables found in the StringPrep RFC 3454.\n\nThere are two kinds of tables: sets, for which a member test is provided,\nand mappings, for which a mapping function is provided.\n\"\"\"\n\nfrom unicodedata import ucd_3_2_0 as unicodedata\n\nassert unicodedata.unidata_version == '3.2.0'\n\ndef in_table_a1(code):\n    if unicodedata.category(code) != 'Cn': return False\n    c = ord(code)\n    if 0xFDD0 <= c < 0xFDF0: return False\n    return (c & 0xFFFF) not in (0xFFFE, 0xFFFF)\n\n\nb1_set = set([173, 847, 6150, 6155, 6156, 6157, 8203, 8204, 8205, 8288, 65279] + list(range(65024,65040)))\ndef in_table_b1(code):\n    return ord(code) in b1_set\n\n\nb3_exceptions = {\n0xb5:'\\u03bc', 0xdf:'ss', 0x130:'i\\u0307', 0x149:'\\u02bcn',\n0x17f:'s', 0x1f0:'j\\u030c', 0x345:'\\u03b9', 0x37a:' \\u03b9',\n0x390:'\\u03b9\\u0308\\u0301', 0x3b0:'\\u03c5\\u0308\\u0301', 0x3c2:'\\u03c3', 0x3d0:'\\u03b2',\n0x3d1:'\\u03b8', 0x3d2:'\\u03c5', 0x3d3:'\\u03cd', 0x3d4:'\\u03cb',\n0x3d5:'\\u03c6', 0x3d6:'\\u03c0', 0x3f0:'\\u03ba', 0x3f1:'\\u03c1',\n0x3f2:'\\u03c3', 0x3f5:'\\u03b5', 0x587:'\\u0565\\u0582', 0x1e96:'h\\u0331',\n0x1e97:'t\\u0308', 0x1e98:'w\\u030a', 0x1e99:'y\\u030a', 0x1e9a:'a\\u02be',\n0x1e9b:'\\u1e61', 0x1f50:'\\u03c5\\u0313', 0x1f52:'\\u03c5\\u0313\\u0300', 0x1f54:'\\u03c5\\u0313\\u0301',\n0x1f56:'\\u03c5\\u0313\\u0342', 0x1f80:'\\u1f00\\u03b9', 0x1f81:'\\u1f01\\u03b9', 0x1f82:'\\u1f02\\u03b9',\n0x1f83:'\\u1f03\\u03b9', 0x1f84:'\\u1f04\\u03b9', 0x1f85:'\\u1f05\\u03b9', 0x1f86:'\\u1f06\\u03b9',\n0x1f87:'\\u1f07\\u03b9', 0x1f88:'\\u1f00\\u03b9', 0x1f89:'\\u1f01\\u03b9', 0x1f8a:'\\u1f02\\u03b9',\n0x1f8b:'\\u1f03\\u03b9', 0x1f8c:'\\u1f04\\u03b9', 0x1f8d:'\\u1f05\\u03b9', 0x1f8e:'\\u1f06\\u03b9',\n0x1f8f:'\\u1f07\\u03b9', 0x1f90:'\\u1f20\\u03b9', 0x1f91:'\\u1f21\\u03b9', 0x1f92:'\\u1f22\\u03b9',\n0x1f93:'\\u1f23\\u03b9', 0x1f94:'\\u1f24\\u03b9', 0x1f95:'\\u1f25\\u03b9', 0x1f96:'\\u1f26\\u03b9',\n0x1f97:'\\u1f27\\u03b9', 0x1f98:'\\u1f20\\u03b9', 0x1f99:'\\u1f21\\u03b9', 0x1f9a:'\\u1f22\\u03b9',\n0x1f9b:'\\u1f23\\u03b9', 0x1f9c:'\\u1f24\\u03b9', 0x1f9d:'\\u1f25\\u03b9', 0x1f9e:'\\u1f26\\u03b9',\n0x1f9f:'\\u1f27\\u03b9', 0x1fa0:'\\u1f60\\u03b9', 0x1fa1:'\\u1f61\\u03b9', 0x1fa2:'\\u1f62\\u03b9',\n0x1fa3:'\\u1f63\\u03b9', 0x1fa4:'\\u1f64\\u03b9', 0x1fa5:'\\u1f65\\u03b9', 0x1fa6:'\\u1f66\\u03b9',\n0x1fa7:'\\u1f67\\u03b9', 0x1fa8:'\\u1f60\\u03b9', 0x1fa9:'\\u1f61\\u03b9', 0x1faa:'\\u1f62\\u03b9',\n0x1fab:'\\u1f63\\u03b9', 0x1fac:'\\u1f64\\u03b9', 0x1fad:'\\u1f65\\u03b9', 0x1fae:'\\u1f66\\u03b9',\n0x1faf:'\\u1f67\\u03b9', 0x1fb2:'\\u1f70\\u03b9', 0x1fb3:'\\u03b1\\u03b9', 0x1fb4:'\\u03ac\\u03b9',\n0x1fb6:'\\u03b1\\u0342', 0x1fb7:'\\u03b1\\u0342\\u03b9', 0x1fbc:'\\u03b1\\u03b9', 0x1fbe:'\\u03b9',\n0x1fc2:'\\u1f74\\u03b9', 0x1fc3:'\\u03b7\\u03b9', 0x1fc4:'\\u03ae\\u03b9', 0x1fc6:'\\u03b7\\u0342',\n0x1fc7:'\\u03b7\\u0342\\u03b9', 0x1fcc:'\\u03b7\\u03b9', 0x1fd2:'\\u03b9\\u0308\\u0300', 0x1fd3:'\\u03b9\\u0308\\u0301',\n0x1fd6:'\\u03b9\\u0342', 0x1fd7:'\\u03b9\\u0308\\u0342', 0x1fe2:'\\u03c5\\u0308\\u0300', 0x1fe3:'\\u03c5\\u0308\\u0301',\n0x1fe4:'\\u03c1\\u0313', 0x1fe6:'\\u03c5\\u0342', 0x1fe7:'\\u03c5\\u0308\\u0342', 0x1ff2:'\\u1f7c\\u03b9',\n0x1ff3:'\\u03c9\\u03b9', 0x1ff4:'\\u03ce\\u03b9', 0x1ff6:'\\u03c9\\u0342', 0x1ff7:'\\u03c9\\u0342\\u03b9',\n0x1ffc:'\\u03c9\\u03b9', 0x20a8:'rs', 0x2102:'c', 0x2103:'\\xb0c',\n0x2107:'\\u025b', 0x2109:'\\xb0f', 0x210b:'h', 0x210c:'h',\n0x210d:'h', 0x2110:'i', 0x2111:'i', 0x2112:'l',\n0x2115:'n', 0x2116:'no', 0x2119:'p', 0x211a:'q',\n0x211b:'r', 0x211c:'r', 0x211d:'r', 0x2120:'sm',\n0x2121:'tel', 0x2122:'tm', 0x2124:'z', 0x2128:'z',\n0x212c:'b', 0x212d:'c', 0x2130:'e', 0x2131:'f',\n0x2133:'m', 0x213e:'\\u03b3', 0x213f:'\\u03c0', 0x2145:'d',\n0x3371:'hpa', 0x3373:'au', 0x3375:'ov', 0x3380:'pa',\n0x3381:'na', 0x3382:'\\u03bca', 0x3383:'ma', 0x3384:'ka',\n0x3385:'kb', 0x3386:'mb', 0x3387:'gb', 0x338a:'pf',\n0x338b:'nf', 0x338c:'\\u03bcf', 0x3390:'hz', 0x3391:'khz',\n0x3392:'mhz', 0x3393:'ghz', 0x3394:'thz', 0x33a9:'pa',\n0x33aa:'kpa', 0x33ab:'mpa', 0x33ac:'gpa', 0x33b4:'pv',\n0x33b5:'nv', 0x33b6:'\\u03bcv', 0x33b7:'mv', 0x33b8:'kv',\n0x33b9:'mv', 0x33ba:'pw', 0x33bb:'nw', 0x33bc:'\\u03bcw',\n0x33bd:'mw', 0x33be:'kw', 0x33bf:'mw', 0x33c0:'k\\u03c9',\n0x33c1:'m\\u03c9', 0x33c3:'bq', 0x33c6:'c\\u2215kg', 0x33c7:'co.',\n0x33c8:'db', 0x33c9:'gy', 0x33cb:'hp', 0x33cd:'kk',\n0x33ce:'km', 0x33d7:'ph', 0x33d9:'ppm', 0x33da:'pr',\n0x33dc:'sv', 0x33dd:'wb', 0xfb00:'ff', 0xfb01:'fi',\n0xfb02:'fl', 0xfb03:'ffi', 0xfb04:'ffl', 0xfb05:'st',\n0xfb06:'st', 0xfb13:'\\u0574\\u0576', 0xfb14:'\\u0574\\u0565', 0xfb15:'\\u0574\\u056b',\n0xfb16:'\\u057e\\u0576', 0xfb17:'\\u0574\\u056d', 0x1d400:'a', 0x1d401:'b',\n0x1d402:'c', 0x1d403:'d', 0x1d404:'e', 0x1d405:'f',\n0x1d406:'g', 0x1d407:'h', 0x1d408:'i', 0x1d409:'j',\n0x1d40a:'k', 0x1d40b:'l', 0x1d40c:'m', 0x1d40d:'n',\n0x1d40e:'o', 0x1d40f:'p', 0x1d410:'q', 0x1d411:'r',\n0x1d412:'s', 0x1d413:'t', 0x1d414:'u', 0x1d415:'v',\n0x1d416:'w', 0x1d417:'x', 0x1d418:'y', 0x1d419:'z',\n0x1d434:'a', 0x1d435:'b', 0x1d436:'c', 0x1d437:'d',\n0x1d438:'e', 0x1d439:'f', 0x1d43a:'g', 0x1d43b:'h',\n0x1d43c:'i', 0x1d43d:'j', 0x1d43e:'k', 0x1d43f:'l',\n0x1d440:'m', 0x1d441:'n', 0x1d442:'o', 0x1d443:'p',\n0x1d444:'q', 0x1d445:'r', 0x1d446:'s', 0x1d447:'t',\n0x1d448:'u', 0x1d449:'v', 0x1d44a:'w', 0x1d44b:'x',\n0x1d44c:'y', 0x1d44d:'z', 0x1d468:'a', 0x1d469:'b',\n0x1d46a:'c', 0x1d46b:'d', 0x1d46c:'e', 0x1d46d:'f',\n0x1d46e:'g', 0x1d46f:'h', 0x1d470:'i', 0x1d471:'j',\n0x1d472:'k', 0x1d473:'l', 0x1d474:'m', 0x1d475:'n',\n0x1d476:'o', 0x1d477:'p', 0x1d478:'q', 0x1d479:'r',\n0x1d47a:'s', 0x1d47b:'t', 0x1d47c:'u', 0x1d47d:'v',\n0x1d47e:'w', 0x1d47f:'x', 0x1d480:'y', 0x1d481:'z',\n0x1d49c:'a', 0x1d49e:'c', 0x1d49f:'d', 0x1d4a2:'g',\n0x1d4a5:'j', 0x1d4a6:'k', 0x1d4a9:'n', 0x1d4aa:'o',\n0x1d4ab:'p', 0x1d4ac:'q', 0x1d4ae:'s', 0x1d4af:'t',\n0x1d4b0:'u', 0x1d4b1:'v', 0x1d4b2:'w', 0x1d4b3:'x',\n0x1d4b4:'y', 0x1d4b5:'z', 0x1d4d0:'a', 0x1d4d1:'b',\n0x1d4d2:'c', 0x1d4d3:'d', 0x1d4d4:'e', 0x1d4d5:'f',\n0x1d4d6:'g', 0x1d4d7:'h', 0x1d4d8:'i', 0x1d4d9:'j',\n0x1d4da:'k', 0x1d4db:'l', 0x1d4dc:'m', 0x1d4dd:'n',\n0x1d4de:'o', 0x1d4df:'p', 0x1d4e0:'q', 0x1d4e1:'r',\n0x1d4e2:'s', 0x1d4e3:'t', 0x1d4e4:'u', 0x1d4e5:'v',\n0x1d4e6:'w', 0x1d4e7:'x', 0x1d4e8:'y', 0x1d4e9:'z',\n0x1d504:'a', 0x1d505:'b', 0x1d507:'d', 0x1d508:'e',\n0x1d509:'f', 0x1d50a:'g', 0x1d50d:'j', 0x1d50e:'k',\n0x1d50f:'l', 0x1d510:'m', 0x1d511:'n', 0x1d512:'o',\n0x1d513:'p', 0x1d514:'q', 0x1d516:'s', 0x1d517:'t',\n0x1d518:'u', 0x1d519:'v', 0x1d51a:'w', 0x1d51b:'x',\n0x1d51c:'y', 0x1d538:'a', 0x1d539:'b', 0x1d53b:'d',\n0x1d53c:'e', 0x1d53d:'f', 0x1d53e:'g', 0x1d540:'i',\n0x1d541:'j', 0x1d542:'k', 0x1d543:'l', 0x1d544:'m',\n0x1d546:'o', 0x1d54a:'s', 0x1d54b:'t', 0x1d54c:'u',\n0x1d54d:'v', 0x1d54e:'w', 0x1d54f:'x', 0x1d550:'y',\n0x1d56c:'a', 0x1d56d:'b', 0x1d56e:'c', 0x1d56f:'d',\n0x1d570:'e', 0x1d571:'f', 0x1d572:'g', 0x1d573:'h',\n0x1d574:'i', 0x1d575:'j', 0x1d576:'k', 0x1d577:'l',\n0x1d578:'m', 0x1d579:'n', 0x1d57a:'o', 0x1d57b:'p',\n0x1d57c:'q', 0x1d57d:'r', 0x1d57e:'s', 0x1d57f:'t',\n0x1d580:'u', 0x1d581:'v', 0x1d582:'w', 0x1d583:'x',\n0x1d584:'y', 0x1d585:'z', 0x1d5a0:'a', 0x1d5a1:'b',\n0x1d5a2:'c', 0x1d5a3:'d', 0x1d5a4:'e', 0x1d5a5:'f',\n0x1d5a6:'g', 0x1d5a7:'h', 0x1d5a8:'i', 0x1d5a9:'j',\n0x1d5aa:'k', 0x1d5ab:'l', 0x1d5ac:'m', 0x1d5ad:'n',\n0x1d5ae:'o', 0x1d5af:'p', 0x1d5b0:'q', 0x1d5b1:'r',\n0x1d5b2:'s', 0x1d5b3:'t', 0x1d5b4:'u', 0x1d5b5:'v',\n0x1d5b6:'w', 0x1d5b7:'x', 0x1d5b8:'y', 0x1d5b9:'z',\n0x1d5d4:'a', 0x1d5d5:'b', 0x1d5d6:'c', 0x1d5d7:'d',\n0x1d5d8:'e', 0x1d5d9:'f', 0x1d5da:'g', 0x1d5db:'h',\n0x1d5dc:'i', 0x1d5dd:'j', 0x1d5de:'k', 0x1d5df:'l',\n0x1d5e0:'m', 0x1d5e1:'n', 0x1d5e2:'o', 0x1d5e3:'p',\n0x1d5e4:'q', 0x1d5e5:'r', 0x1d5e6:'s', 0x1d5e7:'t',\n0x1d5e8:'u', 0x1d5e9:'v', 0x1d5ea:'w', 0x1d5eb:'x',\n0x1d5ec:'y', 0x1d5ed:'z', 0x1d608:'a', 0x1d609:'b',\n0x1d60a:'c', 0x1d60b:'d', 0x1d60c:'e', 0x1d60d:'f',\n0x1d60e:'g', 0x1d60f:'h', 0x1d610:'i', 0x1d611:'j',\n0x1d612:'k', 0x1d613:'l', 0x1d614:'m', 0x1d615:'n',\n0x1d616:'o', 0x1d617:'p', 0x1d618:'q', 0x1d619:'r',\n0x1d61a:'s', 0x1d61b:'t', 0x1d61c:'u', 0x1d61d:'v',\n0x1d61e:'w', 0x1d61f:'x', 0x1d620:'y', 0x1d621:'z',\n0x1d63c:'a', 0x1d63d:'b', 0x1d63e:'c', 0x1d63f:'d',\n0x1d640:'e', 0x1d641:'f', 0x1d642:'g', 0x1d643:'h',\n0x1d644:'i', 0x1d645:'j', 0x1d646:'k', 0x1d647:'l',\n0x1d648:'m', 0x1d649:'n', 0x1d64a:'o', 0x1d64b:'p',\n0x1d64c:'q', 0x1d64d:'r', 0x1d64e:'s', 0x1d64f:'t',\n0x1d650:'u', 0x1d651:'v', 0x1d652:'w', 0x1d653:'x',\n0x1d654:'y', 0x1d655:'z', 0x1d670:'a', 0x1d671:'b',\n0x1d672:'c', 0x1d673:'d', 0x1d674:'e', 0x1d675:'f',\n0x1d676:'g', 0x1d677:'h', 0x1d678:'i', 0x1d679:'j',\n0x1d67a:'k', 0x1d67b:'l', 0x1d67c:'m', 0x1d67d:'n',\n0x1d67e:'o', 0x1d67f:'p', 0x1d680:'q', 0x1d681:'r',\n0x1d682:'s', 0x1d683:'t', 0x1d684:'u', 0x1d685:'v',\n0x1d686:'w', 0x1d687:'x', 0x1d688:'y', 0x1d689:'z',\n0x1d6a8:'\\u03b1', 0x1d6a9:'\\u03b2', 0x1d6aa:'\\u03b3', 0x1d6ab:'\\u03b4',\n0x1d6ac:'\\u03b5', 0x1d6ad:'\\u03b6', 0x1d6ae:'\\u03b7', 0x1d6af:'\\u03b8',\n0x1d6b0:'\\u03b9', 0x1d6b1:'\\u03ba', 0x1d6b2:'\\u03bb', 0x1d6b3:'\\u03bc',\n0x1d6b4:'\\u03bd', 0x1d6b5:'\\u03be', 0x1d6b6:'\\u03bf', 0x1d6b7:'\\u03c0',\n0x1d6b8:'\\u03c1', 0x1d6b9:'\\u03b8', 0x1d6ba:'\\u03c3', 0x1d6bb:'\\u03c4',\n0x1d6bc:'\\u03c5', 0x1d6bd:'\\u03c6', 0x1d6be:'\\u03c7', 0x1d6bf:'\\u03c8',\n0x1d6c0:'\\u03c9', 0x1d6d3:'\\u03c3', 0x1d6e2:'\\u03b1', 0x1d6e3:'\\u03b2',\n0x1d6e4:'\\u03b3', 0x1d6e5:'\\u03b4', 0x1d6e6:'\\u03b5', 0x1d6e7:'\\u03b6',\n0x1d6e8:'\\u03b7', 0x1d6e9:'\\u03b8', 0x1d6ea:'\\u03b9', 0x1d6eb:'\\u03ba',\n0x1d6ec:'\\u03bb', 0x1d6ed:'\\u03bc', 0x1d6ee:'\\u03bd', 0x1d6ef:'\\u03be',\n0x1d6f0:'\\u03bf', 0x1d6f1:'\\u03c0', 0x1d6f2:'\\u03c1', 0x1d6f3:'\\u03b8',\n0x1d6f4:'\\u03c3', 0x1d6f5:'\\u03c4', 0x1d6f6:'\\u03c5', 0x1d6f7:'\\u03c6',\n0x1d6f8:'\\u03c7', 0x1d6f9:'\\u03c8', 0x1d6fa:'\\u03c9', 0x1d70d:'\\u03c3',\n0x1d71c:'\\u03b1', 0x1d71d:'\\u03b2', 0x1d71e:'\\u03b3', 0x1d71f:'\\u03b4',\n0x1d720:'\\u03b5', 0x1d721:'\\u03b6', 0x1d722:'\\u03b7', 0x1d723:'\\u03b8',\n0x1d724:'\\u03b9', 0x1d725:'\\u03ba', 0x1d726:'\\u03bb', 0x1d727:'\\u03bc',\n0x1d728:'\\u03bd', 0x1d729:'\\u03be', 0x1d72a:'\\u03bf', 0x1d72b:'\\u03c0',\n0x1d72c:'\\u03c1', 0x1d72d:'\\u03b8', 0x1d72e:'\\u03c3', 0x1d72f:'\\u03c4',\n0x1d730:'\\u03c5', 0x1d731:'\\u03c6', 0x1d732:'\\u03c7', 0x1d733:'\\u03c8',\n0x1d734:'\\u03c9', 0x1d747:'\\u03c3', 0x1d756:'\\u03b1', 0x1d757:'\\u03b2',\n0x1d758:'\\u03b3', 0x1d759:'\\u03b4', 0x1d75a:'\\u03b5', 0x1d75b:'\\u03b6',\n0x1d75c:'\\u03b7', 0x1d75d:'\\u03b8', 0x1d75e:'\\u03b9', 0x1d75f:'\\u03ba',\n0x1d760:'\\u03bb', 0x1d761:'\\u03bc', 0x1d762:'\\u03bd', 0x1d763:'\\u03be',\n0x1d764:'\\u03bf', 0x1d765:'\\u03c0', 0x1d766:'\\u03c1', 0x1d767:'\\u03b8',\n0x1d768:'\\u03c3', 0x1d769:'\\u03c4', 0x1d76a:'\\u03c5', 0x1d76b:'\\u03c6',\n0x1d76c:'\\u03c7', 0x1d76d:'\\u03c8', 0x1d76e:'\\u03c9', 0x1d781:'\\u03c3',\n0x1d790:'\\u03b1', 0x1d791:'\\u03b2', 0x1d792:'\\u03b3', 0x1d793:'\\u03b4',\n0x1d794:'\\u03b5', 0x1d795:'\\u03b6', 0x1d796:'\\u03b7', 0x1d797:'\\u03b8',\n0x1d798:'\\u03b9', 0x1d799:'\\u03ba', 0x1d79a:'\\u03bb', 0x1d79b:'\\u03bc',\n0x1d79c:'\\u03bd', 0x1d79d:'\\u03be', 0x1d79e:'\\u03bf', 0x1d79f:'\\u03c0',\n0x1d7a0:'\\u03c1', 0x1d7a1:'\\u03b8', 0x1d7a2:'\\u03c3', 0x1d7a3:'\\u03c4',\n0x1d7a4:'\\u03c5', 0x1d7a5:'\\u03c6', 0x1d7a6:'\\u03c7', 0x1d7a7:'\\u03c8',\n0x1d7a8:'\\u03c9', 0x1d7bb:'\\u03c3', }\n\ndef map_table_b3(code):\n    r = b3_exceptions.get(ord(code))\n    if r is not None: return r\n    return code.lower()\n\n\ndef map_table_b2(a):\n    al = map_table_b3(a)\n    b = unicodedata.normalize(\"NFKC\", al)\n    bl = \"\".join([map_table_b3(ch) for ch in b])\n    c = unicodedata.normalize(\"NFKC\", bl)\n    if b != c:\n        return c\n    else:\n        return al\n\n\ndef in_table_c11(code):\n    return code == \" \"\n\n\ndef in_table_c12(code):\n    return unicodedata.category(code) == \"Zs\" and code != \" \"\n\ndef in_table_c11_c12(code):\n    return unicodedata.category(code) == \"Zs\"\n\n\ndef in_table_c21(code):\n    return ord(code) < 128 and unicodedata.category(code) == \"Cc\"\n\nc22_specials = set([1757, 1807, 6158, 8204, 8205, 8232, 8233, 65279] + list(range(8288,8292)) + list(range(8298,8304)) + list(range(65529,65533)) + list(range(119155,119163)))\ndef in_table_c22(code):\n    c = ord(code)\n    if c < 128: return False\n    if unicodedata.category(code) == \"Cc\": return True\n    return c in c22_specials\n\ndef in_table_c21_c22(code):\n    return unicodedata.category(code) == \"Cc\" or \\\n           ord(code) in c22_specials\n\n\ndef in_table_c3(code):\n    return unicodedata.category(code) == \"Co\"\n\n\ndef in_table_c4(code):\n    c = ord(code)\n    if c < 0xFDD0: return False\n    if c < 0xFDF0: return True\n    return (ord(code) & 0xFFFF) in (0xFFFE, 0xFFFF)\n\n\ndef in_table_c5(code):\n    return unicodedata.category(code) == \"Cs\"\n\n\nc6_set = set(range(65529,65534))\ndef in_table_c6(code):\n    return ord(code) in c6_set\n\n\nc7_set = set(range(12272,12284))\ndef in_table_c7(code):\n    return ord(code) in c7_set\n\n\nc8_set = set([832, 833, 8206, 8207] + list(range(8234,8239)) + list(range(8298,8304)))\ndef in_table_c8(code):\n    return ord(code) in c8_set\n\n\nc9_set = set([917505] + list(range(917536,917632)))\ndef in_table_c9(code):\n    return ord(code) in c9_set\n\n\ndef in_table_d1(code):\n    return unicodedata.bidirectional(code) in (\"R\",\"AL\")\n\n\ndef in_table_d2(code):\n    return unicodedata.bidirectional(code) == \"L\"\n", 272], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py": ["# This module implements the RFCs 3490 (IDNA) and 3491 (Nameprep)\n\nimport stringprep, re, codecs\nfrom unicodedata import ucd_3_2_0 as unicodedata\n\n# IDNA section 3.1\ndots = re.compile(\"[\\u002E\\u3002\\uFF0E\\uFF61]\")\n\n# IDNA section 5\nace_prefix = b\"xn--\"\nsace_prefix = \"xn--\"\n\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue\n        newlabel.append(stringprep.map_table_b2(c))\n    label = \"\".join(newlabel)\n\n    # Normalize\n    label = unicodedata.normalize(\"NFKC\", label)\n\n    # Prohibit\n    for c in label:\n        if stringprep.in_table_c12(c) or \\\n           stringprep.in_table_c22(c) or \\\n           stringprep.in_table_c3(c) or \\\n           stringprep.in_table_c4(c) or \\\n           stringprep.in_table_c5(c) or \\\n           stringprep.in_table_c6(c) or \\\n           stringprep.in_table_c7(c) or \\\n           stringprep.in_table_c8(c) or \\\n           stringprep.in_table_c9(c):\n            raise UnicodeError(\"Invalid character %r\" % c)\n\n    # Check bidi\n    RandAL = [stringprep.in_table_d1(x) for x in label]\n    for c in RandAL:\n        if c:\n            # There is a RandAL char in the string. Must perform further\n            # tests:\n            # 1) The characters in section 5.8 MUST be prohibited.\n            # This is table C.8, which was already checked\n            # 2) If a string contains any RandALCat character, the string\n            # MUST NOT contain any LCat character.\n            if any(stringprep.in_table_d2(x) for x in label):\n                raise UnicodeError(\"Violation of BIDI requirement 2\")\n\n            # 3) If a string contains any RandALCat character, a\n            # RandALCat character MUST be the first character of the\n            # string, and a RandALCat character MUST be the last\n            # character of the string.\n            if not RandAL[0] or not RandAL[-1]:\n                raise UnicodeError(\"Violation of BIDI requirement 3\")\n\n    return label\n\ndef ToASCII(label):\n    try:\n        # Step 1: try ASCII\n        label = label.encode(\"ascii\")\n    except UnicodeError:\n        pass\n    else:\n        # Skip to step 3: UseSTD3ASCIIRules is false, so\n        # Skip to step 8.\n        if 0 < len(label) < 64:\n            return label\n        raise UnicodeError(\"label empty or too long\")\n\n    # Step 2: nameprep\n    label = nameprep(label)\n\n    # Step 3: UseSTD3ASCIIRules is false\n    # Step 4: try ASCII\n    try:\n        label = label.encode(\"ascii\")\n    except UnicodeError:\n        pass\n    else:\n        # Skip to step 8.\n        if 0 < len(label) < 64:\n            return label\n        raise UnicodeError(\"label empty or too long\")\n\n    # Step 5: Check ACE prefix\n    if label.startswith(sace_prefix):\n        raise UnicodeError(\"Label starts with ACE prefix\")\n\n    # Step 6: Encode with PUNYCODE\n    label = label.encode(\"punycode\")\n\n    # Step 7: Prepend ACE prefix\n    label = ace_prefix + label\n\n    # Step 8: Check size\n    if 0 < len(label) < 64:\n        return label\n    raise UnicodeError(\"label empty or too long\")\n\ndef ToUnicode(label):\n    # Step 1: Check for ASCII\n    if isinstance(label, bytes):\n        pure_ascii = True\n    else:\n        try:\n            label = label.encode(\"ascii\")\n            pure_ascii = True\n        except UnicodeError:\n            pure_ascii = False\n    if not pure_ascii:\n        # Step 2: Perform nameprep\n        label = nameprep(label)\n        # It doesn't say this, but apparently, it should be ASCII now\n        try:\n            label = label.encode(\"ascii\")\n        except UnicodeError:\n            raise UnicodeError(\"Invalid character in IDN label\")\n    # Step 3: Check for ACE prefix\n    if not label.startswith(ace_prefix):\n        return str(label, \"ascii\")\n\n    # Step 4: Remove ACE prefix\n    label1 = label[len(ace_prefix):]\n\n    # Step 5: Decode using PUNYCODE\n    result = label1.decode(\"punycode\")\n\n    # Step 6: Apply ToASCII\n    label2 = ToASCII(result)\n\n    # Step 7: Compare the result of step 6 with the one of step 3\n    # label2 will already be in lower case.\n    if str(label, \"ascii\").lower() != str(label2, \"ascii\"):\n        raise UnicodeError(\"IDNA does not round-trip\", label, label2)\n\n    # Step 8: return the result of step 5\n    return result\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n\n        if errors != 'strict':\n            # IDNA is quite clear that implementations must be strict\n            raise UnicodeError(\"unsupported error handling \"+errors)\n\n        if not input:\n            return b'', 0\n\n        try:\n            result = input.encode('ascii')\n        except UnicodeEncodeError:\n            pass\n        else:\n            # ASCII name: fast path\n            labels = result.split(b'.')\n            for label in labels[:-1]:\n                if not (0 < len(label) < 64):\n                    raise UnicodeError(\"label empty or too long\")\n            if len(labels[-1]) >= 64:\n                raise UnicodeError(\"label too long\")\n            return result, len(input)\n\n        result = bytearray()\n        labels = dots.split(input)\n        if labels and not labels[-1]:\n            trailing_dot = b'.'\n            del labels[-1]\n        else:\n            trailing_dot = b''\n        for label in labels:\n            if result:\n                # Join with U+002E\n                result.extend(b'.')\n            result.extend(ToASCII(label))\n        return bytes(result+trailing_dot), len(input)\n\n    def decode(self, input, errors='strict'):\n\n        if errors != 'strict':\n            raise UnicodeError(\"Unsupported error handling \"+errors)\n\n        if not input:\n            return \"\", 0\n\n        # IDNA allows decoding to operate on Unicode strings, too.\n        if not isinstance(input, bytes):\n            # XXX obviously wrong, see #3232\n            input = bytes(input)\n\n        if ace_prefix not in input:\n            # Fast path\n            try:\n                return input.decode('ascii'), len(input)\n            except UnicodeDecodeError:\n                pass\n\n        labels = input.split(b\".\")\n\n        if labels and len(labels[-1]) == 0:\n            trailing_dot = '.'\n            del labels[-1]\n        else:\n            trailing_dot = ''\n\n        result = []\n        for label in labels:\n            result.append(ToUnicode(label))\n\n        return \".\".join(result)+trailing_dot, len(input)\n\nclass IncrementalEncoder(codecs.BufferedIncrementalEncoder):\n    def _buffer_encode(self, input, errors, final):\n        if errors != 'strict':\n            # IDNA is quite clear that implementations must be strict\n            raise UnicodeError(\"unsupported error handling \"+errors)\n\n        if not input:\n            return (b'', 0)\n\n        labels = dots.split(input)\n        trailing_dot = b''\n        if labels:\n            if not labels[-1]:\n                trailing_dot = b'.'\n                del labels[-1]\n            elif not final:\n                # Keep potentially unfinished label until the next call\n                del labels[-1]\n                if labels:\n                    trailing_dot = b'.'\n\n        result = bytearray()\n        size = 0\n        for label in labels:\n            if size:\n                # Join with U+002E\n                result.extend(b'.')\n                size += 1\n            result.extend(ToASCII(label))\n            size += len(label)\n\n        result += trailing_dot\n        size += len(trailing_dot)\n        return (bytes(result), size)\n\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def _buffer_decode(self, input, errors, final):\n        if errors != 'strict':\n            raise UnicodeError(\"Unsupported error handling \"+errors)\n\n        if not input:\n            return (\"\", 0)\n\n        # IDNA allows decoding to operate on Unicode strings, too.\n        if isinstance(input, str):\n            labels = dots.split(input)\n        else:\n            # Must be ASCII string\n            input = str(input, \"ascii\")\n            labels = input.split(\".\")\n\n        trailing_dot = ''\n        if labels:\n            if not labels[-1]:\n                trailing_dot = '.'\n                del labels[-1]\n            elif not final:\n                # Keep potentially unfinished label until the next call\n                del labels[-1]\n                if labels:\n                    trailing_dot = '.'\n\n        result = []\n        size = 0\n        for label in labels:\n            result.append(ToUnicode(label))\n            if size:\n                size += 1\n            size += len(label)\n\n        result = \".\".join(result) + trailing_dot\n        size += len(trailing_dot)\n        return (result, size)\n\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n", 309], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/codecs.py": ["\"\"\" codecs -- Python Codec Registry, API and helpers.\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n\"\"\"\n\nimport builtins\nimport sys\n\n### Registry and builtin stateless codec functions\n\ntry:\n    from _codecs import *\nexcept ImportError as why:\n    raise SystemError('Failed to load the builtin codecs: %s' % why)\n\n__all__ = [\"register\", \"lookup\", \"open\", \"EncodedFile\", \"BOM\", \"BOM_BE\",\n           \"BOM_LE\", \"BOM32_BE\", \"BOM32_LE\", \"BOM64_BE\", \"BOM64_LE\",\n           \"BOM_UTF8\", \"BOM_UTF16\", \"BOM_UTF16_LE\", \"BOM_UTF16_BE\",\n           \"BOM_UTF32\", \"BOM_UTF32_LE\", \"BOM_UTF32_BE\",\n           \"CodecInfo\", \"Codec\", \"IncrementalEncoder\", \"IncrementalDecoder\",\n           \"StreamReader\", \"StreamWriter\",\n           \"StreamReaderWriter\", \"StreamRecoder\",\n           \"getencoder\", \"getdecoder\", \"getincrementalencoder\",\n           \"getincrementaldecoder\", \"getreader\", \"getwriter\",\n           \"encode\", \"decode\", \"iterencode\", \"iterdecode\",\n           \"strict_errors\", \"ignore_errors\", \"replace_errors\",\n           \"xmlcharrefreplace_errors\",\n           \"backslashreplace_errors\", \"namereplace_errors\",\n           \"register_error\", \"lookup_error\"]\n\n### Constants\n\n#\n# Byte Order Mark (BOM = ZERO WIDTH NO-BREAK SPACE = U+FEFF)\n# and its possible byte string values\n# for UTF8/UTF16/UTF32 output and little/big endian machines\n#\n\n# UTF-8\nBOM_UTF8 = b'\\xef\\xbb\\xbf'\n\n# UTF-16, little endian\nBOM_LE = BOM_UTF16_LE = b'\\xff\\xfe'\n\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\n\nif sys.byteorder == 'little':\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\n\nelse:\n\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_BE\n\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_BE\n\n# Old broken names (don't use in new code)\nBOM32_LE = BOM_UTF16_LE\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n\n\n### Codec base classes (defining the API)\n\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619\n    _is_text_encoding = True # Assume codecs are text encodings by default\n\n    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,\n        incrementalencoder=None, incrementaldecoder=None, name=None,\n        *, _is_text_encoding=None):\n        self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))\n        self.name = name\n        self.encode = encode\n        self.decode = decode\n        self.incrementalencoder = incrementalencoder\n        self.incrementaldecoder = incrementaldecoder\n        self.streamwriter = streamwriter\n        self.streamreader = streamreader\n        if _is_text_encoding is not None:\n            self._is_text_encoding = _is_text_encoding\n        return self\n\n    def __repr__(self):\n        return \"<%s.%s object for encoding %s at %#x>\" % \\\n                (self.__class__.__module__, self.__class__.__qualname__,\n                 self.name, id(self))\n\nclass Codec:\n\n    \"\"\" Defines the interface for stateless encoders/decoders.\n\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and '?' on encoding.\n         'surrogateescape' - replace with private code points U+DCnn.\n         'xmlcharrefreplace' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         'backslashreplace'  - Replace with backslashed escape sequences.\n         'namereplace'       - Replace with \\\\N{...} escape sequences\n                               (only for encoding).\n\n        The set of allowed values can be extended via register_error.\n\n    \"\"\"\n    def encode(self, input, errors='strict'):\n\n        \"\"\" Encodes the object input and returns a tuple (output\n            object, length consumed).\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamWriter for codecs which have to keep state in order to\n            make encoding efficient.\n\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        \"\"\"\n        raise NotImplementedError\n\n    def decode(self, input, errors='strict'):\n\n        \"\"\" Decodes the object input and returns a tuple (output\n            object, length consumed).\n\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamReader for codecs which have to keep state in order to\n            make decoding efficient.\n\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        \"\"\"\n        raise NotImplementedError\n\nclass IncrementalEncoder(object):\n    \"\"\"\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Creates an IncrementalEncoder instance.\n\n        The IncrementalEncoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        \"\"\"\n        self.errors = errors\n        self.buffer = \"\"\n\n    def encode(self, input, final=False):\n        \"\"\"\n        Encodes input and returns the resulting object.\n        \"\"\"\n        raise NotImplementedError\n\n    def reset(self):\n        \"\"\"\n        Resets the encoder to the initial state.\n        \"\"\"\n\n    def getstate(self):\n        \"\"\"\n        Return the current state of the encoder.\n        \"\"\"\n        return 0\n\n    def setstate(self, state):\n        \"\"\"\n        Set the current state of the encoder. state must have been\n        returned by getstate().\n        \"\"\"\n\nclass BufferedIncrementalEncoder(IncrementalEncoder):\n    \"\"\"\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalEncoder.__init__(self, errors)\n        # unencoded input that is kept between calls to encode()\n        self.buffer = \"\"\n\n    def _buffer_encode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must encode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def encode(self, input, final=False):\n        # encode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_encode(data, self.errors, final)\n        # keep unencoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalEncoder.reset(self)\n        self.buffer = \"\"\n\n    def getstate(self):\n        return self.buffer or 0\n\n    def setstate(self, state):\n        self.buffer = state or \"\"\n\nclass IncrementalDecoder(object):\n    \"\"\"\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Create an IncrementalDecoder instance.\n\n        The IncrementalDecoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        \"\"\"\n        self.errors = errors\n\n    def decode(self, input, final=False):\n        \"\"\"\n        Decode input and returns the resulting object.\n        \"\"\"\n        raise NotImplementedError\n\n    def reset(self):\n        \"\"\"\n        Reset the decoder to the initial state.\n        \"\"\"\n\n    def getstate(self):\n        \"\"\"\n        Return the current state of the decoder.\n\n        This must be a (buffered_input, additional_state_info) tuple.\n        buffered_input must be a bytes object containing bytes that\n        were passed to decode() that have not yet been converted.\n        additional_state_info must be a non-negative integer\n        representing the state of the decoder WITHOUT yet having\n        processed the contents of buffered_input.  In the initial state\n        and after reset(), getstate() must return (b\"\", 0).\n        \"\"\"\n        return (b\"\", 0)\n\n    def setstate(self, state):\n        \"\"\"\n        Set the current state of the decoder.\n\n        state must have been returned by getstate().  The effect of\n        setstate((b\"\", 0)) must be equivalent to reset().\n        \"\"\"\n\nclass BufferedIncrementalDecoder(IncrementalDecoder):\n    \"\"\"\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalDecoder.__init__(self, errors)\n        # undecoded input that is kept between calls to decode()\n        self.buffer = b\"\"\n\n    def _buffer_decode(self, input, errors, final):\n        # Overwrite this method in subclasses: It must decode input\n        # and return an (output, length consumed) tuple\n        raise NotImplementedError\n\n    def decode(self, input, final=False):\n        # decode input (taking the buffer into account)\n        data = self.buffer + input\n        (result, consumed) = self._buffer_decode(data, self.errors, final)\n        # keep undecoded input until the next call\n        self.buffer = data[consumed:]\n        return result\n\n    def reset(self):\n        IncrementalDecoder.reset(self)\n        self.buffer = b\"\"\n\n    def getstate(self):\n        # additional state info is always 0\n        return (self.buffer, 0)\n\n    def setstate(self, state):\n        # ignore additional state info\n        self.buffer = state[0]\n\n#\n# The StreamWriter and StreamReader class provide generic working\n# interfaces which can be used to implement new encoding submodules\n# very easily. See encodings/utf_8.py for an example on how this is\n# done.\n#\n\nclass StreamWriter(Codec):\n\n    def __init__(self, stream, errors='strict'):\n\n        \"\"\" Creates a StreamWriter instance.\n\n            stream must be a file-like object open for writing.\n\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character\n             'xmlcharrefreplace' - Replace with the appropriate XML\n                                   character reference.\n             'backslashreplace'  - Replace with backslashed escape\n                                   sequences.\n             'namereplace'       - Replace with \\\\N{...} escape sequences.\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        \"\"\"\n        self.stream = stream\n        self.errors = errors\n\n    def write(self, object):\n\n        \"\"\" Writes the object's contents encoded to self.stream.\n        \"\"\"\n        data, consumed = self.encode(object, self.errors)\n        self.stream.write(data)\n\n    def writelines(self, list):\n\n        \"\"\" Writes the concatenated list of strings to the stream\n            using .write().\n        \"\"\"\n        self.write(''.join(list))\n\n    def reset(self):\n\n        \"\"\" Flushes and resets the codec buffers used for keeping state.\n\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n\n        \"\"\"\n        pass\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        if whence == 0 and offset == 0:\n            self.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReader(Codec):\n\n    charbuffertype = str\n\n    def __init__(self, stream, errors='strict'):\n\n        \"\"\" Creates a StreamReader instance.\n\n            stream must be a file-like object open for reading.\n\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character\n             'backslashreplace' - Replace with backslashed escape sequences;\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        \"\"\"\n        self.stream = stream\n        self.errors = errors\n        self.bytebuffer = b\"\"\n        self._empty_charbuffer = self.charbuffertype()\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def decode(self, input, errors='strict'):\n        raise NotImplementedError\n\n    def read(self, size=-1, chars=-1, firstline=False):\n\n        \"\"\" Decodes data from the stream self.stream and returns the\n            resulting object.\n\n            chars indicates the number of decoded code points or bytes to\n            return. read() will never return more data than requested,\n            but it might return less, if there is not enough available.\n\n            size indicates the approximate maximum number of decoded\n            bytes or code points to read for decoding. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n\n            The method should use a greedy read strategy, meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        \"\"\"\n        # If we have lines cached, first merge them back into characters\n        if self.linebuffer:\n            self.charbuffer = self._empty_charbuffer.join(self.linebuffer)\n            self.linebuffer = None\n\n        if chars < 0:\n            # For compatibility with other read() methods that take a\n            # single argument\n            chars = size\n\n        # read until we get the required number of characters (if available)\n        while True:\n            # can the request be satisfied from the character buffer?\n            if chars >= 0:\n                if len(self.charbuffer) >= chars:\n                    break\n            # we need more data\n            if size < 0:\n                newdata = self.stream.read()\n            else:\n                newdata = self.stream.read(size)\n            # decode bytes (those remaining from the last call included)\n            data = self.bytebuffer + newdata\n            if not data:\n                break\n            try:\n                newchars, decodedbytes = self.decode(data, self.errors)\n            except UnicodeDecodeError as exc:\n                if firstline:\n                    newchars, decodedbytes = \\\n                        self.decode(data[:exc.start], self.errors)\n                    lines = newchars.splitlines(keepends=True)\n                    if len(lines)<=1:\n                        raise\n                else:\n                    raise\n            # keep undecoded bytes until the next call\n            self.bytebuffer = data[decodedbytes:]\n            # put new characters in the character buffer\n            self.charbuffer += newchars\n            # there was no data available\n            if not newdata:\n                break\n        if chars < 0:\n            # Return everything we've got\n            result = self.charbuffer\n            self.charbuffer = self._empty_charbuffer\n        else:\n            # Return the first chars characters\n            result = self.charbuffer[:chars]\n            self.charbuffer = self.charbuffer[chars:]\n        return result\n\n    def readline(self, size=None, keepends=True):\n\n        \"\"\" Read one line from the input stream and return the\n            decoded data.\n\n            size, if given, is passed as size argument to the\n            read() method.\n\n        \"\"\"\n        # If we have lines cached from an earlier read, return\n        # them unconditionally\n        if self.linebuffer:\n            line = self.linebuffer[0]\n            del self.linebuffer[0]\n            if len(self.linebuffer) == 1:\n                # revert to charbuffer mode; we might need more data\n                # next time\n                self.charbuffer = self.linebuffer[0]\n                self.linebuffer = None\n            if not keepends:\n                line = line.splitlines(keepends=False)[0]\n            return line\n\n        readsize = size or 72\n        line = self._empty_charbuffer\n        # If size is given, we call read() only once\n        while True:\n            data = self.read(readsize, firstline=True)\n            if data:\n                # If we're at a \"\\r\" read one extra character (which might\n                # be a \"\\n\") to get a proper line ending. If the stream is\n                # temporarily exhausted we return the wrong line ending.\n                if (isinstance(data, str) and data.endswith(\"\\r\")) or \\\n                   (isinstance(data, bytes) and data.endswith(b\"\\r\")):\n                    data += self.read(size=1, chars=1)\n\n            line += data\n            lines = line.splitlines(keepends=True)\n            if lines:\n                if len(lines) > 1:\n                    # More than one line result; the first line is a full line\n                    # to return\n                    line = lines[0]\n                    del lines[0]\n                    if len(lines) > 1:\n                        # cache the remaining lines\n                        lines[-1] += self.charbuffer\n                        self.linebuffer = lines\n                        self.charbuffer = None\n                    else:\n                        # only one remaining line, put it back into charbuffer\n                        self.charbuffer = lines[0] + self.charbuffer\n                    if not keepends:\n                        line = line.splitlines(keepends=False)[0]\n                    break\n                line0withend = lines[0]\n                line0withoutend = lines[0].splitlines(keepends=False)[0]\n                if line0withend != line0withoutend: # We really have a line end\n                    # Put the rest back together and keep it until the next call\n                    self.charbuffer = self._empty_charbuffer.join(lines[1:]) + \\\n                                      self.charbuffer\n                    if keepends:\n                        line = line0withend\n                    else:\n                        line = line0withoutend\n                    break\n            # we didn't get anything or this was our only try\n            if not data or size is not None:\n                if line and not keepends:\n                    line = line.splitlines(keepends=False)[0]\n                break\n            if readsize < 8000:\n                readsize *= 2\n        return line\n\n    def readlines(self, sizehint=None, keepends=True):\n\n        \"\"\" Read all lines available on the input stream\n            and return them as a list.\n\n            Line breaks are implemented using the codec's decoder\n            method and are included in the list entries.\n\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n\n        \"\"\"\n        data = self.read()\n        return data.splitlines(keepends)\n\n    def reset(self):\n\n        \"\"\" Resets the codec buffers used for keeping state.\n\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n\n        \"\"\"\n        self.bytebuffer = b\"\"\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n\n    def seek(self, offset, whence=0):\n        \"\"\" Set the input stream's current position.\n\n            Resets the codec buffers used for keeping state.\n        \"\"\"\n        self.stream.seek(offset, whence)\n        self.reset()\n\n    def __next__(self):\n\n        \"\"\" Return the next decoded line from the input stream.\"\"\"\n        line = self.readline()\n        if line:\n            return line\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamReaderWriter:\n\n    \"\"\" StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n\n    \"\"\"\n    # Optional attributes set by the file wrappers below\n    encoding = 'unknown'\n\n    def __init__(self, stream, Reader, Writer, errors='strict'):\n\n        \"\"\" Creates a StreamReaderWriter instance.\n\n            stream must be a Stream-like object.\n\n            Reader, Writer must be factory functions or classes\n            providing the StreamReader, StreamWriter interface resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        \"\"\"\n        self.stream = stream\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        return self.reader.read(size)\n\n    def readline(self, size=None):\n\n        return self.reader.readline(size)\n\n    def readlines(self, sizehint=None):\n\n        return self.reader.readlines(sizehint)\n\n    def __next__(self):\n\n        \"\"\" Return the next decoded line from the input stream.\"\"\"\n        return next(self.reader)\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        return self.writer.writelines(list)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        self.reader.reset()\n        if whence == 0 and offset == 0:\n            self.writer.reset()\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n\n    # these are needed to make \"with StreamReaderWriter(...)\" work properly\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n###\n\nclass StreamRecoder:\n\n    \"\"\" StreamRecoder instances translate data from one encoding to another.\n\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n\n        Data written to the StreamRecoder is first decoded into an\n        intermediate format (depending on the \"decode\" codec) and then\n        written to the underlying stream using an instance of the provided\n        Writer class.\n\n        In the other direction, data is read from the underlying stream using\n        a Reader instance and then encoded and returned to the caller.\n\n    \"\"\"\n    # Optional attributes set by the file wrappers below\n    data_encoding = 'unknown'\n    file_encoding = 'unknown'\n\n    def __init__(self, stream, encode, decode, Reader, Writer,\n                 errors='strict'):\n\n        \"\"\" Creates a StreamRecoder instance which implements a two-way\n            conversion: encode and decode work on the frontend (the\n            data visible to .read() and .write()) while Reader and Writer\n            work on the backend (the data in stream).\n\n            You can use these objects to do transparent\n            transcodings from e.g. latin-1 to utf-8 and back.\n\n            stream must be a file-like object.\n\n            encode and decode must adhere to the Codec interface; Reader and\n            Writer must be factory functions or classes providing the\n            StreamReader and StreamWriter interfaces resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        \"\"\"\n        self.stream = stream\n        self.encode = encode\n        self.decode = decode\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n\n    def read(self, size=-1):\n\n        data = self.reader.read(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readline(self, size=None):\n\n        if size is None:\n            data = self.reader.readline()\n        else:\n            data = self.reader.readline(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def readlines(self, sizehint=None):\n\n        data = self.reader.read()\n        data, bytesencoded = self.encode(data, self.errors)\n        return data.splitlines(keepends=True)\n\n    def __next__(self):\n\n        \"\"\" Return the next decoded line from the input stream.\"\"\"\n        data = next(self.reader)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n\n    def __iter__(self):\n        return self\n\n    def write(self, data):\n\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def writelines(self, list):\n\n        data = b''.join(list)\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n\n    def reset(self):\n\n        self.reader.reset()\n        self.writer.reset()\n\n    def seek(self, offset, whence=0):\n        # Seeks must be propagated to both the readers and writers\n        # as they might need to reset their internal buffers.\n        self.reader.seek(offset, whence)\n        self.writer.seek(offset, whence)\n\n    def __getattr__(self, name,\n                    getattr=getattr):\n\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.stream.close()\n\n### Shortcuts\n\ndef open(filename, mode='r', encoding=None, errors='strict', buffering=1):\n\n    \"\"\" Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n\n        Underlying encoded files are always opened in binary mode.\n        The default file mode is 'r', meaning to open the file in read mode.\n\n        encoding specifies the encoding which is to be used for the\n        file.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to line buffered.\n\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n\n    \"\"\"\n    if encoding is not None and \\\n       'b' not in mode:\n        # Force opening of the file in binary mode\n        mode = mode + 'b'\n    file = builtins.open(filename, mode, buffering)\n    if encoding is None:\n        return file\n    info = lookup(encoding)\n    srw = StreamReaderWriter(file, info.streamreader, info.streamwriter, errors)\n    # Add attributes to simplify introspection\n    srw.encoding = encoding\n    return srw\n\ndef EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):\n\n    \"\"\" Return a wrapped version of file which provides transparent\n        encoding translation.\n\n        Data written to the wrapped file is decoded according\n        to the given data_encoding and then encoded to the underlying\n        file using file_encoding. The intermediate data type\n        will usually be Unicode but depends on the specified codecs.\n\n        Bytes read from the file are decoded using file_encoding and then\n        passed back to the caller encoded using data_encoding.\n\n        If file_encoding is not given, it defaults to data_encoding.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n\n    \"\"\"\n    if file_encoding is None:\n        file_encoding = data_encoding\n    data_info = lookup(data_encoding)\n    file_info = lookup(file_encoding)\n    sr = StreamRecoder(file, data_info.encode, data_info.decode,\n                       file_info.streamreader, file_info.streamwriter, errors)\n    # Add attributes to simplify introspection\n    sr.data_encoding = data_encoding\n    sr.file_encoding = file_encoding\n    return sr\n\n### Helpers for codec lookup\n\ndef getencoder(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its encoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    \"\"\"\n    return lookup(encoding).encode\n\ndef getdecoder(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its decoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    \"\"\"\n    return lookup(encoding).decode\n\ndef getincrementalencoder(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n\n    \"\"\"\n    encoder = lookup(encoding).incrementalencoder\n    if encoder is None:\n        raise LookupError(encoding)\n    return encoder\n\ndef getincrementaldecoder(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n\n    \"\"\"\n    decoder = lookup(encoding).incrementaldecoder\n    if decoder is None:\n        raise LookupError(encoding)\n    return decoder\n\ndef getreader(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    \"\"\"\n    return lookup(encoding).streamreader\n\ndef getwriter(encoding):\n\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    \"\"\"\n    return lookup(encoding).streamwriter\n\ndef iterencode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Encoding iterator.\n\n    Encodes the input strings from the iterator using an IncrementalEncoder.\n\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    \"\"\"\n    encoder = getincrementalencoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = encoder.encode(input)\n        if output:\n            yield output\n    output = encoder.encode(\"\", True)\n    if output:\n        yield output\n\ndef iterdecode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Decoding iterator.\n\n    Decodes the input strings from the iterator using an IncrementalDecoder.\n\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    \"\"\"\n    decoder = getincrementaldecoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = decoder.decode(input)\n        if output:\n            yield output\n    output = decoder.decode(b\"\", True)\n    if output:\n        yield output\n\n### Helpers for charmap-based codecs\n\ndef make_identity_dict(rng):\n\n    \"\"\" make_identity_dict(rng) -> dict\n\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n\n    \"\"\"\n    return {i:i for i in rng}\n\ndef make_encoding_map(decoding_map):\n\n    \"\"\" Creates an encoding map from a decoding map.\n\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n\n        One example where this happens is cp875.py which decodes\n        multiple character to \\\\u001a.\n\n    \"\"\"\n    m = {}\n    for k,v in decoding_map.items():\n        if not v in m:\n            m[v] = k\n        else:\n            m[v] = None\n    return m\n\n### error handlers\n\ntry:\n    strict_errors = lookup_error(\"strict\")\n    ignore_errors = lookup_error(\"ignore\")\n    replace_errors = lookup_error(\"replace\")\n    xmlcharrefreplace_errors = lookup_error(\"xmlcharrefreplace\")\n    backslashreplace_errors = lookup_error(\"backslashreplace\")\n    namereplace_errors = lookup_error(\"namereplace\")\nexcept LookupError:\n    # In --disable-unicode builds, these error handler are missing\n    strict_errors = None\n    ignore_errors = None\n    replace_errors = None\n    xmlcharrefreplace_errors = None\n    backslashreplace_errors = None\n    namereplace_errors = None\n\n# Tell modulefinder that using codecs probably needs the encodings\n# package\n_false = 0\nif _false:\n    import encodings\n\n### Tests\n\nif __name__ == '__main__':\n\n    # Make stdout translate Latin-1 output into UTF-8 output\n    sys.stdout = EncodedFile(sys.stdout, 'latin-1', 'utf-8')\n\n    # Have stdin translate Latin-1 input into UTF-8 input\n    sys.stdin = EncodedFile(sys.stdin, 'utf-8', 'latin-1')\n", 1120], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py": ["# Wrapper module for _socket, providing some additional facilities\n# implemented in Python.\n\n\"\"\"\\\nThis module provides socket operations and some related functions.\nOn Unix, it supports IP (Internet Protocol) and Unix domain sockets.\nOn other systems, it only supports IP. Functions specific for a\nsocket are available as methods of the socket object.\n\nFunctions:\n\nsocket() -- create a new socket object\nsocketpair() -- create a pair of new socket objects [*]\nfromfd() -- create a socket object from an open file descriptor [*]\nfromshare() -- create a socket object from data received from socket.share() [*]\ngethostname() -- return the current hostname\ngethostbyname() -- map a hostname to its IP number\ngethostbyaddr() -- map an IP number or hostname to DNS info\ngetservbyname() -- map a service name and a protocol name to a port number\ngetprotobyname() -- map a protocol name (e.g. 'tcp') to a number\nntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order\nhtons(), htonl() -- convert 16, 32 bit int from host to network byte order\ninet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format\ninet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)\nsocket.getdefaulttimeout() -- get the default timeout value\nsocket.setdefaulttimeout() -- set the default timeout value\ncreate_connection() -- connects to an address, with an optional timeout and\n                       optional source address.\n\n [*] not available on all platforms!\n\nSpecial objects:\n\nSocketType -- type object for socket objects\nerror -- exception raised for I/O errors\nhas_ipv6 -- boolean value indicating if IPv6 is supported\n\nIntEnum constants:\n\nAF_INET, AF_UNIX -- socket domains (first argument to socket() call)\nSOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)\n\nInteger constants:\n\nMany other constants may be defined; these may be used in calls to\nthe setsockopt() and getsockopt() methods.\n\"\"\"\n\nimport _socket\nfrom _socket import *\n\nimport os, sys, io, selectors\nfrom enum import IntEnum, IntFlag\n\ntry:\n    import errno\nexcept ImportError:\n    errno = None\nEBADF = getattr(errno, 'EBADF', 9)\nEAGAIN = getattr(errno, 'EAGAIN', 11)\nEWOULDBLOCK = getattr(errno, 'EWOULDBLOCK', 11)\n\n__all__ = [\"fromfd\", \"getfqdn\", \"create_connection\",\n        \"AddressFamily\", \"SocketKind\"]\n__all__.extend(os._get_exports_list(_socket))\n\n# Set up the socket.AF_* socket.SOCK_* constants as members of IntEnums for\n# nicer string representations.\n# Note that _socket only knows about the integer values. The public interface\n# in this module understands the enums and translates them back from integers\n# where needed (e.g. .family property of a socket object).\n\nIntEnum._convert(\n        'AddressFamily',\n        __name__,\n        lambda C: C.isupper() and C.startswith('AF_'))\n\nIntEnum._convert(\n        'SocketKind',\n        __name__,\n        lambda C: C.isupper() and C.startswith('SOCK_'))\n\nIntFlag._convert(\n        'MsgFlag',\n        __name__,\n        lambda C: C.isupper() and C.startswith('MSG_'))\n\nIntFlag._convert(\n        'AddressInfo',\n        __name__,\n        lambda C: C.isupper() and C.startswith('AI_'))\n\n_LOCALHOST    = '127.0.0.1'\n_LOCALHOST_V6 = '::1'\n\n\ndef _intenum_converter(value, enum_klass):\n    \"\"\"Convert a numeric family value to an IntEnum member.\n\n    If it's not a known member, return the numeric value itself.\n    \"\"\"\n    try:\n        return enum_klass(value)\n    except ValueError:\n        return value\n\n_realsocket = socket\n\n# WSA error codes\nif sys.platform.lower().startswith(\"win\"):\n    errorTab = {}\n    errorTab[10004] = \"The operation was interrupted.\"\n    errorTab[10009] = \"A bad file handle was passed.\"\n    errorTab[10013] = \"Permission denied.\"\n    errorTab[10014] = \"A fault occurred on the network??\" # WSAEFAULT\n    errorTab[10022] = \"An invalid operation was attempted.\"\n    errorTab[10035] = \"The socket operation would block\"\n    errorTab[10036] = \"A blocking operation is already in progress.\"\n    errorTab[10048] = \"The network address is in use.\"\n    errorTab[10054] = \"The connection has been reset.\"\n    errorTab[10058] = \"The network has been shut down.\"\n    errorTab[10060] = \"The operation timed out.\"\n    errorTab[10061] = \"Connection refused.\"\n    errorTab[10063] = \"The name is too long.\"\n    errorTab[10064] = \"The host is down.\"\n    errorTab[10065] = \"The host is unreachable.\"\n    __all__.append(\"errorTab\")\n\n\nclass _GiveupOnSendfile(Exception): pass\n\n\nclass socket(_socket.socket):\n\n    \"\"\"A subclass of _socket.socket adding the makefile() method.\"\"\"\n\n    __slots__ = [\"__weakref__\", \"_io_refs\", \"_closed\"]\n\n    def __init__(self, family=-1, type=-1, proto=-1, fileno=None):\n        # For user code address family and type values are IntEnum members, but\n        # for the underlying _socket.socket they're just integers. The\n        # constructor of _socket.socket converts the given argument to an\n        # integer automatically.\n        if fileno is None:\n            if family == -1:\n                family = AF_INET\n            if type == -1:\n                type = SOCK_STREAM\n            if proto == -1:\n                proto = 0\n        _socket.socket.__init__(self, family, type, proto, fileno)\n        self._io_refs = 0\n        self._closed = False\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        if not self._closed:\n            self.close()\n\n    def __repr__(self):\n        \"\"\"Wrap __repr__() to reveal the real class name and socket\n        address(es).\n        \"\"\"\n        closed = getattr(self, '_closed', False)\n        s = \"<%s.%s%s fd=%i, family=%s, type=%s, proto=%i\" \\\n            % (self.__class__.__module__,\n               self.__class__.__qualname__,\n               \" [closed]\" if closed else \"\",\n               self.fileno(),\n               self.family,\n               self.type,\n               self.proto)\n        if not closed:\n            try:\n                laddr = self.getsockname()\n                if laddr:\n                    s += \", laddr=%s\" % str(laddr)\n            except error:\n                pass\n            try:\n                raddr = self.getpeername()\n                if raddr:\n                    s += \", raddr=%s\" % str(raddr)\n            except error:\n                pass\n        s += '>'\n        return s\n\n    def __getstate__(self):\n        raise TypeError(\"Cannot serialize socket object\")\n\n    def dup(self):\n        \"\"\"dup() -> socket object\n\n        Duplicate the socket. Return a new socket object connected to the same\n        system resource. The new socket is non-inheritable.\n        \"\"\"\n        fd = dup(self.fileno())\n        sock = self.__class__(self.family, self.type, self.proto, fileno=fd)\n        sock.settimeout(self.gettimeout())\n        return sock\n\n    def accept(self):\n        \"\"\"accept() -> (socket object, address info)\n\n        Wait for an incoming connection.  Return a new socket\n        representing the connection, and the address of the client.\n        For IP sockets, the address info is a pair (hostaddr, port).\n        \"\"\"\n        fd, addr = self._accept()\n        sock = socket(self.family, self.type, self.proto, fileno=fd)\n        # Issue #7995: if no default timeout is set and the listening\n        # socket had a (non-zero) timeout, force the new socket in blocking\n        # mode to override platform-specific socket flags inheritance.\n        if getdefaulttimeout() is None and self.gettimeout():\n            sock.setblocking(True)\n        return sock, addr\n\n    def makefile(self, mode=\"r\", buffering=None, *,\n                 encoding=None, errors=None, newline=None):\n        \"\"\"makefile(...) -> an I/O stream connected to the socket\n\n        The arguments are as for io.open() after the filename, except the only\n        supported mode values are 'r' (default), 'w' and 'b'.\n        \"\"\"\n        # XXX refactor to share code?\n        if not set(mode) <= {\"r\", \"w\", \"b\"}:\n            raise ValueError(\"invalid mode %r (only r, w, b allowed)\" % (mode,))\n        writing = \"w\" in mode\n        reading = \"r\" in mode or not writing\n        assert reading or writing\n        binary = \"b\" in mode\n        rawmode = \"\"\n        if reading:\n            rawmode += \"r\"\n        if writing:\n            rawmode += \"w\"\n        raw = SocketIO(self, rawmode)\n        self._io_refs += 1\n        if buffering is None:\n            buffering = -1\n        if buffering < 0:\n            buffering = io.DEFAULT_BUFFER_SIZE\n        if buffering == 0:\n            if not binary:\n                raise ValueError(\"unbuffered streams must be binary\")\n            return raw\n        if reading and writing:\n            buffer = io.BufferedRWPair(raw, raw, buffering)\n        elif reading:\n            buffer = io.BufferedReader(raw, buffering)\n        else:\n            assert writing\n            buffer = io.BufferedWriter(raw, buffering)\n        if binary:\n            return buffer\n        text = io.TextIOWrapper(buffer, encoding, errors, newline)\n        text.mode = mode\n        return text\n\n    if hasattr(os, 'sendfile'):\n\n        def _sendfile_use_sendfile(self, file, offset=0, count=None):\n            self._check_sendfile_params(file, offset, count)\n            sockno = self.fileno()\n            try:\n                fileno = file.fileno()\n            except (AttributeError, io.UnsupportedOperation) as err:\n                raise _GiveupOnSendfile(err)  # not a regular file\n            try:\n                fsize = os.fstat(fileno).st_size\n            except OSError as err:\n                raise _GiveupOnSendfile(err)  # not a regular file\n            if not fsize:\n                return 0  # empty file\n            blocksize = fsize if not count else count\n\n            timeout = self.gettimeout()\n            if timeout == 0:\n                raise ValueError(\"non-blocking sockets are not supported\")\n            # poll/select have the advantage of not requiring any\n            # extra file descriptor, contrarily to epoll/kqueue\n            # (also, they require a single syscall).\n            if hasattr(selectors, 'PollSelector'):\n                selector = selectors.PollSelector()\n            else:\n                selector = selectors.SelectSelector()\n            selector.register(sockno, selectors.EVENT_WRITE)\n\n            total_sent = 0\n            # localize variable access to minimize overhead\n            selector_select = selector.select\n            os_sendfile = os.sendfile\n            try:\n                while True:\n                    if timeout and not selector_select(timeout):\n                        raise _socket.timeout('timed out')\n                    if count:\n                        blocksize = count - total_sent\n                        if blocksize <= 0:\n                            break\n                    try:\n                        sent = os_sendfile(sockno, fileno, offset, blocksize)\n                    except BlockingIOError:\n                        if not timeout:\n                            # Block until the socket is ready to send some\n                            # data; avoids hogging CPU resources.\n                            selector_select()\n                        continue\n                    except OSError as err:\n                        if total_sent == 0:\n                            # We can get here for different reasons, the main\n                            # one being 'file' is not a regular mmap(2)-like\n                            # file, in which case we'll fall back on using\n                            # plain send().\n                            raise _GiveupOnSendfile(err)\n                        raise err from None\n                    else:\n                        if sent == 0:\n                            break  # EOF\n                        offset += sent\n                        total_sent += sent\n                return total_sent\n            finally:\n                if total_sent > 0 and hasattr(file, 'seek'):\n                    file.seek(offset)\n    else:\n        def _sendfile_use_sendfile(self, file, offset=0, count=None):\n            raise _GiveupOnSendfile(\n                \"os.sendfile() not available on this platform\")\n\n    def _sendfile_use_send(self, file, offset=0, count=None):\n        self._check_sendfile_params(file, offset, count)\n        if self.gettimeout() == 0:\n            raise ValueError(\"non-blocking sockets are not supported\")\n        if offset:\n            file.seek(offset)\n        blocksize = min(count, 8192) if count else 8192\n        total_sent = 0\n        # localize variable access to minimize overhead\n        file_read = file.read\n        sock_send = self.send\n        try:\n            while True:\n                if count:\n                    blocksize = min(count - total_sent, blocksize)\n                    if blocksize <= 0:\n                        break\n                data = memoryview(file_read(blocksize))\n                if not data:\n                    break  # EOF\n                while True:\n                    try:\n                        sent = sock_send(data)\n                    except BlockingIOError:\n                        continue\n                    else:\n                        total_sent += sent\n                        if sent < len(data):\n                            data = data[sent:]\n                        else:\n                            break\n            return total_sent\n        finally:\n            if total_sent > 0 and hasattr(file, 'seek'):\n                file.seek(offset + total_sent)\n\n    def _check_sendfile_params(self, file, offset, count):\n        if 'b' not in getattr(file, 'mode', 'b'):\n            raise ValueError(\"file should be opened in binary mode\")\n        if not self.type & SOCK_STREAM:\n            raise ValueError(\"only SOCK_STREAM type sockets are supported\")\n        if count is not None:\n            if not isinstance(count, int):\n                raise TypeError(\n                    \"count must be a positive integer (got {!r})\".format(count))\n            if count <= 0:\n                raise ValueError(\n                    \"count must be a positive integer (got {!r})\".format(count))\n\n    def sendfile(self, file, offset=0, count=None):\n        \"\"\"sendfile(file[, offset[, count]]) -> sent\n\n        Send a file until EOF is reached by using high-performance\n        os.sendfile() and return the total number of bytes which\n        were sent.\n        *file* must be a regular file object opened in binary mode.\n        If os.sendfile() is not available (e.g. Windows) or file is\n        not a regular file socket.send() will be used instead.\n        *offset* tells from where to start reading the file.\n        If specified, *count* is the total number of bytes to transmit\n        as opposed to sending the file until EOF is reached.\n        File position is updated on return or also in case of error in\n        which case file.tell() can be used to figure out the number of\n        bytes which were sent.\n        The socket must be of SOCK_STREAM type.\n        Non-blocking sockets are not supported.\n        \"\"\"\n        try:\n            return self._sendfile_use_sendfile(file, offset, count)\n        except _GiveupOnSendfile:\n            return self._sendfile_use_send(file, offset, count)\n\n    def _decref_socketios(self):\n        if self._io_refs > 0:\n            self._io_refs -= 1\n        if self._closed:\n            self.close()\n\n    def _real_close(self, _ss=_socket.socket):\n        # This function should not reference any globals. See issue #808164.\n        _ss.close(self)\n\n    def close(self):\n        # This function should not reference any globals. See issue #808164.\n        self._closed = True\n        if self._io_refs <= 0:\n            self._real_close()\n\n    def detach(self):\n        \"\"\"detach() -> file descriptor\n\n        Close the socket object without closing the underlying file descriptor.\n        The object cannot be used after this call, but the file descriptor\n        can be reused for other purposes.  The file descriptor is returned.\n        \"\"\"\n        self._closed = True\n        return super().detach()\n\n    @property\n    def family(self):\n        \"\"\"Read-only access to the address family for this socket.\n        \"\"\"\n        return _intenum_converter(super().family, AddressFamily)\n\n    @property\n    def type(self):\n        \"\"\"Read-only access to the socket type.\n        \"\"\"\n        return _intenum_converter(super().type, SocketKind)\n\n    if os.name == 'nt':\n        def get_inheritable(self):\n            return os.get_handle_inheritable(self.fileno())\n        def set_inheritable(self, inheritable):\n            os.set_handle_inheritable(self.fileno(), inheritable)\n    else:\n        def get_inheritable(self):\n            return os.get_inheritable(self.fileno())\n        def set_inheritable(self, inheritable):\n            os.set_inheritable(self.fileno(), inheritable)\n    get_inheritable.__doc__ = \"Get the inheritable flag of the socket\"\n    set_inheritable.__doc__ = \"Set the inheritable flag of the socket\"\n\ndef fromfd(fd, family, type, proto=0):\n    \"\"\" fromfd(fd, family, type[, proto]) -> socket object\n\n    Create a socket object from a duplicate of the given file\n    descriptor.  The remaining arguments are the same as for socket().\n    \"\"\"\n    nfd = dup(fd)\n    return socket(family, type, proto, nfd)\n\nif hasattr(_socket.socket, \"share\"):\n    def fromshare(info):\n        \"\"\" fromshare(info) -> socket object\n\n        Create a socket object from the bytes object returned by\n        socket.share(pid).\n        \"\"\"\n        return socket(0, 0, 0, info)\n    __all__.append(\"fromshare\")\n\nif hasattr(_socket, \"socketpair\"):\n\n    def socketpair(family=None, type=SOCK_STREAM, proto=0):\n        \"\"\"socketpair([family[, type[, proto]]]) -> (socket object, socket object)\n\n        Create a pair of socket objects from the sockets returned by the platform\n        socketpair() function.\n        The arguments are the same as for socket() except the default family is\n        AF_UNIX if defined on the platform; otherwise, the default is AF_INET.\n        \"\"\"\n        if family is None:\n            try:\n                family = AF_UNIX\n            except NameError:\n                family = AF_INET\n        a, b = _socket.socketpair(family, type, proto)\n        a = socket(family, type, proto, a.detach())\n        b = socket(family, type, proto, b.detach())\n        return a, b\n\nelse:\n\n    # Origin: https://gist.github.com/4325783, by Geert Jansen.  Public domain.\n    def socketpair(family=AF_INET, type=SOCK_STREAM, proto=0):\n        if family == AF_INET:\n            host = _LOCALHOST\n        elif family == AF_INET6:\n            host = _LOCALHOST_V6\n        else:\n            raise ValueError(\"Only AF_INET and AF_INET6 socket address families \"\n                             \"are supported\")\n        if type != SOCK_STREAM:\n            raise ValueError(\"Only SOCK_STREAM socket type is supported\")\n        if proto != 0:\n            raise ValueError(\"Only protocol zero is supported\")\n\n        # We create a connected TCP socket. Note the trick with\n        # setblocking(False) that prevents us from having to create a thread.\n        lsock = socket(family, type, proto)\n        try:\n            lsock.bind((host, 0))\n            lsock.listen()\n            # On IPv6, ignore flow_info and scope_id\n            addr, port = lsock.getsockname()[:2]\n            csock = socket(family, type, proto)\n            try:\n                csock.setblocking(False)\n                try:\n                    csock.connect((addr, port))\n                except (BlockingIOError, InterruptedError):\n                    pass\n                csock.setblocking(True)\n                ssock, _ = lsock.accept()\n            except:\n                csock.close()\n                raise\n        finally:\n            lsock.close()\n        return (ssock, csock)\n    __all__.append(\"socketpair\")\n\nsocketpair.__doc__ = \"\"\"socketpair([family[, type[, proto]]]) -> (socket object, socket object)\nCreate a pair of socket objects from the sockets returned by the platform\nsocketpair() function.\nThe arguments are the same as for socket() except the default family is AF_UNIX\nif defined on the platform; otherwise, the default is AF_INET.\n\"\"\"\n\n_blocking_errnos = { EAGAIN, EWOULDBLOCK }\n\nclass SocketIO(io.RawIOBase):\n\n    \"\"\"Raw I/O implementation for stream sockets.\n\n    This class supports the makefile() method on sockets.  It provides\n    the raw I/O interface on top of a socket object.\n    \"\"\"\n\n    # One might wonder why not let FileIO do the job instead.  There are two\n    # main reasons why FileIO is not adapted:\n    # - it wouldn't work under Windows (where you can't used read() and\n    #   write() on a socket handle)\n    # - it wouldn't work with socket timeouts (FileIO would ignore the\n    #   timeout and consider the socket non-blocking)\n\n    # XXX More docs\n\n    def __init__(self, sock, mode):\n        if mode not in (\"r\", \"w\", \"rw\", \"rb\", \"wb\", \"rwb\"):\n            raise ValueError(\"invalid mode: %r\" % mode)\n        io.RawIOBase.__init__(self)\n        self._sock = sock\n        if \"b\" not in mode:\n            mode += \"b\"\n        self._mode = mode\n        self._reading = \"r\" in mode\n        self._writing = \"w\" in mode\n        self._timeout_occurred = False\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n\n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n                return self._sock.recv_into(b)\n            except timeout:\n                self._timeout_occurred = True\n                raise\n            except error as e:\n                if e.args[0] in _blocking_errnos:\n                    return None\n                raise\n\n    def write(self, b):\n        \"\"\"Write the given bytes or bytearray object *b* to the socket\n        and return the number of bytes written.  This can be less than\n        len(b) if not all data could be written.  If the socket is\n        non-blocking and no bytes could be written None is returned.\n        \"\"\"\n        self._checkClosed()\n        self._checkWritable()\n        try:\n            return self._sock.send(b)\n        except error as e:\n            # XXX what about EINTR?\n            if e.args[0] in _blocking_errnos:\n                return None\n            raise\n\n    def readable(self):\n        \"\"\"True if the SocketIO is open for reading.\n        \"\"\"\n        if self.closed:\n            raise ValueError(\"I/O operation on closed socket.\")\n        return self._reading\n\n    def writable(self):\n        \"\"\"True if the SocketIO is open for writing.\n        \"\"\"\n        if self.closed:\n            raise ValueError(\"I/O operation on closed socket.\")\n        return self._writing\n\n    def seekable(self):\n        \"\"\"True if the SocketIO is open for seeking.\n        \"\"\"\n        if self.closed:\n            raise ValueError(\"I/O operation on closed socket.\")\n        return super().seekable()\n\n    def fileno(self):\n        \"\"\"Return the file descriptor of the underlying socket.\n        \"\"\"\n        self._checkClosed()\n        return self._sock.fileno()\n\n    @property\n    def name(self):\n        if not self.closed:\n            return self.fileno()\n        else:\n            return -1\n\n    @property\n    def mode(self):\n        return self._mode\n\n    def close(self):\n        \"\"\"Close the SocketIO object.  This doesn't close the underlying\n        socket, except if all references to it have disappeared.\n        \"\"\"\n        if self.closed:\n            return\n        io.RawIOBase.close(self)\n        self._sock._decref_socketios()\n        self._sock = None\n\n\ndef getfqdn(name=''):\n    \"\"\"Get fully qualified domain name from name.\n\n    An empty argument is interpreted as meaning the local host.\n\n    First the hostname returned by gethostbyaddr() is checked, then\n    possibly existing aliases. In case no FQDN is available, hostname\n    from gethostname() is returned.\n    \"\"\"\n    name = name.strip()\n    if not name or name == '0.0.0.0':\n        name = gethostname()\n    try:\n        hostname, aliases, ipaddrs = gethostbyaddr(name)\n    except error:\n        pass\n    else:\n        aliases.insert(0, hostname)\n        for name in aliases:\n            if '.' in name:\n                break\n        else:\n            name = hostname\n    return name\n\n\n_GLOBAL_DEFAULT_TIMEOUT = object()\n\ndef create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                      source_address=None):\n    \"\"\"Connect to *address* and return the socket object.\n\n    Convenience function.  Connect to *address* (a 2-tuple ``(host,\n    port)``) and return the socket object.  Passing the optional\n    *timeout* parameter will set the timeout on the socket instance\n    before attempting to connect.  If no *timeout* is supplied, the\n    global default timeout setting returned by :func:`getdefaulttimeout`\n    is used.  If *source_address* is set it must be a tuple of (host, port)\n    for the socket to bind as a source address before making the connection.\n    A host of '' or port 0 tells the OS to use the default.\n    \"\"\"\n\n    host, port = address\n    err = None\n    for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n        af, socktype, proto, canonname, sa = res\n        sock = None\n        try:\n            sock = socket(af, socktype, proto)\n            if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                sock.settimeout(timeout)\n            if source_address:\n                sock.bind(source_address)\n            sock.connect(sa)\n            # Break explicitly a reference cycle\n            err = None\n            return sock\n\n        except error as _:\n            err = _\n            if sock is not None:\n                sock.close()\n\n    if err is not None:\n        raise err\n    else:\n        raise error(\"getaddrinfo returns an empty list\")\n\ndef getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):\n    \"\"\"Resolve host and port into list of address info entries.\n\n    Translate the host/port argument into a sequence of 5-tuples that contain\n    all the necessary arguments for creating a socket connected to that service.\n    host is a domain name, a string representation of an IPv4/v6 address or\n    None. port is a string service name such as 'http', a numeric port number or\n    None. By passing None as the value of host and port, you can pass NULL to\n    the underlying C API.\n\n    The family, type and proto arguments can be optionally specified in order to\n    narrow the list of addresses returned. Passing zero as a value for each of\n    these arguments selects the full range of results.\n    \"\"\"\n    # We override this function since we want to translate the numeric family\n    # and socket type values to enum constants.\n    addrlist = []\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\n        af, socktype, proto, canonname, sa = res\n        addrlist.append((_intenum_converter(af, AddressFamily),\n                         _intenum_converter(socktype, SocketKind),\n                         proto, canonname, sa))\n    return addrlist\n", 753], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py": ["\"\"\"Generic socket server classes.\n\nThis module tries to capture the various aspects of defining a server:\n\nFor socket-based servers:\n\n- address family:\n        - AF_INET{,6}: IP (Internet Protocol) sockets (default)\n        - AF_UNIX: Unix domain sockets\n        - others, e.g. AF_DECNET are conceivable (see <socket.h>\n- socket type:\n        - SOCK_STREAM (reliable stream, e.g. TCP)\n        - SOCK_DGRAM (datagrams, e.g. UDP)\n\nFor request-based servers (including socket-based):\n\n- client address verification before further looking at the request\n        (This is actually a hook for any processing that needs to look\n         at the request before anything else, e.g. logging)\n- how to handle multiple requests:\n        - synchronous (one request is handled at a time)\n        - forking (each request is handled by a new process)\n        - threading (each request is handled by a new thread)\n\nThe classes in this module favor the server type that is simplest to\nwrite: a synchronous TCP/IP server.  This is bad class design, but\nsave some typing.  (There's also the issue that a deep class hierarchy\nslows down method lookups.)\n\nThere are five classes in an inheritance diagram, four of which represent\nsynchronous servers of four types:\n\n        +------------+\n        | BaseServer |\n        +------------+\n              |\n              v\n        +-----------+        +------------------+\n        | TCPServer |------->| UnixStreamServer |\n        +-----------+        +------------------+\n              |\n              v\n        +-----------+        +--------------------+\n        | UDPServer |------->| UnixDatagramServer |\n        +-----------+        +--------------------+\n\nNote that UnixDatagramServer derives from UDPServer, not from\nUnixStreamServer -- the only difference between an IP and a Unix\nstream server is the address family, which is simply repeated in both\nunix server classes.\n\nForking and threading versions of each type of server can be created\nusing the ForkingMixIn and ThreadingMixIn mix-in classes.  For\ninstance, a threading UDP server class is created as follows:\n\n        class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass\n\nThe Mix-in class must come first, since it overrides a method defined\nin UDPServer! Setting the various member variables also changes\nthe behavior of the underlying server mechanism.\n\nTo implement a service, you must derive a class from\nBaseRequestHandler and redefine its handle() method.  You can then run\nvarious versions of the service by combining one of the server classes\nwith your request handler class.\n\nThe request handler class must be different for datagram or stream\nservices.  This can be hidden by using the request handler\nsubclasses StreamRequestHandler or DatagramRequestHandler.\n\nOf course, you still have to use your head!\n\nFor instance, it makes no sense to use a forking server if the service\ncontains state in memory that can be modified by requests (since the\nmodifications in the child process would never reach the initial state\nkept in the parent process and passed to each child).  In this case,\nyou can use a threading server, but you will probably have to use\nlocks to avoid two requests that come in nearly simultaneous to apply\nconflicting changes to the server state.\n\nOn the other hand, if you are building e.g. an HTTP server, where all\ndata is stored externally (e.g. in the file system), a synchronous\nclass will essentially render the service \"deaf\" while one request is\nbeing handled -- which may be for a very long time if a client is slow\nto read all the data it has requested.  Here a threading or forking\nserver is appropriate.\n\nIn some cases, it may be appropriate to process part of a request\nsynchronously, but to finish processing in a forked child depending on\nthe request data.  This can be implemented by using a synchronous\nserver and doing an explicit fork in the request handler class\nhandle() method.\n\nAnother approach to handling multiple simultaneous requests in an\nenvironment that supports neither threads nor fork (or where these are\ntoo expensive or inappropriate for the service) is to maintain an\nexplicit table of partially finished requests and to use a selector to\ndecide which request to work on next (or whether to handle a new\nincoming request).  This is particularly important for stream services\nwhere each client can potentially be connected for a long time (if\nthreads or subprocesses cannot be used).\n\nFuture work:\n- Standard classes for Sun RPC (which uses either UDP or TCP)\n- Standard mix-in classes to implement various authentication\n  and encryption schemes\n\nXXX Open problems:\n- What to do with out-of-band data?\n\nBaseServer:\n- split generic \"request\" functionality out into BaseServer class.\n  Copyright (C) 2000  Luke Kenneth Casson Leighton <lkcl@samba.org>\n\n  example: read entries from a SQL database (requires overriding\n  get_request() to return a table entry from the database).\n  entry is processed by a RequestHandlerClass.\n\n\"\"\"\n\n# Author of the BaseServer patch: Luke Kenneth Casson Leighton\n\n__version__ = \"0.4\"\n\n\nimport socket\nimport selectors\nimport os\nimport sys\nimport threading\nfrom io import BufferedIOBase\nfrom time import monotonic as time\n\n__all__ = [\"BaseServer\", \"TCPServer\", \"UDPServer\",\n           \"ThreadingUDPServer\", \"ThreadingTCPServer\",\n           \"BaseRequestHandler\", \"StreamRequestHandler\",\n           \"DatagramRequestHandler\", \"ThreadingMixIn\"]\nif hasattr(os, \"fork\"):\n    __all__.extend([\"ForkingUDPServer\",\"ForkingTCPServer\", \"ForkingMixIn\"])\nif hasattr(socket, \"AF_UNIX\"):\n    __all__.extend([\"UnixStreamServer\",\"UnixDatagramServer\",\n                    \"ThreadingUnixStreamServer\",\n                    \"ThreadingUnixDatagramServer\"])\n\n# poll/select have the advantage of not requiring any extra file descriptor,\n# contrarily to epoll/kqueue (also, they require a single syscall).\nif hasattr(selectors, 'PollSelector'):\n    _ServerSelector = selectors.PollSelector\nelse:\n    _ServerSelector = selectors.SelectSelector\n\n\nclass BaseServer:\n\n    \"\"\"Base class for server classes.\n\n    Methods for the caller:\n\n    - __init__(server_address, RequestHandlerClass)\n    - serve_forever(poll_interval=0.5)\n    - shutdown()\n    - handle_request()  # if you do not use serve_forever()\n    - fileno() -> int   # for selector\n\n    Methods that may be overridden:\n\n    - server_bind()\n    - server_activate()\n    - get_request() -> request, client_address\n    - handle_timeout()\n    - verify_request(request, client_address)\n    - server_close()\n    - process_request(request, client_address)\n    - shutdown_request(request)\n    - close_request(request)\n    - service_actions()\n    - handle_error()\n\n    Methods for derived classes:\n\n    - finish_request(request, client_address)\n\n    Class variables that may be overridden by derived classes or\n    instances:\n\n    - timeout\n    - address_family\n    - socket_type\n    - allow_reuse_address\n\n    Instance variables:\n\n    - RequestHandlerClass\n    - socket\n\n    \"\"\"\n\n    timeout = None\n\n    def __init__(self, server_address, RequestHandlerClass):\n        \"\"\"Constructor.  May be extended, do not override.\"\"\"\n        self.server_address = server_address\n        self.RequestHandlerClass = RequestHandlerClass\n        self.__is_shut_down = threading.Event()\n        self.__shutdown_request = False\n\n    def server_activate(self):\n        \"\"\"Called by constructor to activate the server.\n\n        May be overridden.\n\n        \"\"\"\n        pass\n\n    def serve_forever(self, poll_interval=0.5):\n        \"\"\"Handle one request at a time until shutdown.\n\n        Polls for shutdown every poll_interval seconds. Ignores\n        self.timeout. If you need to do periodic tasks, do them in\n        another thread.\n        \"\"\"\n        self.__is_shut_down.clear()\n        try:\n            # XXX: Consider using another file descriptor or connecting to the\n            # socket to wake this up instead of polling. Polling reduces our\n            # responsiveness to a shutdown request and wastes cpu at all other\n            # times.\n            with _ServerSelector() as selector:\n                selector.register(self, selectors.EVENT_READ)\n\n                while not self.__shutdown_request:\n                    ready = selector.select(poll_interval)\n                    # bpo-35017: shutdown() called during select(), exit immediately.\n                    if self.__shutdown_request:\n                        break\n                    if ready:\n                        self._handle_request_noblock()\n\n                    self.service_actions()\n        finally:\n            self.__shutdown_request = False\n            self.__is_shut_down.set()\n\n    def shutdown(self):\n        \"\"\"Stops the serve_forever loop.\n\n        Blocks until the loop has finished. This must be called while\n        serve_forever() is running in another thread, or it will\n        deadlock.\n        \"\"\"\n        self.__shutdown_request = True\n        self.__is_shut_down.wait()\n\n    def service_actions(self):\n        \"\"\"Called by the serve_forever() loop.\n\n        May be overridden by a subclass / Mixin to implement any code that\n        needs to be run during the loop.\n        \"\"\"\n        pass\n\n    # The distinction between handling, getting, processing and finishing a\n    # request is fairly arbitrary.  Remember:\n    #\n    # - handle_request() is the top-level call.  It calls selector.select(),\n    #   get_request(), verify_request() and process_request()\n    # - get_request() is different for stream or datagram sockets\n    # - process_request() is the place that may fork a new process or create a\n    #   new thread to finish the request\n    # - finish_request() instantiates the request handler class; this\n    #   constructor will handle the request all by itself\n\n    def handle_request(self):\n        \"\"\"Handle one request, possibly blocking.\n\n        Respects self.timeout.\n        \"\"\"\n        # Support people who used socket.settimeout() to escape\n        # handle_request before self.timeout was available.\n        timeout = self.socket.gettimeout()\n        if timeout is None:\n            timeout = self.timeout\n        elif self.timeout is not None:\n            timeout = min(timeout, self.timeout)\n        if timeout is not None:\n            deadline = time() + timeout\n\n        # Wait until a request arrives or the timeout expires - the loop is\n        # necessary to accommodate early wakeups due to EINTR.\n        with _ServerSelector() as selector:\n            selector.register(self, selectors.EVENT_READ)\n\n            while True:\n                ready = selector.select(timeout)\n                if ready:\n                    return self._handle_request_noblock()\n                else:\n                    if timeout is not None:\n                        timeout = deadline - time()\n                        if timeout < 0:\n                            return self.handle_timeout()\n\n    def _handle_request_noblock(self):\n        \"\"\"Handle one request, without blocking.\n\n        I assume that selector.select() has returned that the socket is\n        readable before this function was called, so there should be no risk of\n        blocking in get_request().\n        \"\"\"\n        try:\n            request, client_address = self.get_request()\n        except OSError:\n            return\n        if self.verify_request(request, client_address):\n            try:\n                self.process_request(request, client_address)\n            except Exception:\n                self.handle_error(request, client_address)\n                self.shutdown_request(request)\n            except:\n                self.shutdown_request(request)\n                raise\n        else:\n            self.shutdown_request(request)\n\n    def handle_timeout(self):\n        \"\"\"Called if no new request arrives within self.timeout.\n\n        Overridden by ForkingMixIn.\n        \"\"\"\n        pass\n\n    def verify_request(self, request, client_address):\n        \"\"\"Verify the request.  May be overridden.\n\n        Return True if we should proceed with this request.\n\n        \"\"\"\n        return True\n\n    def process_request(self, request, client_address):\n        \"\"\"Call finish_request.\n\n        Overridden by ForkingMixIn and ThreadingMixIn.\n\n        \"\"\"\n        self.finish_request(request, client_address)\n        self.shutdown_request(request)\n\n    def server_close(self):\n        \"\"\"Called to clean-up the server.\n\n        May be overridden.\n\n        \"\"\"\n        pass\n\n    def finish_request(self, request, client_address):\n        \"\"\"Finish one request by instantiating RequestHandlerClass.\"\"\"\n        self.RequestHandlerClass(request, client_address, self)\n\n    def shutdown_request(self, request):\n        \"\"\"Called to shutdown and close an individual request.\"\"\"\n        self.close_request(request)\n\n    def close_request(self, request):\n        \"\"\"Called to clean up an individual request.\"\"\"\n        pass\n\n    def handle_error(self, request, client_address):\n        \"\"\"Handle an error gracefully.  May be overridden.\n\n        The default is to print a traceback and continue.\n\n        \"\"\"\n        print('-'*40, file=sys.stderr)\n        print('Exception happened during processing of request from',\n            client_address, file=sys.stderr)\n        import traceback\n        traceback.print_exc()\n        print('-'*40, file=sys.stderr)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.server_close()\n\n\nclass TCPServer(BaseServer):\n\n    \"\"\"Base class for various socket-based server classes.\n\n    Defaults to synchronous IP stream (i.e., TCP).\n\n    Methods for the caller:\n\n    - __init__(server_address, RequestHandlerClass, bind_and_activate=True)\n    - serve_forever(poll_interval=0.5)\n    - shutdown()\n    - handle_request()  # if you don't use serve_forever()\n    - fileno() -> int   # for selector\n\n    Methods that may be overridden:\n\n    - server_bind()\n    - server_activate()\n    - get_request() -> request, client_address\n    - handle_timeout()\n    - verify_request(request, client_address)\n    - process_request(request, client_address)\n    - shutdown_request(request)\n    - close_request(request)\n    - handle_error()\n\n    Methods for derived classes:\n\n    - finish_request(request, client_address)\n\n    Class variables that may be overridden by derived classes or\n    instances:\n\n    - timeout\n    - address_family\n    - socket_type\n    - request_queue_size (only for stream sockets)\n    - allow_reuse_address\n\n    Instance variables:\n\n    - server_address\n    - RequestHandlerClass\n    - socket\n\n    \"\"\"\n\n    address_family = socket.AF_INET\n\n    socket_type = socket.SOCK_STREAM\n\n    request_queue_size = 5\n\n    allow_reuse_address = False\n\n    def __init__(self, server_address, RequestHandlerClass, bind_and_activate=True):\n        \"\"\"Constructor.  May be extended, do not override.\"\"\"\n        BaseServer.__init__(self, server_address, RequestHandlerClass)\n        self.socket = socket.socket(self.address_family,\n                                    self.socket_type)\n        if bind_and_activate:\n            try:\n                self.server_bind()\n                self.server_activate()\n            except:\n                self.server_close()\n                raise\n\n    def server_bind(self):\n        \"\"\"Called by constructor to bind the socket.\n\n        May be overridden.\n\n        \"\"\"\n        if self.allow_reuse_address:\n            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.socket.bind(self.server_address)\n        self.server_address = self.socket.getsockname()\n\n    def server_activate(self):\n        \"\"\"Called by constructor to activate the server.\n\n        May be overridden.\n\n        \"\"\"\n        self.socket.listen(self.request_queue_size)\n\n    def server_close(self):\n        \"\"\"Called to clean-up the server.\n\n        May be overridden.\n\n        \"\"\"\n        self.socket.close()\n\n    def fileno(self):\n        \"\"\"Return socket file number.\n\n        Interface required by selector.\n\n        \"\"\"\n        return self.socket.fileno()\n\n    def get_request(self):\n        \"\"\"Get the request and client address from the socket.\n\n        May be overridden.\n\n        \"\"\"\n        return self.socket.accept()\n\n    def shutdown_request(self, request):\n        \"\"\"Called to shutdown and close an individual request.\"\"\"\n        try:\n            #explicitly shutdown.  socket.close() merely releases\n            #the socket and waits for GC to perform the actual close.\n            request.shutdown(socket.SHUT_WR)\n        except OSError:\n            pass #some platforms may raise ENOTCONN here\n        self.close_request(request)\n\n    def close_request(self, request):\n        \"\"\"Called to clean up an individual request.\"\"\"\n        request.close()\n\n\nclass UDPServer(TCPServer):\n\n    \"\"\"UDP server class.\"\"\"\n\n    allow_reuse_address = False\n\n    socket_type = socket.SOCK_DGRAM\n\n    max_packet_size = 8192\n\n    def get_request(self):\n        data, client_addr = self.socket.recvfrom(self.max_packet_size)\n        return (data, self.socket), client_addr\n\n    def server_activate(self):\n        # No need to call listen() for UDP.\n        pass\n\n    def shutdown_request(self, request):\n        # No need to shutdown anything.\n        self.close_request(request)\n\n    def close_request(self, request):\n        # No need to close anything.\n        pass\n\nif hasattr(os, \"fork\"):\n    class ForkingMixIn:\n        \"\"\"Mix-in class to handle each request in a new process.\"\"\"\n\n        timeout = 300\n        active_children = None\n        max_children = 40\n        # If true, server_close() waits until all child processes complete.\n        block_on_close = True\n\n        def collect_children(self, *, blocking=False):\n            \"\"\"Internal routine to wait for children that have exited.\"\"\"\n            if self.active_children is None:\n                return\n\n            # If we're above the max number of children, wait and reap them until\n            # we go back below threshold. Note that we use waitpid(-1) below to be\n            # able to collect children in size(<defunct children>) syscalls instead\n            # of size(<children>): the downside is that this might reap children\n            # which we didn't spawn, which is why we only resort to this when we're\n            # above max_children.\n            while len(self.active_children) >= self.max_children:\n                try:\n                    pid, _ = os.waitpid(-1, 0)\n                    self.active_children.discard(pid)\n                except ChildProcessError:\n                    # we don't have any children, we're done\n                    self.active_children.clear()\n                except OSError:\n                    break\n\n            # Now reap all defunct children.\n            for pid in self.active_children.copy():\n                try:\n                    flags = 0 if blocking else os.WNOHANG\n                    pid, _ = os.waitpid(pid, flags)\n                    # if the child hasn't exited yet, pid will be 0 and ignored by\n                    # discard() below\n                    self.active_children.discard(pid)\n                except ChildProcessError:\n                    # someone else reaped it\n                    self.active_children.discard(pid)\n                except OSError:\n                    pass\n\n        def handle_timeout(self):\n            \"\"\"Wait for zombies after self.timeout seconds of inactivity.\n\n            May be extended, do not override.\n            \"\"\"\n            self.collect_children()\n\n        def service_actions(self):\n            \"\"\"Collect the zombie child processes regularly in the ForkingMixIn.\n\n            service_actions is called in the BaseServer's serve_forever loop.\n            \"\"\"\n            self.collect_children()\n\n        def process_request(self, request, client_address):\n            \"\"\"Fork a new subprocess to process the request.\"\"\"\n            pid = os.fork()\n            if pid:\n                # Parent process\n                if self.active_children is None:\n                    self.active_children = set()\n                self.active_children.add(pid)\n                self.close_request(request)\n                return\n            else:\n                # Child process.\n                # This must never return, hence os._exit()!\n                status = 1\n                try:\n                    self.finish_request(request, client_address)\n                    status = 0\n                except Exception:\n                    self.handle_error(request, client_address)\n                finally:\n                    try:\n                        self.shutdown_request(request)\n                    finally:\n                        os._exit(status)\n\n        def server_close(self):\n            super().server_close()\n            self.collect_children(blocking=self.block_on_close)\n\n\nclass ThreadingMixIn:\n    \"\"\"Mix-in class to handle each request in a new thread.\"\"\"\n\n    # Decides how threads will act upon termination of the\n    # main process\n    daemon_threads = False\n    # If true, server_close() waits until all non-daemonic threads terminate.\n    block_on_close = True\n    # For non-daemonic threads, list of threading.Threading objects\n    # used by server_close() to wait for all threads completion.\n    _threads = None\n\n    def process_request_thread(self, request, client_address):\n        \"\"\"Same as in BaseServer but as a thread.\n\n        In addition, exception handling is done here.\n\n        \"\"\"\n        try:\n            self.finish_request(request, client_address)\n        except Exception:\n            self.handle_error(request, client_address)\n        finally:\n            self.shutdown_request(request)\n\n    def process_request(self, request, client_address):\n        \"\"\"Start a new thread to process the request.\"\"\"\n        t = threading.Thread(target = self.process_request_thread,\n                             args = (request, client_address))\n        t.daemon = self.daemon_threads\n        if not t.daemon and self.block_on_close:\n            if self._threads is None:\n                self._threads = []\n            self._threads.append(t)\n        t.start()\n\n    def server_close(self):\n        super().server_close()\n        if self.block_on_close:\n            threads = self._threads\n            self._threads = None\n            if threads:\n                for thread in threads:\n                    thread.join()\n\n\nif hasattr(os, \"fork\"):\n    class ForkingUDPServer(ForkingMixIn, UDPServer): pass\n    class ForkingTCPServer(ForkingMixIn, TCPServer): pass\n\nclass ThreadingUDPServer(ThreadingMixIn, UDPServer): pass\nclass ThreadingTCPServer(ThreadingMixIn, TCPServer): pass\n\nif hasattr(socket, 'AF_UNIX'):\n\n    class UnixStreamServer(TCPServer):\n        address_family = socket.AF_UNIX\n\n    class UnixDatagramServer(UDPServer):\n        address_family = socket.AF_UNIX\n\n    class ThreadingUnixStreamServer(ThreadingMixIn, UnixStreamServer): pass\n\n    class ThreadingUnixDatagramServer(ThreadingMixIn, UnixDatagramServer): pass\n\nclass BaseRequestHandler:\n\n    \"\"\"Base class for request handler classes.\n\n    This class is instantiated for each request to be handled.  The\n    constructor sets the instance variables request, client_address\n    and server, and then calls the handle() method.  To implement a\n    specific service, all you need to do is to derive a class which\n    defines a handle() method.\n\n    The handle() method can find the request as self.request, the\n    client address as self.client_address, and the server (in case it\n    needs access to per-server information) as self.server.  Since a\n    separate instance is created for each request, the handle() method\n    can define other arbitrary instance variables.\n\n    \"\"\"\n\n    def __init__(self, request, client_address, server):\n        self.request = request\n        self.client_address = client_address\n        self.server = server\n        self.setup()\n        try:\n            self.handle()\n        finally:\n            self.finish()\n\n    def setup(self):\n        pass\n\n    def handle(self):\n        pass\n\n    def finish(self):\n        pass\n\n\n# The following two classes make it possible to use the same service\n# class for stream or datagram servers.\n# Each class sets up these instance variables:\n# - rfile: a file object from which receives the request is read\n# - wfile: a file object to which the reply is written\n# When the handle() method returns, wfile is flushed properly\n\n\nclass StreamRequestHandler(BaseRequestHandler):\n\n    \"\"\"Define self.rfile and self.wfile for stream sockets.\"\"\"\n\n    # Default buffer sizes for rfile, wfile.\n    # We default rfile to buffered because otherwise it could be\n    # really slow for large data (a getc() call per byte); we make\n    # wfile unbuffered because (a) often after a write() we want to\n    # read and we need to flush the line; (b) big writes to unbuffered\n    # files are typically optimized by stdio even when big reads\n    # aren't.\n    rbufsize = -1\n    wbufsize = 0\n\n    # A timeout to apply to the request socket, if not None.\n    timeout = None\n\n    # Disable nagle algorithm for this socket, if True.\n    # Use only when wbufsize != 0, to avoid small packets.\n    disable_nagle_algorithm = False\n\n    def setup(self):\n        self.connection = self.request\n        if self.timeout is not None:\n            self.connection.settimeout(self.timeout)\n        if self.disable_nagle_algorithm:\n            self.connection.setsockopt(socket.IPPROTO_TCP,\n                                       socket.TCP_NODELAY, True)\n        self.rfile = self.connection.makefile('rb', self.rbufsize)\n        if self.wbufsize == 0:\n            self.wfile = _SocketWriter(self.connection)\n        else:\n            self.wfile = self.connection.makefile('wb', self.wbufsize)\n\n    def finish(self):\n        if not self.wfile.closed:\n            try:\n                self.wfile.flush()\n            except socket.error:\n                # A final socket error may have occurred here, such as\n                # the local error ECONNABORTED.\n                pass\n        self.wfile.close()\n        self.rfile.close()\n\nclass _SocketWriter(BufferedIOBase):\n    \"\"\"Simple writable BufferedIOBase implementation for a socket\n\n    Does not hold data in a buffer, avoiding any need to call flush().\"\"\"\n\n    def __init__(self, sock):\n        self._sock = sock\n\n    def writable(self):\n        return True\n\n    def write(self, b):\n        self._sock.sendall(b)\n        with memoryview(b) as view:\n            return view.nbytes\n\n    def fileno(self):\n        return self._sock.fileno()\n\nclass DatagramRequestHandler(BaseRequestHandler):\n\n    \"\"\"Define self.rfile and self.wfile for datagram sockets.\"\"\"\n\n    def setup(self):\n        from io import BytesIO\n        self.packet, self.socket = self.request\n        self.rfile = BytesIO(self.packet)\n        self.wfile = BytesIO()\n\n    def finish(self):\n        self.socket.sendto(self.wfile.getvalue(), self.client_address)\n", 817], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/server.py": ["\"\"\"HTTP server classes.\n\nNote: BaseHTTPRequestHandler doesn't implement any HTTP request; see\nSimpleHTTPRequestHandler for simple implementations of GET, HEAD and POST,\nand CGIHTTPRequestHandler for CGI scripts.\n\nIt does, however, optionally implement HTTP/1.1 persistent connections,\nas of version 0.3.\n\nNotes on CGIHTTPRequestHandler\n------------------------------\n\nThis class implements GET and POST requests to cgi-bin scripts.\n\nIf the os.fork() function is not present (e.g. on Windows),\nsubprocess.Popen() is used as a fallback, with slightly altered semantics.\n\nIn all cases, the implementation is intentionally naive -- all\nrequests are executed synchronously.\n\nSECURITY WARNING: DON'T USE THIS CODE UNLESS YOU ARE INSIDE A FIREWALL\n-- it may execute arbitrary Python code or external programs.\n\nNote that status code 200 is sent prior to execution of a CGI script, so\nscripts cannot send other status codes such as 302 (redirect).\n\nXXX To do:\n\n- log requests even later (to capture byte count)\n- log user-agent header and other interesting goodies\n- send error log to separate file\n\"\"\"\n\n\n# See also:\n#\n# HTTP Working Group                                        T. Berners-Lee\n# INTERNET-DRAFT                                            R. T. Fielding\n# <draft-ietf-http-v10-spec-00.txt>                     H. Frystyk Nielsen\n# Expires September 8, 1995                                  March 8, 1995\n#\n# URL: http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-v10-spec-00.txt\n#\n# and\n#\n# Network Working Group                                      R. Fielding\n# Request for Comments: 2616                                       et al\n# Obsoletes: 2068                                              June 1999\n# Category: Standards Track\n#\n# URL: http://www.faqs.org/rfcs/rfc2616.html\n\n# Log files\n# ---------\n#\n# Here's a quote from the NCSA httpd docs about log file format.\n#\n# | The logfile format is as follows. Each line consists of:\n# |\n# | host rfc931 authuser [DD/Mon/YYYY:hh:mm:ss] \"request\" ddd bbbb\n# |\n# |        host: Either the DNS name or the IP number of the remote client\n# |        rfc931: Any information returned by identd for this person,\n# |                - otherwise.\n# |        authuser: If user sent a userid for authentication, the user name,\n# |                  - otherwise.\n# |        DD: Day\n# |        Mon: Month (calendar name)\n# |        YYYY: Year\n# |        hh: hour (24-hour format, the machine's timezone)\n# |        mm: minutes\n# |        ss: seconds\n# |        request: The first line of the HTTP request as sent by the client.\n# |        ddd: the status code returned by the server, - if not available.\n# |        bbbb: the total number of bytes sent,\n# |              *not including the HTTP/1.0 header*, - if not available\n# |\n# | You can determine the name of the file accessed through request.\n#\n# (Actually, the latter is only true if you know the server configuration\n# at the time the request was made!)\n\n__version__ = \"0.6\"\n\n__all__ = [\n    \"HTTPServer\", \"ThreadingHTTPServer\", \"BaseHTTPRequestHandler\",\n    \"SimpleHTTPRequestHandler\", \"CGIHTTPRequestHandler\",\n]\n\nimport copy\nimport datetime\nimport email.utils\nimport html\nimport http.client\nimport io\nimport mimetypes\nimport os\nimport posixpath\nimport select\nimport shutil\nimport socket # For gethostbyaddr()\nimport socketserver\nimport sys\nimport time\nimport urllib.parse\nfrom functools import partial\n\nfrom http import HTTPStatus\n\n\n# Default error message template\nDEFAULT_ERROR_MESSAGE = \"\"\"\\\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n        \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n        <title>Error response</title>\n    </head>\n    <body>\n        <h1>Error response</h1>\n        <p>Error code: %(code)d</p>\n        <p>Message: %(message)s.</p>\n        <p>Error code explanation: %(code)s - %(explain)s.</p>\n    </body>\n</html>\n\"\"\"\n\nDEFAULT_ERROR_CONTENT_TYPE = \"text/html;charset=utf-8\"\n\nclass HTTPServer(socketserver.TCPServer):\n\n    allow_reuse_address = 1    # Seems to make sense in testing environment\n\n    def server_bind(self):\n        \"\"\"Override server_bind to store the server name.\"\"\"\n        socketserver.TCPServer.server_bind(self)\n        host, port = self.server_address[:2]\n        self.server_name = socket.getfqdn(host)\n        self.server_port = port\n\n\nclass ThreadingHTTPServer(socketserver.ThreadingMixIn, HTTPServer):\n    daemon_threads = True\n\n\nclass BaseHTTPRequestHandler(socketserver.StreamRequestHandler):\n\n    \"\"\"HTTP request handler base class.\n\n    The following explanation of HTTP serves to guide you through the\n    code as well as to expose any misunderstandings I may have about\n    HTTP (so you don't need to read the code to figure out I'm wrong\n    :-).\n\n    HTTP (HyperText Transfer Protocol) is an extensible protocol on\n    top of a reliable stream transport (e.g. TCP/IP).  The protocol\n    recognizes three parts to a request:\n\n    1. One line identifying the request type and path\n    2. An optional set of RFC-822-style headers\n    3. An optional data part\n\n    The headers and data are separated by a blank line.\n\n    The first line of the request has the form\n\n    <command> <path> <version>\n\n    where <command> is a (case-sensitive) keyword such as GET or POST,\n    <path> is a string containing path information for the request,\n    and <version> should be the string \"HTTP/1.0\" or \"HTTP/1.1\".\n    <path> is encoded using the URL encoding scheme (using %xx to signify\n    the ASCII character with hex code xx).\n\n    The specification specifies that lines are separated by CRLF but\n    for compatibility with the widest range of clients recommends\n    servers also handle LF.  Similarly, whitespace in the request line\n    is treated sensibly (allowing multiple spaces between components\n    and allowing trailing whitespace).\n\n    Similarly, for output, lines ought to be separated by CRLF pairs\n    but most clients grok LF characters just fine.\n\n    If the first line of the request has the form\n\n    <command> <path>\n\n    (i.e. <version> is left out) then this is assumed to be an HTTP\n    0.9 request; this form has no optional headers and data part and\n    the reply consists of just the data.\n\n    The reply form of the HTTP 1.x protocol again has three parts:\n\n    1. One line giving the response code\n    2. An optional set of RFC-822-style headers\n    3. The data\n\n    Again, the headers and data are separated by a blank line.\n\n    The response code line has the form\n\n    <version> <responsecode> <responsestring>\n\n    where <version> is the protocol version (\"HTTP/1.0\" or \"HTTP/1.1\"),\n    <responsecode> is a 3-digit response code indicating success or\n    failure of the request, and <responsestring> is an optional\n    human-readable string explaining what the response code means.\n\n    This server parses the request and the headers, and then calls a\n    function specific to the request type (<command>).  Specifically,\n    a request SPAM will be handled by a method do_SPAM().  If no\n    such method exists the server sends an error response to the\n    client.  If it exists, it is called with no arguments:\n\n    do_SPAM()\n\n    Note that the request name is case sensitive (i.e. SPAM and spam\n    are different requests).\n\n    The various request details are stored in instance variables:\n\n    - client_address is the client IP address in the form (host,\n    port);\n\n    - command, path and version are the broken-down request line;\n\n    - headers is an instance of email.message.Message (or a derived\n    class) containing the header information;\n\n    - rfile is a file object open for reading positioned at the\n    start of the optional input data part;\n\n    - wfile is a file object open for writing.\n\n    IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!\n\n    The first thing to be written must be the response line.  Then\n    follow 0 or more header lines, then a blank line, and then the\n    actual data (if any).  The meaning of the header lines depends on\n    the command executed by the server; in most cases, when data is\n    returned, there should be at least one header line of the form\n\n    Content-type: <type>/<subtype>\n\n    where <type> and <subtype> should be registered MIME types,\n    e.g. \"text/html\" or \"text/plain\".\n\n    \"\"\"\n\n    # The Python system version, truncated to its first component.\n    sys_version = \"Python/\" + sys.version.split()[0]\n\n    # The server software version.  You may want to override this.\n    # The format is multiple whitespace-separated strings,\n    # where each string is of the form name[/version].\n    server_version = \"BaseHTTP/\" + __version__\n\n    error_message_format = DEFAULT_ERROR_MESSAGE\n    error_content_type = DEFAULT_ERROR_CONTENT_TYPE\n\n    # The default request version.  This only affects responses up until\n    # the point where the request line is parsed, so it mainly decides what\n    # the client gets back when sending a malformed request line.\n    # Most web servers default to HTTP 0.9, i.e. don't send a status line.\n    default_request_version = \"HTTP/0.9\"\n\n    def parse_request(self):\n        \"\"\"Parse a request (internal).\n\n        The request should be stored in self.raw_requestline; the results\n        are in self.command, self.path, self.request_version and\n        self.headers.\n\n        Return True for success, False for failure; on failure, any relevant\n        error response has already been sent back.\n\n        \"\"\"\n        self.command = None  # set in case of error on the first line\n        self.request_version = version = self.default_request_version\n        self.close_connection = True\n        requestline = str(self.raw_requestline, 'iso-8859-1')\n        requestline = requestline.rstrip('\\r\\n')\n        self.requestline = requestline\n        words = requestline.split()\n        if len(words) == 0:\n            return False\n\n        if len(words) >= 3:  # Enough to determine protocol version\n            version = words[-1]\n            try:\n                if not version.startswith('HTTP/'):\n                    raise ValueError\n                base_version_number = version.split('/', 1)[1]\n                version_number = base_version_number.split(\".\")\n                # RFC 2145 section 3.1 says there can be only one \".\" and\n                #   - major and minor numbers MUST be treated as\n                #      separate integers;\n                #   - HTTP/2.4 is a lower version than HTTP/2.13, which in\n                #      turn is lower than HTTP/12.3;\n                #   - Leading zeros MUST be ignored by recipients.\n                if len(version_number) != 2:\n                    raise ValueError\n                version_number = int(version_number[0]), int(version_number[1])\n            except (ValueError, IndexError):\n                self.send_error(\n                    HTTPStatus.BAD_REQUEST,\n                    \"Bad request version (%r)\" % version)\n                return False\n            if version_number >= (1, 1) and self.protocol_version >= \"HTTP/1.1\":\n                self.close_connection = False\n            if version_number >= (2, 0):\n                self.send_error(\n                    HTTPStatus.HTTP_VERSION_NOT_SUPPORTED,\n                    \"Invalid HTTP version (%s)\" % base_version_number)\n                return False\n            self.request_version = version\n\n        if not 2 <= len(words) <= 3:\n            self.send_error(\n                HTTPStatus.BAD_REQUEST,\n                \"Bad request syntax (%r)\" % requestline)\n            return False\n        command, path = words[:2]\n        if len(words) == 2:\n            self.close_connection = True\n            if command != 'GET':\n                self.send_error(\n                    HTTPStatus.BAD_REQUEST,\n                    \"Bad HTTP/0.9 request type (%r)\" % command)\n                return False\n        self.command, self.path = command, path\n\n        # Examine the headers and look for a Connection directive.\n        try:\n            self.headers = http.client.parse_headers(self.rfile,\n                                                     _class=self.MessageClass)\n        except http.client.LineTooLong as err:\n            self.send_error(\n                HTTPStatus.REQUEST_HEADER_FIELDS_TOO_LARGE,\n                \"Line too long\",\n                str(err))\n            return False\n        except http.client.HTTPException as err:\n            self.send_error(\n                HTTPStatus.REQUEST_HEADER_FIELDS_TOO_LARGE,\n                \"Too many headers\",\n                str(err)\n            )\n            return False\n\n        conntype = self.headers.get('Connection', \"\")\n        if conntype.lower() == 'close':\n            self.close_connection = True\n        elif (conntype.lower() == 'keep-alive' and\n              self.protocol_version >= \"HTTP/1.1\"):\n            self.close_connection = False\n        # Examine the headers and look for an Expect directive\n        expect = self.headers.get('Expect', \"\")\n        if (expect.lower() == \"100-continue\" and\n                self.protocol_version >= \"HTTP/1.1\" and\n                self.request_version >= \"HTTP/1.1\"):\n            if not self.handle_expect_100():\n                return False\n        return True\n\n    def handle_expect_100(self):\n        \"\"\"Decide what to do with an \"Expect: 100-continue\" header.\n\n        If the client is expecting a 100 Continue response, we must\n        respond with either a 100 Continue or a final response before\n        waiting for the request body. The default is to always respond\n        with a 100 Continue. You can behave differently (for example,\n        reject unauthorized requests) by overriding this method.\n\n        This method should either return True (possibly after sending\n        a 100 Continue response) or send an error response and return\n        False.\n\n        \"\"\"\n        self.send_response_only(HTTPStatus.CONTINUE)\n        self.end_headers()\n        return True\n\n    def handle_one_request(self):\n        \"\"\"Handle a single HTTP request.\n\n        You normally don't need to override this method; see the class\n        __doc__ string for information on how to handle specific HTTP\n        commands such as GET and POST.\n\n        \"\"\"\n        try:\n            self.raw_requestline = self.rfile.readline(65537)\n            if len(self.raw_requestline) > 65536:\n                self.requestline = ''\n                self.request_version = ''\n                self.command = ''\n                self.send_error(HTTPStatus.REQUEST_URI_TOO_LONG)\n                return\n            if not self.raw_requestline:\n                self.close_connection = True\n                return\n            if not self.parse_request():\n                # An error code has been sent, just exit\n                return\n            mname = 'do_' + self.command\n            if not hasattr(self, mname):\n                self.send_error(\n                    HTTPStatus.NOT_IMPLEMENTED,\n                    \"Unsupported method (%r)\" % self.command)\n                return\n            method = getattr(self, mname)\n            method()\n            self.wfile.flush() #actually send the response if not already done.\n        except socket.timeout as e:\n            #a read or a write timed out.  Discard this connection\n            self.log_error(\"Request timed out: %r\", e)\n            self.close_connection = True\n            return\n\n    def handle(self):\n        \"\"\"Handle multiple requests if necessary.\"\"\"\n        self.close_connection = True\n\n        self.handle_one_request()\n        while not self.close_connection:\n            self.handle_one_request()\n\n    def send_error(self, code, message=None, explain=None):\n        \"\"\"Send and log an error reply.\n\n        Arguments are\n        * code:    an HTTP error code\n                   3 digits\n        * message: a simple optional 1 line reason phrase.\n                   *( HTAB / SP / VCHAR / %x80-FF )\n                   defaults to short entry matching the response code\n        * explain: a detailed message defaults to the long entry\n                   matching the response code.\n\n        This sends an error response (so it must be called before any\n        output has been generated), logs the error, and finally sends\n        a piece of HTML explaining the error to the user.\n\n        \"\"\"\n\n        try:\n            shortmsg, longmsg = self.responses[code]\n        except KeyError:\n            shortmsg, longmsg = '???', '???'\n        if message is None:\n            message = shortmsg\n        if explain is None:\n            explain = longmsg\n        self.log_error(\"code %d, message %s\", code, message)\n        self.send_response(code, message)\n        self.send_header('Connection', 'close')\n\n        # Message body is omitted for cases described in:\n        #  - RFC7230: 3.3. 1xx, 204(No Content), 304(Not Modified)\n        #  - RFC7231: 6.3.6. 205(Reset Content)\n        body = None\n        if (code >= 200 and\n            code not in (HTTPStatus.NO_CONTENT,\n                         HTTPStatus.RESET_CONTENT,\n                         HTTPStatus.NOT_MODIFIED)):\n            # HTML encode to prevent Cross Site Scripting attacks\n            # (see bug #1100201)\n            content = (self.error_message_format % {\n                'code': code,\n                'message': html.escape(message, quote=False),\n                'explain': html.escape(explain, quote=False)\n            })\n            body = content.encode('UTF-8', 'replace')\n            self.send_header(\"Content-Type\", self.error_content_type)\n            self.send_header('Content-Length', str(len(body)))\n        self.end_headers()\n\n        if self.command != 'HEAD' and body:\n            self.wfile.write(body)\n\n    def send_response(self, code, message=None):\n        \"\"\"Add the response header to the headers buffer and log the\n        response code.\n\n        Also send two standard headers with the server software\n        version and the current date.\n\n        \"\"\"\n        self.log_request(code)\n        self.send_response_only(code, message)\n        self.send_header('Server', self.version_string())\n        self.send_header('Date', self.date_time_string())\n\n    def send_response_only(self, code, message=None):\n        \"\"\"Send the response header only.\"\"\"\n        if self.request_version != 'HTTP/0.9':\n            if message is None:\n                if code in self.responses:\n                    message = self.responses[code][0]\n                else:\n                    message = ''\n            if not hasattr(self, '_headers_buffer'):\n                self._headers_buffer = []\n            self._headers_buffer.append((\"%s %d %s\\r\\n\" %\n                    (self.protocol_version, code, message)).encode(\n                        'latin-1', 'strict'))\n\n    def send_header(self, keyword, value):\n        \"\"\"Send a MIME header to the headers buffer.\"\"\"\n        if self.request_version != 'HTTP/0.9':\n            if not hasattr(self, '_headers_buffer'):\n                self._headers_buffer = []\n            self._headers_buffer.append(\n                (\"%s: %s\\r\\n\" % (keyword, value)).encode('latin-1', 'strict'))\n\n        if keyword.lower() == 'connection':\n            if value.lower() == 'close':\n                self.close_connection = True\n            elif value.lower() == 'keep-alive':\n                self.close_connection = False\n\n    def end_headers(self):\n        \"\"\"Send the blank line ending the MIME headers.\"\"\"\n        if self.request_version != 'HTTP/0.9':\n            self._headers_buffer.append(b\"\\r\\n\")\n            self.flush_headers()\n\n    def flush_headers(self):\n        if hasattr(self, '_headers_buffer'):\n            self.wfile.write(b\"\".join(self._headers_buffer))\n            self._headers_buffer = []\n\n    def log_request(self, code='-', size='-'):\n        \"\"\"Log an accepted request.\n\n        This is called by send_response().\n\n        \"\"\"\n        if isinstance(code, HTTPStatus):\n            code = code.value\n        self.log_message('\"%s\" %s %s',\n                         self.requestline, str(code), str(size))\n\n    def log_error(self, format, *args):\n        \"\"\"Log an error.\n\n        This is called when a request cannot be fulfilled.  By\n        default it passes the message on to log_message().\n\n        Arguments are the same as for log_message().\n\n        XXX This should go to the separate error log.\n\n        \"\"\"\n\n        self.log_message(format, *args)\n\n    def log_message(self, format, *args):\n        \"\"\"Log an arbitrary message.\n\n        This is used by all other logging functions.  Override\n        it if you have specific logging wishes.\n\n        The first argument, FORMAT, is a format string for the\n        message to be logged.  If the format string contains\n        any % escapes requiring parameters, they should be\n        specified as subsequent arguments (it's just like\n        printf!).\n\n        The client ip and current date/time are prefixed to\n        every message.\n\n        \"\"\"\n\n        sys.stderr.write(\"%s - - [%s] %s\\n\" %\n                         (self.address_string(),\n                          self.log_date_time_string(),\n                          format%args))\n\n    def version_string(self):\n        \"\"\"Return the server software version string.\"\"\"\n        return self.server_version + ' ' + self.sys_version\n\n    def date_time_string(self, timestamp=None):\n        \"\"\"Return the current date and time formatted for a message header.\"\"\"\n        if timestamp is None:\n            timestamp = time.time()\n        return email.utils.formatdate(timestamp, usegmt=True)\n\n    def log_date_time_string(self):\n        \"\"\"Return the current time formatted for logging.\"\"\"\n        now = time.time()\n        year, month, day, hh, mm, ss, x, y, z = time.localtime(now)\n        s = \"%02d/%3s/%04d %02d:%02d:%02d\" % (\n                day, self.monthname[month], year, hh, mm, ss)\n        return s\n\n    weekdayname = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n    monthname = [None,\n                 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n    def address_string(self):\n        \"\"\"Return the client address.\"\"\"\n\n        return self.client_address[0]\n\n    # Essentially static class variables\n\n    # The version of the HTTP protocol we support.\n    # Set this to HTTP/1.1 to enable automatic keepalive\n    protocol_version = \"HTTP/1.0\"\n\n    # MessageClass used to parse headers\n    MessageClass = http.client.HTTPMessage\n\n    # hack to maintain backwards compatibility\n    responses = {\n        v: (v.phrase, v.description)\n        for v in HTTPStatus.__members__.values()\n    }\n\n\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n\n    \"\"\"Simple HTTP request handler with GET and HEAD commands.\n\n    This serves files from the current directory and any of its\n    subdirectories.  The MIME type for files is determined by\n    calling the .guess_type() method.\n\n    The GET and HEAD requests are identical except that the HEAD\n    request omits the actual contents of the file.\n\n    \"\"\"\n\n    server_version = \"SimpleHTTP/\" + __version__\n\n    def __init__(self, *args, directory=None, **kwargs):\n        if directory is None:\n            directory = os.getcwd()\n        self.directory = directory\n        super().__init__(*args, **kwargs)\n\n    def do_GET(self):\n        \"\"\"Serve a GET request.\"\"\"\n        f = self.send_head()\n        if f:\n            try:\n                self.copyfile(f, self.wfile)\n            finally:\n                f.close()\n\n    def do_HEAD(self):\n        \"\"\"Serve a HEAD request.\"\"\"\n        f = self.send_head()\n        if f:\n            f.close()\n\n    def send_head(self):\n        \"\"\"Common code for GET and HEAD commands.\n\n        This sends the response code and MIME headers.\n\n        Return value is either a file object (which has to be copied\n        to the outputfile by the caller unless the command was HEAD,\n        and must be closed by the caller under all circumstances), or\n        None, in which case the caller has nothing further to do.\n\n        \"\"\"\n        path = self.translate_path(self.path)\n        f = None\n        if os.path.isdir(path):\n            parts = urllib.parse.urlsplit(self.path)\n            if not parts.path.endswith('/'):\n                # redirect browser - doing basically what apache does\n                self.send_response(HTTPStatus.MOVED_PERMANENTLY)\n                new_parts = (parts[0], parts[1], parts[2] + '/',\n                             parts[3], parts[4])\n                new_url = urllib.parse.urlunsplit(new_parts)\n                self.send_header(\"Location\", new_url)\n                self.end_headers()\n                return None\n            for index in \"index.html\", \"index.htm\":\n                index = os.path.join(path, index)\n                if os.path.exists(index):\n                    path = index\n                    break\n            else:\n                return self.list_directory(path)\n        ctype = self.guess_type(path)\n        try:\n            f = open(path, 'rb')\n        except OSError:\n            self.send_error(HTTPStatus.NOT_FOUND, \"File not found\")\n            return None\n\n        try:\n            fs = os.fstat(f.fileno())\n            # Use browser cache if possible\n            if (\"If-Modified-Since\" in self.headers\n                    and \"If-None-Match\" not in self.headers):\n                # compare If-Modified-Since and time of last file modification\n                try:\n                    ims = email.utils.parsedate_to_datetime(\n                        self.headers[\"If-Modified-Since\"])\n                except (TypeError, IndexError, OverflowError, ValueError):\n                    # ignore ill-formed values\n                    pass\n                else:\n                    if ims.tzinfo is None:\n                        # obsolete format with no timezone, cf.\n                        # https://tools.ietf.org/html/rfc7231#section-7.1.1.1\n                        ims = ims.replace(tzinfo=datetime.timezone.utc)\n                    if ims.tzinfo is datetime.timezone.utc:\n                        # compare to UTC datetime of last modification\n                        last_modif = datetime.datetime.fromtimestamp(\n                            fs.st_mtime, datetime.timezone.utc)\n                        # remove microseconds, like in If-Modified-Since\n                        last_modif = last_modif.replace(microsecond=0)\n\n                        if last_modif <= ims:\n                            self.send_response(HTTPStatus.NOT_MODIFIED)\n                            self.end_headers()\n                            f.close()\n                            return None\n\n            self.send_response(HTTPStatus.OK)\n            self.send_header(\"Content-type\", ctype)\n            self.send_header(\"Content-Length\", str(fs[6]))\n            self.send_header(\"Last-Modified\",\n                self.date_time_string(fs.st_mtime))\n            self.end_headers()\n            return f\n        except:\n            f.close()\n            raise\n\n    def list_directory(self, path):\n        \"\"\"Helper to produce a directory listing (absent index.html).\n\n        Return value is either a file object, or None (indicating an\n        error).  In either case, the headers are sent, making the\n        interface the same as for send_head().\n\n        \"\"\"\n        try:\n            list = os.listdir(path)\n        except OSError:\n            self.send_error(\n                HTTPStatus.NOT_FOUND,\n                \"No permission to list directory\")\n            return None\n        list.sort(key=lambda a: a.lower())\n        r = []\n        try:\n            displaypath = urllib.parse.unquote(self.path,\n                                               errors='surrogatepass')\n        except UnicodeDecodeError:\n            displaypath = urllib.parse.unquote(path)\n        displaypath = html.escape(displaypath, quote=False)\n        enc = sys.getfilesystemencoding()\n        title = 'Directory listing for %s' % displaypath\n        r.append('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" '\n                 '\"http://www.w3.org/TR/html4/strict.dtd\">')\n        r.append('<html>\\n<head>')\n        r.append('<meta http-equiv=\"Content-Type\" '\n                 'content=\"text/html; charset=%s\">' % enc)\n        r.append('<title>%s</title>\\n</head>' % title)\n        r.append('<body>\\n<h1>%s</h1>' % title)\n        r.append('<hr>\\n<ul>')\n        for name in list:\n            fullname = os.path.join(path, name)\n            displayname = linkname = name\n            # Append / for directories or @ for symbolic links\n            if os.path.isdir(fullname):\n                displayname = name + \"/\"\n                linkname = name + \"/\"\n            if os.path.islink(fullname):\n                displayname = name + \"@\"\n                # Note: a link to a directory displays with @ and links with /\n            r.append('<li><a href=\"%s\">%s</a></li>'\n                    % (urllib.parse.quote(linkname,\n                                          errors='surrogatepass'),\n                       html.escape(displayname, quote=False)))\n        r.append('</ul>\\n<hr>\\n</body>\\n</html>\\n')\n        encoded = '\\n'.join(r).encode(enc, 'surrogateescape')\n        f = io.BytesIO()\n        f.write(encoded)\n        f.seek(0)\n        self.send_response(HTTPStatus.OK)\n        self.send_header(\"Content-type\", \"text/html; charset=%s\" % enc)\n        self.send_header(\"Content-Length\", str(len(encoded)))\n        self.end_headers()\n        return f\n\n    def translate_path(self, path):\n        \"\"\"Translate a /-separated PATH to the local filename syntax.\n\n        Components that mean special things to the local file system\n        (e.g. drive or directory names) are ignored.  (XXX They should\n        probably be diagnosed.)\n\n        \"\"\"\n        # abandon query parameters\n        path = path.split('?',1)[0]\n        path = path.split('#',1)[0]\n        # Don't forget explicit trailing slash when normalizing. Issue17324\n        trailing_slash = path.rstrip().endswith('/')\n        try:\n            path = urllib.parse.unquote(path, errors='surrogatepass')\n        except UnicodeDecodeError:\n            path = urllib.parse.unquote(path)\n        path = posixpath.normpath(path)\n        words = path.split('/')\n        words = filter(None, words)\n        path = self.directory\n        for word in words:\n            if os.path.dirname(word) or word in (os.curdir, os.pardir):\n                # Ignore components that are not a simple file/directory name\n                continue\n            path = os.path.join(path, word)\n        if trailing_slash:\n            path += '/'\n        return path\n\n    def copyfile(self, source, outputfile):\n        \"\"\"Copy all data between two file objects.\n\n        The SOURCE argument is a file object open for reading\n        (or anything with a read() method) and the DESTINATION\n        argument is a file object open for writing (or\n        anything with a write() method).\n\n        The only reason for overriding this would be to change\n        the block size or perhaps to replace newlines by CRLF\n        -- note however that this the default server uses this\n        to copy binary data as well.\n\n        \"\"\"\n        shutil.copyfileobj(source, outputfile)\n\n    def guess_type(self, path):\n        \"\"\"Guess the type of a file.\n\n        Argument is a PATH (a filename).\n\n        Return value is a string of the form type/subtype,\n        usable for a MIME Content-type header.\n\n        The default implementation looks the file's extension\n        up in the table self.extensions_map, using application/octet-stream\n        as a default; however it would be permissible (if\n        slow) to look inside the data to make a better guess.\n\n        \"\"\"\n\n        base, ext = posixpath.splitext(path)\n        if ext in self.extensions_map:\n            return self.extensions_map[ext]\n        ext = ext.lower()\n        if ext in self.extensions_map:\n            return self.extensions_map[ext]\n        else:\n            return self.extensions_map['']\n\n    if not mimetypes.inited:\n        mimetypes.init() # try to read system mime.types\n    extensions_map = mimetypes.types_map.copy()\n    extensions_map.update({\n        '': 'application/octet-stream', # Default\n        '.py': 'text/plain',\n        '.c': 'text/plain',\n        '.h': 'text/plain',\n        })\n\n\n# Utilities for CGIHTTPRequestHandler\n\ndef _url_collapse_path(path):\n    \"\"\"\n    Given a URL path, remove extra '/'s and '.' path elements and collapse\n    any '..' references and returns a collapsed path.\n\n    Implements something akin to RFC-2396 5.2 step 6 to parse relative paths.\n    The utility of this function is limited to is_cgi method and helps\n    preventing some security attacks.\n\n    Returns: The reconstituted URL, which will always start with a '/'.\n\n    Raises: IndexError if too many '..' occur within the path.\n\n    \"\"\"\n    # Query component should not be involved.\n    path, _, query = path.partition('?')\n    path = urllib.parse.unquote(path)\n\n    # Similar to os.path.split(os.path.normpath(path)) but specific to URL\n    # path semantics rather than local operating system semantics.\n    path_parts = path.split('/')\n    head_parts = []\n    for part in path_parts[:-1]:\n        if part == '..':\n            head_parts.pop() # IndexError if more '..' than prior parts\n        elif part and part != '.':\n            head_parts.append( part )\n    if path_parts:\n        tail_part = path_parts.pop()\n        if tail_part:\n            if tail_part == '..':\n                head_parts.pop()\n                tail_part = ''\n            elif tail_part == '.':\n                tail_part = ''\n    else:\n        tail_part = ''\n\n    if query:\n        tail_part = '?'.join((tail_part, query))\n\n    splitpath = ('/' + '/'.join(head_parts), tail_part)\n    collapsed_path = \"/\".join(splitpath)\n\n    return collapsed_path\n\n\n\nnobody = None\n\ndef nobody_uid():\n    \"\"\"Internal routine to get nobody's uid\"\"\"\n    global nobody\n    if nobody:\n        return nobody\n    try:\n        import pwd\n    except ImportError:\n        return -1\n    try:\n        nobody = pwd.getpwnam('nobody')[2]\n    except KeyError:\n        nobody = 1 + max(x[2] for x in pwd.getpwall())\n    return nobody\n\n\ndef executable(path):\n    \"\"\"Test for executable file.\"\"\"\n    return os.access(path, os.X_OK)\n\n\nclass CGIHTTPRequestHandler(SimpleHTTPRequestHandler):\n\n    \"\"\"Complete HTTP server with GET, HEAD and POST commands.\n\n    GET and HEAD also support running CGI scripts.\n\n    The POST command is *only* implemented for CGI scripts.\n\n    \"\"\"\n\n    # Determine platform specifics\n    have_fork = hasattr(os, 'fork')\n\n    # Make rfile unbuffered -- we need to read one line and then pass\n    # the rest to a subprocess, so we can't use buffered input.\n    rbufsize = 0\n\n    def do_POST(self):\n        \"\"\"Serve a POST request.\n\n        This is only implemented for CGI scripts.\n\n        \"\"\"\n\n        if self.is_cgi():\n            self.run_cgi()\n        else:\n            self.send_error(\n                HTTPStatus.NOT_IMPLEMENTED,\n                \"Can only POST to CGI scripts\")\n\n    def send_head(self):\n        \"\"\"Version of send_head that support CGI scripts\"\"\"\n        if self.is_cgi():\n            return self.run_cgi()\n        else:\n            return SimpleHTTPRequestHandler.send_head(self)\n\n    def is_cgi(self):\n        \"\"\"Test whether self.path corresponds to a CGI script.\n\n        Returns True and updates the cgi_info attribute to the tuple\n        (dir, rest) if self.path requires running a CGI script.\n        Returns False otherwise.\n\n        If any exception is raised, the caller should assume that\n        self.path was rejected as invalid and act accordingly.\n\n        The default implementation tests whether the normalized url\n        path begins with one of the strings in self.cgi_directories\n        (and the next character is a '/' or the end of the string).\n\n        \"\"\"\n        collapsed_path = _url_collapse_path(self.path)\n        dir_sep = collapsed_path.find('/', 1)\n        head, tail = collapsed_path[:dir_sep], collapsed_path[dir_sep+1:]\n        if head in self.cgi_directories:\n            self.cgi_info = head, tail\n            return True\n        return False\n\n\n    cgi_directories = ['/cgi-bin', '/htbin']\n\n    def is_executable(self, path):\n        \"\"\"Test whether argument path is an executable file.\"\"\"\n        return executable(path)\n\n    def is_python(self, path):\n        \"\"\"Test whether argument path is a Python script.\"\"\"\n        head, tail = os.path.splitext(path)\n        return tail.lower() in (\".py\", \".pyw\")\n\n    def run_cgi(self):\n        \"\"\"Execute a CGI script.\"\"\"\n        dir, rest = self.cgi_info\n        path = dir + '/' + rest\n        i = path.find('/', len(dir)+1)\n        while i >= 0:\n            nextdir = path[:i]\n            nextrest = path[i+1:]\n\n            scriptdir = self.translate_path(nextdir)\n            if os.path.isdir(scriptdir):\n                dir, rest = nextdir, nextrest\n                i = path.find('/', len(dir)+1)\n            else:\n                break\n\n        # find an explicit query string, if present.\n        rest, _, query = rest.partition('?')\n\n        # dissect the part after the directory name into a script name &\n        # a possible additional path, to be stored in PATH_INFO.\n        i = rest.find('/')\n        if i >= 0:\n            script, rest = rest[:i], rest[i:]\n        else:\n            script, rest = rest, ''\n\n        scriptname = dir + '/' + script\n        scriptfile = self.translate_path(scriptname)\n        if not os.path.exists(scriptfile):\n            self.send_error(\n                HTTPStatus.NOT_FOUND,\n                \"No such CGI script (%r)\" % scriptname)\n            return\n        if not os.path.isfile(scriptfile):\n            self.send_error(\n                HTTPStatus.FORBIDDEN,\n                \"CGI script is not a plain file (%r)\" % scriptname)\n            return\n        ispy = self.is_python(scriptname)\n        if self.have_fork or not ispy:\n            if not self.is_executable(scriptfile):\n                self.send_error(\n                    HTTPStatus.FORBIDDEN,\n                    \"CGI script is not executable (%r)\" % scriptname)\n                return\n\n        # Reference: http://hoohoo.ncsa.uiuc.edu/cgi/env.html\n        # XXX Much of the following could be prepared ahead of time!\n        env = copy.deepcopy(os.environ)\n        env['SERVER_SOFTWARE'] = self.version_string()\n        env['SERVER_NAME'] = self.server.server_name\n        env['GATEWAY_INTERFACE'] = 'CGI/1.1'\n        env['SERVER_PROTOCOL'] = self.protocol_version\n        env['SERVER_PORT'] = str(self.server.server_port)\n        env['REQUEST_METHOD'] = self.command\n        uqrest = urllib.parse.unquote(rest)\n        env['PATH_INFO'] = uqrest\n        env['PATH_TRANSLATED'] = self.translate_path(uqrest)\n        env['SCRIPT_NAME'] = scriptname\n        if query:\n            env['QUERY_STRING'] = query\n        env['REMOTE_ADDR'] = self.client_address[0]\n        authorization = self.headers.get(\"authorization\")\n        if authorization:\n            authorization = authorization.split()\n            if len(authorization) == 2:\n                import base64, binascii\n                env['AUTH_TYPE'] = authorization[0]\n                if authorization[0].lower() == \"basic\":\n                    try:\n                        authorization = authorization[1].encode('ascii')\n                        authorization = base64.decodebytes(authorization).\\\n                                        decode('ascii')\n                    except (binascii.Error, UnicodeError):\n                        pass\n                    else:\n                        authorization = authorization.split(':')\n                        if len(authorization) == 2:\n                            env['REMOTE_USER'] = authorization[0]\n        # XXX REMOTE_IDENT\n        if self.headers.get('content-type') is None:\n            env['CONTENT_TYPE'] = self.headers.get_content_type()\n        else:\n            env['CONTENT_TYPE'] = self.headers['content-type']\n        length = self.headers.get('content-length')\n        if length:\n            env['CONTENT_LENGTH'] = length\n        referer = self.headers.get('referer')\n        if referer:\n            env['HTTP_REFERER'] = referer\n        accept = []\n        for line in self.headers.getallmatchingheaders('accept'):\n            if line[:1] in \"\\t\\n\\r \":\n                accept.append(line.strip())\n            else:\n                accept = accept + line[7:].split(',')\n        env['HTTP_ACCEPT'] = ','.join(accept)\n        ua = self.headers.get('user-agent')\n        if ua:\n            env['HTTP_USER_AGENT'] = ua\n        co = filter(None, self.headers.get_all('cookie', []))\n        cookie_str = ', '.join(co)\n        if cookie_str:\n            env['HTTP_COOKIE'] = cookie_str\n        # XXX Other HTTP_* headers\n        # Since we're setting the env in the parent, provide empty\n        # values to override previously set values\n        for k in ('QUERY_STRING', 'REMOTE_HOST', 'CONTENT_LENGTH',\n                  'HTTP_USER_AGENT', 'HTTP_COOKIE', 'HTTP_REFERER'):\n            env.setdefault(k, \"\")\n\n        self.send_response(HTTPStatus.OK, \"Script output follows\")\n        self.flush_headers()\n\n        decoded_query = query.replace('+', ' ')\n\n        if self.have_fork:\n            # Unix -- fork as we should\n            args = [script]\n            if '=' not in decoded_query:\n                args.append(decoded_query)\n            nobody = nobody_uid()\n            self.wfile.flush() # Always flush before forking\n            pid = os.fork()\n            if pid != 0:\n                # Parent\n                pid, sts = os.waitpid(pid, 0)\n                # throw away additional data [see bug #427345]\n                while select.select([self.rfile], [], [], 0)[0]:\n                    if not self.rfile.read(1):\n                        break\n                if sts:\n                    self.log_error(\"CGI script exit status %#x\", sts)\n                return\n            # Child\n            try:\n                try:\n                    os.setuid(nobody)\n                except OSError:\n                    pass\n                os.dup2(self.rfile.fileno(), 0)\n                os.dup2(self.wfile.fileno(), 1)\n                os.execve(scriptfile, args, env)\n            except:\n                self.server.handle_error(self.request, self.client_address)\n                os._exit(127)\n\n        else:\n            # Non-Unix -- use subprocess\n            import subprocess\n            cmdline = [scriptfile]\n            if self.is_python(scriptfile):\n                interp = sys.executable\n                if interp.lower().endswith(\"w.exe\"):\n                    # On Windows, use python.exe, not pythonw.exe\n                    interp = interp[:-5] + interp[-4:]\n                cmdline = [interp, '-u'] + cmdline\n            if '=' not in query:\n                cmdline.append(query)\n            self.log_message(\"command: %s\", subprocess.list2cmdline(cmdline))\n            try:\n                nbytes = int(length)\n            except (TypeError, ValueError):\n                nbytes = 0\n            p = subprocess.Popen(cmdline,\n                                 stdin=subprocess.PIPE,\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE,\n                                 env = env\n                                 )\n            if self.command.lower() == \"post\" and nbytes > 0:\n                data = self.rfile.read(nbytes)\n            else:\n                data = None\n            # throw away additional data [see bug #427345]\n            while select.select([self.rfile._sock], [], [], 0)[0]:\n                if not self.rfile._sock.recv(1):\n                    break\n            stdout, stderr = p.communicate(data)\n            self.wfile.write(stdout)\n            if stderr:\n                self.log_error('%s', stderr)\n            p.stderr.close()\n            p.stdout.close()\n            status = p.returncode\n            if status:\n                self.log_error(\"CGI script exit status %#x\", status)\n            else:\n                self.log_message(\"CGI script exited OK\")\n\n\ndef test(HandlerClass=BaseHTTPRequestHandler,\n         ServerClass=ThreadingHTTPServer,\n         protocol=\"HTTP/1.0\", port=8000, bind=\"\"):\n    \"\"\"Test the HTTP request handler class.\n\n    This runs an HTTP server on port 8000 (or the port argument).\n\n    \"\"\"\n    server_address = (bind, port)\n\n    HandlerClass.protocol_version = protocol\n    with ServerClass(server_address, HandlerClass) as httpd:\n        sa = httpd.socket.getsockname()\n        serve_message = \"Serving HTTP on {host} port {port} (http://{host}:{port}/) ...\"\n        print(serve_message.format(host=sa[0], port=sa[1]))\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            print(\"\\nKeyboard interrupt received, exiting.\")\n            sys.exit(0)\n\nif __name__ == '__main__':\n    import argparse\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--cgi', action='store_true',\n                       help='Run as CGI Server')\n    parser.add_argument('--bind', '-b', default='', metavar='ADDRESS',\n                        help='Specify alternate bind address '\n                             '[default: all interfaces]')\n    parser.add_argument('--directory', '-d', default=os.getcwd(),\n                        help='Specify alternative directory '\n                        '[default:current directory]')\n    parser.add_argument('port', action='store',\n                        default=8000, type=int,\n                        nargs='?',\n                        help='Specify alternate port [default: 8000]')\n    args = parser.parse_args()\n    if args.cgi:\n        handler_class = CGIHTTPRequestHandler\n    else:\n        handler_class = partial(SimpleHTTPRequestHandler,\n                                directory=args.directory)\n    test(HandlerClass=handler_class, port=args.port, bind=args.bind)\n", 1262], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py": ["# Copyright 2001-2017 by Vinay Sajip. All Rights Reserved.\n#\n# Permission to use, copy, modify, and distribute this software and its\n# documentation for any purpose and without fee is hereby granted,\n# provided that the above copyright notice appear in all copies and that\n# both that copyright notice and this permission notice appear in\n# supporting documentation, and that the name of Vinay Sajip\n# not be used in advertising or publicity pertaining to distribution\n# of the software without specific, written prior permission.\n# VINAY SAJIP DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING\n# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n# VINAY SAJIP BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR\n# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER\n# IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\n# OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\"\"\"\nLogging package for Python. Based on PEP 282 and comments thereto in\ncomp.lang.python.\n\nCopyright (C) 2001-2017 Vinay Sajip. All Rights Reserved.\n\nTo use, simply 'import logging' and log away!\n\"\"\"\n\nimport sys, os, time, io, traceback, warnings, weakref, collections.abc\n\nfrom string import Template\n\n__all__ = ['BASIC_FORMAT', 'BufferingFormatter', 'CRITICAL', 'DEBUG', 'ERROR',\n           'FATAL', 'FileHandler', 'Filter', 'Formatter', 'Handler', 'INFO',\n           'LogRecord', 'Logger', 'LoggerAdapter', 'NOTSET', 'NullHandler',\n           'StreamHandler', 'WARN', 'WARNING', 'addLevelName', 'basicConfig',\n           'captureWarnings', 'critical', 'debug', 'disable', 'error',\n           'exception', 'fatal', 'getLevelName', 'getLogger', 'getLoggerClass',\n           'info', 'log', 'makeLogRecord', 'setLoggerClass', 'shutdown',\n           'warn', 'warning', 'getLogRecordFactory', 'setLogRecordFactory',\n           'lastResort', 'raiseExceptions']\n\nimport threading\n\n__author__  = \"Vinay Sajip <vinay_sajip@red-dove.com>\"\n__status__  = \"production\"\n# The following module attributes are no longer updated.\n__version__ = \"0.5.1.2\"\n__date__    = \"07 February 2010\"\n\n#---------------------------------------------------------------------------\n#   Miscellaneous module data\n#---------------------------------------------------------------------------\n\n#\n#_startTime is used as the base when calculating the relative time of events\n#\n_startTime = time.time()\n\n#\n#raiseExceptions is used to see if exceptions during handling should be\n#propagated\n#\nraiseExceptions = True\n\n#\n# If you don't want threading information in the log, set this to zero\n#\nlogThreads = True\n\n#\n# If you don't want multiprocessing information in the log, set this to zero\n#\nlogMultiprocessing = True\n\n#\n# If you don't want process information in the log, set this to zero\n#\nlogProcesses = True\n\n#---------------------------------------------------------------------------\n#   Level related stuff\n#---------------------------------------------------------------------------\n#\n# Default levels and level names, these can be replaced with any positive set\n# of values having corresponding names. There is a pseudo-level, NOTSET, which\n# is only really there as a lower limit for user-defined levels. Handlers and\n# loggers are initialized with NOTSET so that they will log all messages, even\n# at user-defined levels.\n#\n\nCRITICAL = 50\nFATAL = CRITICAL\nERROR = 40\nWARNING = 30\nWARN = WARNING\nINFO = 20\nDEBUG = 10\nNOTSET = 0\n\n_levelToName = {\n    CRITICAL: 'CRITICAL',\n    ERROR: 'ERROR',\n    WARNING: 'WARNING',\n    INFO: 'INFO',\n    DEBUG: 'DEBUG',\n    NOTSET: 'NOTSET',\n}\n_nameToLevel = {\n    'CRITICAL': CRITICAL,\n    'FATAL': FATAL,\n    'ERROR': ERROR,\n    'WARN': WARNING,\n    'WARNING': WARNING,\n    'INFO': INFO,\n    'DEBUG': DEBUG,\n    'NOTSET': NOTSET,\n}\n\ndef getLevelName(level):\n    \"\"\"\n    Return the textual representation of logging level 'level'.\n\n    If the level is one of the predefined levels (CRITICAL, ERROR, WARNING,\n    INFO, DEBUG) then you get the corresponding string. If you have\n    associated levels with names using addLevelName then the name you have\n    associated with 'level' is returned.\n\n    If a numeric value corresponding to one of the defined levels is passed\n    in, the corresponding string representation is returned.\n\n    Otherwise, the string \"Level %s\" % level is returned.\n    \"\"\"\n    # See Issues #22386, #27937 and #29220 for why it's this way\n    result = _levelToName.get(level)\n    if result is not None:\n        return result\n    result = _nameToLevel.get(level)\n    if result is not None:\n        return result\n    return \"Level %s\" % level\n\ndef addLevelName(level, levelName):\n    \"\"\"\n    Associate 'levelName' with 'level'.\n\n    This is used when converting levels to text during message formatting.\n    \"\"\"\n    _acquireLock()\n    try:    #unlikely to cause an exception, but you never know...\n        _levelToName[level] = levelName\n        _nameToLevel[levelName] = level\n    finally:\n        _releaseLock()\n\nif hasattr(sys, '_getframe'):\n    currentframe = lambda: sys._getframe(3)\nelse: #pragma: no cover\n    def currentframe():\n        \"\"\"Return the frame object for the caller's stack frame.\"\"\"\n        try:\n            raise Exception\n        except Exception:\n            return sys.exc_info()[2].tb_frame.f_back\n\n#\n# _srcfile is used when walking the stack to check when we've got the first\n# caller stack frame, by skipping frames whose filename is that of this\n# module's source. It therefore should contain the filename of this module's\n# source file.\n#\n# Ordinarily we would use __file__ for this, but frozen modules don't always\n# have __file__ set, for some reason (see Issue #21736). Thus, we get the\n# filename from a handy code object from a function defined in this module.\n# (There's no particular reason for picking addLevelName.)\n#\n\n_srcfile = os.path.normcase(addLevelName.__code__.co_filename)\n\n# _srcfile is only used in conjunction with sys._getframe().\n# To provide compatibility with older versions of Python, set _srcfile\n# to None if _getframe() is not available; this value will prevent\n# findCaller() from being called. You can also do this if you want to avoid\n# the overhead of fetching caller information, even when _getframe() is\n# available.\n#if not hasattr(sys, '_getframe'):\n#    _srcfile = None\n\n\ndef _checkLevel(level):\n    if isinstance(level, int):\n        rv = level\n    elif str(level) == level:\n        if level not in _nameToLevel:\n            raise ValueError(\"Unknown level: %r\" % level)\n        rv = _nameToLevel[level]\n    else:\n        raise TypeError(\"Level not an integer or a valid string: %r\" % level)\n    return rv\n\n#---------------------------------------------------------------------------\n#   Thread-related stuff\n#---------------------------------------------------------------------------\n\n#\n#_lock is used to serialize access to shared data structures in this module.\n#This needs to be an RLock because fileConfig() creates and configures\n#Handlers, and so might arbitrary user threads. Since Handler code updates the\n#shared dictionary _handlers, it needs to acquire the lock. But if configuring,\n#the lock would already have been acquired - so we need an RLock.\n#The same argument applies to Loggers and Manager.loggerDict.\n#\n_lock = threading.RLock()\n\ndef _acquireLock():\n    \"\"\"\n    Acquire the module-level lock for serializing access to shared data.\n\n    This should be released with _releaseLock().\n    \"\"\"\n    if _lock:\n        _lock.acquire()\n\ndef _releaseLock():\n    \"\"\"\n    Release the module-level lock acquired by calling _acquireLock().\n    \"\"\"\n    if _lock:\n        _lock.release()\n\n\n# Prevent a held logging lock from blocking a child from logging.\n\nif not hasattr(os, 'register_at_fork'):  # Windows and friends.\n    def _register_at_fork_reinit_lock(instance):\n        pass  # no-op when os.register_at_fork does not exist.\nelse:\n    # A collection of instances with a createLock method (logging.Handler)\n    # to be called in the child after forking.  The weakref avoids us keeping\n    # discarded Handler instances alive.  A set is used to avoid accumulating\n    # duplicate registrations as createLock() is responsible for registering\n    # a new Handler instance with this set in the first place.\n    _at_fork_reinit_lock_weakset = weakref.WeakSet()\n\n    def _register_at_fork_reinit_lock(instance):\n        _acquireLock()\n        try:\n            _at_fork_reinit_lock_weakset.add(instance)\n        finally:\n            _releaseLock()\n\n    def _after_at_fork_child_reinit_locks():\n        # _acquireLock() was called in the parent before forking.\n        for handler in _at_fork_reinit_lock_weakset:\n            try:\n                handler.createLock()\n            except Exception as err:\n                # Similar to what PyErr_WriteUnraisable does.\n                print(\"Ignoring exception from logging atfork\", instance,\n                      \"._reinit_lock() method:\", err, file=sys.stderr)\n        _releaseLock()  # Acquired by os.register_at_fork(before=.\n\n\n    os.register_at_fork(before=_acquireLock,\n                        after_in_child=_after_at_fork_child_reinit_locks,\n                        after_in_parent=_releaseLock)\n\n\n#---------------------------------------------------------------------------\n#   The logging record\n#---------------------------------------------------------------------------\n\nclass LogRecord(object):\n    \"\"\"\n    A LogRecord instance represents an event being logged.\n\n    LogRecord instances are created every time something is logged. They\n    contain all the information pertinent to the event being logged. The\n    main information passed in is in msg and args, which are combined\n    using str(msg) % args to create the message field of the record. The\n    record also includes information such as when the record was created,\n    the source line where the logging call was made, and any exception\n    information to be logged.\n    \"\"\"\n    def __init__(self, name, level, pathname, lineno,\n                 msg, args, exc_info, func=None, sinfo=None, **kwargs):\n        \"\"\"\n        Initialize a logging record with interesting information.\n        \"\"\"\n        ct = time.time()\n        self.name = name\n        self.msg = msg\n        #\n        # The following statement allows passing of a dictionary as a sole\n        # argument, so that you can do something like\n        #  logging.debug(\"a %(a)d b %(b)s\", {'a':1, 'b':2})\n        # Suggested by Stefan Behnel.\n        # Note that without the test for args[0], we get a problem because\n        # during formatting, we test to see if the arg is present using\n        # 'if self.args:'. If the event being logged is e.g. 'Value is %d'\n        # and if the passed arg fails 'if self.args:' then no formatting\n        # is done. For example, logger.warning('Value is %d', 0) would log\n        # 'Value is %d' instead of 'Value is 0'.\n        # For the use case of passing a dictionary, this should not be a\n        # problem.\n        # Issue #21172: a request was made to relax the isinstance check\n        # to hasattr(args[0], '__getitem__'). However, the docs on string\n        # formatting still seem to suggest a mapping object is required.\n        # Thus, while not removing the isinstance check, it does now look\n        # for collections.abc.Mapping rather than, as before, dict.\n        if (args and len(args) == 1 and isinstance(args[0], collections.abc.Mapping)\n            and args[0]):\n            args = args[0]\n        self.args = args\n        self.levelname = getLevelName(level)\n        self.levelno = level\n        self.pathname = pathname\n        try:\n            self.filename = os.path.basename(pathname)\n            self.module = os.path.splitext(self.filename)[0]\n        except (TypeError, ValueError, AttributeError):\n            self.filename = pathname\n            self.module = \"Unknown module\"\n        self.exc_info = exc_info\n        self.exc_text = None      # used to cache the traceback text\n        self.stack_info = sinfo\n        self.lineno = lineno\n        self.funcName = func\n        self.created = ct\n        self.msecs = (ct - int(ct)) * 1000\n        self.relativeCreated = (self.created - _startTime) * 1000\n        if logThreads:\n            self.thread = threading.get_ident()\n            self.threadName = threading.current_thread().name\n        else: # pragma: no cover\n            self.thread = None\n            self.threadName = None\n        if not logMultiprocessing: # pragma: no cover\n            self.processName = None\n        else:\n            self.processName = 'MainProcess'\n            mp = sys.modules.get('multiprocessing')\n            if mp is not None:\n                # Errors may occur if multiprocessing has not finished loading\n                # yet - e.g. if a custom import hook causes third-party code\n                # to run when multiprocessing calls import. See issue 8200\n                # for an example\n                try:\n                    self.processName = mp.current_process().name\n                except Exception: #pragma: no cover\n                    pass\n        if logProcesses and hasattr(os, 'getpid'):\n            self.process = os.getpid()\n        else:\n            self.process = None\n\n    def __str__(self):\n        return '<LogRecord: %s, %s, %s, %s, \"%s\">'%(self.name, self.levelno,\n            self.pathname, self.lineno, self.msg)\n\n    __repr__ = __str__\n\n    def getMessage(self):\n        \"\"\"\n        Return the message for this LogRecord.\n\n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        \"\"\"\n        msg = str(self.msg)\n        if self.args:\n            msg = msg % self.args\n        return msg\n\n#\n#   Determine which class to use when instantiating log records.\n#\n_logRecordFactory = LogRecord\n\ndef setLogRecordFactory(factory):\n    \"\"\"\n    Set the factory to be used when instantiating a log record.\n\n    :param factory: A callable which will be called to instantiate\n    a log record.\n    \"\"\"\n    global _logRecordFactory\n    _logRecordFactory = factory\n\ndef getLogRecordFactory():\n    \"\"\"\n    Return the factory to be used when instantiating a log record.\n    \"\"\"\n\n    return _logRecordFactory\n\ndef makeLogRecord(dict):\n    \"\"\"\n    Make a LogRecord whose attributes are defined by the specified dictionary,\n    This function is useful for converting a logging event received over\n    a socket connection (which is sent as a dictionary) into a LogRecord\n    instance.\n    \"\"\"\n    rv = _logRecordFactory(None, None, \"\", 0, \"\", (), None, None)\n    rv.__dict__.update(dict)\n    return rv\n\n#---------------------------------------------------------------------------\n#   Formatter classes and functions\n#---------------------------------------------------------------------------\n\nclass PercentStyle(object):\n\n    default_format = '%(message)s'\n    asctime_format = '%(asctime)s'\n    asctime_search = '%(asctime)'\n\n    def __init__(self, fmt):\n        self._fmt = fmt or self.default_format\n\n    def usesTime(self):\n        return self._fmt.find(self.asctime_search) >= 0\n\n    def format(self, record):\n        return self._fmt % record.__dict__\n\nclass StrFormatStyle(PercentStyle):\n    default_format = '{message}'\n    asctime_format = '{asctime}'\n    asctime_search = '{asctime'\n\n    def format(self, record):\n        return self._fmt.format(**record.__dict__)\n\n\nclass StringTemplateStyle(PercentStyle):\n    default_format = '${message}'\n    asctime_format = '${asctime}'\n    asctime_search = '${asctime}'\n\n    def __init__(self, fmt):\n        self._fmt = fmt or self.default_format\n        self._tpl = Template(self._fmt)\n\n    def usesTime(self):\n        fmt = self._fmt\n        return fmt.find('$asctime') >= 0 or fmt.find(self.asctime_format) >= 0\n\n    def format(self, record):\n        return self._tpl.substitute(**record.__dict__)\n\nBASIC_FORMAT = \"%(levelname)s:%(name)s:%(message)s\"\n\n_STYLES = {\n    '%': (PercentStyle, BASIC_FORMAT),\n    '{': (StrFormatStyle, '{levelname}:{name}:{message}'),\n    '$': (StringTemplateStyle, '${levelname}:${name}:${message}'),\n}\n\nclass Formatter(object):\n    \"\"\"\n    Formatter instances are used to convert a LogRecord to text.\n\n    Formatters need to know how a LogRecord is constructed. They are\n    responsible for converting a LogRecord to (usually) a string which can\n    be interpreted by either a human or an external system. The base Formatter\n    allows a formatting string to be specified. If none is supplied, the\n    the style-dependent default value, \"%(message)s\", \"{message}\", or\n    \"${message}\", is used.\n\n    The Formatter can be initialized with a format string which makes use of\n    knowledge of the LogRecord attributes - e.g. the default value mentioned\n    above makes use of the fact that the user's message and arguments are pre-\n    formatted into a LogRecord's message attribute. Currently, the useful\n    attributes in a LogRecord are described by:\n\n    %(name)s            Name of the logger (logging channel)\n    %(levelno)s         Numeric logging level for the message (DEBUG, INFO,\n                        WARNING, ERROR, CRITICAL)\n    %(levelname)s       Text logging level for the message (\"DEBUG\", \"INFO\",\n                        \"WARNING\", \"ERROR\", \"CRITICAL\")\n    %(pathname)s        Full pathname of the source file where the logging\n                        call was issued (if available)\n    %(filename)s        Filename portion of pathname\n    %(module)s          Module (name portion of filename)\n    %(lineno)d          Source line number where the logging call was issued\n                        (if available)\n    %(funcName)s        Function name\n    %(created)f         Time when the LogRecord was created (time.time()\n                        return value)\n    %(asctime)s         Textual time when the LogRecord was created\n    %(msecs)d           Millisecond portion of the creation time\n    %(relativeCreated)d Time in milliseconds when the LogRecord was created,\n                        relative to the time the logging module was loaded\n                        (typically at application startup time)\n    %(thread)d          Thread ID (if available)\n    %(threadName)s      Thread name (if available)\n    %(process)d         Process ID (if available)\n    %(message)s         The result of record.getMessage(), computed just as\n                        the record is emitted\n    \"\"\"\n\n    converter = time.localtime\n\n    def __init__(self, fmt=None, datefmt=None, style='%'):\n        \"\"\"\n        Initialize the formatter with specified format strings.\n\n        Initialize the formatter either with the specified format string, or a\n        default as described above. Allow for specialized date formatting with\n        the optional datefmt argument. If datefmt is omitted, you get an\n        ISO8601-like (or RFC 3339-like) format.\n\n        Use a style parameter of '%', '{' or '$' to specify that you want to\n        use one of %-formatting, :meth:`str.format` (``{}``) formatting or\n        :class:`string.Template` formatting in your format string.\n\n        .. versionchanged:: 3.2\n           Added the ``style`` parameter.\n        \"\"\"\n        if style not in _STYLES:\n            raise ValueError('Style must be one of: %s' % ','.join(\n                             _STYLES.keys()))\n        self._style = _STYLES[style][0](fmt)\n        self._fmt = self._style._fmt\n        self.datefmt = datefmt\n\n    default_time_format = '%Y-%m-%d %H:%M:%S'\n    default_msec_format = '%s,%03d'\n\n    def formatTime(self, record, datefmt=None):\n        \"\"\"\n        Return the creation time of the specified LogRecord as formatted text.\n\n        This method should be called from format() by a formatter which\n        wants to make use of a formatted time. This method can be overridden\n        in formatters to provide for any specific requirement, but the\n        basic behaviour is as follows: if datefmt (a string) is specified,\n        it is used with time.strftime() to format the creation time of the\n        record. Otherwise, an ISO8601-like (or RFC 3339-like) format is used.\n        The resulting string is returned. This function uses a user-configurable\n        function to convert the creation time to a tuple. By default,\n        time.localtime() is used; to change this for a particular formatter\n        instance, set the 'converter' attribute to a function with the same\n        signature as time.localtime() or time.gmtime(). To change it for all\n        formatters, for example if you want all logging times to be shown in GMT,\n        set the 'converter' attribute in the Formatter class.\n        \"\"\"\n        ct = self.converter(record.created)\n        if datefmt:\n            s = time.strftime(datefmt, ct)\n        else:\n            t = time.strftime(self.default_time_format, ct)\n            s = self.default_msec_format % (t, record.msecs)\n        return s\n\n    def formatException(self, ei):\n        \"\"\"\n        Format and return the specified exception information as a string.\n\n        This default implementation just uses\n        traceback.print_exception()\n        \"\"\"\n        sio = io.StringIO()\n        tb = ei[2]\n        # See issues #9427, #1553375. Commented out for now.\n        #if getattr(self, 'fullstack', False):\n        #    traceback.print_stack(tb.tb_frame.f_back, file=sio)\n        traceback.print_exception(ei[0], ei[1], tb, None, sio)\n        s = sio.getvalue()\n        sio.close()\n        if s[-1:] == \"\\n\":\n            s = s[:-1]\n        return s\n\n    def usesTime(self):\n        \"\"\"\n        Check if the format uses the creation time of the record.\n        \"\"\"\n        return self._style.usesTime()\n\n    def formatMessage(self, record):\n        return self._style.format(record)\n\n    def formatStack(self, stack_info):\n        \"\"\"\n        This method is provided as an extension point for specialized\n        formatting of stack information.\n\n        The input data is a string as returned from a call to\n        :func:`traceback.print_stack`, but with the last trailing newline\n        removed.\n\n        The base implementation just returns the value passed in.\n        \"\"\"\n        return stack_info\n\n    def format(self, record):\n        \"\"\"\n        Format the specified record as text.\n\n        The record's attribute dictionary is used as the operand to a\n        string formatting operation which yields the returned string.\n        Before formatting the dictionary, a couple of preparatory steps\n        are carried out. The message attribute of the record is computed\n        using LogRecord.getMessage(). If the formatting string uses the\n        time (as determined by a call to usesTime(), formatTime() is\n        called to format the event time. If there is exception information,\n        it is formatted using formatException() and appended to the message.\n        \"\"\"\n        record.message = record.getMessage()\n        if self.usesTime():\n            record.asctime = self.formatTime(record, self.datefmt)\n        s = self.formatMessage(record)\n        if record.exc_info:\n            # Cache the traceback text to avoid converting it multiple times\n            # (it's constant anyway)\n            if not record.exc_text:\n                record.exc_text = self.formatException(record.exc_info)\n        if record.exc_text:\n            if s[-1:] != \"\\n\":\n                s = s + \"\\n\"\n            s = s + record.exc_text\n        if record.stack_info:\n            if s[-1:] != \"\\n\":\n                s = s + \"\\n\"\n            s = s + self.formatStack(record.stack_info)\n        return s\n\n#\n#   The default formatter to use when no other is specified\n#\n_defaultFormatter = Formatter()\n\nclass BufferingFormatter(object):\n    \"\"\"\n    A formatter suitable for formatting a number of records.\n    \"\"\"\n    def __init__(self, linefmt=None):\n        \"\"\"\n        Optionally specify a formatter which will be used to format each\n        individual record.\n        \"\"\"\n        if linefmt:\n            self.linefmt = linefmt\n        else:\n            self.linefmt = _defaultFormatter\n\n    def formatHeader(self, records):\n        \"\"\"\n        Return the header string for the specified records.\n        \"\"\"\n        return \"\"\n\n    def formatFooter(self, records):\n        \"\"\"\n        Return the footer string for the specified records.\n        \"\"\"\n        return \"\"\n\n    def format(self, records):\n        \"\"\"\n        Format the specified records and return the result as a string.\n        \"\"\"\n        rv = \"\"\n        if len(records) > 0:\n            rv = rv + self.formatHeader(records)\n            for record in records:\n                rv = rv + self.linefmt.format(record)\n            rv = rv + self.formatFooter(records)\n        return rv\n\n#---------------------------------------------------------------------------\n#   Filter classes and functions\n#---------------------------------------------------------------------------\n\nclass Filter(object):\n    \"\"\"\n    Filter instances are used to perform arbitrary filtering of LogRecords.\n\n    Loggers and Handlers can optionally use Filter instances to filter\n    records as desired. The base filter class only allows events which are\n    below a certain point in the logger hierarchy. For example, a filter\n    initialized with \"A.B\" will allow events logged by loggers \"A.B\",\n    \"A.B.C\", \"A.B.C.D\", \"A.B.D\" etc. but not \"A.BB\", \"B.A.B\" etc. If\n    initialized with the empty string, all events are passed.\n    \"\"\"\n    def __init__(self, name=''):\n        \"\"\"\n        Initialize a filter.\n\n        Initialize with the name of the logger which, together with its\n        children, will have its events allowed through the filter. If no\n        name is specified, allow every event.\n        \"\"\"\n        self.name = name\n        self.nlen = len(name)\n\n    def filter(self, record):\n        \"\"\"\n        Determine if the specified record is to be logged.\n\n        Is the specified record to be logged? Returns 0 for no, nonzero for\n        yes. If deemed appropriate, the record may be modified in-place.\n        \"\"\"\n        if self.nlen == 0:\n            return True\n        elif self.name == record.name:\n            return True\n        elif record.name.find(self.name, 0, self.nlen) != 0:\n            return False\n        return (record.name[self.nlen] == \".\")\n\nclass Filterer(object):\n    \"\"\"\n    A base class for loggers and handlers which allows them to share\n    common code.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initialize the list of filters to be an empty list.\n        \"\"\"\n        self.filters = []\n\n    def addFilter(self, filter):\n        \"\"\"\n        Add the specified filter to this handler.\n        \"\"\"\n        if not (filter in self.filters):\n            self.filters.append(filter)\n\n    def removeFilter(self, filter):\n        \"\"\"\n        Remove the specified filter from this handler.\n        \"\"\"\n        if filter in self.filters:\n            self.filters.remove(filter)\n\n    def filter(self, record):\n        \"\"\"\n        Determine if a record is loggable by consulting all the filters.\n\n        The default is to allow the record to be logged; any filter can veto\n        this and the record is then dropped. Returns a zero value if a record\n        is to be dropped, else non-zero.\n\n        .. versionchanged:: 3.2\n\n           Allow filters to be just callables.\n        \"\"\"\n        rv = True\n        for f in self.filters:\n            if hasattr(f, 'filter'):\n                result = f.filter(record)\n            else:\n                result = f(record) # assume callable - will raise if not\n            if not result:\n                rv = False\n                break\n        return rv\n\n#---------------------------------------------------------------------------\n#   Handler classes and functions\n#---------------------------------------------------------------------------\n\n_handlers = weakref.WeakValueDictionary()  #map of handler names to handlers\n_handlerList = [] # added to allow handlers to be removed in reverse of order initialized\n\ndef _removeHandlerRef(wr):\n    \"\"\"\n    Remove a handler reference from the internal cleanup list.\n    \"\"\"\n    # This function can be called during module teardown, when globals are\n    # set to None. It can also be called from another thread. So we need to\n    # pre-emptively grab the necessary globals and check if they're None,\n    # to prevent race conditions and failures during interpreter shutdown.\n    acquire, release, handlers = _acquireLock, _releaseLock, _handlerList\n    if acquire and release and handlers:\n        acquire()\n        try:\n            if wr in handlers:\n                handlers.remove(wr)\n        finally:\n            release()\n\ndef _addHandlerRef(handler):\n    \"\"\"\n    Add a handler to the internal cleanup list using a weak reference.\n    \"\"\"\n    _acquireLock()\n    try:\n        _handlerList.append(weakref.ref(handler, _removeHandlerRef))\n    finally:\n        _releaseLock()\n\nclass Handler(Filterer):\n    \"\"\"\n    Handler instances dispatch logging events to specific destinations.\n\n    The base handler class. Acts as a placeholder which defines the Handler\n    interface. Handlers can optionally use Formatter instances to format\n    records as desired. By default, no formatter is specified; in this case,\n    the 'raw' message as determined by record.message is logged.\n    \"\"\"\n    def __init__(self, level=NOTSET):\n        \"\"\"\n        Initializes the instance - basically setting the formatter to None\n        and the filter list to empty.\n        \"\"\"\n        Filterer.__init__(self)\n        self._name = None\n        self.level = _checkLevel(level)\n        self.formatter = None\n        # Add the handler to the global _handlerList (for cleanup on shutdown)\n        _addHandlerRef(self)\n        self.createLock()\n\n    def get_name(self):\n        return self._name\n\n    def set_name(self, name):\n        _acquireLock()\n        try:\n            if self._name in _handlers:\n                del _handlers[self._name]\n            self._name = name\n            if name:\n                _handlers[name] = self\n        finally:\n            _releaseLock()\n\n    name = property(get_name, set_name)\n\n    def createLock(self):\n        \"\"\"\n        Acquire a thread lock for serializing access to the underlying I/O.\n        \"\"\"\n        self.lock = threading.RLock()\n        _register_at_fork_reinit_lock(self)\n\n    def acquire(self):\n        \"\"\"\n        Acquire the I/O thread lock.\n        \"\"\"\n        if self.lock:\n            self.lock.acquire()\n\n    def release(self):\n        \"\"\"\n        Release the I/O thread lock.\n        \"\"\"\n        if self.lock:\n            self.lock.release()\n\n    def setLevel(self, level):\n        \"\"\"\n        Set the logging level of this handler.  level must be an int or a str.\n        \"\"\"\n        self.level = _checkLevel(level)\n\n    def format(self, record):\n        \"\"\"\n        Format the specified record.\n\n        If a formatter is set, use it. Otherwise, use the default formatter\n        for the module.\n        \"\"\"\n        if self.formatter:\n            fmt = self.formatter\n        else:\n            fmt = _defaultFormatter\n        return fmt.format(record)\n\n    def emit(self, record):\n        \"\"\"\n        Do whatever it takes to actually log the specified logging record.\n\n        This version is intended to be implemented by subclasses and so\n        raises a NotImplementedError.\n        \"\"\"\n        raise NotImplementedError('emit must be implemented '\n                                  'by Handler subclasses')\n\n    def handle(self, record):\n        \"\"\"\n        Conditionally emit the specified logging record.\n\n        Emission depends on filters which may have been added to the handler.\n        Wrap the actual emission of the record with acquisition/release of\n        the I/O thread lock. Returns whether the filter passed the record for\n        emission.\n        \"\"\"\n        rv = self.filter(record)\n        if rv:\n            self.acquire()\n            try:\n                self.emit(record)\n            finally:\n                self.release()\n        return rv\n\n    def setFormatter(self, fmt):\n        \"\"\"\n        Set the formatter for this handler.\n        \"\"\"\n        self.formatter = fmt\n\n    def flush(self):\n        \"\"\"\n        Ensure all logging output has been flushed.\n\n        This version does nothing and is intended to be implemented by\n        subclasses.\n        \"\"\"\n        pass\n\n    def close(self):\n        \"\"\"\n        Tidy up any resources used by the handler.\n\n        This version removes the handler from an internal map of handlers,\n        _handlers, which is used for handler lookup by name. Subclasses\n        should ensure that this gets called from overridden close()\n        methods.\n        \"\"\"\n        #get the module data lock, as we're updating a shared structure.\n        _acquireLock()\n        try:    #unlikely to raise an exception, but you never know...\n            if self._name and self._name in _handlers:\n                del _handlers[self._name]\n        finally:\n            _releaseLock()\n\n    def handleError(self, record):\n        \"\"\"\n        Handle errors which occur during an emit() call.\n\n        This method should be called from handlers when an exception is\n        encountered during an emit() call. If raiseExceptions is false,\n        exceptions get silently ignored. This is what is mostly wanted\n        for a logging system - most users will not care about errors in\n        the logging system, they are more interested in application errors.\n        You could, however, replace this with a custom handler if you wish.\n        The record which was being processed is passed in to this method.\n        \"\"\"\n        if raiseExceptions and sys.stderr:  # see issue 13807\n            t, v, tb = sys.exc_info()\n            try:\n                sys.stderr.write('--- Logging error ---\\n')\n                traceback.print_exception(t, v, tb, None, sys.stderr)\n                sys.stderr.write('Call stack:\\n')\n                # Walk the stack frame up until we're out of logging,\n                # so as to print the calling context.\n                frame = tb.tb_frame\n                while (frame and os.path.dirname(frame.f_code.co_filename) ==\n                       __path__[0]):\n                    frame = frame.f_back\n                if frame:\n                    traceback.print_stack(frame, file=sys.stderr)\n                else:\n                    # couldn't find the right stack frame, for some reason\n                    sys.stderr.write('Logged from file %s, line %s\\n' % (\n                                     record.filename, record.lineno))\n                # Issue 18671: output logging message and arguments\n                try:\n                    sys.stderr.write('Message: %r\\n'\n                                     'Arguments: %s\\n' % (record.msg,\n                                                          record.args))\n                except RecursionError:  # See issue 36272\n                    raise\n                except Exception:\n                    sys.stderr.write('Unable to print the message and arguments'\n                                     ' - possible formatting error.\\nUse the'\n                                     ' traceback above to help find the error.\\n'\n                                    )\n            except OSError: #pragma: no cover\n                pass    # see issue 5971\n            finally:\n                del t, v, tb\n\n    def __repr__(self):\n        level = getLevelName(self.level)\n        return '<%s (%s)>' % (self.__class__.__name__, level)\n\nclass StreamHandler(Handler):\n    \"\"\"\n    A handler class which writes logging records, appropriately formatted,\n    to a stream. Note that this class does not close the stream, as\n    sys.stdout or sys.stderr may be used.\n    \"\"\"\n\n    terminator = '\\n'\n\n    def __init__(self, stream=None):\n        \"\"\"\n        Initialize the handler.\n\n        If stream is not specified, sys.stderr is used.\n        \"\"\"\n        Handler.__init__(self)\n        if stream is None:\n            stream = sys.stderr\n        self.stream = stream\n\n    def flush(self):\n        \"\"\"\n        Flushes the stream.\n        \"\"\"\n        self.acquire()\n        try:\n            if self.stream and hasattr(self.stream, \"flush\"):\n                self.stream.flush()\n        finally:\n            self.release()\n\n    def emit(self, record):\n        \"\"\"\n        Emit a record.\n\n        If a formatter is specified, it is used to format the record.\n        The record is then written to the stream with a trailing newline.  If\n        exception information is present, it is formatted using\n        traceback.print_exception and appended to the stream.  If the stream\n        has an 'encoding' attribute, it is used to determine how to do the\n        output to the stream.\n        \"\"\"\n        try:\n            msg = self.format(record)\n            stream = self.stream\n            # issue 35046: merged two stream.writes into one.\n            stream.write(msg + self.terminator)\n            self.flush()\n        except RecursionError:  # See issue 36272\n            raise\n        except Exception:\n            self.handleError(record)\n\n    def setStream(self, stream):\n        \"\"\"\n        Sets the StreamHandler's stream to the specified value,\n        if it is different.\n\n        Returns the old stream, if the stream was changed, or None\n        if it wasn't.\n        \"\"\"\n        if stream is self.stream:\n            result = None\n        else:\n            result = self.stream\n            self.acquire()\n            try:\n                self.flush()\n                self.stream = stream\n            finally:\n                self.release()\n        return result\n\n    def __repr__(self):\n        level = getLevelName(self.level)\n        name = getattr(self.stream, 'name', '')\n        #  bpo-36015: name can be an int\n        name = str(name)\n        if name:\n            name += ' '\n        return '<%s %s(%s)>' % (self.__class__.__name__, name, level)\n\n\nclass FileHandler(StreamHandler):\n    \"\"\"\n    A handler class which writes formatted logging records to disk files.\n    \"\"\"\n    def __init__(self, filename, mode='a', encoding=None, delay=False):\n        \"\"\"\n        Open the specified file and use it as the stream for logging.\n        \"\"\"\n        # Issue #27493: add support for Path objects to be passed in\n        filename = os.fspath(filename)\n        #keep the absolute path, otherwise derived classes which use this\n        #may come a cropper when the current directory changes\n        self.baseFilename = os.path.abspath(filename)\n        self.mode = mode\n        self.encoding = encoding\n        self.delay = delay\n        if delay:\n            #We don't open the stream, but we still need to call the\n            #Handler constructor to set level, formatter, lock etc.\n            Handler.__init__(self)\n            self.stream = None\n        else:\n            StreamHandler.__init__(self, self._open())\n\n    def close(self):\n        \"\"\"\n        Closes the stream.\n        \"\"\"\n        self.acquire()\n        try:\n            try:\n                if self.stream:\n                    try:\n                        self.flush()\n                    finally:\n                        stream = self.stream\n                        self.stream = None\n                        if hasattr(stream, \"close\"):\n                            stream.close()\n            finally:\n                # Issue #19523: call unconditionally to\n                # prevent a handler leak when delay is set\n                StreamHandler.close(self)\n        finally:\n            self.release()\n\n    def _open(self):\n        \"\"\"\n        Open the current base file with the (original) mode and encoding.\n        Return the resulting stream.\n        \"\"\"\n        return open(self.baseFilename, self.mode, encoding=self.encoding)\n\n    def emit(self, record):\n        \"\"\"\n        Emit a record.\n\n        If the stream was not opened because 'delay' was specified in the\n        constructor, open it before calling the superclass's emit.\n        \"\"\"\n        if self.stream is None:\n            self.stream = self._open()\n        StreamHandler.emit(self, record)\n\n    def __repr__(self):\n        level = getLevelName(self.level)\n        return '<%s %s (%s)>' % (self.__class__.__name__, self.baseFilename, level)\n\n\nclass _StderrHandler(StreamHandler):\n    \"\"\"\n    This class is like a StreamHandler using sys.stderr, but always uses\n    whatever sys.stderr is currently set to rather than the value of\n    sys.stderr at handler construction time.\n    \"\"\"\n    def __init__(self, level=NOTSET):\n        \"\"\"\n        Initialize the handler.\n        \"\"\"\n        Handler.__init__(self, level)\n\n    @property\n    def stream(self):\n        return sys.stderr\n\n\n_defaultLastResort = _StderrHandler(WARNING)\nlastResort = _defaultLastResort\n\n#---------------------------------------------------------------------------\n#   Manager classes and functions\n#---------------------------------------------------------------------------\n\nclass PlaceHolder(object):\n    \"\"\"\n    PlaceHolder instances are used in the Manager logger hierarchy to take\n    the place of nodes for which no loggers have been defined. This class is\n    intended for internal use only and not as part of the public API.\n    \"\"\"\n    def __init__(self, alogger):\n        \"\"\"\n        Initialize with the specified logger being a child of this placeholder.\n        \"\"\"\n        self.loggerMap = { alogger : None }\n\n    def append(self, alogger):\n        \"\"\"\n        Add the specified logger as a child of this placeholder.\n        \"\"\"\n        if alogger not in self.loggerMap:\n            self.loggerMap[alogger] = None\n\n#\n#   Determine which class to use when instantiating loggers.\n#\n\ndef setLoggerClass(klass):\n    \"\"\"\n    Set the class to be used when instantiating a logger. The class should\n    define __init__() such that only a name argument is required, and the\n    __init__() should call Logger.__init__()\n    \"\"\"\n    if klass != Logger:\n        if not issubclass(klass, Logger):\n            raise TypeError(\"logger not derived from logging.Logger: \"\n                            + klass.__name__)\n    global _loggerClass\n    _loggerClass = klass\n\ndef getLoggerClass():\n    \"\"\"\n    Return the class to be used when instantiating a logger.\n    \"\"\"\n    return _loggerClass\n\nclass Manager(object):\n    \"\"\"\n    There is [under normal circumstances] just one Manager instance, which\n    holds the hierarchy of loggers.\n    \"\"\"\n    def __init__(self, rootnode):\n        \"\"\"\n        Initialize the manager with the root node of the logger hierarchy.\n        \"\"\"\n        self.root = rootnode\n        self.disable = 0\n        self.emittedNoHandlerWarning = False\n        self.loggerDict = {}\n        self.loggerClass = None\n        self.logRecordFactory = None\n\n    def getLogger(self, name):\n        \"\"\"\n        Get a logger with the specified name (channel name), creating it\n        if it doesn't yet exist. This name is a dot-separated hierarchical\n        name, such as \"a\", \"a.b\", \"a.b.c\" or similar.\n\n        If a PlaceHolder existed for the specified name [i.e. the logger\n        didn't exist but a child of it did], replace it with the created\n        logger and fix up the parent/child references which pointed to the\n        placeholder to now point to the logger.\n        \"\"\"\n        rv = None\n        if not isinstance(name, str):\n            raise TypeError('A logger name must be a string')\n        _acquireLock()\n        try:\n            if name in self.loggerDict:\n                rv = self.loggerDict[name]\n                if isinstance(rv, PlaceHolder):\n                    ph = rv\n                    rv = (self.loggerClass or _loggerClass)(name)\n                    rv.manager = self\n                    self.loggerDict[name] = rv\n                    self._fixupChildren(ph, rv)\n                    self._fixupParents(rv)\n            else:\n                rv = (self.loggerClass or _loggerClass)(name)\n                rv.manager = self\n                self.loggerDict[name] = rv\n                self._fixupParents(rv)\n        finally:\n            _releaseLock()\n        return rv\n\n    def setLoggerClass(self, klass):\n        \"\"\"\n        Set the class to be used when instantiating a logger with this Manager.\n        \"\"\"\n        if klass != Logger:\n            if not issubclass(klass, Logger):\n                raise TypeError(\"logger not derived from logging.Logger: \"\n                                + klass.__name__)\n        self.loggerClass = klass\n\n    def setLogRecordFactory(self, factory):\n        \"\"\"\n        Set the factory to be used when instantiating a log record with this\n        Manager.\n        \"\"\"\n        self.logRecordFactory = factory\n\n    def _fixupParents(self, alogger):\n        \"\"\"\n        Ensure that there are either loggers or placeholders all the way\n        from the specified logger to the root of the logger hierarchy.\n        \"\"\"\n        name = alogger.name\n        i = name.rfind(\".\")\n        rv = None\n        while (i > 0) and not rv:\n            substr = name[:i]\n            if substr not in self.loggerDict:\n                self.loggerDict[substr] = PlaceHolder(alogger)\n            else:\n                obj = self.loggerDict[substr]\n                if isinstance(obj, Logger):\n                    rv = obj\n                else:\n                    assert isinstance(obj, PlaceHolder)\n                    obj.append(alogger)\n            i = name.rfind(\".\", 0, i - 1)\n        if not rv:\n            rv = self.root\n        alogger.parent = rv\n\n    def _fixupChildren(self, ph, alogger):\n        \"\"\"\n        Ensure that children of the placeholder ph are connected to the\n        specified logger.\n        \"\"\"\n        name = alogger.name\n        namelen = len(name)\n        for c in ph.loggerMap.keys():\n            #The if means ... if not c.parent.name.startswith(nm)\n            if c.parent.name[:namelen] != name:\n                alogger.parent = c.parent\n                c.parent = alogger\n\n    def _clear_cache(self):\n        \"\"\"\n        Clear the cache for all loggers in loggerDict\n        Called when level changes are made\n        \"\"\"\n\n        _acquireLock()\n        for logger in self.loggerDict.values():\n            if isinstance(logger, Logger):\n                logger._cache.clear()\n        self.root._cache.clear()\n        _releaseLock()\n\n#---------------------------------------------------------------------------\n#   Logger classes and functions\n#---------------------------------------------------------------------------\n\nclass Logger(Filterer):\n    \"\"\"\n    Instances of the Logger class represent a single logging channel. A\n    \"logging channel\" indicates an area of an application. Exactly how an\n    \"area\" is defined is up to the application developer. Since an\n    application can have any number of areas, logging channels are identified\n    by a unique string. Application areas can be nested (e.g. an area\n    of \"input processing\" might include sub-areas \"read CSV files\", \"read\n    XLS files\" and \"read Gnumeric files\"). To cater for this natural nesting,\n    channel names are organized into a namespace hierarchy where levels are\n    separated by periods, much like the Java or Python package namespace. So\n    in the instance given above, channel names might be \"input\" for the upper\n    level, and \"input.csv\", \"input.xls\" and \"input.gnu\" for the sub-levels.\n    There is no arbitrary limit to the depth of nesting.\n    \"\"\"\n    def __init__(self, name, level=NOTSET):\n        \"\"\"\n        Initialize the logger with a name and an optional level.\n        \"\"\"\n        Filterer.__init__(self)\n        self.name = name\n        self.level = _checkLevel(level)\n        self.parent = None\n        self.propagate = True\n        self.handlers = []\n        self.disabled = False\n        self._cache = {}\n\n    def setLevel(self, level):\n        \"\"\"\n        Set the logging level of this logger.  level must be an int or a str.\n        \"\"\"\n        self.level = _checkLevel(level)\n        self.manager._clear_cache()\n\n    def debug(self, msg, *args, **kwargs):\n        \"\"\"\n        Log 'msg % args' with severity 'DEBUG'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)\n        \"\"\"\n        if self.isEnabledFor(DEBUG):\n            self._log(DEBUG, msg, args, **kwargs)\n\n    def info(self, msg, *args, **kwargs):\n        \"\"\"\n        Log 'msg % args' with severity 'INFO'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)\n        \"\"\"\n        if self.isEnabledFor(INFO):\n            self._log(INFO, msg, args, **kwargs)\n\n    def warning(self, msg, *args, **kwargs):\n        \"\"\"\n        Log 'msg % args' with severity 'WARNING'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)\n        \"\"\"\n        if self.isEnabledFor(WARNING):\n            self._log(WARNING, msg, args, **kwargs)\n\n    def warn(self, msg, *args, **kwargs):\n        warnings.warn(\"The 'warn' method is deprecated, \"\n            \"use 'warning' instead\", DeprecationWarning, 2)\n        self.warning(msg, *args, **kwargs)\n\n    def error(self, msg, *args, **kwargs):\n        \"\"\"\n        Log 'msg % args' with severity 'ERROR'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)\n        \"\"\"\n        if self.isEnabledFor(ERROR):\n            self._log(ERROR, msg, args, **kwargs)\n\n    def exception(self, msg, *args, exc_info=True, **kwargs):\n        \"\"\"\n        Convenience method for logging an ERROR with exception information.\n        \"\"\"\n        self.error(msg, *args, exc_info=exc_info, **kwargs)\n\n    def critical(self, msg, *args, **kwargs):\n        \"\"\"\n        Log 'msg % args' with severity 'CRITICAL'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.critical(\"Houston, we have a %s\", \"major disaster\", exc_info=1)\n        \"\"\"\n        if self.isEnabledFor(CRITICAL):\n            self._log(CRITICAL, msg, args, **kwargs)\n\n    fatal = critical\n\n    def log(self, level, msg, *args, **kwargs):\n        \"\"\"\n        Log 'msg % args' with the integer severity 'level'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.log(level, \"We have a %s\", \"mysterious problem\", exc_info=1)\n        \"\"\"\n        if not isinstance(level, int):\n            if raiseExceptions:\n                raise TypeError(\"level must be an integer\")\n            else:\n                return\n        if self.isEnabledFor(level):\n            self._log(level, msg, args, **kwargs)\n\n    def findCaller(self, stack_info=False):\n        \"\"\"\n        Find the stack frame of the caller so that we can note the source\n        file name, line number and function name.\n        \"\"\"\n        f = currentframe()\n        #On some versions of IronPython, currentframe() returns None if\n        #IronPython isn't run with -X:Frames.\n        if f is not None:\n            f = f.f_back\n        rv = \"(unknown file)\", 0, \"(unknown function)\", None\n        while hasattr(f, \"f_code\"):\n            co = f.f_code\n            filename = os.path.normcase(co.co_filename)\n            if filename == _srcfile:\n                f = f.f_back\n                continue\n            sinfo = None\n            if stack_info:\n                sio = io.StringIO()\n                sio.write('Stack (most recent call last):\\n')\n                traceback.print_stack(f, file=sio)\n                sinfo = sio.getvalue()\n                if sinfo[-1] == '\\n':\n                    sinfo = sinfo[:-1]\n                sio.close()\n            rv = (co.co_filename, f.f_lineno, co.co_name, sinfo)\n            break\n        return rv\n\n    def makeRecord(self, name, level, fn, lno, msg, args, exc_info,\n                   func=None, extra=None, sinfo=None):\n        \"\"\"\n        A factory method which can be overridden in subclasses to create\n        specialized LogRecords.\n        \"\"\"\n        rv = _logRecordFactory(name, level, fn, lno, msg, args, exc_info, func,\n                             sinfo)\n        if extra is not None:\n            for key in extra:\n                if (key in [\"message\", \"asctime\"]) or (key in rv.__dict__):\n                    raise KeyError(\"Attempt to overwrite %r in LogRecord\" % key)\n                rv.__dict__[key] = extra[key]\n        return rv\n\n    def _log(self, level, msg, args, exc_info=None, extra=None, stack_info=False):\n        \"\"\"\n        Low-level logging routine which creates a LogRecord and then calls\n        all the handlers of this logger to handle the record.\n        \"\"\"\n        sinfo = None\n        if _srcfile:\n            #IronPython doesn't track Python frames, so findCaller raises an\n            #exception on some versions of IronPython. We trap it here so that\n            #IronPython can use logging.\n            try:\n                fn, lno, func, sinfo = self.findCaller(stack_info)\n            except ValueError: # pragma: no cover\n                fn, lno, func = \"(unknown file)\", 0, \"(unknown function)\"\n        else: # pragma: no cover\n            fn, lno, func = \"(unknown file)\", 0, \"(unknown function)\"\n        if exc_info:\n            if isinstance(exc_info, BaseException):\n                exc_info = (type(exc_info), exc_info, exc_info.__traceback__)\n            elif not isinstance(exc_info, tuple):\n                exc_info = sys.exc_info()\n        record = self.makeRecord(self.name, level, fn, lno, msg, args,\n                                 exc_info, func, extra, sinfo)\n        self.handle(record)\n\n    def handle(self, record):\n        \"\"\"\n        Call the handlers for the specified record.\n\n        This method is used for unpickled records received from a socket, as\n        well as those created locally. Logger-level filtering is applied.\n        \"\"\"\n        if (not self.disabled) and self.filter(record):\n            self.callHandlers(record)\n\n    def addHandler(self, hdlr):\n        \"\"\"\n        Add the specified handler to this logger.\n        \"\"\"\n        _acquireLock()\n        try:\n            if not (hdlr in self.handlers):\n                self.handlers.append(hdlr)\n        finally:\n            _releaseLock()\n\n    def removeHandler(self, hdlr):\n        \"\"\"\n        Remove the specified handler from this logger.\n        \"\"\"\n        _acquireLock()\n        try:\n            if hdlr in self.handlers:\n                self.handlers.remove(hdlr)\n        finally:\n            _releaseLock()\n\n    def hasHandlers(self):\n        \"\"\"\n        See if this logger has any handlers configured.\n\n        Loop through all handlers for this logger and its parents in the\n        logger hierarchy. Return True if a handler was found, else False.\n        Stop searching up the hierarchy whenever a logger with the \"propagate\"\n        attribute set to zero is found - that will be the last logger which\n        is checked for the existence of handlers.\n        \"\"\"\n        c = self\n        rv = False\n        while c:\n            if c.handlers:\n                rv = True\n                break\n            if not c.propagate:\n                break\n            else:\n                c = c.parent\n        return rv\n\n    def callHandlers(self, record):\n        \"\"\"\n        Pass a record to all relevant handlers.\n\n        Loop through all handlers for this logger and its parents in the\n        logger hierarchy. If no handler was found, output a one-off error\n        message to sys.stderr. Stop searching up the hierarchy whenever a\n        logger with the \"propagate\" attribute set to zero is found - that\n        will be the last logger whose handlers are called.\n        \"\"\"\n        c = self\n        found = 0\n        while c:\n            for hdlr in c.handlers:\n                found = found + 1\n                if record.levelno >= hdlr.level:\n                    hdlr.handle(record)\n            if not c.propagate:\n                c = None    #break out\n            else:\n                c = c.parent\n        if (found == 0):\n            if lastResort:\n                if record.levelno >= lastResort.level:\n                    lastResort.handle(record)\n            elif raiseExceptions and not self.manager.emittedNoHandlerWarning:\n                sys.stderr.write(\"No handlers could be found for logger\"\n                                 \" \\\"%s\\\"\\n\" % self.name)\n                self.manager.emittedNoHandlerWarning = True\n\n    def getEffectiveLevel(self):\n        \"\"\"\n        Get the effective level for this logger.\n\n        Loop through this logger and its parents in the logger hierarchy,\n        looking for a non-zero logging level. Return the first one found.\n        \"\"\"\n        logger = self\n        while logger:\n            if logger.level:\n                return logger.level\n            logger = logger.parent\n        return NOTSET\n\n    def isEnabledFor(self, level):\n        \"\"\"\n        Is this logger enabled for level 'level'?\n        \"\"\"\n        try:\n            return self._cache[level]\n        except KeyError:\n            _acquireLock()\n            if self.manager.disable >= level:\n                is_enabled = self._cache[level] = False\n            else:\n                is_enabled = self._cache[level] = level >= self.getEffectiveLevel()\n            _releaseLock()\n\n            return is_enabled\n\n    def getChild(self, suffix):\n        \"\"\"\n        Get a logger which is a descendant to this one.\n\n        This is a convenience method, such that\n\n        logging.getLogger('abc').getChild('def.ghi')\n\n        is the same as\n\n        logging.getLogger('abc.def.ghi')\n\n        It's useful, for example, when the parent logger is named using\n        __name__ rather than a literal string.\n        \"\"\"\n        if self.root is not self:\n            suffix = '.'.join((self.name, suffix))\n        return self.manager.getLogger(suffix)\n\n    def __repr__(self):\n        level = getLevelName(self.getEffectiveLevel())\n        return '<%s %s (%s)>' % (self.__class__.__name__, self.name, level)\n\n    def __reduce__(self):\n        # In general, only the root logger will not be accessible via its name.\n        # However, the root logger's class has its own __reduce__ method.\n        if getLogger(self.name) is not self:\n            import pickle\n            raise pickle.PicklingError('logger cannot be pickled')\n        return getLogger, (self.name,)\n\n\nclass RootLogger(Logger):\n    \"\"\"\n    A root logger is not that different to any other logger, except that\n    it must have a logging level and there is only one instance of it in\n    the hierarchy.\n    \"\"\"\n    def __init__(self, level):\n        \"\"\"\n        Initialize the logger with the name \"root\".\n        \"\"\"\n        Logger.__init__(self, \"root\", level)\n\n    def __reduce__(self):\n        return getLogger, ()\n\n_loggerClass = Logger\n\nclass LoggerAdapter(object):\n    \"\"\"\n    An adapter for loggers which makes it easier to specify contextual\n    information in logging output.\n    \"\"\"\n\n    def __init__(self, logger, extra):\n        \"\"\"\n        Initialize the adapter with a logger and a dict-like object which\n        provides contextual information. This constructor signature allows\n        easy stacking of LoggerAdapters, if so desired.\n\n        You can effectively pass keyword arguments as shown in the\n        following example:\n\n        adapter = LoggerAdapter(someLogger, dict(p1=v1, p2=\"v2\"))\n        \"\"\"\n        self.logger = logger\n        self.extra = extra\n\n    def process(self, msg, kwargs):\n        \"\"\"\n        Process the logging message and keyword arguments passed in to\n        a logging call to insert contextual information. You can either\n        manipulate the message itself, the keyword args or both. Return\n        the message and kwargs modified (or not) to suit your needs.\n\n        Normally, you'll only need to override this one method in a\n        LoggerAdapter subclass for your specific needs.\n        \"\"\"\n        kwargs[\"extra\"] = self.extra\n        return msg, kwargs\n\n    #\n    # Boilerplate convenience methods\n    #\n    def debug(self, msg, *args, **kwargs):\n        \"\"\"\n        Delegate a debug call to the underlying logger.\n        \"\"\"\n        self.log(DEBUG, msg, *args, **kwargs)\n\n    def info(self, msg, *args, **kwargs):\n        \"\"\"\n        Delegate an info call to the underlying logger.\n        \"\"\"\n        self.log(INFO, msg, *args, **kwargs)\n\n    def warning(self, msg, *args, **kwargs):\n        \"\"\"\n        Delegate a warning call to the underlying logger.\n        \"\"\"\n        self.log(WARNING, msg, *args, **kwargs)\n\n    def warn(self, msg, *args, **kwargs):\n        warnings.warn(\"The 'warn' method is deprecated, \"\n            \"use 'warning' instead\", DeprecationWarning, 2)\n        self.warning(msg, *args, **kwargs)\n\n    def error(self, msg, *args, **kwargs):\n        \"\"\"\n        Delegate an error call to the underlying logger.\n        \"\"\"\n        self.log(ERROR, msg, *args, **kwargs)\n\n    def exception(self, msg, *args, exc_info=True, **kwargs):\n        \"\"\"\n        Delegate an exception call to the underlying logger.\n        \"\"\"\n        self.log(ERROR, msg, *args, exc_info=exc_info, **kwargs)\n\n    def critical(self, msg, *args, **kwargs):\n        \"\"\"\n        Delegate a critical call to the underlying logger.\n        \"\"\"\n        self.log(CRITICAL, msg, *args, **kwargs)\n\n    def log(self, level, msg, *args, **kwargs):\n        \"\"\"\n        Delegate a log call to the underlying logger, after adding\n        contextual information from this adapter instance.\n        \"\"\"\n        if self.isEnabledFor(level):\n            msg, kwargs = self.process(msg, kwargs)\n            self.logger.log(level, msg, *args, **kwargs)\n\n    def isEnabledFor(self, level):\n        \"\"\"\n        Is this logger enabled for level 'level'?\n        \"\"\"\n        return self.logger.isEnabledFor(level)\n\n    def setLevel(self, level):\n        \"\"\"\n        Set the specified level on the underlying logger.\n        \"\"\"\n        self.logger.setLevel(level)\n\n    def getEffectiveLevel(self):\n        \"\"\"\n        Get the effective level for the underlying logger.\n        \"\"\"\n        return self.logger.getEffectiveLevel()\n\n    def hasHandlers(self):\n        \"\"\"\n        See if the underlying logger has any handlers.\n        \"\"\"\n        return self.logger.hasHandlers()\n\n    def _log(self, level, msg, args, exc_info=None, extra=None, stack_info=False):\n        \"\"\"\n        Low-level log implementation, proxied to allow nested logger adapters.\n        \"\"\"\n        return self.logger._log(\n            level,\n            msg,\n            args,\n            exc_info=exc_info,\n            extra=extra,\n            stack_info=stack_info,\n        )\n\n    @property\n    def manager(self):\n        return self.logger.manager\n\n    @manager.setter\n    def manager(self, value):\n        self.logger.manager = value\n\n    @property\n    def name(self):\n        return self.logger.name\n\n    def __repr__(self):\n        logger = self.logger\n        level = getLevelName(logger.getEffectiveLevel())\n        return '<%s %s (%s)>' % (self.__class__.__name__, logger.name, level)\n\nroot = RootLogger(WARNING)\nLogger.root = root\nLogger.manager = Manager(Logger.root)\n\n#---------------------------------------------------------------------------\n# Configuration classes and functions\n#---------------------------------------------------------------------------\n\ndef basicConfig(**kwargs):\n    \"\"\"\n    Do basic configuration for the logging system.\n\n    This function does nothing if the root logger already has handlers\n    configured. It is a convenience method intended for use by simple scripts\n    to do one-shot configuration of the logging package.\n\n    The default behaviour is to create a StreamHandler which writes to\n    sys.stderr, set a formatter using the BASIC_FORMAT format string, and\n    add the handler to the root logger.\n\n    A number of optional keyword arguments may be specified, which can alter\n    the default behaviour.\n\n    filename  Specifies that a FileHandler be created, using the specified\n              filename, rather than a StreamHandler.\n    filemode  Specifies the mode to open the file, if filename is specified\n              (if filemode is unspecified, it defaults to 'a').\n    format    Use the specified format string for the handler.\n    datefmt   Use the specified date/time format.\n    style     If a format string is specified, use this to specify the\n              type of format string (possible values '%', '{', '$', for\n              %-formatting, :meth:`str.format` and :class:`string.Template`\n              - defaults to '%').\n    level     Set the root logger level to the specified level.\n    stream    Use the specified stream to initialize the StreamHandler. Note\n              that this argument is incompatible with 'filename' - if both\n              are present, 'stream' is ignored.\n    handlers  If specified, this should be an iterable of already created\n              handlers, which will be added to the root handler. Any handler\n              in the list which does not have a formatter assigned will be\n              assigned the formatter created in this function.\n\n    Note that you could specify a stream created using open(filename, mode)\n    rather than passing the filename and mode in. However, it should be\n    remembered that StreamHandler does not close its stream (since it may be\n    using sys.stdout or sys.stderr), whereas FileHandler closes its stream\n    when the handler is closed.\n\n    .. versionchanged:: 3.2\n       Added the ``style`` parameter.\n\n    .. versionchanged:: 3.3\n       Added the ``handlers`` parameter. A ``ValueError`` is now thrown for\n       incompatible arguments (e.g. ``handlers`` specified together with\n       ``filename``/``filemode``, or ``filename``/``filemode`` specified\n       together with ``stream``, or ``handlers`` specified together with\n       ``stream``.\n    \"\"\"\n    # Add thread safety in case someone mistakenly calls\n    # basicConfig() from multiple threads\n    _acquireLock()\n    try:\n        if len(root.handlers) == 0:\n            handlers = kwargs.pop(\"handlers\", None)\n            if handlers is None:\n                if \"stream\" in kwargs and \"filename\" in kwargs:\n                    raise ValueError(\"'stream' and 'filename' should not be \"\n                                     \"specified together\")\n            else:\n                if \"stream\" in kwargs or \"filename\" in kwargs:\n                    raise ValueError(\"'stream' or 'filename' should not be \"\n                                     \"specified together with 'handlers'\")\n            if handlers is None:\n                filename = kwargs.pop(\"filename\", None)\n                mode = kwargs.pop(\"filemode\", 'a')\n                if filename:\n                    h = FileHandler(filename, mode)\n                else:\n                    stream = kwargs.pop(\"stream\", None)\n                    h = StreamHandler(stream)\n                handlers = [h]\n            dfs = kwargs.pop(\"datefmt\", None)\n            style = kwargs.pop(\"style\", '%')\n            if style not in _STYLES:\n                raise ValueError('Style must be one of: %s' % ','.join(\n                                 _STYLES.keys()))\n            fs = kwargs.pop(\"format\", _STYLES[style][1])\n            fmt = Formatter(fs, dfs, style)\n            for h in handlers:\n                if h.formatter is None:\n                    h.setFormatter(fmt)\n                root.addHandler(h)\n            level = kwargs.pop(\"level\", None)\n            if level is not None:\n                root.setLevel(level)\n            if kwargs:\n                keys = ', '.join(kwargs.keys())\n                raise ValueError('Unrecognised argument(s): %s' % keys)\n    finally:\n        _releaseLock()\n\n#---------------------------------------------------------------------------\n# Utility functions at module level.\n# Basically delegate everything to the root logger.\n#---------------------------------------------------------------------------\n\ndef getLogger(name=None):\n    \"\"\"\n    Return a logger with the specified name, creating it if necessary.\n\n    If no name is specified, return the root logger.\n    \"\"\"\n    if name:\n        return Logger.manager.getLogger(name)\n    else:\n        return root\n\ndef critical(msg, *args, **kwargs):\n    \"\"\"\n    Log a message with severity 'CRITICAL' on the root logger. If the logger\n    has no handlers, call basicConfig() to add a console handler with a\n    pre-defined format.\n    \"\"\"\n    if len(root.handlers) == 0:\n        basicConfig()\n    root.critical(msg, *args, **kwargs)\n\nfatal = critical\n\ndef error(msg, *args, **kwargs):\n    \"\"\"\n    Log a message with severity 'ERROR' on the root logger. If the logger has\n    no handlers, call basicConfig() to add a console handler with a pre-defined\n    format.\n    \"\"\"\n    if len(root.handlers) == 0:\n        basicConfig()\n    root.error(msg, *args, **kwargs)\n\ndef exception(msg, *args, exc_info=True, **kwargs):\n    \"\"\"\n    Log a message with severity 'ERROR' on the root logger, with exception\n    information. If the logger has no handlers, basicConfig() is called to add\n    a console handler with a pre-defined format.\n    \"\"\"\n    error(msg, *args, exc_info=exc_info, **kwargs)\n\ndef warning(msg, *args, **kwargs):\n    \"\"\"\n    Log a message with severity 'WARNING' on the root logger. If the logger has\n    no handlers, call basicConfig() to add a console handler with a pre-defined\n    format.\n    \"\"\"\n    if len(root.handlers) == 0:\n        basicConfig()\n    root.warning(msg, *args, **kwargs)\n\ndef warn(msg, *args, **kwargs):\n    warnings.warn(\"The 'warn' function is deprecated, \"\n        \"use 'warning' instead\", DeprecationWarning, 2)\n    warning(msg, *args, **kwargs)\n\ndef info(msg, *args, **kwargs):\n    \"\"\"\n    Log a message with severity 'INFO' on the root logger. If the logger has\n    no handlers, call basicConfig() to add a console handler with a pre-defined\n    format.\n    \"\"\"\n    if len(root.handlers) == 0:\n        basicConfig()\n    root.info(msg, *args, **kwargs)\n\ndef debug(msg, *args, **kwargs):\n    \"\"\"\n    Log a message with severity 'DEBUG' on the root logger. If the logger has\n    no handlers, call basicConfig() to add a console handler with a pre-defined\n    format.\n    \"\"\"\n    if len(root.handlers) == 0:\n        basicConfig()\n    root.debug(msg, *args, **kwargs)\n\ndef log(level, msg, *args, **kwargs):\n    \"\"\"\n    Log 'msg % args' with the integer severity 'level' on the root logger. If\n    the logger has no handlers, call basicConfig() to add a console handler\n    with a pre-defined format.\n    \"\"\"\n    if len(root.handlers) == 0:\n        basicConfig()\n    root.log(level, msg, *args, **kwargs)\n\ndef disable(level=CRITICAL):\n    \"\"\"\n    Disable all logging calls of severity 'level' and below.\n    \"\"\"\n    root.manager.disable = level\n    root.manager._clear_cache()\n\ndef shutdown(handlerList=_handlerList):\n    \"\"\"\n    Perform any cleanup actions in the logging system (e.g. flushing\n    buffers).\n\n    Should be called at application exit.\n    \"\"\"\n    for wr in reversed(handlerList[:]):\n        #errors might occur, for example, if files are locked\n        #we just ignore them if raiseExceptions is not set\n        try:\n            h = wr()\n            if h:\n                try:\n                    h.acquire()\n                    h.flush()\n                    h.close()\n                except (OSError, ValueError):\n                    # Ignore errors which might be caused\n                    # because handlers have been closed but\n                    # references to them are still around at\n                    # application exit.\n                    pass\n                finally:\n                    h.release()\n        except: # ignore everything, as we're shutting down\n            if raiseExceptions:\n                raise\n            #else, swallow\n\n#Let's try and shutdown automatically on application exit...\nimport atexit\natexit.register(shutdown)\n\n# Null handler\n\nclass NullHandler(Handler):\n    \"\"\"\n    This handler does nothing. It's intended to be used to avoid the\n    \"No handlers could be found for logger XXX\" one-off warning. This is\n    important for library code, which may contain code to log events. If a user\n    of the library does not configure logging, the one-off warning might be\n    produced; to avoid this, the library developer simply needs to instantiate\n    a NullHandler and add it to the top-level logger of the library module or\n    package.\n    \"\"\"\n    def handle(self, record):\n        \"\"\"Stub.\"\"\"\n\n    def emit(self, record):\n        \"\"\"Stub.\"\"\"\n\n    def createLock(self):\n        self.lock = None\n\n# Warnings integration\n\n_warnings_showwarning = None\n\ndef _showwarning(message, category, filename, lineno, file=None, line=None):\n    \"\"\"\n    Implementation of showwarnings which redirects to logging, which will first\n    check to see if the file parameter is None. If a file is specified, it will\n    delegate to the original warnings implementation of showwarning. Otherwise,\n    it will call warnings.formatwarning and will log the resulting string to a\n    warnings logger named \"py.warnings\" with level logging.WARNING.\n    \"\"\"\n    if file is not None:\n        if _warnings_showwarning is not None:\n            _warnings_showwarning(message, category, filename, lineno, file, line)\n    else:\n        s = warnings.formatwarning(message, category, filename, lineno, line)\n        logger = getLogger(\"py.warnings\")\n        if not logger.handlers:\n            logger.addHandler(NullHandler())\n        logger.warning(\"%s\", s)\n\ndef captureWarnings(capture):\n    \"\"\"\n    If capture is true, redirect all warnings to the logging package.\n    If capture is False, ensure that warnings are not redirected to logging\n    but to their original destinations.\n    \"\"\"\n    global _warnings_showwarning\n    if capture:\n        if _warnings_showwarning is None:\n            _warnings_showwarning = warnings.showwarning\n            warnings.showwarning = _showwarning\n    else:\n        if _warnings_showwarning is not None:\n            warnings.showwarning = _warnings_showwarning\n            _warnings_showwarning = None\n", 2109], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/six.py": ["# Copyright (c) 2010-2020 Benjamin Peterson\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n\"\"\"Utilities for writing code that runs on Python 2 and 3\"\"\"\n\nfrom __future__ import absolute_import\n\nimport functools\nimport itertools\nimport operator\nimport sys\nimport types\n\n__author__ = \"Benjamin Peterson <benjamin@python.org>\"\n__version__ = \"1.16.0\"\n\n\n# Useful for very coarse version differentiation.\nPY2 = sys.version_info[0] == 2\nPY3 = sys.version_info[0] == 3\nPY34 = sys.version_info[0:2] >= (3, 4)\n\nif PY3:\n    string_types = str,\n    integer_types = int,\n    class_types = type,\n    text_type = str\n    binary_type = bytes\n\n    MAXSIZE = sys.maxsize\nelse:\n    string_types = basestring,\n    integer_types = (int, long)\n    class_types = (type, types.ClassType)\n    text_type = unicode\n    binary_type = str\n\n    if sys.platform.startswith(\"java\"):\n        # Jython always uses 32 bits.\n        MAXSIZE = int((1 << 31) - 1)\n    else:\n        # It's possible to have sizeof(long) != sizeof(Py_ssize_t).\n        class X(object):\n\n            def __len__(self):\n                return 1 << 31\n        try:\n            len(X())\n        except OverflowError:\n            # 32-bit\n            MAXSIZE = int((1 << 31) - 1)\n        else:\n            # 64-bit\n            MAXSIZE = int((1 << 63) - 1)\n        del X\n\nif PY34:\n    from importlib.util import spec_from_loader\nelse:\n    spec_from_loader = None\n\n\ndef _add_doc(func, doc):\n    \"\"\"Add documentation to a function.\"\"\"\n    func.__doc__ = doc\n\n\ndef _import_module(name):\n    \"\"\"Import module, returning the module after the last dot.\"\"\"\n    __import__(name)\n    return sys.modules[name]\n\n\nclass _LazyDescr(object):\n\n    def __init__(self, name):\n        self.name = name\n\n    def __get__(self, obj, tp):\n        result = self._resolve()\n        setattr(obj, self.name, result)  # Invokes __set__.\n        try:\n            # This is a bit ugly, but it avoids running this again by\n            # removing this descriptor.\n            delattr(obj.__class__, self.name)\n        except AttributeError:\n            pass\n        return result\n\n\nclass MovedModule(_LazyDescr):\n\n    def __init__(self, name, old, new=None):\n        super(MovedModule, self).__init__(name)\n        if PY3:\n            if new is None:\n                new = name\n            self.mod = new\n        else:\n            self.mod = old\n\n    def _resolve(self):\n        return _import_module(self.mod)\n\n    def __getattr__(self, attr):\n        _module = self._resolve()\n        value = getattr(_module, attr)\n        setattr(self, attr, value)\n        return value\n\n\nclass _LazyModule(types.ModuleType):\n\n    def __init__(self, name):\n        super(_LazyModule, self).__init__(name)\n        self.__doc__ = self.__class__.__doc__\n\n    def __dir__(self):\n        attrs = [\"__doc__\", \"__name__\"]\n        attrs += [attr.name for attr in self._moved_attributes]\n        return attrs\n\n    # Subclasses should override this\n    _moved_attributes = []\n\n\nclass MovedAttribute(_LazyDescr):\n\n    def __init__(self, name, old_mod, new_mod, old_attr=None, new_attr=None):\n        super(MovedAttribute, self).__init__(name)\n        if PY3:\n            if new_mod is None:\n                new_mod = name\n            self.mod = new_mod\n            if new_attr is None:\n                if old_attr is None:\n                    new_attr = name\n                else:\n                    new_attr = old_attr\n            self.attr = new_attr\n        else:\n            self.mod = old_mod\n            if old_attr is None:\n                old_attr = name\n            self.attr = old_attr\n\n    def _resolve(self):\n        module = _import_module(self.mod)\n        return getattr(module, self.attr)\n\n\nclass _SixMetaPathImporter(object):\n\n    \"\"\"\n    A meta path importer to import six.moves and its submodules.\n\n    This class implements a PEP302 finder and loader. It should be compatible\n    with Python 2.5 and all existing versions of Python3\n    \"\"\"\n\n    def __init__(self, six_module_name):\n        self.name = six_module_name\n        self.known_modules = {}\n\n    def _add_module(self, mod, *fullnames):\n        for fullname in fullnames:\n            self.known_modules[self.name + \".\" + fullname] = mod\n\n    def _get_module(self, fullname):\n        return self.known_modules[self.name + \".\" + fullname]\n\n    def find_module(self, fullname, path=None):\n        if fullname in self.known_modules:\n            return self\n        return None\n\n    def find_spec(self, fullname, path, target=None):\n        if fullname in self.known_modules:\n            return spec_from_loader(fullname, self)\n        return None\n\n    def __get_module(self, fullname):\n        try:\n            return self.known_modules[fullname]\n        except KeyError:\n            raise ImportError(\"This loader does not know module \" + fullname)\n\n    def load_module(self, fullname):\n        try:\n            # in case of a reload\n            return sys.modules[fullname]\n        except KeyError:\n            pass\n        mod = self.__get_module(fullname)\n        if isinstance(mod, MovedModule):\n            mod = mod._resolve()\n        else:\n            mod.__loader__ = self\n        sys.modules[fullname] = mod\n        return mod\n\n    def is_package(self, fullname):\n        \"\"\"\n        Return true, if the named module is a package.\n\n        We need this method to get correct spec objects with\n        Python 3.4 (see PEP451)\n        \"\"\"\n        return hasattr(self.__get_module(fullname), \"__path__\")\n\n    def get_code(self, fullname):\n        \"\"\"Return None\n\n        Required, if is_package is implemented\"\"\"\n        self.__get_module(fullname)  # eventually raises ImportError\n        return None\n    get_source = get_code  # same as get_code\n\n    def create_module(self, spec):\n        return self.load_module(spec.name)\n\n    def exec_module(self, module):\n        pass\n\n_importer = _SixMetaPathImporter(__name__)\n\n\nclass _MovedItems(_LazyModule):\n\n    \"\"\"Lazy loading of moved objects\"\"\"\n    __path__ = []  # mark as package\n\n\n_moved_attributes = [\n    MovedAttribute(\"cStringIO\", \"cStringIO\", \"io\", \"StringIO\"),\n    MovedAttribute(\"filter\", \"itertools\", \"builtins\", \"ifilter\", \"filter\"),\n    MovedAttribute(\"filterfalse\", \"itertools\", \"itertools\", \"ifilterfalse\", \"filterfalse\"),\n    MovedAttribute(\"input\", \"__builtin__\", \"builtins\", \"raw_input\", \"input\"),\n    MovedAttribute(\"intern\", \"__builtin__\", \"sys\"),\n    MovedAttribute(\"map\", \"itertools\", \"builtins\", \"imap\", \"map\"),\n    MovedAttribute(\"getcwd\", \"os\", \"os\", \"getcwdu\", \"getcwd\"),\n    MovedAttribute(\"getcwdb\", \"os\", \"os\", \"getcwd\", \"getcwdb\"),\n    MovedAttribute(\"getoutput\", \"commands\", \"subprocess\"),\n    MovedAttribute(\"range\", \"__builtin__\", \"builtins\", \"xrange\", \"range\"),\n    MovedAttribute(\"reload_module\", \"__builtin__\", \"importlib\" if PY34 else \"imp\", \"reload\"),\n    MovedAttribute(\"reduce\", \"__builtin__\", \"functools\"),\n    MovedAttribute(\"shlex_quote\", \"pipes\", \"shlex\", \"quote\"),\n    MovedAttribute(\"StringIO\", \"StringIO\", \"io\"),\n    MovedAttribute(\"UserDict\", \"UserDict\", \"collections\"),\n    MovedAttribute(\"UserList\", \"UserList\", \"collections\"),\n    MovedAttribute(\"UserString\", \"UserString\", \"collections\"),\n    MovedAttribute(\"xrange\", \"__builtin__\", \"builtins\", \"xrange\", \"range\"),\n    MovedAttribute(\"zip\", \"itertools\", \"builtins\", \"izip\", \"zip\"),\n    MovedAttribute(\"zip_longest\", \"itertools\", \"itertools\", \"izip_longest\", \"zip_longest\"),\n    MovedModule(\"builtins\", \"__builtin__\"),\n    MovedModule(\"configparser\", \"ConfigParser\"),\n    MovedModule(\"collections_abc\", \"collections\", \"collections.abc\" if sys.version_info >= (3, 3) else \"collections\"),\n    MovedModule(\"copyreg\", \"copy_reg\"),\n    MovedModule(\"dbm_gnu\", \"gdbm\", \"dbm.gnu\"),\n    MovedModule(\"dbm_ndbm\", \"dbm\", \"dbm.ndbm\"),\n    MovedModule(\"_dummy_thread\", \"dummy_thread\", \"_dummy_thread\" if sys.version_info < (3, 9) else \"_thread\"),\n    MovedModule(\"http_cookiejar\", \"cookielib\", \"http.cookiejar\"),\n    MovedModule(\"http_cookies\", \"Cookie\", \"http.cookies\"),\n    MovedModule(\"html_entities\", \"htmlentitydefs\", \"html.entities\"),\n    MovedModule(\"html_parser\", \"HTMLParser\", \"html.parser\"),\n    MovedModule(\"http_client\", \"httplib\", \"http.client\"),\n    MovedModule(\"email_mime_base\", \"email.MIMEBase\", \"email.mime.base\"),\n    MovedModule(\"email_mime_image\", \"email.MIMEImage\", \"email.mime.image\"),\n    MovedModule(\"email_mime_multipart\", \"email.MIMEMultipart\", \"email.mime.multipart\"),\n    MovedModule(\"email_mime_nonmultipart\", \"email.MIMENonMultipart\", \"email.mime.nonmultipart\"),\n    MovedModule(\"email_mime_text\", \"email.MIMEText\", \"email.mime.text\"),\n    MovedModule(\"BaseHTTPServer\", \"BaseHTTPServer\", \"http.server\"),\n    MovedModule(\"CGIHTTPServer\", \"CGIHTTPServer\", \"http.server\"),\n    MovedModule(\"SimpleHTTPServer\", \"SimpleHTTPServer\", \"http.server\"),\n    MovedModule(\"cPickle\", \"cPickle\", \"pickle\"),\n    MovedModule(\"queue\", \"Queue\"),\n    MovedModule(\"reprlib\", \"repr\"),\n    MovedModule(\"socketserver\", \"SocketServer\"),\n    MovedModule(\"_thread\", \"thread\", \"_thread\"),\n    MovedModule(\"tkinter\", \"Tkinter\"),\n    MovedModule(\"tkinter_dialog\", \"Dialog\", \"tkinter.dialog\"),\n    MovedModule(\"tkinter_filedialog\", \"FileDialog\", \"tkinter.filedialog\"),\n    MovedModule(\"tkinter_scrolledtext\", \"ScrolledText\", \"tkinter.scrolledtext\"),\n    MovedModule(\"tkinter_simpledialog\", \"SimpleDialog\", \"tkinter.simpledialog\"),\n    MovedModule(\"tkinter_tix\", \"Tix\", \"tkinter.tix\"),\n    MovedModule(\"tkinter_ttk\", \"ttk\", \"tkinter.ttk\"),\n    MovedModule(\"tkinter_constants\", \"Tkconstants\", \"tkinter.constants\"),\n    MovedModule(\"tkinter_dnd\", \"Tkdnd\", \"tkinter.dnd\"),\n    MovedModule(\"tkinter_colorchooser\", \"tkColorChooser\",\n                \"tkinter.colorchooser\"),\n    MovedModule(\"tkinter_commondialog\", \"tkCommonDialog\",\n                \"tkinter.commondialog\"),\n    MovedModule(\"tkinter_tkfiledialog\", \"tkFileDialog\", \"tkinter.filedialog\"),\n    MovedModule(\"tkinter_font\", \"tkFont\", \"tkinter.font\"),\n    MovedModule(\"tkinter_messagebox\", \"tkMessageBox\", \"tkinter.messagebox\"),\n    MovedModule(\"tkinter_tksimpledialog\", \"tkSimpleDialog\",\n                \"tkinter.simpledialog\"),\n    MovedModule(\"urllib_parse\", __name__ + \".moves.urllib_parse\", \"urllib.parse\"),\n    MovedModule(\"urllib_error\", __name__ + \".moves.urllib_error\", \"urllib.error\"),\n    MovedModule(\"urllib\", __name__ + \".moves.urllib\", __name__ + \".moves.urllib\"),\n    MovedModule(\"urllib_robotparser\", \"robotparser\", \"urllib.robotparser\"),\n    MovedModule(\"xmlrpc_client\", \"xmlrpclib\", \"xmlrpc.client\"),\n    MovedModule(\"xmlrpc_server\", \"SimpleXMLRPCServer\", \"xmlrpc.server\"),\n]\n# Add windows specific modules.\nif sys.platform == \"win32\":\n    _moved_attributes += [\n        MovedModule(\"winreg\", \"_winreg\"),\n    ]\n\nfor attr in _moved_attributes:\n    setattr(_MovedItems, attr.name, attr)\n    if isinstance(attr, MovedModule):\n        _importer._add_module(attr, \"moves.\" + attr.name)\ndel attr\n\n_MovedItems._moved_attributes = _moved_attributes\n\nmoves = _MovedItems(__name__ + \".moves\")\n_importer._add_module(moves, \"moves\")\n\n\nclass Module_six_moves_urllib_parse(_LazyModule):\n\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_parse\"\"\"\n\n\n_urllib_parse_moved_attributes = [\n    MovedAttribute(\"ParseResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"SplitResult\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qs\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"parse_qsl\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urldefrag\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urljoin\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urlparse\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urlsplit\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urlunparse\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"urlunsplit\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"quote\", \"urllib\", \"urllib.parse\"),\n    MovedAttribute(\"quote_plus\", \"urllib\", \"urllib.parse\"),\n    MovedAttribute(\"unquote\", \"urllib\", \"urllib.parse\"),\n    MovedAttribute(\"unquote_plus\", \"urllib\", \"urllib.parse\"),\n    MovedAttribute(\"unquote_to_bytes\", \"urllib\", \"urllib.parse\", \"unquote\", \"unquote_to_bytes\"),\n    MovedAttribute(\"urlencode\", \"urllib\", \"urllib.parse\"),\n    MovedAttribute(\"splitquery\", \"urllib\", \"urllib.parse\"),\n    MovedAttribute(\"splittag\", \"urllib\", \"urllib.parse\"),\n    MovedAttribute(\"splituser\", \"urllib\", \"urllib.parse\"),\n    MovedAttribute(\"splitvalue\", \"urllib\", \"urllib.parse\"),\n    MovedAttribute(\"uses_fragment\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"uses_netloc\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"uses_params\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"uses_query\", \"urlparse\", \"urllib.parse\"),\n    MovedAttribute(\"uses_relative\", \"urlparse\", \"urllib.parse\"),\n]\nfor attr in _urllib_parse_moved_attributes:\n    setattr(Module_six_moves_urllib_parse, attr.name, attr)\ndel attr\n\nModule_six_moves_urllib_parse._moved_attributes = _urllib_parse_moved_attributes\n\n_importer._add_module(Module_six_moves_urllib_parse(__name__ + \".moves.urllib_parse\"),\n                      \"moves.urllib_parse\", \"moves.urllib.parse\")\n\n\nclass Module_six_moves_urllib_error(_LazyModule):\n\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_error\"\"\"\n\n\n_urllib_error_moved_attributes = [\n    MovedAttribute(\"URLError\", \"urllib2\", \"urllib.error\"),\n    MovedAttribute(\"HTTPError\", \"urllib2\", \"urllib.error\"),\n    MovedAttribute(\"ContentTooShortError\", \"urllib\", \"urllib.error\"),\n]\nfor attr in _urllib_error_moved_attributes:\n    setattr(Module_six_moves_urllib_error, attr.name, attr)\ndel attr\n\nModule_six_moves_urllib_error._moved_attributes = _urllib_error_moved_attributes\n\n_importer._add_module(Module_six_moves_urllib_error(__name__ + \".moves.urllib.error\"),\n                      \"moves.urllib_error\", \"moves.urllib.error\")\n\n\nclass Module_six_moves_urllib_request(_LazyModule):\n\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_request\"\"\"\n\n\n_urllib_request_moved_attributes = [\n    MovedAttribute(\"urlopen\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"install_opener\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"build_opener\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"pathname2url\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"url2pathname\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"getproxies\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"Request\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"OpenerDirector\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPDefaultErrorHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPRedirectHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPCookieProcessor\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"ProxyHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"BaseHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPPasswordMgr\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPPasswordMgrWithDefaultRealm\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"AbstractBasicAuthHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPBasicAuthHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"ProxyBasicAuthHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"AbstractDigestAuthHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPDigestAuthHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"ProxyDigestAuthHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPSHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"FileHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"FTPHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"CacheFTPHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"UnknownHandler\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"HTTPErrorProcessor\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"urlretrieve\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"urlcleanup\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"URLopener\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"FancyURLopener\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"proxy_bypass\", \"urllib\", \"urllib.request\"),\n    MovedAttribute(\"parse_http_list\", \"urllib2\", \"urllib.request\"),\n    MovedAttribute(\"parse_keqv_list\", \"urllib2\", \"urllib.request\"),\n]\nfor attr in _urllib_request_moved_attributes:\n    setattr(Module_six_moves_urllib_request, attr.name, attr)\ndel attr\n\nModule_six_moves_urllib_request._moved_attributes = _urllib_request_moved_attributes\n\n_importer._add_module(Module_six_moves_urllib_request(__name__ + \".moves.urllib.request\"),\n                      \"moves.urllib_request\", \"moves.urllib.request\")\n\n\nclass Module_six_moves_urllib_response(_LazyModule):\n\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_response\"\"\"\n\n\n_urllib_response_moved_attributes = [\n    MovedAttribute(\"addbase\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addclosehook\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addinfo\", \"urllib\", \"urllib.response\"),\n    MovedAttribute(\"addinfourl\", \"urllib\", \"urllib.response\"),\n]\nfor attr in _urllib_response_moved_attributes:\n    setattr(Module_six_moves_urllib_response, attr.name, attr)\ndel attr\n\nModule_six_moves_urllib_response._moved_attributes = _urllib_response_moved_attributes\n\n_importer._add_module(Module_six_moves_urllib_response(__name__ + \".moves.urllib.response\"),\n                      \"moves.urllib_response\", \"moves.urllib.response\")\n\n\nclass Module_six_moves_urllib_robotparser(_LazyModule):\n\n    \"\"\"Lazy loading of moved objects in six.moves.urllib_robotparser\"\"\"\n\n\n_urllib_robotparser_moved_attributes = [\n    MovedAttribute(\"RobotFileParser\", \"robotparser\", \"urllib.robotparser\"),\n]\nfor attr in _urllib_robotparser_moved_attributes:\n    setattr(Module_six_moves_urllib_robotparser, attr.name, attr)\ndel attr\n\nModule_six_moves_urllib_robotparser._moved_attributes = _urllib_robotparser_moved_attributes\n\n_importer._add_module(Module_six_moves_urllib_robotparser(__name__ + \".moves.urllib.robotparser\"),\n                      \"moves.urllib_robotparser\", \"moves.urllib.robotparser\")\n\n\nclass Module_six_moves_urllib(types.ModuleType):\n\n    \"\"\"Create a six.moves.urllib namespace that resembles the Python 3 namespace\"\"\"\n    __path__ = []  # mark as package\n    parse = _importer._get_module(\"moves.urllib_parse\")\n    error = _importer._get_module(\"moves.urllib_error\")\n    request = _importer._get_module(\"moves.urllib_request\")\n    response = _importer._get_module(\"moves.urllib_response\")\n    robotparser = _importer._get_module(\"moves.urllib_robotparser\")\n\n    def __dir__(self):\n        return ['parse', 'error', 'request', 'response', 'robotparser']\n\n_importer._add_module(Module_six_moves_urllib(__name__ + \".moves.urllib\"),\n                      \"moves.urllib\")\n\n\ndef add_move(move):\n    \"\"\"Add an item to six.moves.\"\"\"\n    setattr(_MovedItems, move.name, move)\n\n\ndef remove_move(name):\n    \"\"\"Remove item from six.moves.\"\"\"\n    try:\n        delattr(_MovedItems, name)\n    except AttributeError:\n        try:\n            del moves.__dict__[name]\n        except KeyError:\n            raise AttributeError(\"no such move, %r\" % (name,))\n\n\nif PY3:\n    _meth_func = \"__func__\"\n    _meth_self = \"__self__\"\n\n    _func_closure = \"__closure__\"\n    _func_code = \"__code__\"\n    _func_defaults = \"__defaults__\"\n    _func_globals = \"__globals__\"\nelse:\n    _meth_func = \"im_func\"\n    _meth_self = \"im_self\"\n\n    _func_closure = \"func_closure\"\n    _func_code = \"func_code\"\n    _func_defaults = \"func_defaults\"\n    _func_globals = \"func_globals\"\n\n\ntry:\n    advance_iterator = next\nexcept NameError:\n    def advance_iterator(it):\n        return it.next()\nnext = advance_iterator\n\n\ntry:\n    callable = callable\nexcept NameError:\n    def callable(obj):\n        return any(\"__call__\" in klass.__dict__ for klass in type(obj).__mro__)\n\n\nif PY3:\n    def get_unbound_function(unbound):\n        return unbound\n\n    create_bound_method = types.MethodType\n\n    def create_unbound_method(func, cls):\n        return func\n\n    Iterator = object\nelse:\n    def get_unbound_function(unbound):\n        return unbound.im_func\n\n    def create_bound_method(func, obj):\n        return types.MethodType(func, obj, obj.__class__)\n\n    def create_unbound_method(func, cls):\n        return types.MethodType(func, None, cls)\n\n    class Iterator(object):\n\n        def next(self):\n            return type(self).__next__(self)\n\n    callable = callable\n_add_doc(get_unbound_function,\n         \"\"\"Get the function out of a possibly unbound function\"\"\")\n\n\nget_method_function = operator.attrgetter(_meth_func)\nget_method_self = operator.attrgetter(_meth_self)\nget_function_closure = operator.attrgetter(_func_closure)\nget_function_code = operator.attrgetter(_func_code)\nget_function_defaults = operator.attrgetter(_func_defaults)\nget_function_globals = operator.attrgetter(_func_globals)\n\n\nif PY3:\n    def iterkeys(d, **kw):\n        return iter(d.keys(**kw))\n\n    def itervalues(d, **kw):\n        return iter(d.values(**kw))\n\n    def iteritems(d, **kw):\n        return iter(d.items(**kw))\n\n    def iterlists(d, **kw):\n        return iter(d.lists(**kw))\n\n    viewkeys = operator.methodcaller(\"keys\")\n\n    viewvalues = operator.methodcaller(\"values\")\n\n    viewitems = operator.methodcaller(\"items\")\nelse:\n    def iterkeys(d, **kw):\n        return d.iterkeys(**kw)\n\n    def itervalues(d, **kw):\n        return d.itervalues(**kw)\n\n    def iteritems(d, **kw):\n        return d.iteritems(**kw)\n\n    def iterlists(d, **kw):\n        return d.iterlists(**kw)\n\n    viewkeys = operator.methodcaller(\"viewkeys\")\n\n    viewvalues = operator.methodcaller(\"viewvalues\")\n\n    viewitems = operator.methodcaller(\"viewitems\")\n\n_add_doc(iterkeys, \"Return an iterator over the keys of a dictionary.\")\n_add_doc(itervalues, \"Return an iterator over the values of a dictionary.\")\n_add_doc(iteritems,\n         \"Return an iterator over the (key, value) pairs of a dictionary.\")\n_add_doc(iterlists,\n         \"Return an iterator over the (key, [values]) pairs of a dictionary.\")\n\n\nif PY3:\n    def b(s):\n        return s.encode(\"latin-1\")\n\n    def u(s):\n        return s\n    unichr = chr\n    import struct\n    int2byte = struct.Struct(\">B\").pack\n    del struct\n    byte2int = operator.itemgetter(0)\n    indexbytes = operator.getitem\n    iterbytes = iter\n    import io\n    StringIO = io.StringIO\n    BytesIO = io.BytesIO\n    del io\n    _assertCountEqual = \"assertCountEqual\"\n    if sys.version_info[1] <= 1:\n        _assertRaisesRegex = \"assertRaisesRegexp\"\n        _assertRegex = \"assertRegexpMatches\"\n        _assertNotRegex = \"assertNotRegexpMatches\"\n    else:\n        _assertRaisesRegex = \"assertRaisesRegex\"\n        _assertRegex = \"assertRegex\"\n        _assertNotRegex = \"assertNotRegex\"\nelse:\n    def b(s):\n        return s\n    # Workaround for standalone backslash\n\n    def u(s):\n        return unicode(s.replace(r'\\\\', r'\\\\\\\\'), \"unicode_escape\")\n    unichr = unichr\n    int2byte = chr\n\n    def byte2int(bs):\n        return ord(bs[0])\n\n    def indexbytes(buf, i):\n        return ord(buf[i])\n    iterbytes = functools.partial(itertools.imap, ord)\n    import StringIO\n    StringIO = BytesIO = StringIO.StringIO\n    _assertCountEqual = \"assertItemsEqual\"\n    _assertRaisesRegex = \"assertRaisesRegexp\"\n    _assertRegex = \"assertRegexpMatches\"\n    _assertNotRegex = \"assertNotRegexpMatches\"\n_add_doc(b, \"\"\"Byte literal\"\"\")\n_add_doc(u, \"\"\"Text literal\"\"\")\n\n\ndef assertCountEqual(self, *args, **kwargs):\n    return getattr(self, _assertCountEqual)(*args, **kwargs)\n\n\ndef assertRaisesRegex(self, *args, **kwargs):\n    return getattr(self, _assertRaisesRegex)(*args, **kwargs)\n\n\ndef assertRegex(self, *args, **kwargs):\n    return getattr(self, _assertRegex)(*args, **kwargs)\n\n\ndef assertNotRegex(self, *args, **kwargs):\n    return getattr(self, _assertNotRegex)(*args, **kwargs)\n\n\nif PY3:\n    exec_ = getattr(moves.builtins, \"exec\")\n\n    def reraise(tp, value, tb=None):\n        try:\n            if value is None:\n                value = tp()\n            if value.__traceback__ is not tb:\n                raise value.with_traceback(tb)\n            raise value\n        finally:\n            value = None\n            tb = None\n\nelse:\n    def exec_(_code_, _globs_=None, _locs_=None):\n        \"\"\"Execute code in a namespace.\"\"\"\n        if _globs_ is None:\n            frame = sys._getframe(1)\n            _globs_ = frame.f_globals\n            if _locs_ is None:\n                _locs_ = frame.f_locals\n            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\"\"\"def reraise(tp, value, tb=None):\n    try:\n        raise tp, value, tb\n    finally:\n        tb = None\n\"\"\")\n\n\nif sys.version_info[:2] > (3,):\n    exec_(\"\"\"def raise_from(value, from_value):\n    try:\n        raise value from from_value\n    finally:\n        value = None\n\"\"\")\nelse:\n    def raise_from(value, from_value):\n        raise value\n\n\nprint_ = getattr(moves.builtins, \"print\", None)\nif print_ is None:\n    def print_(*args, **kwargs):\n        \"\"\"The new-style print function for Python 2.4 and 2.5.\"\"\"\n        fp = kwargs.pop(\"file\", sys.stdout)\n        if fp is None:\n            return\n\n        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(\"sep\", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(\"sep must be None or a string\")\n        end = kwargs.pop(\"end\", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(\"end must be None or a string\")\n        if kwargs:\n            raise TypeError(\"invalid keyword arguments to print()\")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(\"\\n\")\n            space = unicode(\" \")\n        else:\n            newline = \"\\n\"\n            space = \" \"\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)\nif sys.version_info[:2] < (3, 3):\n    _print = print_\n\n    def print_(*args, **kwargs):\n        fp = kwargs.get(\"file\", sys.stdout)\n        flush = kwargs.pop(\"flush\", False)\n        _print(*args, **kwargs)\n        if flush and fp is not None:\n            fp.flush()\n\n_add_doc(reraise, \"\"\"Reraise an exception.\"\"\")\n\nif sys.version_info[0:2] < (3, 4):\n    # This does exactly the same what the :func:`py3:functools.update_wrapper`\n    # function does on Python versions after 3.2. It sets the ``__wrapped__``\n    # attribute on ``wrapper`` object and it doesn't raise an error if any of\n    # the attributes mentioned in ``assigned`` and ``updated`` are missing on\n    # ``wrapped`` object.\n    def _update_wrapper(wrapper, wrapped,\n                        assigned=functools.WRAPPER_ASSIGNMENTS,\n                        updated=functools.WRAPPER_UPDATES):\n        for attr in assigned:\n            try:\n                value = getattr(wrapped, attr)\n            except AttributeError:\n                continue\n            else:\n                setattr(wrapper, attr, value)\n        for attr in updated:\n            getattr(wrapper, attr).update(getattr(wrapped, attr, {}))\n        wrapper.__wrapped__ = wrapped\n        return wrapper\n    _update_wrapper.__doc__ = functools.update_wrapper.__doc__\n\n    def wraps(wrapped, assigned=functools.WRAPPER_ASSIGNMENTS,\n              updated=functools.WRAPPER_UPDATES):\n        return functools.partial(_update_wrapper, wrapped=wrapped,\n                                 assigned=assigned, updated=updated)\n    wraps.__doc__ = functools.wraps.__doc__\n\nelse:\n    wraps = functools.wraps\n\n\ndef with_metaclass(meta, *bases):\n    \"\"\"Create a base class with a metaclass.\"\"\"\n    # This requires a bit of explanation: the basic idea is to make a dummy\n    # metaclass for one level of class instantiation that replaces itself with\n    # the actual metaclass.\n    class metaclass(type):\n\n        def __new__(cls, name, this_bases, d):\n            if sys.version_info[:2] >= (3, 7):\n                # This version introduced PEP 560 that requires a bit\n                # of extra care (we mimic what is done by __build_class__).\n                resolved_bases = types.resolve_bases(bases)\n                if resolved_bases is not bases:\n                    d['__orig_bases__'] = bases\n            else:\n                resolved_bases = bases\n            return meta(name, resolved_bases, d)\n\n        @classmethod\n        def __prepare__(cls, name, this_bases):\n            return meta.__prepare__(name, bases)\n    return type.__new__(metaclass, 'temporary_class', (), {})\n\n\ndef add_metaclass(metaclass):\n    \"\"\"Class decorator for creating a class with a metaclass.\"\"\"\n    def wrapper(cls):\n        orig_vars = cls.__dict__.copy()\n        slots = orig_vars.get('__slots__')\n        if slots is not None:\n            if isinstance(slots, str):\n                slots = [slots]\n            for slots_var in slots:\n                orig_vars.pop(slots_var)\n        orig_vars.pop('__dict__', None)\n        orig_vars.pop('__weakref__', None)\n        if hasattr(cls, '__qualname__'):\n            orig_vars['__qualname__'] = cls.__qualname__\n        return metaclass(cls.__name__, cls.__bases__, orig_vars)\n    return wrapper\n\n\ndef ensure_binary(s, encoding='utf-8', errors='strict'):\n    \"\"\"Coerce **s** to six.binary_type.\n\n    For Python 2:\n      - `unicode` -> encoded to `str`\n      - `str` -> `str`\n\n    For Python 3:\n      - `str` -> encoded to `bytes`\n      - `bytes` -> `bytes`\n    \"\"\"\n    if isinstance(s, binary_type):\n        return s\n    if isinstance(s, text_type):\n        return s.encode(encoding, errors)\n    raise TypeError(\"not expecting type '%s'\" % type(s))\n\n\ndef ensure_str(s, encoding='utf-8', errors='strict'):\n    \"\"\"Coerce *s* to `str`.\n\n    For Python 2:\n      - `unicode` -> encoded to `str`\n      - `str` -> `str`\n\n    For Python 3:\n      - `str` -> `str`\n      - `bytes` -> decoded to `str`\n    \"\"\"\n    # Optimization: Fast return for the common case.\n    if type(s) is str:\n        return s\n    if PY2 and isinstance(s, text_type):\n        return s.encode(encoding, errors)\n    elif PY3 and isinstance(s, binary_type):\n        return s.decode(encoding, errors)\n    elif not isinstance(s, (text_type, binary_type)):\n        raise TypeError(\"not expecting type '%s'\" % type(s))\n    return s\n\n\ndef ensure_text(s, encoding='utf-8', errors='strict'):\n    \"\"\"Coerce *s* to six.text_type.\n\n    For Python 2:\n      - `unicode` -> `unicode`\n      - `str` -> `unicode`\n\n    For Python 3:\n      - `str` -> `str`\n      - `bytes` -> decoded to `str`\n    \"\"\"\n    if isinstance(s, binary_type):\n        return s.decode(encoding, errors)\n    elif isinstance(s, text_type):\n        return s\n    else:\n        raise TypeError(\"not expecting type '%s'\" % type(s))\n\n\ndef python_2_unicode_compatible(klass):\n    \"\"\"\n    A class decorator that defines __unicode__ and __str__ methods under Python 2.\n    Under Python 3 it does nothing.\n\n    To support Python 2 and 3 with a single code base, define a __str__ method\n    returning text and apply this decorator to the class.\n    \"\"\"\n    if PY2:\n        if '__str__' not in klass.__dict__:\n            raise ValueError(\"@python_2_unicode_compatible cannot be applied \"\n                             \"to %s because it doesn't define __str__().\" %\n                             klass.__name__)\n        klass.__unicode__ = klass.__str__\n        klass.__str__ = lambda self: self.__unicode__().encode('utf-8')\n    return klass\n\n\n# Complete the moves implementation.\n# This code is at the end of this module to speed up module loading.\n# Turn this module into a package.\n__path__ = []  # required for PEP 302 and PEP 451\n__package__ = __name__  # see PEP 366 @ReservedAssignment\nif globals().get(\"__spec__\") is not None:\n    __spec__.submodule_search_locations = []  # PEP 451 @UndefinedVariable\n# Remove other six meta path importers, since they cause problems. This can\n# happen if six is removed from sys.modules and then reloaded. (Setuptools does\n# this for some reason.)\nif sys.meta_path:\n    for i, importer in enumerate(sys.meta_path):\n        # Here's some real nastiness: Another \"instance\" of the six module might\n        # be floating around. Therefore, we can't use isinstance() to check for\n        # the six meta path importer, since the other six instance will have\n        # inserted an importer with different class.\n        if (type(importer).__name__ == \"_SixMetaPathImporter\" and\n                importer.name == __name__):\n            del sys.meta_path[i]\n            break\n    del i, importer\n# Finally, add the importer to the meta path import hook.\nsys.meta_path.append(_importer)\n", 998], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py": ["\"\"\"Selectors module.\n\nThis module allows high-level and efficient I/O multiplexing, built upon the\n`select` module primitives.\n\"\"\"\n\n\nfrom abc import ABCMeta, abstractmethod\nfrom collections import namedtuple\nfrom collections.abc import Mapping\nimport math\nimport select\nimport sys\n\n\n# generic events, that must be mapped to implementation-specific ones\nEVENT_READ = (1 << 0)\nEVENT_WRITE = (1 << 1)\n\n\ndef _fileobj_to_fd(fileobj):\n    \"\"\"Return a file descriptor from a file object.\n\n    Parameters:\n    fileobj -- file object or file descriptor\n\n    Returns:\n    corresponding file descriptor\n\n    Raises:\n    ValueError if the object is invalid\n    \"\"\"\n    if isinstance(fileobj, int):\n        fd = fileobj\n    else:\n        try:\n            fd = int(fileobj.fileno())\n        except (AttributeError, TypeError, ValueError):\n            raise ValueError(\"Invalid file object: \"\n                             \"{!r}\".format(fileobj)) from None\n    if fd < 0:\n        raise ValueError(\"Invalid file descriptor: {}\".format(fd))\n    return fd\n\n\nSelectorKey = namedtuple('SelectorKey', ['fileobj', 'fd', 'events', 'data'])\n\nSelectorKey.__doc__ = \"\"\"SelectorKey(fileobj, fd, events, data)\n\n    Object used to associate a file object to its backing\n    file descriptor, selected event mask, and attached data.\n\"\"\"\nif sys.version_info >= (3, 5):\n    SelectorKey.fileobj.__doc__ = 'File object registered.'\n    SelectorKey.fd.__doc__ = 'Underlying file descriptor.'\n    SelectorKey.events.__doc__ = 'Events that must be waited for on this file object.'\n    SelectorKey.data.__doc__ = ('''Optional opaque data associated to this file object.\n    For example, this could be used to store a per-client session ID.''')\n\nclass _SelectorMapping(Mapping):\n    \"\"\"Mapping of file objects to selector keys.\"\"\"\n\n    def __init__(self, selector):\n        self._selector = selector\n\n    def __len__(self):\n        return len(self._selector._fd_to_key)\n\n    def __getitem__(self, fileobj):\n        try:\n            fd = self._selector._fileobj_lookup(fileobj)\n            return self._selector._fd_to_key[fd]\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n\n    def __iter__(self):\n        return iter(self._selector._fd_to_key)\n\n\nclass BaseSelector(metaclass=ABCMeta):\n    \"\"\"Selector abstract base class.\n\n    A selector supports registering file objects to be monitored for specific\n    I/O events.\n\n    A file object is a file descriptor or any object with a `fileno()` method.\n    An arbitrary object can be attached to the file object, which can be used\n    for example to store context information, a callback, etc.\n\n    A selector can use various implementations (select(), poll(), epoll()...)\n    depending on the platform. The default `Selector` class uses the most\n    efficient implementation on the current platform.\n    \"\"\"\n\n    @abstractmethod\n    def register(self, fileobj, events, data=None):\n        \"\"\"Register a file object.\n\n        Parameters:\n        fileobj -- file object or file descriptor\n        events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)\n        data    -- attached data\n\n        Returns:\n        SelectorKey instance\n\n        Raises:\n        ValueError if events is invalid\n        KeyError if fileobj is already registered\n        OSError if fileobj is closed or otherwise is unacceptable to\n                the underlying system call (if a system call is made)\n\n        Note:\n        OSError may or may not be raised\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def unregister(self, fileobj):\n        \"\"\"Unregister a file object.\n\n        Parameters:\n        fileobj -- file object or file descriptor\n\n        Returns:\n        SelectorKey instance\n\n        Raises:\n        KeyError if fileobj is not registered\n\n        Note:\n        If fileobj is registered but has since been closed this does\n        *not* raise OSError (even if the wrapped syscall does)\n        \"\"\"\n        raise NotImplementedError\n\n    def modify(self, fileobj, events, data=None):\n        \"\"\"Change a registered file object monitored events or attached data.\n\n        Parameters:\n        fileobj -- file object or file descriptor\n        events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)\n        data    -- attached data\n\n        Returns:\n        SelectorKey instance\n\n        Raises:\n        Anything that unregister() or register() raises\n        \"\"\"\n        self.unregister(fileobj)\n        return self.register(fileobj, events, data)\n\n    @abstractmethod\n    def select(self, timeout=None):\n        \"\"\"Perform the actual selection, until some monitored file objects are\n        ready or a timeout expires.\n\n        Parameters:\n        timeout -- if timeout > 0, this specifies the maximum wait time, in\n                   seconds\n                   if timeout <= 0, the select() call won't block, and will\n                   report the currently ready file objects\n                   if timeout is None, select() will block until a monitored\n                   file object becomes ready\n\n        Returns:\n        list of (key, events) for ready file objects\n        `events` is a bitwise mask of EVENT_READ|EVENT_WRITE\n        \"\"\"\n        raise NotImplementedError\n\n    def close(self):\n        \"\"\"Close the selector.\n\n        This must be called to make sure that any underlying resource is freed.\n        \"\"\"\n        pass\n\n    def get_key(self, fileobj):\n        \"\"\"Return the key associated to a registered file object.\n\n        Returns:\n        SelectorKey for this file object\n        \"\"\"\n        mapping = self.get_map()\n        if mapping is None:\n            raise RuntimeError('Selector is closed')\n        try:\n            return mapping[fileobj]\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n\n    @abstractmethod\n    def get_map(self):\n        \"\"\"Return a mapping of file objects to selector keys.\"\"\"\n        raise NotImplementedError\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.close()\n\n\nclass _BaseSelectorImpl(BaseSelector):\n    \"\"\"Base selector implementation.\"\"\"\n\n    def __init__(self):\n        # this maps file descriptors to keys\n        self._fd_to_key = {}\n        # read-only mapping returned by get_map()\n        self._map = _SelectorMapping(self)\n\n    def _fileobj_lookup(self, fileobj):\n        \"\"\"Return a file descriptor from a file object.\n\n        This wraps _fileobj_to_fd() to do an exhaustive search in case\n        the object is invalid but we still have it in our map.  This\n        is used by unregister() so we can unregister an object that\n        was previously registered even if it is closed.  It is also\n        used by _SelectorMapping.\n        \"\"\"\n        try:\n            return _fileobj_to_fd(fileobj)\n        except ValueError:\n            # Do an exhaustive search.\n            for key in self._fd_to_key.values():\n                if key.fileobj is fileobj:\n                    return key.fd\n            # Raise ValueError after all.\n            raise\n\n    def register(self, fileobj, events, data=None):\n        if (not events) or (events & ~(EVENT_READ | EVENT_WRITE)):\n            raise ValueError(\"Invalid events: {!r}\".format(events))\n\n        key = SelectorKey(fileobj, self._fileobj_lookup(fileobj), events, data)\n\n        if key.fd in self._fd_to_key:\n            raise KeyError(\"{!r} (FD {}) is already registered\"\n                           .format(fileobj, key.fd))\n\n        self._fd_to_key[key.fd] = key\n        return key\n\n    def unregister(self, fileobj):\n        try:\n            key = self._fd_to_key.pop(self._fileobj_lookup(fileobj))\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n        return key\n\n    def modify(self, fileobj, events, data=None):\n        try:\n            key = self._fd_to_key[self._fileobj_lookup(fileobj)]\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n        if events != key.events:\n            self.unregister(fileobj)\n            key = self.register(fileobj, events, data)\n        elif data != key.data:\n            # Use a shortcut to update the data.\n            key = key._replace(data=data)\n            self._fd_to_key[key.fd] = key\n        return key\n\n    def close(self):\n        self._fd_to_key.clear()\n        self._map = None\n\n    def get_map(self):\n        return self._map\n\n    def _key_from_fd(self, fd):\n        \"\"\"Return the key associated to a given file descriptor.\n\n        Parameters:\n        fd -- file descriptor\n\n        Returns:\n        corresponding key, or None if not found\n        \"\"\"\n        try:\n            return self._fd_to_key[fd]\n        except KeyError:\n            return None\n\n\nclass SelectSelector(_BaseSelectorImpl):\n    \"\"\"Select-based selector.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self._readers = set()\n        self._writers = set()\n\n    def register(self, fileobj, events, data=None):\n        key = super().register(fileobj, events, data)\n        if events & EVENT_READ:\n            self._readers.add(key.fd)\n        if events & EVENT_WRITE:\n            self._writers.add(key.fd)\n        return key\n\n    def unregister(self, fileobj):\n        key = super().unregister(fileobj)\n        self._readers.discard(key.fd)\n        self._writers.discard(key.fd)\n        return key\n\n    if sys.platform == 'win32':\n        def _select(self, r, w, _, timeout=None):\n            r, w, x = select.select(r, w, w, timeout)\n            return r, w + x, []\n    else:\n        _select = select.select\n\n    def select(self, timeout=None):\n        timeout = None if timeout is None else max(timeout, 0)\n        ready = []\n        try:\n            r, w, _ = self._select(self._readers, self._writers, [], timeout)\n        except InterruptedError:\n            return ready\n        r = set(r)\n        w = set(w)\n        for fd in r | w:\n            events = 0\n            if fd in r:\n                events |= EVENT_READ\n            if fd in w:\n                events |= EVENT_WRITE\n\n            key = self._key_from_fd(fd)\n            if key:\n                ready.append((key, events & key.events))\n        return ready\n\n\nclass _PollLikeSelector(_BaseSelectorImpl):\n    \"\"\"Base class shared between poll, epoll and devpoll selectors.\"\"\"\n    _selector_cls = None\n    _EVENT_READ = None\n    _EVENT_WRITE = None\n\n    def __init__(self):\n        super().__init__()\n        self._selector = self._selector_cls()\n\n    def register(self, fileobj, events, data=None):\n        key = super().register(fileobj, events, data)\n        poller_events = 0\n        if events & EVENT_READ:\n            poller_events |= self._EVENT_READ\n        if events & EVENT_WRITE:\n            poller_events |= self._EVENT_WRITE\n        try:\n            self._selector.register(key.fd, poller_events)\n        except:\n            super().unregister(fileobj)\n            raise\n        return key\n\n    def unregister(self, fileobj):\n        key = super().unregister(fileobj)\n        try:\n            self._selector.unregister(key.fd)\n        except OSError:\n            # This can happen if the FD was closed since it\n            # was registered.\n            pass\n        return key\n\n    def modify(self, fileobj, events, data=None):\n        try:\n            key = self._fd_to_key[self._fileobj_lookup(fileobj)]\n        except KeyError:\n            raise KeyError(f\"{fileobj!r} is not registered\") from None\n\n        changed = False\n        if events != key.events:\n            selector_events = 0\n            if events & EVENT_READ:\n                selector_events |= self._EVENT_READ\n            if events & EVENT_WRITE:\n                selector_events |= self._EVENT_WRITE\n            try:\n                self._selector.modify(key.fd, selector_events)\n            except:\n                super().unregister(fileobj)\n                raise\n            changed = True\n        if data != key.data:\n            changed = True\n\n        if changed:\n            key = key._replace(events=events, data=data)\n            self._fd_to_key[key.fd] = key\n        return key\n\n    def select(self, timeout=None):\n        # This is shared between poll() and epoll().\n        # epoll() has a different signature and handling of timeout parameter.\n        if timeout is None:\n            timeout = None\n        elif timeout <= 0:\n            timeout = 0\n        else:\n            # poll() has a resolution of 1 millisecond, round away from\n            # zero to wait *at least* timeout seconds.\n            timeout = math.ceil(timeout * 1e3)\n        ready = []\n        try:\n            fd_event_list = self._selector.poll(timeout)\n        except InterruptedError:\n            return ready\n        for fd, event in fd_event_list:\n            events = 0\n            if event & ~self._EVENT_READ:\n                events |= EVENT_WRITE\n            if event & ~self._EVENT_WRITE:\n                events |= EVENT_READ\n\n            key = self._key_from_fd(fd)\n            if key:\n                ready.append((key, events & key.events))\n        return ready\n\n\nif hasattr(select, 'poll'):\n\n    class PollSelector(_PollLikeSelector):\n        \"\"\"Poll-based selector.\"\"\"\n        _selector_cls = select.poll\n        _EVENT_READ = select.POLLIN\n        _EVENT_WRITE = select.POLLOUT\n\n\nif hasattr(select, 'epoll'):\n\n    class EpollSelector(_PollLikeSelector):\n        \"\"\"Epoll-based selector.\"\"\"\n        _selector_cls = select.epoll\n        _EVENT_READ = select.EPOLLIN\n        _EVENT_WRITE = select.EPOLLOUT\n\n        def fileno(self):\n            return self._selector.fileno()\n\n        def select(self, timeout=None):\n            if timeout is None:\n                timeout = -1\n            elif timeout <= 0:\n                timeout = 0\n            else:\n                # epoll_wait() has a resolution of 1 millisecond, round away\n                # from zero to wait *at least* timeout seconds.\n                timeout = math.ceil(timeout * 1e3) * 1e-3\n\n            # epoll_wait() expects `maxevents` to be greater than zero;\n            # we want to make sure that `select()` can be called when no\n            # FD is registered.\n            max_ev = max(len(self._fd_to_key), 1)\n\n            ready = []\n            try:\n                fd_event_list = self._selector.poll(timeout, max_ev)\n            except InterruptedError:\n                return ready\n            for fd, event in fd_event_list:\n                events = 0\n                if event & ~select.EPOLLIN:\n                    events |= EVENT_WRITE\n                if event & ~select.EPOLLOUT:\n                    events |= EVENT_READ\n\n                key = self._key_from_fd(fd)\n                if key:\n                    ready.append((key, events & key.events))\n            return ready\n\n        def close(self):\n            self._selector.close()\n            super().close()\n\n\nif hasattr(select, 'devpoll'):\n\n    class DevpollSelector(_PollLikeSelector):\n        \"\"\"Solaris /dev/poll selector.\"\"\"\n        _selector_cls = select.devpoll\n        _EVENT_READ = select.POLLIN\n        _EVENT_WRITE = select.POLLOUT\n\n        def fileno(self):\n            return self._selector.fileno()\n\n        def close(self):\n            self._selector.close()\n            super().close()\n\n\nif hasattr(select, 'kqueue'):\n\n    class KqueueSelector(_BaseSelectorImpl):\n        \"\"\"Kqueue-based selector.\"\"\"\n\n        def __init__(self):\n            super().__init__()\n            self._selector = select.kqueue()\n\n        def fileno(self):\n            return self._selector.fileno()\n\n        def register(self, fileobj, events, data=None):\n            key = super().register(fileobj, events, data)\n            try:\n                if events & EVENT_READ:\n                    kev = select.kevent(key.fd, select.KQ_FILTER_READ,\n                                        select.KQ_EV_ADD)\n                    self._selector.control([kev], 0, 0)\n                if events & EVENT_WRITE:\n                    kev = select.kevent(key.fd, select.KQ_FILTER_WRITE,\n                                        select.KQ_EV_ADD)\n                    self._selector.control([kev], 0, 0)\n            except:\n                super().unregister(fileobj)\n                raise\n            return key\n\n        def unregister(self, fileobj):\n            key = super().unregister(fileobj)\n            if key.events & EVENT_READ:\n                kev = select.kevent(key.fd, select.KQ_FILTER_READ,\n                                    select.KQ_EV_DELETE)\n                try:\n                    self._selector.control([kev], 0, 0)\n                except OSError:\n                    # This can happen if the FD was closed since it\n                    # was registered.\n                    pass\n            if key.events & EVENT_WRITE:\n                kev = select.kevent(key.fd, select.KQ_FILTER_WRITE,\n                                    select.KQ_EV_DELETE)\n                try:\n                    self._selector.control([kev], 0, 0)\n                except OSError:\n                    # See comment above.\n                    pass\n            return key\n\n        def select(self, timeout=None):\n            timeout = None if timeout is None else max(timeout, 0)\n            max_ev = len(self._fd_to_key)\n            ready = []\n            try:\n                kev_list = self._selector.control(None, max_ev, timeout)\n            except InterruptedError:\n                return ready\n            for kev in kev_list:\n                fd = kev.ident\n                flag = kev.filter\n                events = 0\n                if flag == select.KQ_FILTER_READ:\n                    events |= EVENT_READ\n                if flag == select.KQ_FILTER_WRITE:\n                    events |= EVENT_WRITE\n\n                key = self._key_from_fd(fd)\n                if key:\n                    ready.append((key, events & key.events))\n            return ready\n\n        def close(self):\n            self._selector.close()\n            super().close()\n\n\n# Choose the best implementation, roughly:\n#    epoll|kqueue|devpoll > poll > select.\n# select() also can't accept a FD > FD_SETSIZE (usually around 1024)\nif 'KqueueSelector' in globals():\n    DefaultSelector = KqueueSelector\nelif 'EpollSelector' in globals():\n    DefaultSelector = EpollSelector\nelif 'DevpollSelector' in globals():\n    DefaultSelector = DevpollSelector\nelif 'PollSelector' in globals():\n    DefaultSelector = PollSelector\nelse:\n    DefaultSelector = SelectSelector\n", 592], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py": ["import sys\nimport typing as t\nfrom functools import update_wrapper\nfrom types import TracebackType\n\nfrom werkzeug.exceptions import HTTPException\n\nfrom .globals import _app_ctx_stack\nfrom .globals import _request_ctx_stack\nfrom .signals import appcontext_popped\nfrom .signals import appcontext_pushed\nfrom .typing import AfterRequestCallable\n\nif t.TYPE_CHECKING:\n    from .app import Flask\n    from .sessions import SessionMixin\n    from .wrappers import Request\n\n\n# a singleton sentinel value for parameter defaults\n_sentinel = object()\n\n\nclass _AppCtxGlobals:\n    \"\"\"A plain object. Used as a namespace for storing data during an\n    application context.\n\n    Creating an app context automatically creates this object, which is\n    made available as the :data:`g` proxy.\n\n    .. describe:: 'key' in g\n\n        Check whether an attribute is present.\n\n        .. versionadded:: 0.10\n\n    .. describe:: iter(g)\n\n        Return an iterator over the attribute names.\n\n        .. versionadded:: 0.10\n    \"\"\"\n\n    # Define attr methods to let mypy know this is a namespace object\n    # that has arbitrary attributes.\n\n    def __getattr__(self, name: str) -> t.Any:\n        try:\n            return self.__dict__[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def __setattr__(self, name: str, value: t.Any) -> None:\n        self.__dict__[name] = value\n\n    def __delattr__(self, name: str) -> None:\n        try:\n            del self.__dict__[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def get(self, name: str, default: t.Optional[t.Any] = None) -> t.Any:\n        \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        return self.__dict__.get(name, default)\n\n    def pop(self, name: str, default: t.Any = _sentinel) -> t.Any:\n        \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        if default is _sentinel:\n            return self.__dict__.pop(name)\n        else:\n            return self.__dict__.pop(name, default)\n\n    def setdefault(self, name: str, default: t.Any = None) -> t.Any:\n        \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        return self.__dict__.setdefault(name, default)\n\n    def __contains__(self, item: str) -> bool:\n        return item in self.__dict__\n\n    def __iter__(self) -> t.Iterator[str]:\n        return iter(self.__dict__)\n\n    def __repr__(self) -> str:\n        top = _app_ctx_stack.top\n        if top is not None:\n            return f\"<flask.g of {top.app.name!r}>\"\n        return object.__repr__(self)\n\n\ndef after_this_request(f: AfterRequestCallable) -> AfterRequestCallable:\n    \"\"\"Executes a function after this request.  This is useful to modify\n    response objects.  The function is passed the response object and has\n    to return the same or a new one.\n\n    Example::\n\n        @app.route('/')\n        def index():\n            @after_this_request\n            def add_header(response):\n                response.headers['X-Foo'] = 'Parachute'\n                return response\n            return 'Hello World!'\n\n    This is more useful if a function other than the view function wants to\n    modify a response.  For instance think of a decorator that wants to add\n    some headers without converting the return value into a response object.\n\n    .. versionadded:: 0.9\n    \"\"\"\n    _request_ctx_stack.top._after_request_functions.append(f)\n    return f\n\n\ndef copy_current_request_context(f: t.Callable) -> t.Callable:\n    \"\"\"A helper function that decorates a function to retain the current\n    request context.  This is useful when working with greenlets.  The moment\n    the function is decorated a copy of the request context is created and\n    then pushed when the function is called.  The current session is also\n    included in the copied request context.\n\n    Example::\n\n        import gevent\n        from flask import copy_current_request_context\n\n        @app.route('/')\n        def index():\n            @copy_current_request_context\n            def do_some_work():\n                # do some work here, it can access flask.request or\n                # flask.session like you would otherwise in the view function.\n                ...\n            gevent.spawn(do_some_work)\n            return 'Regular response'\n\n    .. versionadded:: 0.10\n    \"\"\"\n    top = _request_ctx_stack.top\n    if top is None:\n        raise RuntimeError(\n            \"This decorator can only be used at local scopes \"\n            \"when a request context is on the stack.  For instance within \"\n            \"view functions.\"\n        )\n    reqctx = top.copy()\n\n    def wrapper(*args, **kwargs):\n        with reqctx:\n            return f(*args, **kwargs)\n\n    return update_wrapper(wrapper, f)\n\n\ndef has_request_context() -> bool:\n    \"\"\"If you have code that wants to test if a request context is there or\n    not this function can be used.  For instance, you may want to take advantage\n    of request information if the request object is available, but fail\n    silently if it is unavailable.\n\n    ::\n\n        class User(db.Model):\n\n            def __init__(self, username, remote_addr=None):\n                self.username = username\n                if remote_addr is None and has_request_context():\n                    remote_addr = request.remote_addr\n                self.remote_addr = remote_addr\n\n    Alternatively you can also just test any of the context bound objects\n    (such as :class:`request` or :class:`g`) for truthness::\n\n        class User(db.Model):\n\n            def __init__(self, username, remote_addr=None):\n                self.username = username\n                if remote_addr is None and request:\n                    remote_addr = request.remote_addr\n                self.remote_addr = remote_addr\n\n    .. versionadded:: 0.7\n    \"\"\"\n    return _request_ctx_stack.top is not None\n\n\ndef has_app_context() -> bool:\n    \"\"\"Works like :func:`has_request_context` but for the application\n    context.  You can also just do a boolean check on the\n    :data:`current_app` object instead.\n\n    .. versionadded:: 0.9\n    \"\"\"\n    return _app_ctx_stack.top is not None\n\n\nclass AppContext:\n    \"\"\"The application context binds an application object implicitly\n    to the current thread or greenlet, similar to how the\n    :class:`RequestContext` binds request information.  The application\n    context is also implicitly created if a request context is created\n    but the application is not on top of the individual application\n    context.\n    \"\"\"\n\n    def __init__(self, app: \"Flask\") -> None:\n        self.app = app\n        self.url_adapter = app.create_url_adapter(None)\n        self.g = app.app_ctx_globals_class()\n\n        # Like request context, app contexts can be pushed multiple times\n        # but there a basic \"refcount\" is enough to track them.\n        self._refcnt = 0\n\n    def push(self) -> None:\n        \"\"\"Binds the app context to the current context.\"\"\"\n        self._refcnt += 1\n        _app_ctx_stack.push(self)\n        appcontext_pushed.send(self.app)\n\n    def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore\n        \"\"\"Pops the app context.\"\"\"\n        try:\n            self._refcnt -= 1\n            if self._refcnt <= 0:\n                if exc is _sentinel:\n                    exc = sys.exc_info()[1]\n                self.app.do_teardown_appcontext(exc)\n        finally:\n            rv = _app_ctx_stack.pop()\n        assert rv is self, f\"Popped wrong app context.  ({rv!r} instead of {self!r})\"\n        appcontext_popped.send(self.app)\n\n    def __enter__(self) -> \"AppContext\":\n        self.push()\n        return self\n\n    def __exit__(\n        self, exc_type: type, exc_value: BaseException, tb: TracebackType\n    ) -> None:\n        self.pop(exc_value)\n\n\nclass RequestContext:\n    \"\"\"The request context contains all request relevant information.  It is\n    created at the beginning of the request and pushed to the\n    `_request_ctx_stack` and removed at the end of it.  It will create the\n    URL adapter and request object for the WSGI environment provided.\n\n    Do not attempt to use this class directly, instead use\n    :meth:`~flask.Flask.test_request_context` and\n    :meth:`~flask.Flask.request_context` to create this object.\n\n    When the request context is popped, it will evaluate all the\n    functions registered on the application for teardown execution\n    (:meth:`~flask.Flask.teardown_request`).\n\n    The request context is automatically popped at the end of the request\n    for you.  In debug mode the request context is kept around if\n    exceptions happen so that interactive debuggers have a chance to\n    introspect the data.  With 0.4 this can also be forced for requests\n    that did not fail and outside of ``DEBUG`` mode.  By setting\n    ``'flask._preserve_context'`` to ``True`` on the WSGI environment the\n    context will not pop itself at the end of the request.  This is used by\n    the :meth:`~flask.Flask.test_client` for example to implement the\n    deferred cleanup functionality.\n\n    You might find this helpful for unittests where you need the\n    information from the context local around for a little longer.  Make\n    sure to properly :meth:`~werkzeug.LocalStack.pop` the stack yourself in\n    that situation, otherwise your unittests will leak memory.\n    \"\"\"\n\n    def __init__(\n        self,\n        app: \"Flask\",\n        environ: dict,\n        request: t.Optional[\"Request\"] = None,\n        session: t.Optional[\"SessionMixin\"] = None,\n    ) -> None:\n        self.app = app\n        if request is None:\n            request = app.request_class(environ)\n        self.request = request\n        self.url_adapter = None\n        try:\n            self.url_adapter = app.create_url_adapter(self.request)\n        except HTTPException as e:\n            self.request.routing_exception = e\n        self.flashes = None\n        self.session = session\n\n        # Request contexts can be pushed multiple times and interleaved with\n        # other request contexts.  Now only if the last level is popped we\n        # get rid of them.  Additionally if an application context is missing\n        # one is created implicitly so for each level we add this information\n        self._implicit_app_ctx_stack: t.List[t.Optional[\"AppContext\"]] = []\n\n        # indicator if the context was preserved.  Next time another context\n        # is pushed the preserved context is popped.\n        self.preserved = False\n\n        # remembers the exception for pop if there is one in case the context\n        # preservation kicks in.\n        self._preserved_exc = None\n\n        # Functions that should be executed after the request on the response\n        # object.  These will be called before the regular \"after_request\"\n        # functions.\n        self._after_request_functions: t.List[AfterRequestCallable] = []\n\n    @property\n    def g(self) -> AppContext:\n        return _app_ctx_stack.top.g\n\n    @g.setter\n    def g(self, value: AppContext) -> None:\n        _app_ctx_stack.top.g = value\n\n    def copy(self) -> \"RequestContext\":\n        \"\"\"Creates a copy of this request context with the same request object.\n        This can be used to move a request context to a different greenlet.\n        Because the actual request object is the same this cannot be used to\n        move a request context to a different thread unless access to the\n        request object is locked.\n\n        .. versionadded:: 0.10\n\n        .. versionchanged:: 1.1\n           The current session object is used instead of reloading the original\n           data. This prevents `flask.session` pointing to an out-of-date object.\n        \"\"\"\n        return self.__class__(\n            self.app,\n            environ=self.request.environ,\n            request=self.request,\n            session=self.session,\n        )\n\n    def match_request(self) -> None:\n        \"\"\"Can be overridden by a subclass to hook into the matching\n        of the request.\n        \"\"\"\n        try:\n            result = self.url_adapter.match(return_rule=True)  # type: ignore\n            self.request.url_rule, self.request.view_args = result  # type: ignore\n        except HTTPException as e:\n            self.request.routing_exception = e\n\n    def push(self) -> None:\n        \"\"\"Binds the request context to the current context.\"\"\"\n        # If an exception occurs in debug mode or if context preservation is\n        # activated under exception situations exactly one context stays\n        # on the stack.  The rationale is that you want to access that\n        # information under debug situations.  However if someone forgets to\n        # pop that context again we want to make sure that on the next push\n        # it's invalidated, otherwise we run at risk that something leaks\n        # memory.  This is usually only a problem in test suite since this\n        # functionality is not active in production environments.\n        top = _request_ctx_stack.top\n        if top is not None and top.preserved:\n            top.pop(top._preserved_exc)\n\n        # Before we push the request context we have to ensure that there\n        # is an application context.\n        app_ctx = _app_ctx_stack.top\n        if app_ctx is None or app_ctx.app != self.app:\n            app_ctx = self.app.app_context()\n            app_ctx.push()\n            self._implicit_app_ctx_stack.append(app_ctx)\n        else:\n            self._implicit_app_ctx_stack.append(None)\n\n        _request_ctx_stack.push(self)\n\n        # Open the session at the moment that the request context is available.\n        # This allows a custom open_session method to use the request context.\n        # Only open a new session if this is the first time the request was\n        # pushed, otherwise stream_with_context loses the session.\n        if self.session is None:\n            session_interface = self.app.session_interface\n            self.session = session_interface.open_session(self.app, self.request)\n\n            if self.session is None:\n                self.session = session_interface.make_null_session(self.app)\n\n        # Match the request URL after loading the session, so that the\n        # session is available in custom URL converters.\n        if self.url_adapter is not None:\n            self.match_request()\n\n    def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore\n        \"\"\"Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        \"\"\"\n        app_ctx = self._implicit_app_ctx_stack.pop()\n        clear_request = False\n\n        try:\n            if not self._implicit_app_ctx_stack:\n                self.preserved = False\n                self._preserved_exc = None\n                if exc is _sentinel:\n                    exc = sys.exc_info()[1]\n                self.app.do_teardown_request(exc)\n\n                request_close = getattr(self.request, \"close\", None)\n                if request_close is not None:\n                    request_close()\n                clear_request = True\n        finally:\n            rv = _request_ctx_stack.pop()\n\n            # get rid of circular dependencies at the end of the request\n            # so that we don't require the GC to be active.\n            if clear_request:\n                rv.request.environ[\"werkzeug.request\"] = None\n\n            # Get rid of the app as well if necessary.\n            if app_ctx is not None:\n                app_ctx.pop(exc)\n\n            assert (\n                rv is self\n            ), f\"Popped wrong request context. ({rv!r} instead of {self!r})\"\n\n    def auto_pop(self, exc: t.Optional[BaseException]) -> None:\n        if self.request.environ.get(\"flask._preserve_context\") or (\n            exc is not None and self.app.preserve_context_on_exception\n        ):\n            self.preserved = True\n            self._preserved_exc = exc  # type: ignore\n        else:\n            self.pop(exc)\n\n    def __enter__(self) -> \"RequestContext\":\n        self.push()\n        return self\n\n    def __exit__(\n        self, exc_type: type, exc_value: BaseException, tb: TracebackType\n    ) -> None:\n        # do not pop the request stack if we are in debug mode and an\n        # exception happened.  This will allow the debugger to still\n        # access the request object in the interactive shell.  Furthermore\n        # the context can be force kept alive for the test client.\n        # See flask.testing for how this works.\n        self.auto_pop(exc_value)\n\n    def __repr__(self) -> str:\n        return (\n            f\"<{type(self).__name__} {self.request.url!r}\"\n            f\" [{self.request.method}] of {self.app.name}>\"\n        )\n", 480], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py": ["import copy\nimport math\nimport operator\nimport sys\nimport typing as t\nimport warnings\nfrom functools import partial\nfrom functools import update_wrapper\n\nfrom .wsgi import ClosingIterator\n\nif t.TYPE_CHECKING:\n    from _typeshed.wsgi import StartResponse\n    from _typeshed.wsgi import WSGIApplication\n    from _typeshed.wsgi import WSGIEnvironment\n\nF = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])\n\ntry:\n    from greenlet import getcurrent as _get_ident\nexcept ImportError:\n    from threading import get_ident as _get_ident\n\n\ndef get_ident() -> int:\n    warnings.warn(\n        \"'get_ident' is deprecated and will be removed in Werkzeug\"\n        \" 2.1. Use 'greenlet.getcurrent' or 'threading.get_ident' for\"\n        \" previous behavior.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return _get_ident()  # type: ignore\n\n\nclass _CannotUseContextVar(Exception):\n    pass\n\n\ntry:\n    from contextvars import ContextVar\n\n    if \"gevent\" in sys.modules or \"eventlet\" in sys.modules:\n        # Both use greenlet, so first check it has patched\n        # ContextVars, Greenlet <0.4.17 does not.\n        import greenlet\n\n        greenlet_patched = getattr(greenlet, \"GREENLET_USE_CONTEXT_VARS\", False)\n\n        if not greenlet_patched:\n            # If Gevent is used, check it has patched ContextVars,\n            # <20.5 does not.\n            try:\n                from gevent.monkey import is_object_patched\n            except ImportError:\n                # Gevent isn't used, but Greenlet is and hasn't patched\n                raise _CannotUseContextVar() from None\n            else:\n                if is_object_patched(\"threading\", \"local\") and not is_object_patched(\n                    \"contextvars\", \"ContextVar\"\n                ):\n                    raise _CannotUseContextVar()\n\n    def __release_local__(storage: t.Any) -> None:\n        # Can remove when support for non-stdlib ContextVars is\n        # removed, see \"Fake\" version below.\n        storage.set({})\n\n\nexcept (ImportError, _CannotUseContextVar):\n\n    class ContextVar:  # type: ignore\n        \"\"\"A fake ContextVar based on the previous greenlet/threading\n        ident function. Used on Python 3.6, eventlet, and old versions\n        of gevent.\n        \"\"\"\n\n        def __init__(self, _name: str) -> None:\n            self.storage: t.Dict[int, t.Dict[str, t.Any]] = {}\n\n        def get(self, default: t.Dict[str, t.Any]) -> t.Dict[str, t.Any]:\n            return self.storage.get(_get_ident(), default)\n\n        def set(self, value: t.Dict[str, t.Any]) -> None:\n            self.storage[_get_ident()] = value\n\n    def __release_local__(storage: t.Any) -> None:\n        # Special version to ensure that the storage is cleaned up on\n        # release.\n        storage.storage.pop(_get_ident(), None)\n\n\ndef release_local(local: t.Union[\"Local\", \"LocalStack\"]) -> None:\n    \"\"\"Releases the contents of the local for the current context.\n    This makes it possible to use locals without a manager.\n\n    Example::\n\n        >>> loc = Local()\n        >>> loc.foo = 42\n        >>> release_local(loc)\n        >>> hasattr(loc, 'foo')\n        False\n\n    With this function one can release :class:`Local` objects as well\n    as :class:`LocalStack` objects.  However it is not possible to\n    release data held by proxies that way, one always has to retain\n    a reference to the underlying local object in order to be able\n    to release it.\n\n    .. versionadded:: 0.6.1\n    \"\"\"\n    local.__release_local__()\n\n\nclass Local:\n    __slots__ = (\"_storage\",)\n\n    def __init__(self) -> None:\n        object.__setattr__(self, \"_storage\", ContextVar(\"local_storage\"))\n\n    @property\n    def __storage__(self) -> t.Dict[str, t.Any]:\n        warnings.warn(\n            \"'__storage__' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self._storage.get({})  # type: ignore\n\n    @property\n    def __ident_func__(self) -> t.Callable[[], int]:\n        warnings.warn(\n            \"'__ident_func__' is deprecated and will be removed in\"\n            \" Werkzeug 2.1. It should not be used in Python 3.7+.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return _get_ident  # type: ignore\n\n    @__ident_func__.setter\n    def __ident_func__(self, func: t.Callable[[], int]) -> None:\n        warnings.warn(\n            \"'__ident_func__' is deprecated and will be removed in\"\n            \" Werkzeug 2.1. Setting it no longer has any effect.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n    def __iter__(self) -> t.Iterator[t.Tuple[int, t.Any]]:\n        return iter(self._storage.get({}).items())\n\n    def __call__(self, proxy: str) -> \"LocalProxy\":\n        \"\"\"Create a proxy for a name.\"\"\"\n        return LocalProxy(self, proxy)\n\n    def __release_local__(self) -> None:\n        __release_local__(self._storage)\n\n    def __getattr__(self, name: str) -> t.Any:\n        values = self._storage.get({})\n        try:\n            return values[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def __setattr__(self, name: str, value: t.Any) -> None:\n        values = self._storage.get({}).copy()\n        values[name] = value\n        self._storage.set(values)\n\n    def __delattr__(self, name: str) -> None:\n        values = self._storage.get({}).copy()\n        try:\n            del values[name]\n            self._storage.set(values)\n        except KeyError:\n            raise AttributeError(name) from None\n\n\nclass LocalStack:\n    \"\"\"This class works similar to a :class:`Local` but keeps a stack\n    of objects instead.  This is best explained with an example::\n\n        >>> ls = LocalStack()\n        >>> ls.push(42)\n        >>> ls.top\n        42\n        >>> ls.push(23)\n        >>> ls.top\n        23\n        >>> ls.pop()\n        23\n        >>> ls.top\n        42\n\n    They can be force released by using a :class:`LocalManager` or with\n    the :func:`release_local` function but the correct way is to pop the\n    item from the stack after using.  When the stack is empty it will\n    no longer be bound to the current context (and as such released).\n\n    By calling the stack without arguments it returns a proxy that resolves to\n    the topmost item on the stack.\n\n    .. versionadded:: 0.6.1\n    \"\"\"\n\n    def __init__(self) -> None:\n        self._local = Local()\n\n    def __release_local__(self) -> None:\n        self._local.__release_local__()\n\n    @property\n    def __ident_func__(self) -> t.Callable[[], int]:\n        return self._local.__ident_func__\n\n    @__ident_func__.setter\n    def __ident_func__(self, value: t.Callable[[], int]) -> None:\n        object.__setattr__(self._local, \"__ident_func__\", value)\n\n    def __call__(self) -> \"LocalProxy\":\n        def _lookup() -> t.Any:\n            rv = self.top\n            if rv is None:\n                raise RuntimeError(\"object unbound\")\n            return rv\n\n        return LocalProxy(_lookup)\n\n    def push(self, obj: t.Any) -> t.List[t.Any]:\n        \"\"\"Pushes a new item to the stack\"\"\"\n        rv = getattr(self._local, \"stack\", []).copy()\n        rv.append(obj)\n        self._local.stack = rv\n        return rv  # type: ignore\n\n    def pop(self) -> t.Any:\n        \"\"\"Removes the topmost item from the stack, will return the\n        old value or `None` if the stack was already empty.\n        \"\"\"\n        stack = getattr(self._local, \"stack\", None)\n        if stack is None:\n            return None\n        elif len(stack) == 1:\n            release_local(self._local)\n            return stack[-1]\n        else:\n            return stack.pop()\n\n    @property\n    def top(self) -> t.Any:\n        \"\"\"The topmost item on the stack.  If the stack is empty,\n        `None` is returned.\n        \"\"\"\n        try:\n            return self._local.stack[-1]\n        except (AttributeError, IndexError):\n            return None\n\n\nclass LocalManager:\n    \"\"\"Local objects cannot manage themselves. For that you need a local\n    manager. You can pass a local manager multiple locals or add them\n    later by appending them to `manager.locals`. Every time the manager\n    cleans up, it will clean up all the data left in the locals for this\n    context.\n\n    .. versionchanged:: 2.0\n        ``ident_func`` is deprecated and will be removed in Werkzeug\n         2.1.\n\n    .. versionchanged:: 0.6.1\n        The :func:`release_local` function can be used instead of a\n        manager.\n\n    .. versionchanged:: 0.7\n        The ``ident_func`` parameter was added.\n    \"\"\"\n\n    def __init__(\n        self,\n        locals: t.Optional[t.Iterable[t.Union[Local, LocalStack]]] = None,\n        ident_func: None = None,\n    ) -> None:\n        if locals is None:\n            self.locals = []\n        elif isinstance(locals, Local):\n            self.locals = [locals]\n        else:\n            self.locals = list(locals)\n\n        if ident_func is not None:\n            warnings.warn(\n                \"'ident_func' is deprecated and will be removed in\"\n                \" Werkzeug 2.1. Setting it no longer has any effect.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n\n    @property\n    def ident_func(self) -> t.Callable[[], int]:\n        warnings.warn(\n            \"'ident_func' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return _get_ident  # type: ignore\n\n    @ident_func.setter\n    def ident_func(self, func: t.Callable[[], int]) -> None:\n        warnings.warn(\n            \"'ident_func' is deprecated and will be removedin Werkzeug\"\n            \" 2.1. Setting it no longer has any effect.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n    def get_ident(self) -> int:\n        \"\"\"Return the context identifier the local objects use internally for\n        this context.  You cannot override this method to change the behavior\n        but use it to link other context local objects (such as SQLAlchemy's\n        scoped sessions) to the Werkzeug locals.\n\n        .. deprecated:: 2.0\n            Will be removed in Werkzeug 2.1.\n\n        .. versionchanged:: 0.7\n           You can pass a different ident function to the local manager that\n           will then be propagated to all the locals passed to the\n           constructor.\n        \"\"\"\n        warnings.warn(\n            \"'get_ident' is deprecated and will be removed in Werkzeug 2.1.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return self.ident_func()\n\n    def cleanup(self) -> None:\n        \"\"\"Manually clean up the data in the locals for this context.  Call\n        this at the end of the request or use `make_middleware()`.\n        \"\"\"\n        for local in self.locals:\n            release_local(local)\n\n    def make_middleware(self, app: \"WSGIApplication\") -> \"WSGIApplication\":\n        \"\"\"Wrap a WSGI application so that cleaning up happens after\n        request end.\n        \"\"\"\n\n        def application(\n            environ: \"WSGIEnvironment\", start_response: \"StartResponse\"\n        ) -> t.Iterable[bytes]:\n            return ClosingIterator(app(environ, start_response), self.cleanup)\n\n        return application\n\n    def middleware(self, func: \"WSGIApplication\") -> \"WSGIApplication\":\n        \"\"\"Like `make_middleware` but for decorating functions.\n\n        Example usage::\n\n            @manager.middleware\n            def application(environ, start_response):\n                ...\n\n        The difference to `make_middleware` is that the function passed\n        will have all the arguments copied from the inner application\n        (name, docstring, module).\n        \"\"\"\n        return update_wrapper(self.make_middleware(func), func)\n\n    def __repr__(self) -> str:\n        return f\"<{type(self).__name__} storages: {len(self.locals)}>\"\n\n\nclass _ProxyLookup:\n    \"\"\"Descriptor that handles proxied attribute lookup for\n    :class:`LocalProxy`.\n\n    :param f: The built-in function this attribute is accessed through.\n        Instead of looking up the special method, the function call\n        is redone on the object.\n    :param fallback: Call this method if the proxy is unbound instead of\n        raising a :exc:`RuntimeError`.\n    :param class_value: Value to return when accessed from the class.\n        Used for ``__doc__`` so building docs still works.\n    \"\"\"\n\n    __slots__ = (\"bind_f\", \"fallback\", \"class_value\", \"name\")\n\n    def __init__(\n        self,\n        f: t.Optional[t.Callable] = None,\n        fallback: t.Optional[t.Callable] = None,\n        class_value: t.Optional[t.Any] = None,\n    ) -> None:\n        bind_f: t.Optional[t.Callable[[\"LocalProxy\", t.Any], t.Callable]]\n\n        if hasattr(f, \"__get__\"):\n            # A Python function, can be turned into a bound method.\n\n            def bind_f(instance: \"LocalProxy\", obj: t.Any) -> t.Callable:\n                return f.__get__(obj, type(obj))  # type: ignore\n\n        elif f is not None:\n            # A C function, use partial to bind the first argument.\n\n            def bind_f(instance: \"LocalProxy\", obj: t.Any) -> t.Callable:\n                return partial(f, obj)  # type: ignore\n\n        else:\n            # Use getattr, which will produce a bound method.\n            bind_f = None\n\n        self.bind_f = bind_f\n        self.fallback = fallback\n        self.class_value = class_value\n\n    def __set_name__(self, owner: \"LocalProxy\", name: str) -> None:\n        self.name = name\n\n    def __get__(self, instance: \"LocalProxy\", owner: t.Optional[type] = None) -> t.Any:\n        if instance is None:\n            if self.class_value is not None:\n                return self.class_value\n\n            return self\n\n        try:\n            obj = instance._get_current_object()\n        except RuntimeError:\n            if self.fallback is None:\n                raise\n\n            return self.fallback.__get__(instance, owner)  # type: ignore\n\n        if self.bind_f is not None:\n            return self.bind_f(instance, obj)\n\n        return getattr(obj, self.name)\n\n    def __repr__(self) -> str:\n        return f\"proxy {self.name}\"\n\n    def __call__(self, instance: \"LocalProxy\", *args: t.Any, **kwargs: t.Any) -> t.Any:\n        \"\"\"Support calling unbound methods from the class. For example,\n        this happens with ``copy.copy``, which does\n        ``type(x).__copy__(x)``. ``type(x)`` can't be proxied, so it\n        returns the proxy type and descriptor.\n        \"\"\"\n        return self.__get__(instance, type(instance))(*args, **kwargs)\n\n\nclass _ProxyIOp(_ProxyLookup):\n    \"\"\"Look up an augmented assignment method on a proxied object. The\n    method is wrapped to return the proxy instead of the object.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __init__(\n        self, f: t.Optional[t.Callable] = None, fallback: t.Optional[t.Callable] = None\n    ) -> None:\n        super().__init__(f, fallback)\n\n        def bind_f(instance: \"LocalProxy\", obj: t.Any) -> t.Callable:\n            def i_op(self: t.Any, other: t.Any) -> \"LocalProxy\":\n                f(self, other)  # type: ignore\n                return instance\n\n            return i_op.__get__(obj, type(obj))  # type: ignore\n\n        self.bind_f = bind_f\n\n\ndef _l_to_r_op(op: F) -> F:\n    \"\"\"Swap the argument order to turn an l-op into an r-op.\"\"\"\n\n    def r_op(obj: t.Any, other: t.Any) -> t.Any:\n        return op(other, obj)\n\n    return t.cast(F, r_op)\n\n\nclass LocalProxy:\n    \"\"\"A proxy to the object bound to a :class:`Local`. All operations\n    on the proxy are forwarded to the bound object. If no object is\n    bound, a :exc:`RuntimeError` is raised.\n\n    .. code-block:: python\n\n        from werkzeug.local import Local\n        l = Local()\n\n        # a proxy to whatever l.user is set to\n        user = l(\"user\")\n\n        from werkzeug.local import LocalStack\n        _request_stack = LocalStack()\n\n        # a proxy to _request_stack.top\n        request = _request_stack()\n\n        # a proxy to the session attribute of the request proxy\n        session = LocalProxy(lambda: request.session)\n\n    ``__repr__`` and ``__class__`` are forwarded, so ``repr(x)`` and\n    ``isinstance(x, cls)`` will look like the proxied object. Use\n    ``issubclass(type(x), LocalProxy)`` to check if an object is a\n    proxy.\n\n    .. code-block:: python\n\n        repr(user)  # <User admin>\n        isinstance(user, User)  # True\n        issubclass(type(user), LocalProxy)  # True\n\n    :param local: The :class:`Local` or callable that provides the\n        proxied object.\n    :param name: The attribute name to look up on a :class:`Local`. Not\n        used if a callable is given.\n\n    .. versionchanged:: 2.0\n        Updated proxied attributes and methods to reflect the current\n        data model.\n\n    .. versionchanged:: 0.6.1\n        The class can be instantiated with a callable.\n    \"\"\"\n\n    __slots__ = (\"__local\", \"__name\", \"__wrapped__\")\n\n    def __init__(\n        self,\n        local: t.Union[\"Local\", t.Callable[[], t.Any]],\n        name: t.Optional[str] = None,\n    ) -> None:\n        object.__setattr__(self, \"_LocalProxy__local\", local)\n        object.__setattr__(self, \"_LocalProxy__name\", name)\n\n        if callable(local) and not hasattr(local, \"__release_local__\"):\n            # \"local\" is a callable that is not an instance of Local or\n            # LocalManager: mark it as a wrapped function.\n            object.__setattr__(self, \"__wrapped__\", local)\n\n    def _get_current_object(self) -> t.Any:\n        \"\"\"Return the current object.  This is useful if you want the real\n        object behind the proxy at a time for performance reasons or because\n        you want to pass the object into a different context.\n        \"\"\"\n        if not hasattr(self.__local, \"__release_local__\"):  # type: ignore\n            return self.__local()  # type: ignore\n\n        try:\n            return getattr(self.__local, self.__name)  # type: ignore\n        except AttributeError:\n            name = self.__name  # type: ignore\n            raise RuntimeError(f\"no object bound to {name}\") from None\n\n    __doc__ = _ProxyLookup(  # type: ignore\n        class_value=__doc__, fallback=lambda self: type(self).__doc__\n    )\n    # __del__ should only delete the proxy\n    __repr__ = _ProxyLookup(  # type: ignore\n        repr, fallback=lambda self: f\"<{type(self).__name__} unbound>\"\n    )\n    __str__ = _ProxyLookup(str)  # type: ignore\n    __bytes__ = _ProxyLookup(bytes)\n    __format__ = _ProxyLookup()  # type: ignore\n    __lt__ = _ProxyLookup(operator.lt)\n    __le__ = _ProxyLookup(operator.le)\n    __eq__ = _ProxyLookup(operator.eq)  # type: ignore\n    __ne__ = _ProxyLookup(operator.ne)  # type: ignore\n    __gt__ = _ProxyLookup(operator.gt)\n    __ge__ = _ProxyLookup(operator.ge)\n    __hash__ = _ProxyLookup(hash)  # type: ignore\n    __bool__ = _ProxyLookup(bool, fallback=lambda self: False)\n    __getattr__ = _ProxyLookup(getattr)\n    # __getattribute__ triggered through __getattr__\n    __setattr__ = _ProxyLookup(setattr)  # type: ignore\n    __delattr__ = _ProxyLookup(delattr)  # type: ignore\n    __dir__ = _ProxyLookup(dir, fallback=lambda self: [])  # type: ignore\n    # __get__ (proxying descriptor not supported)\n    # __set__ (descriptor)\n    # __delete__ (descriptor)\n    # __set_name__ (descriptor)\n    # __objclass__ (descriptor)\n    # __slots__ used by proxy itself\n    # __dict__ (__getattr__)\n    # __weakref__ (__getattr__)\n    # __init_subclass__ (proxying metaclass not supported)\n    # __prepare__ (metaclass)\n    __class__ = _ProxyLookup(fallback=lambda self: type(self))  # type: ignore\n    __instancecheck__ = _ProxyLookup(lambda self, other: isinstance(other, self))\n    __subclasscheck__ = _ProxyLookup(lambda self, other: issubclass(other, self))\n    # __class_getitem__ triggered through __getitem__\n    __call__ = _ProxyLookup(lambda self, *args, **kwargs: self(*args, **kwargs))\n    __len__ = _ProxyLookup(len)\n    __length_hint__ = _ProxyLookup(operator.length_hint)\n    __getitem__ = _ProxyLookup(operator.getitem)\n    __setitem__ = _ProxyLookup(operator.setitem)\n    __delitem__ = _ProxyLookup(operator.delitem)\n    # __missing__ triggered through __getitem__\n    __iter__ = _ProxyLookup(iter)\n    __next__ = _ProxyLookup(next)\n    __reversed__ = _ProxyLookup(reversed)\n    __contains__ = _ProxyLookup(operator.contains)\n    __add__ = _ProxyLookup(operator.add)\n    __sub__ = _ProxyLookup(operator.sub)\n    __mul__ = _ProxyLookup(operator.mul)\n    __matmul__ = _ProxyLookup(operator.matmul)\n    __truediv__ = _ProxyLookup(operator.truediv)\n    __floordiv__ = _ProxyLookup(operator.floordiv)\n    __mod__ = _ProxyLookup(operator.mod)\n    __divmod__ = _ProxyLookup(divmod)\n    __pow__ = _ProxyLookup(pow)\n    __lshift__ = _ProxyLookup(operator.lshift)\n    __rshift__ = _ProxyLookup(operator.rshift)\n    __and__ = _ProxyLookup(operator.and_)\n    __xor__ = _ProxyLookup(operator.xor)\n    __or__ = _ProxyLookup(operator.or_)\n    __radd__ = _ProxyLookup(_l_to_r_op(operator.add))\n    __rsub__ = _ProxyLookup(_l_to_r_op(operator.sub))\n    __rmul__ = _ProxyLookup(_l_to_r_op(operator.mul))\n    __rmatmul__ = _ProxyLookup(_l_to_r_op(operator.matmul))\n    __rtruediv__ = _ProxyLookup(_l_to_r_op(operator.truediv))\n    __rfloordiv__ = _ProxyLookup(_l_to_r_op(operator.floordiv))\n    __rmod__ = _ProxyLookup(_l_to_r_op(operator.mod))\n    __rdivmod__ = _ProxyLookup(_l_to_r_op(divmod))\n    __rpow__ = _ProxyLookup(_l_to_r_op(pow))\n    __rlshift__ = _ProxyLookup(_l_to_r_op(operator.lshift))\n    __rrshift__ = _ProxyLookup(_l_to_r_op(operator.rshift))\n    __rand__ = _ProxyLookup(_l_to_r_op(operator.and_))\n    __rxor__ = _ProxyLookup(_l_to_r_op(operator.xor))\n    __ror__ = _ProxyLookup(_l_to_r_op(operator.or_))\n    __iadd__ = _ProxyIOp(operator.iadd)\n    __isub__ = _ProxyIOp(operator.isub)\n    __imul__ = _ProxyIOp(operator.imul)\n    __imatmul__ = _ProxyIOp(operator.imatmul)\n    __itruediv__ = _ProxyIOp(operator.itruediv)\n    __ifloordiv__ = _ProxyIOp(operator.ifloordiv)\n    __imod__ = _ProxyIOp(operator.imod)\n    __ipow__ = _ProxyIOp(operator.ipow)\n    __ilshift__ = _ProxyIOp(operator.ilshift)\n    __irshift__ = _ProxyIOp(operator.irshift)\n    __iand__ = _ProxyIOp(operator.iand)\n    __ixor__ = _ProxyIOp(operator.ixor)\n    __ior__ = _ProxyIOp(operator.ior)\n    __neg__ = _ProxyLookup(operator.neg)\n    __pos__ = _ProxyLookup(operator.pos)\n    __abs__ = _ProxyLookup(abs)\n    __invert__ = _ProxyLookup(operator.invert)\n    __complex__ = _ProxyLookup(complex)\n    __int__ = _ProxyLookup(int)\n    __float__ = _ProxyLookup(float)\n    __index__ = _ProxyLookup(operator.index)\n    __round__ = _ProxyLookup(round)\n    __trunc__ = _ProxyLookup(math.trunc)\n    __floor__ = _ProxyLookup(math.floor)\n    __ceil__ = _ProxyLookup(math.ceil)\n    __enter__ = _ProxyLookup()\n    __exit__ = _ProxyLookup()\n    __await__ = _ProxyLookup()\n    __aiter__ = _ProxyLookup()\n    __anext__ = _ProxyLookup()\n    __aenter__ = _ProxyLookup()\n    __aexit__ = _ProxyLookup()\n    __copy__ = _ProxyLookup(copy.copy)\n    __deepcopy__ = _ProxyLookup(copy.deepcopy)\n    # __getnewargs_ex__ (pickle through proxy not supported)\n    # __getnewargs__ (pickle)\n    # __getstate__ (pickle)\n    # __setstate__ (pickle)\n    # __reduce__ (pickle)\n    # __reduce_ex__ (pickle)\n", 677], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/signals.py": ["import typing as t\n\ntry:\n    from blinker import Namespace\n\n    signals_available = True\nexcept ImportError:\n    signals_available = False\n\n    class Namespace:  # type: ignore\n        def signal(self, name: str, doc: t.Optional[str] = None) -> \"_FakeSignal\":\n            return _FakeSignal(name, doc)\n\n    class _FakeSignal:\n        \"\"\"If blinker is unavailable, create a fake class with the same\n        interface that allows sending of signals but will fail with an\n        error on anything else.  Instead of doing anything on send, it\n        will just ignore the arguments and do nothing instead.\n        \"\"\"\n\n        def __init__(self, name: str, doc: t.Optional[str] = None) -> None:\n            self.name = name\n            self.__doc__ = doc\n\n        def send(self, *args: t.Any, **kwargs: t.Any) -> t.Any:\n            pass\n\n        def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.Any:\n            raise RuntimeError(\n                \"Signalling support is unavailable because the blinker\"\n                \" library is not installed.\"\n            ) from None\n\n        connect = connect_via = connected_to = temporarily_connected_to = _fail\n        disconnect = _fail\n        has_receivers_for = receivers_for = _fail\n        del _fail\n\n\n# The namespace for code signals.  If you are not Flask code, do\n# not put signals in here.  Create your own namespace instead.\n_signals = Namespace()\n\n\n# Core signals.  For usage examples grep the source code or consult\n# the API documentation in docs/api.rst as well as docs/signals.rst\ntemplate_rendered = _signals.signal(\"template-rendered\")\nbefore_render_template = _signals.signal(\"before-render-template\")\nrequest_started = _signals.signal(\"request-started\")\nrequest_finished = _signals.signal(\"request-finished\")\nrequest_tearing_down = _signals.signal(\"request-tearing-down\")\ngot_request_exception = _signals.signal(\"got-request-exception\")\nappcontext_tearing_down = _signals.signal(\"appcontext-tearing-down\")\nappcontext_pushed = _signals.signal(\"appcontext-pushed\")\nappcontext_popped = _signals.signal(\"appcontext-popped\")\nmessage_flashed = _signals.signal(\"message-flashed\")\n", 56], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py": ["#! /usr/bin/env python3\n\"\"\"Interfaces for launching and remotely controlling Web browsers.\"\"\"\n# Maintained by Georg Brandl.\n\nimport os\nimport shlex\nimport shutil\nimport sys\nimport subprocess\nimport threading\n\n__all__ = [\"Error\", \"open\", \"open_new\", \"open_new_tab\", \"get\", \"register\"]\n\nclass Error(Exception):\n    pass\n\n_lock = threading.RLock()\n_browsers = {}                  # Dictionary of available browser controllers\n_tryorder = None                # Preference order of available browsers\n_os_preferred_browser = None    # The preferred browser\n\ndef register(name, klass, instance=None, *, preferred=False):\n    \"\"\"Register a browser connector.\"\"\"\n    with _lock:\n        if _tryorder is None:\n            register_standard_browsers()\n        _browsers[name.lower()] = [klass, instance]\n\n        # Preferred browsers go to the front of the list.\n        # Need to match to the default browser returned by xdg-settings, which\n        # may be of the form e.g. \"firefox.desktop\".\n        if preferred or (_os_preferred_browser and name in _os_preferred_browser):\n            _tryorder.insert(0, name)\n        else:\n            _tryorder.append(name)\n\ndef get(using=None):\n    \"\"\"Return a browser launcher instance appropriate for the environment.\"\"\"\n    if _tryorder is None:\n        with _lock:\n            if _tryorder is None:\n                register_standard_browsers()\n    if using is not None:\n        alternatives = [using]\n    else:\n        alternatives = _tryorder\n    for browser in alternatives:\n        if '%s' in browser:\n            # User gave us a command line, split it into name and args\n            browser = shlex.split(browser)\n            if browser[-1] == '&':\n                return BackgroundBrowser(browser[:-1])\n            else:\n                return GenericBrowser(browser)\n        else:\n            # User gave us a browser name or path.\n            try:\n                command = _browsers[browser.lower()]\n            except KeyError:\n                command = _synthesize(browser)\n            if command[1] is not None:\n                return command[1]\n            elif command[0] is not None:\n                return command[0]()\n    raise Error(\"could not locate runnable browser\")\n\n# Please note: the following definition hides a builtin function.\n# It is recommended one does \"import webbrowser\" and uses webbrowser.open(url)\n# instead of \"from webbrowser import *\".\n\ndef open(url, new=0, autoraise=True):\n    if _tryorder is None:\n        with _lock:\n            if _tryorder is None:\n                register_standard_browsers()\n    for name in _tryorder:\n        browser = get(name)\n        if browser.open(url, new, autoraise):\n            return True\n    return False\n\ndef open_new(url):\n    return open(url, 1)\n\ndef open_new_tab(url):\n    return open(url, 2)\n\n\ndef _synthesize(browser, *, preferred=False):\n    \"\"\"Attempt to synthesize a controller base on existing controllers.\n\n    This is useful to create a controller when a user specifies a path to\n    an entry in the BROWSER environment variable -- we can copy a general\n    controller to operate using a specific installation of the desired\n    browser in this way.\n\n    If we can't create a controller in this way, or if there is no\n    executable for the requested browser, return [None, None].\n\n    \"\"\"\n    cmd = browser.split()[0]\n    if not shutil.which(cmd):\n        return [None, None]\n    name = os.path.basename(cmd)\n    try:\n        command = _browsers[name.lower()]\n    except KeyError:\n        return [None, None]\n    # now attempt to clone to fit the new name:\n    controller = command[1]\n    if controller and name.lower() == controller.basename:\n        import copy\n        controller = copy.copy(controller)\n        controller.name = browser\n        controller.basename = os.path.basename(browser)\n        register(browser, None, instance=controller, preferred=preferred)\n        return [None, controller]\n    return [None, None]\n\n\n# General parent classes\n\nclass BaseBrowser(object):\n    \"\"\"Parent class for all browsers. Do not use directly.\"\"\"\n\n    args = ['%s']\n\n    def __init__(self, name=\"\"):\n        self.name = name\n        self.basename = name\n\n    def open(self, url, new=0, autoraise=True):\n        raise NotImplementedError\n\n    def open_new(self, url):\n        return self.open(url, 1)\n\n    def open_new_tab(self, url):\n        return self.open(url, 2)\n\n\nclass GenericBrowser(BaseBrowser):\n    \"\"\"Class for all browsers started with a command\n       and without remote functionality.\"\"\"\n\n    def __init__(self, name):\n        if isinstance(name, str):\n            self.name = name\n            self.args = [\"%s\"]\n        else:\n            # name should be a list with arguments\n            self.name = name[0]\n            self.args = name[1:]\n        self.basename = os.path.basename(self.name)\n\n    def open(self, url, new=0, autoraise=True):\n        cmdline = [self.name] + [arg.replace(\"%s\", url)\n                                 for arg in self.args]\n        try:\n            if sys.platform[:3] == 'win':\n                p = subprocess.Popen(cmdline)\n            else:\n                p = subprocess.Popen(cmdline, close_fds=True)\n            return not p.wait()\n        except OSError:\n            return False\n\n\nclass BackgroundBrowser(GenericBrowser):\n    \"\"\"Class for all browsers which are to be started in the\n       background.\"\"\"\n\n    def open(self, url, new=0, autoraise=True):\n        cmdline = [self.name] + [arg.replace(\"%s\", url)\n                                 for arg in self.args]\n        try:\n            if sys.platform[:3] == 'win':\n                p = subprocess.Popen(cmdline)\n            else:\n                p = subprocess.Popen(cmdline, close_fds=True,\n                                     start_new_session=True)\n            return (p.poll() is None)\n        except OSError:\n            return False\n\n\nclass UnixBrowser(BaseBrowser):\n    \"\"\"Parent class for all Unix browsers with remote functionality.\"\"\"\n\n    raise_opts = None\n    background = False\n    redirect_stdout = True\n    # In remote_args, %s will be replaced with the requested URL.  %action will\n    # be replaced depending on the value of 'new' passed to open.\n    # remote_action is used for new=0 (open).  If newwin is not None, it is\n    # used for new=1 (open_new).  If newtab is not None, it is used for\n    # new=3 (open_new_tab).  After both substitutions are made, any empty\n    # strings in the transformed remote_args list will be removed.\n    remote_args = ['%action', '%s']\n    remote_action = None\n    remote_action_newwin = None\n    remote_action_newtab = None\n\n    def _invoke(self, args, remote, autoraise):\n        raise_opt = []\n        if remote and self.raise_opts:\n            # use autoraise argument only for remote invocation\n            autoraise = int(autoraise)\n            opt = self.raise_opts[autoraise]\n            if opt: raise_opt = [opt]\n\n        cmdline = [self.name] + raise_opt + args\n\n        if remote or self.background:\n            inout = subprocess.DEVNULL\n        else:\n            # for TTY browsers, we need stdin/out\n            inout = None\n        p = subprocess.Popen(cmdline, close_fds=True, stdin=inout,\n                             stdout=(self.redirect_stdout and inout or None),\n                             stderr=inout, start_new_session=True)\n        if remote:\n            # wait at most five seconds. If the subprocess is not finished, the\n            # remote invocation has (hopefully) started a new instance.\n            try:\n                rc = p.wait(5)\n                # if remote call failed, open() will try direct invocation\n                return not rc\n            except subprocess.TimeoutExpired:\n                return True\n        elif self.background:\n            if p.poll() is None:\n                return True\n            else:\n                return False\n        else:\n            return not p.wait()\n\n    def open(self, url, new=0, autoraise=True):\n        if new == 0:\n            action = self.remote_action\n        elif new == 1:\n            action = self.remote_action_newwin\n        elif new == 2:\n            if self.remote_action_newtab is None:\n                action = self.remote_action_newwin\n            else:\n                action = self.remote_action_newtab\n        else:\n            raise Error(\"Bad 'new' parameter to open(); \" +\n                        \"expected 0, 1, or 2, got %s\" % new)\n\n        args = [arg.replace(\"%s\", url).replace(\"%action\", action)\n                for arg in self.remote_args]\n        args = [arg for arg in args if arg]\n        success = self._invoke(args, True, autoraise)\n        if not success:\n            # remote invocation failed, try straight way\n            args = [arg.replace(\"%s\", url) for arg in self.args]\n            return self._invoke(args, False, False)\n        else:\n            return True\n\n\nclass Mozilla(UnixBrowser):\n    \"\"\"Launcher class for Mozilla browsers.\"\"\"\n\n    remote_args = ['%action', '%s']\n    remote_action = \"\"\n    remote_action_newwin = \"-new-window\"\n    remote_action_newtab = \"-new-tab\"\n    background = True\n\n\nclass Netscape(UnixBrowser):\n    \"\"\"Launcher class for Netscape browser.\"\"\"\n\n    raise_opts = [\"-noraise\", \"-raise\"]\n    remote_args = ['-remote', 'openURL(%s%action)']\n    remote_action = \"\"\n    remote_action_newwin = \",new-window\"\n    remote_action_newtab = \",new-tab\"\n    background = True\n\n\nclass Galeon(UnixBrowser):\n    \"\"\"Launcher class for Galeon/Epiphany browsers.\"\"\"\n\n    raise_opts = [\"-noraise\", \"\"]\n    remote_args = ['%action', '%s']\n    remote_action = \"-n\"\n    remote_action_newwin = \"-w\"\n    background = True\n\n\nclass Chrome(UnixBrowser):\n    \"Launcher class for Google Chrome browser.\"\n\n    remote_args = ['%action', '%s']\n    remote_action = \"\"\n    remote_action_newwin = \"--new-window\"\n    remote_action_newtab = \"\"\n    background = True\n\nChromium = Chrome\n\n\nclass Opera(UnixBrowser):\n    \"Launcher class for Opera browser.\"\n\n    remote_args = ['%action', '%s']\n    remote_action = \"\"\n    remote_action_newwin = \"--new-window\"\n    remote_action_newtab = \"\"\n    background = True\n\n\nclass Elinks(UnixBrowser):\n    \"Launcher class for Elinks browsers.\"\n\n    remote_args = ['-remote', 'openURL(%s%action)']\n    remote_action = \"\"\n    remote_action_newwin = \",new-window\"\n    remote_action_newtab = \",new-tab\"\n    background = False\n\n    # elinks doesn't like its stdout to be redirected -\n    # it uses redirected stdout as a signal to do -dump\n    redirect_stdout = False\n\n\nclass Konqueror(BaseBrowser):\n    \"\"\"Controller for the KDE File Manager (kfm, or Konqueror).\n\n    See the output of ``kfmclient --commands``\n    for more information on the Konqueror remote-control interface.\n    \"\"\"\n\n    def open(self, url, new=0, autoraise=True):\n        # XXX Currently I know no way to prevent KFM from opening a new win.\n        if new == 2:\n            action = \"newTab\"\n        else:\n            action = \"openURL\"\n\n        devnull = subprocess.DEVNULL\n\n        try:\n            p = subprocess.Popen([\"kfmclient\", action, url],\n                                 close_fds=True, stdin=devnull,\n                                 stdout=devnull, stderr=devnull)\n        except OSError:\n            # fall through to next variant\n            pass\n        else:\n            p.wait()\n            # kfmclient's return code unfortunately has no meaning as it seems\n            return True\n\n        try:\n            p = subprocess.Popen([\"konqueror\", \"--silent\", url],\n                                 close_fds=True, stdin=devnull,\n                                 stdout=devnull, stderr=devnull,\n                                 start_new_session=True)\n        except OSError:\n            # fall through to next variant\n            pass\n        else:\n            if p.poll() is None:\n                # Should be running now.\n                return True\n\n        try:\n            p = subprocess.Popen([\"kfm\", \"-d\", url],\n                                 close_fds=True, stdin=devnull,\n                                 stdout=devnull, stderr=devnull,\n                                 start_new_session=True)\n        except OSError:\n            return False\n        else:\n            return (p.poll() is None)\n\n\nclass Grail(BaseBrowser):\n    # There should be a way to maintain a connection to Grail, but the\n    # Grail remote control protocol doesn't really allow that at this\n    # point.  It probably never will!\n    def _find_grail_rc(self):\n        import glob\n        import pwd\n        import socket\n        import tempfile\n        tempdir = os.path.join(tempfile.gettempdir(),\n                               \".grail-unix\")\n        user = pwd.getpwuid(os.getuid())[0]\n        filename = os.path.join(tempdir, user + \"-*\")\n        maybes = glob.glob(filename)\n        if not maybes:\n            return None\n        s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        for fn in maybes:\n            # need to PING each one until we find one that's live\n            try:\n                s.connect(fn)\n            except OSError:\n                # no good; attempt to clean it out, but don't fail:\n                try:\n                    os.unlink(fn)\n                except OSError:\n                    pass\n            else:\n                return s\n\n    def _remote(self, action):\n        s = self._find_grail_rc()\n        if not s:\n            return 0\n        s.send(action)\n        s.close()\n        return 1\n\n    def open(self, url, new=0, autoraise=True):\n        if new:\n            ok = self._remote(\"LOADNEW \" + url)\n        else:\n            ok = self._remote(\"LOAD \" + url)\n        return ok\n\n\n#\n# Platform support for Unix\n#\n\n# These are the right tests because all these Unix browsers require either\n# a console terminal or an X display to run.\n\ndef register_X_browsers():\n\n    # use xdg-open if around\n    if shutil.which(\"xdg-open\"):\n        register(\"xdg-open\", None, BackgroundBrowser(\"xdg-open\"))\n\n    # The default GNOME3 browser\n    if \"GNOME_DESKTOP_SESSION_ID\" in os.environ and shutil.which(\"gvfs-open\"):\n        register(\"gvfs-open\", None, BackgroundBrowser(\"gvfs-open\"))\n\n    # The default GNOME browser\n    if \"GNOME_DESKTOP_SESSION_ID\" in os.environ and shutil.which(\"gnome-open\"):\n        register(\"gnome-open\", None, BackgroundBrowser(\"gnome-open\"))\n\n    # The default KDE browser\n    if \"KDE_FULL_SESSION\" in os.environ and shutil.which(\"kfmclient\"):\n        register(\"kfmclient\", Konqueror, Konqueror(\"kfmclient\"))\n\n    if shutil.which(\"x-www-browser\"):\n        register(\"x-www-browser\", None, BackgroundBrowser(\"x-www-browser\"))\n\n    # The Mozilla browsers\n    for browser in (\"firefox\", \"iceweasel\", \"iceape\", \"seamonkey\"):\n        if shutil.which(browser):\n            register(browser, None, Mozilla(browser))\n\n    # The Netscape and old Mozilla browsers\n    for browser in (\"mozilla-firefox\",\n                    \"mozilla-firebird\", \"firebird\",\n                    \"mozilla\", \"netscape\"):\n        if shutil.which(browser):\n            register(browser, None, Netscape(browser))\n\n    # Konqueror/kfm, the KDE browser.\n    if shutil.which(\"kfm\"):\n        register(\"kfm\", Konqueror, Konqueror(\"kfm\"))\n    elif shutil.which(\"konqueror\"):\n        register(\"konqueror\", Konqueror, Konqueror(\"konqueror\"))\n\n    # Gnome's Galeon and Epiphany\n    for browser in (\"galeon\", \"epiphany\"):\n        if shutil.which(browser):\n            register(browser, None, Galeon(browser))\n\n    # Skipstone, another Gtk/Mozilla based browser\n    if shutil.which(\"skipstone\"):\n        register(\"skipstone\", None, BackgroundBrowser(\"skipstone\"))\n\n    # Google Chrome/Chromium browsers\n    for browser in (\"google-chrome\", \"chrome\", \"chromium\", \"chromium-browser\"):\n        if shutil.which(browser):\n            register(browser, None, Chrome(browser))\n\n    # Opera, quite popular\n    if shutil.which(\"opera\"):\n        register(\"opera\", None, Opera(\"opera\"))\n\n    # Next, Mosaic -- old but still in use.\n    if shutil.which(\"mosaic\"):\n        register(\"mosaic\", None, BackgroundBrowser(\"mosaic\"))\n\n    # Grail, the Python browser. Does anybody still use it?\n    if shutil.which(\"grail\"):\n        register(\"grail\", Grail, None)\n\ndef register_standard_browsers():\n    global _tryorder\n    _tryorder = []\n\n    if sys.platform == 'darwin':\n        register(\"MacOSX\", None, MacOSXOSAScript('default'))\n        register(\"chrome\", None, MacOSXOSAScript('chrome'))\n        register(\"firefox\", None, MacOSXOSAScript('firefox'))\n        register(\"safari\", None, MacOSXOSAScript('safari'))\n        # OS X can use below Unix support (but we prefer using the OS X\n        # specific stuff)\n\n    if sys.platform[:3] == \"win\":\n        # First try to use the default Windows browser\n        register(\"windows-default\", WindowsDefault)\n\n        # Detect some common Windows browsers, fallback to IE\n        iexplore = os.path.join(os.environ.get(\"PROGRAMFILES\", \"C:\\\\Program Files\"),\n                                \"Internet Explorer\\\\IEXPLORE.EXE\")\n        for browser in (\"firefox\", \"firebird\", \"seamonkey\", \"mozilla\",\n                        \"netscape\", \"opera\", iexplore):\n            if shutil.which(browser):\n                register(browser, None, BackgroundBrowser(browser))\n    else:\n        # Prefer X browsers if present\n        if os.environ.get(\"DISPLAY\"):\n            try:\n                cmd = \"xdg-settings get default-web-browser\".split()\n                raw_result = subprocess.check_output(cmd, stderr=subprocess.DEVNULL)\n                result = raw_result.decode().strip()\n            except (FileNotFoundError, subprocess.CalledProcessError):\n                pass\n            else:\n                global _os_preferred_browser\n                _os_preferred_browser = result\n\n            register_X_browsers()\n\n        # Also try console browsers\n        if os.environ.get(\"TERM\"):\n            if shutil.which(\"www-browser\"):\n                register(\"www-browser\", None, GenericBrowser(\"www-browser\"))\n            # The Links/elinks browsers <http://artax.karlin.mff.cuni.cz/~mikulas/links/>\n            if shutil.which(\"links\"):\n                register(\"links\", None, GenericBrowser(\"links\"))\n            if shutil.which(\"elinks\"):\n                register(\"elinks\", None, Elinks(\"elinks\"))\n            # The Lynx browser <http://lynx.isc.org/>, <http://lynx.browser.org/>\n            if shutil.which(\"lynx\"):\n                register(\"lynx\", None, GenericBrowser(\"lynx\"))\n            # The w3m browser <http://w3m.sourceforge.net/>\n            if shutil.which(\"w3m\"):\n                register(\"w3m\", None, GenericBrowser(\"w3m\"))\n\n    # OK, now that we know what the default preference orders for each\n    # platform are, allow user to override them with the BROWSER variable.\n    if \"BROWSER\" in os.environ:\n        userchoices = os.environ[\"BROWSER\"].split(os.pathsep)\n        userchoices.reverse()\n\n        # Treat choices in same way as if passed into get() but do register\n        # and prepend to _tryorder\n        for cmdline in userchoices:\n            if cmdline != '':\n                cmd = _synthesize(cmdline, preferred=True)\n                if cmd[1] is None:\n                    register(cmdline, None, GenericBrowser(cmdline), preferred=True)\n\n    # what to do if _tryorder is now empty?\n\n\n#\n# Platform support for Windows\n#\n\nif sys.platform[:3] == \"win\":\n    class WindowsDefault(BaseBrowser):\n        def open(self, url, new=0, autoraise=True):\n            try:\n                os.startfile(url)\n            except OSError:\n                # [Error 22] No application is associated with the specified\n                # file for this operation: '<URL>'\n                return False\n            else:\n                return True\n\n#\n# Platform support for MacOS\n#\n\nif sys.platform == 'darwin':\n    # Adapted from patch submitted to SourceForge by Steven J. Burr\n    class MacOSX(BaseBrowser):\n        \"\"\"Launcher class for Aqua browsers on Mac OS X\n\n        Optionally specify a browser name on instantiation.  Note that this\n        will not work for Aqua browsers if the user has moved the application\n        package after installation.\n\n        If no browser is specified, the default browser, as specified in the\n        Internet System Preferences panel, will be used.\n        \"\"\"\n        def __init__(self, name):\n            self.name = name\n\n        def open(self, url, new=0, autoraise=True):\n            assert \"'\" not in url\n            # hack for local urls\n            if not ':' in url:\n                url = 'file:'+url\n\n            # new must be 0 or 1\n            new = int(bool(new))\n            if self.name == \"default\":\n                # User called open, open_new or get without a browser parameter\n                script = 'open location \"%s\"' % url.replace('\"', '%22') # opens in default browser\n            else:\n                # User called get and chose a browser\n                if self.name == \"OmniWeb\":\n                    toWindow = \"\"\n                else:\n                    # Include toWindow parameter of OpenURL command for browsers\n                    # that support it.  0 == new window; -1 == existing\n                    toWindow = \"toWindow %d\" % (new - 1)\n                cmd = 'OpenURL \"%s\"' % url.replace('\"', '%22')\n                script = '''tell application \"%s\"\n                                activate\n                                %s %s\n                            end tell''' % (self.name, cmd, toWindow)\n            # Open pipe to AppleScript through osascript command\n            osapipe = os.popen(\"osascript\", \"w\")\n            if osapipe is None:\n                return False\n            # Write script to osascript's stdin\n            osapipe.write(script)\n            rc = osapipe.close()\n            return not rc\n\n    class MacOSXOSAScript(BaseBrowser):\n        def __init__(self, name):\n            self._name = name\n\n        def open(self, url, new=0, autoraise=True):\n            if self._name == 'default':\n                script = 'open location \"%s\"' % url.replace('\"', '%22') # opens in default browser\n            else:\n                script = '''\n                   tell application \"%s\"\n                       activate\n                       open location \"%s\"\n                   end\n                   '''%(self._name, url.replace('\"', '%22'))\n\n            osapipe = os.popen(\"osascript\", \"w\")\n            if osapipe is None:\n                return False\n\n            osapipe.write(script)\n            rc = osapipe.close()\n            return not rc\n\n\ndef main():\n    import getopt\n    usage = \"\"\"Usage: %s [-n | -t] url\n    -n: open new window\n    -t: open new tab\"\"\" % sys.argv[0]\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], 'ntd')\n    except getopt.error as msg:\n        print(msg, file=sys.stderr)\n        print(usage, file=sys.stderr)\n        sys.exit(1)\n    new_win = 0\n    for o, a in opts:\n        if o == '-n': new_win = 1\n        elif o == '-t': new_win = 2\n    if len(args) != 1:\n        print(usage, file=sys.stderr)\n        sys.exit(1)\n\n    url = args[0]\n    open(url, new_win)\n\n    print(\"\\a\")\n\nif __name__ == \"__main__\":\n    main()\n", 690], "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py": ["# subprocess - Subprocesses with accessible I/O streams\n#\n# For more information about this module, see PEP 324.\n#\n# Copyright (c) 2003-2005 by Peter Astrand <astrand@lysator.liu.se>\n#\n# Licensed to PSF under a Contributor Agreement.\n# See http://www.python.org/2.4/license for licensing details.\n\nr\"\"\"Subprocesses with accessible I/O streams\n\nThis module allows you to spawn processes, connect to their\ninput/output/error pipes, and obtain their return codes.\n\nFor a complete description of this module see the Python documentation.\n\nMain API\n========\nrun(...): Runs a command, waits for it to complete, then returns a\n          CompletedProcess instance.\nPopen(...): A class for flexibly executing a command in a new process\n\nConstants\n---------\nDEVNULL: Special value that indicates that os.devnull should be used\nPIPE:    Special value that indicates a pipe should be created\nSTDOUT:  Special value that indicates that stderr should go to stdout\n\n\nOlder API\n=========\ncall(...): Runs a command, waits for it to complete, then returns\n    the return code.\ncheck_call(...): Same as call() but raises CalledProcessError()\n    if return code is not 0\ncheck_output(...): Same as check_call() but returns the contents of\n    stdout instead of a return code\ngetoutput(...): Runs a command in the shell, waits for it to complete,\n    then returns the output\ngetstatusoutput(...): Runs a command in the shell, waits for it to complete,\n    then returns a (exitcode, output) tuple\n\"\"\"\n\nimport sys\n_mswindows = (sys.platform == \"win32\")\n\nimport io\nimport os\nimport time\nimport signal\nimport builtins\nimport warnings\nimport errno\nfrom time import monotonic as _time\n\n# Exception classes used by this module.\nclass SubprocessError(Exception): pass\n\n\nclass CalledProcessError(SubprocessError):\n    \"\"\"Raised when run() is called with check=True and the process\n    returns a non-zero exit status.\n\n    Attributes:\n      cmd, returncode, stdout, stderr, output\n    \"\"\"\n    def __init__(self, returncode, cmd, output=None, stderr=None):\n        self.returncode = returncode\n        self.cmd = cmd\n        self.output = output\n        self.stderr = stderr\n\n    def __str__(self):\n        if self.returncode and self.returncode < 0:\n            try:\n                return \"Command '%s' died with %r.\" % (\n                        self.cmd, signal.Signals(-self.returncode))\n            except ValueError:\n                return \"Command '%s' died with unknown signal %d.\" % (\n                        self.cmd, -self.returncode)\n        else:\n            return \"Command '%s' returned non-zero exit status %d.\" % (\n                    self.cmd, self.returncode)\n\n    @property\n    def stdout(self):\n        \"\"\"Alias for output attribute, to match stderr\"\"\"\n        return self.output\n\n    @stdout.setter\n    def stdout(self, value):\n        # There's no obvious reason to set this, but allow it anyway so\n        # .stdout is a transparent alias for .output\n        self.output = value\n\n\nclass TimeoutExpired(SubprocessError):\n    \"\"\"This exception is raised when the timeout expires while waiting for a\n    child process.\n\n    Attributes:\n        cmd, output, stdout, stderr, timeout\n    \"\"\"\n    def __init__(self, cmd, timeout, output=None, stderr=None):\n        self.cmd = cmd\n        self.timeout = timeout\n        self.output = output\n        self.stderr = stderr\n\n    def __str__(self):\n        return (\"Command '%s' timed out after %s seconds\" %\n                (self.cmd, self.timeout))\n\n    @property\n    def stdout(self):\n        return self.output\n\n    @stdout.setter\n    def stdout(self, value):\n        # There's no obvious reason to set this, but allow it anyway so\n        # .stdout is a transparent alias for .output\n        self.output = value\n\n\nif _mswindows:\n    import threading\n    import msvcrt\n    import _winapi\n    class STARTUPINFO:\n        def __init__(self, *, dwFlags=0, hStdInput=None, hStdOutput=None,\n                     hStdError=None, wShowWindow=0, lpAttributeList=None):\n            self.dwFlags = dwFlags\n            self.hStdInput = hStdInput\n            self.hStdOutput = hStdOutput\n            self.hStdError = hStdError\n            self.wShowWindow = wShowWindow\n            self.lpAttributeList = lpAttributeList or {\"handle_list\": []}\n\n        def _copy(self):\n            attr_list = self.lpAttributeList.copy()\n            if 'handle_list' in attr_list:\n                attr_list['handle_list'] = list(attr_list['handle_list'])\n\n            return STARTUPINFO(dwFlags=self.dwFlags,\n                               hStdInput=self.hStdInput,\n                               hStdOutput=self.hStdOutput,\n                               hStdError=self.hStdError,\n                               wShowWindow=self.wShowWindow,\n                               lpAttributeList=attr_list)\n\nelse:\n    import _posixsubprocess\n    import select\n    import selectors\n    import threading\n\n    # When select or poll has indicated that the file is writable,\n    # we can write up to _PIPE_BUF bytes without risk of blocking.\n    # POSIX defines PIPE_BUF as >= 512.\n    _PIPE_BUF = getattr(select, 'PIPE_BUF', 512)\n\n    # poll/select have the advantage of not requiring any extra file\n    # descriptor, contrarily to epoll/kqueue (also, they require a single\n    # syscall).\n    if hasattr(selectors, 'PollSelector'):\n        _PopenSelector = selectors.PollSelector\n    else:\n        _PopenSelector = selectors.SelectSelector\n\n\n__all__ = [\"Popen\", \"PIPE\", \"STDOUT\", \"call\", \"check_call\", \"getstatusoutput\",\n           \"getoutput\", \"check_output\", \"run\", \"CalledProcessError\", \"DEVNULL\",\n           \"SubprocessError\", \"TimeoutExpired\", \"CompletedProcess\"]\n           # NOTE: We intentionally exclude list2cmdline as it is\n           # considered an internal implementation detail.  issue10838.\n\nif _mswindows:\n    from _winapi import (CREATE_NEW_CONSOLE, CREATE_NEW_PROCESS_GROUP,\n                         STD_INPUT_HANDLE, STD_OUTPUT_HANDLE,\n                         STD_ERROR_HANDLE, SW_HIDE,\n                         STARTF_USESTDHANDLES, STARTF_USESHOWWINDOW,\n                         ABOVE_NORMAL_PRIORITY_CLASS, BELOW_NORMAL_PRIORITY_CLASS,\n                         HIGH_PRIORITY_CLASS, IDLE_PRIORITY_CLASS,\n                         NORMAL_PRIORITY_CLASS, REALTIME_PRIORITY_CLASS,\n                         CREATE_NO_WINDOW, DETACHED_PROCESS,\n                         CREATE_DEFAULT_ERROR_MODE, CREATE_BREAKAWAY_FROM_JOB)\n\n    __all__.extend([\"CREATE_NEW_CONSOLE\", \"CREATE_NEW_PROCESS_GROUP\",\n                    \"STD_INPUT_HANDLE\", \"STD_OUTPUT_HANDLE\",\n                    \"STD_ERROR_HANDLE\", \"SW_HIDE\",\n                    \"STARTF_USESTDHANDLES\", \"STARTF_USESHOWWINDOW\",\n                    \"STARTUPINFO\",\n                    \"ABOVE_NORMAL_PRIORITY_CLASS\", \"BELOW_NORMAL_PRIORITY_CLASS\",\n                    \"HIGH_PRIORITY_CLASS\", \"IDLE_PRIORITY_CLASS\",\n                    \"NORMAL_PRIORITY_CLASS\", \"REALTIME_PRIORITY_CLASS\",\n                    \"CREATE_NO_WINDOW\", \"DETACHED_PROCESS\",\n                    \"CREATE_DEFAULT_ERROR_MODE\", \"CREATE_BREAKAWAY_FROM_JOB\"])\n\n    class Handle(int):\n        closed = False\n\n        def Close(self, CloseHandle=_winapi.CloseHandle):\n            if not self.closed:\n                self.closed = True\n                CloseHandle(self)\n\n        def Detach(self):\n            if not self.closed:\n                self.closed = True\n                return int(self)\n            raise ValueError(\"already closed\")\n\n        def __repr__(self):\n            return \"%s(%d)\" % (self.__class__.__name__, int(self))\n\n        __del__ = Close\n        __str__ = __repr__\n\n\n# This lists holds Popen instances for which the underlying process had not\n# exited at the time its __del__ method got called: those processes are wait()ed\n# for synchronously from _cleanup() when a new Popen object is created, to avoid\n# zombie processes.\n_active = []\n\ndef _cleanup():\n    for inst in _active[:]:\n        res = inst._internal_poll(_deadstate=sys.maxsize)\n        if res is not None:\n            try:\n                _active.remove(inst)\n            except ValueError:\n                # This can happen if two threads create a new Popen instance.\n                # It's harmless that it was already removed, so ignore.\n                pass\n\nPIPE = -1\nSTDOUT = -2\nDEVNULL = -3\n\n\n# XXX This function is only used by multiprocessing and the test suite,\n# but it's here so that it can be imported when Python is compiled without\n# threads.\n\ndef _optim_args_from_interpreter_flags():\n    \"\"\"Return a list of command-line arguments reproducing the current\n    optimization settings in sys.flags.\"\"\"\n    args = []\n    value = sys.flags.optimize\n    if value > 0:\n        args.append('-' + 'O' * value)\n    return args\n\n\ndef _args_from_interpreter_flags():\n    \"\"\"Return a list of command-line arguments reproducing the current\n    settings in sys.flags, sys.warnoptions and sys._xoptions.\"\"\"\n    flag_opt_map = {\n        'debug': 'd',\n        # 'inspect': 'i',\n        # 'interactive': 'i',\n        'dont_write_bytecode': 'B',\n        'no_site': 'S',\n        'verbose': 'v',\n        'bytes_warning': 'b',\n        'quiet': 'q',\n        # -O is handled in _optim_args_from_interpreter_flags()\n    }\n    args = _optim_args_from_interpreter_flags()\n    for flag, opt in flag_opt_map.items():\n        v = getattr(sys.flags, flag)\n        if v > 0:\n            args.append('-' + opt * v)\n\n    if sys.flags.isolated:\n        args.append('-I')\n    else:\n        if sys.flags.ignore_environment:\n            args.append('-E')\n        if sys.flags.no_user_site:\n            args.append('-s')\n\n    # -W options\n    warnopts = sys.warnoptions[:]\n    bytes_warning = sys.flags.bytes_warning\n    xoptions = getattr(sys, '_xoptions', {})\n    dev_mode = ('dev' in xoptions)\n\n    if bytes_warning > 1:\n        warnopts.remove(\"error::BytesWarning\")\n    elif bytes_warning:\n        warnopts.remove(\"default::BytesWarning\")\n    if dev_mode:\n        warnopts.remove('default')\n    for opt in warnopts:\n        args.append('-W' + opt)\n\n    # -X options\n    if dev_mode:\n        args.extend(('-X', 'dev'))\n    for opt in ('faulthandler', 'tracemalloc', 'importtime',\n                'showalloccount', 'showrefcount', 'utf8'):\n        if opt in xoptions:\n            value = xoptions[opt]\n            if value is True:\n                arg = opt\n            else:\n                arg = '%s=%s' % (opt, value)\n            args.extend(('-X', arg))\n\n    return args\n\n\ndef call(*popenargs, timeout=None, **kwargs):\n    \"\"\"Run command with arguments.  Wait for command to complete or\n    timeout, then return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    retcode = call([\"ls\", \"-l\"])\n    \"\"\"\n    with Popen(*popenargs, **kwargs) as p:\n        try:\n            return p.wait(timeout=timeout)\n        except:  # Including KeyboardInterrupt, wait handled that.\n            p.kill()\n            # We don't call p.wait() again as p.__exit__ does that for us.\n            raise\n\n\ndef check_call(*popenargs, **kwargs):\n    \"\"\"Run command with arguments.  Wait for command to complete.  If\n    the exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n\n    The arguments are the same as for the call function.  Example:\n\n    check_call([\"ls\", \"-l\"])\n    \"\"\"\n    retcode = call(*popenargs, **kwargs)\n    if retcode:\n        cmd = kwargs.get(\"args\")\n        if cmd is None:\n            cmd = popenargs[0]\n        raise CalledProcessError(retcode, cmd)\n    return 0\n\n\ndef check_output(*popenargs, timeout=None, **kwargs):\n    r\"\"\"Run command with arguments and return its output.\n\n    If the exit code was non-zero it raises a CalledProcessError.  The\n    CalledProcessError object will have the return code in the returncode\n    attribute and output in the output attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    >>> check_output([\"ls\", \"-l\", \"/dev/null\"])\n    b'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'\n\n    The stdout argument is not allowed as it is used internally.\n    To capture standard error in the result, use stderr=STDOUT.\n\n    >>> check_output([\"/bin/sh\", \"-c\",\n    ...               \"ls -l non_existent_file ; exit 0\"],\n    ...              stderr=STDOUT)\n    b'ls: non_existent_file: No such file or directory\\n'\n\n    There is an additional optional argument, \"input\", allowing you to\n    pass a string to the subprocess's stdin.  If you use this argument\n    you may not also use the Popen constructor's \"stdin\" argument, as\n    it too will be used internally.  Example:\n\n    >>> check_output([\"sed\", \"-e\", \"s/foo/bar/\"],\n    ...              input=b\"when in the course of fooman events\\n\")\n    b'when in the course of barman events\\n'\n\n    By default, all communication is in bytes, and therefore any \"input\"\n    should be bytes, and the return value wil be bytes.  If in text mode,\n    any \"input\" should be a string, and the return value will be a string\n    decoded according to locale encoding, or by \"encoding\" if set. Text mode\n    is triggered by setting any of text, encoding, errors or universal_newlines.\n    \"\"\"\n    if 'stdout' in kwargs:\n        raise ValueError('stdout argument not allowed, it will be overridden.')\n\n    if 'input' in kwargs and kwargs['input'] is None:\n        # Explicitly passing input=None was previously equivalent to passing an\n        # empty string. That is maintained here for backwards compatibility.\n        kwargs['input'] = '' if kwargs.get('universal_newlines', False) else b''\n\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n               **kwargs).stdout\n\n\nclass CompletedProcess(object):\n    \"\"\"A process that has finished running.\n\n    This is returned by run().\n\n    Attributes:\n      args: The list or str args passed to run().\n      returncode: The exit code of the process, negative for signals.\n      stdout: The standard output (None if not captured).\n      stderr: The standard error (None if not captured).\n    \"\"\"\n    def __init__(self, args, returncode, stdout=None, stderr=None):\n        self.args = args\n        self.returncode = returncode\n        self.stdout = stdout\n        self.stderr = stderr\n\n    def __repr__(self):\n        args = ['args={!r}'.format(self.args),\n                'returncode={!r}'.format(self.returncode)]\n        if self.stdout is not None:\n            args.append('stdout={!r}'.format(self.stdout))\n        if self.stderr is not None:\n            args.append('stderr={!r}'.format(self.stderr))\n        return \"{}({})\".format(type(self).__name__, ', '.join(args))\n\n    def check_returncode(self):\n        \"\"\"Raise CalledProcessError if the exit code is non-zero.\"\"\"\n        if self.returncode:\n            raise CalledProcessError(self.returncode, self.args, self.stdout,\n                                     self.stderr)\n\n\ndef run(*popenargs,\n        input=None, capture_output=False, timeout=None, check=False, **kwargs):\n    \"\"\"Run command with arguments and return a CompletedProcess instance.\n\n    The returned instance will have attributes args, returncode, stdout and\n    stderr. By default, stdout and stderr are not captured, and those attributes\n    will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n\n    If check is True and the exit code was non-zero, it raises a\n    CalledProcessError. The CalledProcessError object will have the return code\n    in the returncode attribute, and output & stderr attributes if those streams\n    were captured.\n\n    If timeout is given, and the process takes too long, a TimeoutExpired\n    exception will be raised.\n\n    There is an optional argument \"input\", allowing you to\n    pass bytes or a string to the subprocess's stdin.  If you use this argument\n    you may not also use the Popen constructor's \"stdin\" argument, as\n    it will be used internally.\n\n    By default, all communication is in bytes, and therefore any \"input\" should\n    be bytes, and the stdout and stderr will be bytes. If in text mode, any\n    \"input\" should be a string, and stdout and stderr will be strings decoded\n    according to locale encoding, or by \"encoding\" if set. Text mode is\n    triggered by setting any of text, encoding, errors or universal_newlines.\n\n    The other arguments are the same as for the Popen constructor.\n    \"\"\"\n    if input is not None:\n        if kwargs.get('stdin') is not None:\n            raise ValueError('stdin and input arguments may not both be used.')\n        kwargs['stdin'] = PIPE\n\n    if capture_output:\n        if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n            raise ValueError('stdout and stderr arguments may not be used '\n                             'with capture_output.')\n        kwargs['stdout'] = PIPE\n        kwargs['stderr'] = PIPE\n\n    with Popen(*popenargs, **kwargs) as process:\n        try:\n            stdout, stderr = process.communicate(input, timeout=timeout)\n        except TimeoutExpired:\n            process.kill()\n            stdout, stderr = process.communicate()\n            raise TimeoutExpired(process.args, timeout, output=stdout,\n                                 stderr=stderr)\n        except:  # Including KeyboardInterrupt, communicate handled that.\n            process.kill()\n            # We don't call process.wait() as .__exit__ does that for us.\n            raise\n        retcode = process.poll()\n        if check and retcode:\n            raise CalledProcessError(retcode, process.args,\n                                     output=stdout, stderr=stderr)\n    return CompletedProcess(process.args, retcode, stdout, stderr)\n\n\ndef list2cmdline(seq):\n    \"\"\"\n    Translate a sequence of arguments into a command line\n    string, using the same rules as the MS C runtime:\n\n    1) Arguments are delimited by white space, which is either a\n       space or a tab.\n\n    2) A string surrounded by double quotation marks is\n       interpreted as a single argument, regardless of white space\n       contained within.  A quoted string can be embedded in an\n       argument.\n\n    3) A double quotation mark preceded by a backslash is\n       interpreted as a literal double quotation mark.\n\n    4) Backslashes are interpreted literally, unless they\n       immediately precede a double quotation mark.\n\n    5) If backslashes immediately precede a double quotation mark,\n       every pair of backslashes is interpreted as a literal\n       backslash.  If the number of backslashes is odd, the last\n       backslash escapes the next double quotation mark as\n       described in rule 3.\n    \"\"\"\n\n    # See\n    # http://msdn.microsoft.com/en-us/library/17w5ykft.aspx\n    # or search http://msdn.microsoft.com for\n    # \"Parsing C++ Command-Line Arguments\"\n    result = []\n    needquote = False\n    for arg in seq:\n        bs_buf = []\n\n        # Add a space to separate this argument from the others\n        if result:\n            result.append(' ')\n\n        needquote = (\" \" in arg) or (\"\\t\" in arg) or not arg\n        if needquote:\n            result.append('\"')\n\n        for c in arg:\n            if c == '\\\\':\n                # Don't know if we need to double yet.\n                bs_buf.append(c)\n            elif c == '\"':\n                # Double backslashes.\n                result.append('\\\\' * len(bs_buf)*2)\n                bs_buf = []\n                result.append('\\\\\"')\n            else:\n                # Normal char\n                if bs_buf:\n                    result.extend(bs_buf)\n                    bs_buf = []\n                result.append(c)\n\n        # Add remaining backslashes, if any.\n        if bs_buf:\n            result.extend(bs_buf)\n\n        if needquote:\n            result.extend(bs_buf)\n            result.append('\"')\n\n    return ''.join(result)\n\n\n# Various tools for executing commands and looking at their output and status.\n#\n\ndef getstatusoutput(cmd):\n    \"\"\"Return (exitcode, output) of executing cmd in a shell.\n\n    Execute the string 'cmd' in a shell with 'check_output' and\n    return a 2-tuple (status, output). The locale encoding is used\n    to decode the output and process newlines.\n\n    A trailing newline is stripped from the output.\n    The exit status for the command can be interpreted\n    according to the rules for the function 'wait'. Example:\n\n    >>> import subprocess\n    >>> subprocess.getstatusoutput('ls /bin/ls')\n    (0, '/bin/ls')\n    >>> subprocess.getstatusoutput('cat /bin/junk')\n    (1, 'cat: /bin/junk: No such file or directory')\n    >>> subprocess.getstatusoutput('/bin/junk')\n    (127, 'sh: /bin/junk: not found')\n    >>> subprocess.getstatusoutput('/bin/kill $$')\n    (-15, '')\n    \"\"\"\n    try:\n        data = check_output(cmd, shell=True, text=True, stderr=STDOUT)\n        exitcode = 0\n    except CalledProcessError as ex:\n        data = ex.output\n        exitcode = ex.returncode\n    if data[-1:] == '\\n':\n        data = data[:-1]\n    return exitcode, data\n\ndef getoutput(cmd):\n    \"\"\"Return output (stdout or stderr) of executing cmd in a shell.\n\n    Like getstatusoutput(), except the exit status is ignored and the return\n    value is a string containing the command's output.  Example:\n\n    >>> import subprocess\n    >>> subprocess.getoutput('ls /bin/ls')\n    '/bin/ls'\n    \"\"\"\n    return getstatusoutput(cmd)[1]\n\n\nclass Popen(object):\n    \"\"\" Execute a child program in a new process.\n\n    For a complete description of the arguments see the Python documentation.\n\n    Arguments:\n      args: A string, or a sequence of program arguments.\n\n      bufsize: supplied as the buffering argument to the open() function when\n          creating the stdin/stdout/stderr pipe file objects\n\n      executable: A replacement program to execute.\n\n      stdin, stdout and stderr: These specify the executed programs' standard\n          input, standard output and standard error file handles, respectively.\n\n      preexec_fn: (POSIX only) An object to be called in the child process\n          just before the child is executed.\n\n      close_fds: Controls closing or inheriting of file descriptors.\n\n      shell: If true, the command will be executed through the shell.\n\n      cwd: Sets the current directory before the child is executed.\n\n      env: Defines the environment variables for the new process.\n\n      text: If true, decode stdin, stdout and stderr using the given encoding\n          (if set) or the system default otherwise.\n\n      universal_newlines: Alias of text, provided for backwards compatibility.\n\n      startupinfo and creationflags (Windows only)\n\n      restore_signals (POSIX only)\n\n      start_new_session (POSIX only)\n\n      pass_fds (POSIX only)\n\n      encoding and errors: Text mode encoding and error handling to use for\n          file objects stdin, stdout and stderr.\n\n    Attributes:\n        stdin, stdout, stderr, pid, returncode\n    \"\"\"\n    _child_created = False  # Set here since __del__ checks it\n\n    def __init__(self, args, bufsize=-1, executable=None,\n                 stdin=None, stdout=None, stderr=None,\n                 preexec_fn=None, close_fds=True,\n                 shell=False, cwd=None, env=None, universal_newlines=None,\n                 startupinfo=None, creationflags=0,\n                 restore_signals=True, start_new_session=False,\n                 pass_fds=(), *, encoding=None, errors=None, text=None):\n        \"\"\"Create new Popen instance.\"\"\"\n        _cleanup()\n        # Held while anything is calling waitpid before returncode has been\n        # updated to prevent clobbering returncode if wait() or poll() are\n        # called from multiple threads at once.  After acquiring the lock,\n        # code must re-check self.returncode to see if another thread just\n        # finished a waitpid() call.\n        self._waitpid_lock = threading.Lock()\n\n        self._input = None\n        self._communication_started = False\n        if bufsize is None:\n            bufsize = -1  # Restore default\n        if not isinstance(bufsize, int):\n            raise TypeError(\"bufsize must be an integer\")\n\n        if _mswindows:\n            if preexec_fn is not None:\n                raise ValueError(\"preexec_fn is not supported on Windows \"\n                                 \"platforms\")\n        else:\n            # POSIX\n            if pass_fds and not close_fds:\n                warnings.warn(\"pass_fds overriding close_fds.\", RuntimeWarning)\n                close_fds = True\n            if startupinfo is not None:\n                raise ValueError(\"startupinfo is only supported on Windows \"\n                                 \"platforms\")\n            if creationflags != 0:\n                raise ValueError(\"creationflags is only supported on Windows \"\n                                 \"platforms\")\n\n        self.args = args\n        self.stdin = None\n        self.stdout = None\n        self.stderr = None\n        self.pid = None\n        self.returncode = None\n        self.encoding = encoding\n        self.errors = errors\n\n        # Validate the combinations of text and universal_newlines\n        if (text is not None and universal_newlines is not None\n            and bool(universal_newlines) != bool(text)):\n            raise SubprocessError('Cannot disambiguate when both text '\n                                  'and universal_newlines are supplied but '\n                                  'different. Pass one or the other.')\n\n        # Input and output objects. The general principle is like\n        # this:\n        #\n        # Parent                   Child\n        # ------                   -----\n        # p2cwrite   ---stdin--->  p2cread\n        # c2pread    <--stdout---  c2pwrite\n        # errread    <--stderr---  errwrite\n        #\n        # On POSIX, the child objects are file descriptors.  On\n        # Windows, these are Windows file handles.  The parent objects\n        # are file descriptors on both platforms.  The parent objects\n        # are -1 when not using PIPEs. The child objects are -1\n        # when not redirecting.\n\n        (p2cread, p2cwrite,\n         c2pread, c2pwrite,\n         errread, errwrite) = self._get_handles(stdin, stdout, stderr)\n\n        # We wrap OS handles *before* launching the child, otherwise a\n        # quickly terminating child could make our fds unwrappable\n        # (see #8458).\n\n        if _mswindows:\n            if p2cwrite != -1:\n                p2cwrite = msvcrt.open_osfhandle(p2cwrite.Detach(), 0)\n            if c2pread != -1:\n                c2pread = msvcrt.open_osfhandle(c2pread.Detach(), 0)\n            if errread != -1:\n                errread = msvcrt.open_osfhandle(errread.Detach(), 0)\n\n        self.text_mode = encoding or errors or text or universal_newlines\n\n        # How long to resume waiting on a child after the first ^C.\n        # There is no right value for this.  The purpose is to be polite\n        # yet remain good for interactive users trying to exit a tool.\n        self._sigint_wait_secs = 0.25  # 1/xkcd221.getRandomNumber()\n\n        self._closed_child_pipe_fds = False\n\n        try:\n            if p2cwrite != -1:\n                self.stdin = io.open(p2cwrite, 'wb', bufsize)\n                if self.text_mode:\n                    self.stdin = io.TextIOWrapper(self.stdin, write_through=True,\n                            line_buffering=(bufsize == 1),\n                            encoding=encoding, errors=errors)\n            if c2pread != -1:\n                self.stdout = io.open(c2pread, 'rb', bufsize)\n                if self.text_mode:\n                    self.stdout = io.TextIOWrapper(self.stdout,\n                            encoding=encoding, errors=errors)\n            if errread != -1:\n                self.stderr = io.open(errread, 'rb', bufsize)\n                if self.text_mode:\n                    self.stderr = io.TextIOWrapper(self.stderr,\n                            encoding=encoding, errors=errors)\n\n            self._execute_child(args, executable, preexec_fn, close_fds,\n                                pass_fds, cwd, env,\n                                startupinfo, creationflags, shell,\n                                p2cread, p2cwrite,\n                                c2pread, c2pwrite,\n                                errread, errwrite,\n                                restore_signals, start_new_session)\n        except:\n            # Cleanup if the child failed starting.\n            for f in filter(None, (self.stdin, self.stdout, self.stderr)):\n                try:\n                    f.close()\n                except OSError:\n                    pass  # Ignore EBADF or other errors.\n\n            if not self._closed_child_pipe_fds:\n                to_close = []\n                if stdin == PIPE:\n                    to_close.append(p2cread)\n                if stdout == PIPE:\n                    to_close.append(c2pwrite)\n                if stderr == PIPE:\n                    to_close.append(errwrite)\n                if hasattr(self, '_devnull'):\n                    to_close.append(self._devnull)\n                for fd in to_close:\n                    try:\n                        if _mswindows and isinstance(fd, Handle):\n                            fd.Close()\n                        else:\n                            os.close(fd)\n                    except OSError:\n                        pass\n\n            raise\n\n    @property\n    def universal_newlines(self):\n        # universal_newlines as retained as an alias of text_mode for API\n        # compatibility. bpo-31756\n        return self.text_mode\n\n    @universal_newlines.setter\n    def universal_newlines(self, universal_newlines):\n        self.text_mode = bool(universal_newlines)\n\n    def _translate_newlines(self, data, encoding, errors):\n        data = data.decode(encoding, errors)\n        return data.replace(\"\\r\\n\", \"\\n\").replace(\"\\r\", \"\\n\")\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, value, traceback):\n        if self.stdout:\n            self.stdout.close()\n        if self.stderr:\n            self.stderr.close()\n        try:  # Flushing a BufferedWriter may raise an error\n            if self.stdin:\n                self.stdin.close()\n        finally:\n            if exc_type == KeyboardInterrupt:\n                # https://bugs.python.org/issue25942\n                # In the case of a KeyboardInterrupt we assume the SIGINT\n                # was also already sent to our child processes.  We can't\n                # block indefinitely as that is not user friendly.\n                # If we have not already waited a brief amount of time in\n                # an interrupted .wait() or .communicate() call, do so here\n                # for consistency.\n                if self._sigint_wait_secs > 0:\n                    try:\n                        self._wait(timeout=self._sigint_wait_secs)\n                    except TimeoutExpired:\n                        pass\n                self._sigint_wait_secs = 0  # Note that this has been done.\n                return  # resume the KeyboardInterrupt\n\n            # Wait for the process to terminate, to avoid zombies.\n            self.wait()\n\n    def __del__(self, _maxsize=sys.maxsize, _warn=warnings.warn):\n        if not self._child_created:\n            # We didn't get to successfully create a child process.\n            return\n        if self.returncode is None:\n            # Not reading subprocess exit status creates a zombie process which\n            # is only destroyed at the parent python process exit\n            _warn(\"subprocess %s is still running\" % self.pid,\n                  ResourceWarning, source=self)\n        # In case the child hasn't been waited on, check if it's done.\n        self._internal_poll(_deadstate=_maxsize)\n        if self.returncode is None and _active is not None:\n            # Child is still running, keep us alive until we can wait on it.\n            _active.append(self)\n\n    def _get_devnull(self):\n        if not hasattr(self, '_devnull'):\n            self._devnull = os.open(os.devnull, os.O_RDWR)\n        return self._devnull\n\n    def _stdin_write(self, input):\n        if input:\n            try:\n                self.stdin.write(input)\n            except BrokenPipeError:\n                pass  # communicate() must ignore broken pipe errors.\n            except OSError as exc:\n                if exc.errno == errno.EINVAL:\n                    # bpo-19612, bpo-30418: On Windows, stdin.write() fails\n                    # with EINVAL if the child process exited or if the child\n                    # process is still running but closed the pipe.\n                    pass\n                else:\n                    raise\n\n        try:\n            self.stdin.close()\n        except BrokenPipeError:\n            pass  # communicate() must ignore broken pipe errors.\n        except OSError as exc:\n            if exc.errno == errno.EINVAL:\n                pass\n            else:\n                raise\n\n    def communicate(self, input=None, timeout=None):\n        \"\"\"Interact with process: Send data to stdin and close it.\n        Read data from stdout and stderr, until end-of-file is\n        reached.  Wait for process to terminate.\n\n        The optional \"input\" argument should be data to be sent to the\n        child process, or None, if no data should be sent to the child.\n        communicate() returns a tuple (stdout, stderr).\n\n        By default, all communication is in bytes, and therefore any\n        \"input\" should be bytes, and the (stdout, stderr) will be bytes.\n        If in text mode (indicated by self.text_mode), any \"input\" should\n        be a string, and (stdout, stderr) will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode\n        is triggered by setting any of text, encoding, errors or\n        universal_newlines.\n        \"\"\"\n\n        if self._communication_started and input:\n            raise ValueError(\"Cannot send input after starting communication\")\n\n        # Optimization: If we are not worried about timeouts, we haven't\n        # started communicating, and we have one or zero pipes, using select()\n        # or threads is unnecessary.\n        if (timeout is None and not self._communication_started and\n            [self.stdin, self.stdout, self.stderr].count(None) >= 2):\n            stdout = None\n            stderr = None\n            if self.stdin:\n                self._stdin_write(input)\n            elif self.stdout:\n                stdout = self.stdout.read()\n                self.stdout.close()\n            elif self.stderr:\n                stderr = self.stderr.read()\n                self.stderr.close()\n            self.wait()\n        else:\n            if timeout is not None:\n                endtime = _time() + timeout\n            else:\n                endtime = None\n\n            try:\n                stdout, stderr = self._communicate(input, endtime, timeout)\n            except KeyboardInterrupt:\n                # https://bugs.python.org/issue25942\n                # See the detailed comment in .wait().\n                if timeout is not None:\n                    sigint_timeout = min(self._sigint_wait_secs,\n                                         self._remaining_time(endtime))\n                else:\n                    sigint_timeout = self._sigint_wait_secs\n                self._sigint_wait_secs = 0  # nothing else should wait.\n                try:\n                    self._wait(timeout=sigint_timeout)\n                except TimeoutExpired:\n                    pass\n                raise  # resume the KeyboardInterrupt\n\n            finally:\n                self._communication_started = True\n\n            sts = self.wait(timeout=self._remaining_time(endtime))\n\n        return (stdout, stderr)\n\n\n    def poll(self):\n        \"\"\"Check if child process has terminated. Set and return returncode\n        attribute.\"\"\"\n        return self._internal_poll()\n\n\n    def _remaining_time(self, endtime):\n        \"\"\"Convenience for _communicate when computing timeouts.\"\"\"\n        if endtime is None:\n            return None\n        else:\n            return endtime - _time()\n\n\n    def _check_timeout(self, endtime, orig_timeout):\n        \"\"\"Convenience for checking if a timeout has expired.\"\"\"\n        if endtime is None:\n            return\n        if _time() > endtime:\n            raise TimeoutExpired(self.args, orig_timeout)\n\n\n    def wait(self, timeout=None):\n        \"\"\"Wait for child process to terminate; returns self.returncode.\"\"\"\n        if timeout is not None:\n            endtime = _time() + timeout\n        try:\n            return self._wait(timeout=timeout)\n        except KeyboardInterrupt:\n            # https://bugs.python.org/issue25942\n            # The first keyboard interrupt waits briefly for the child to\n            # exit under the common assumption that it also received the ^C\n            # generated SIGINT and will exit rapidly.\n            if timeout is not None:\n                sigint_timeout = min(self._sigint_wait_secs,\n                                     self._remaining_time(endtime))\n            else:\n                sigint_timeout = self._sigint_wait_secs\n            self._sigint_wait_secs = 0  # nothing else should wait.\n            try:\n                self._wait(timeout=sigint_timeout)\n            except TimeoutExpired:\n                pass\n            raise  # resume the KeyboardInterrupt\n\n\n    if _mswindows:\n        #\n        # Windows methods\n        #\n        def _get_handles(self, stdin, stdout, stderr):\n            \"\"\"Construct and return tuple with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            \"\"\"\n            if stdin is None and stdout is None and stderr is None:\n                return (-1, -1, -1, -1, -1, -1)\n\n            p2cread, p2cwrite = -1, -1\n            c2pread, c2pwrite = -1, -1\n            errread, errwrite = -1, -1\n\n            if stdin is None:\n                p2cread = _winapi.GetStdHandle(_winapi.STD_INPUT_HANDLE)\n                if p2cread is None:\n                    p2cread, _ = _winapi.CreatePipe(None, 0)\n                    p2cread = Handle(p2cread)\n                    _winapi.CloseHandle(_)\n            elif stdin == PIPE:\n                p2cread, p2cwrite = _winapi.CreatePipe(None, 0)\n                p2cread, p2cwrite = Handle(p2cread), Handle(p2cwrite)\n            elif stdin == DEVNULL:\n                p2cread = msvcrt.get_osfhandle(self._get_devnull())\n            elif isinstance(stdin, int):\n                p2cread = msvcrt.get_osfhandle(stdin)\n            else:\n                # Assuming file-like object\n                p2cread = msvcrt.get_osfhandle(stdin.fileno())\n            p2cread = self._make_inheritable(p2cread)\n\n            if stdout is None:\n                c2pwrite = _winapi.GetStdHandle(_winapi.STD_OUTPUT_HANDLE)\n                if c2pwrite is None:\n                    _, c2pwrite = _winapi.CreatePipe(None, 0)\n                    c2pwrite = Handle(c2pwrite)\n                    _winapi.CloseHandle(_)\n            elif stdout == PIPE:\n                c2pread, c2pwrite = _winapi.CreatePipe(None, 0)\n                c2pread, c2pwrite = Handle(c2pread), Handle(c2pwrite)\n            elif stdout == DEVNULL:\n                c2pwrite = msvcrt.get_osfhandle(self._get_devnull())\n            elif isinstance(stdout, int):\n                c2pwrite = msvcrt.get_osfhandle(stdout)\n            else:\n                # Assuming file-like object\n                c2pwrite = msvcrt.get_osfhandle(stdout.fileno())\n            c2pwrite = self._make_inheritable(c2pwrite)\n\n            if stderr is None:\n                errwrite = _winapi.GetStdHandle(_winapi.STD_ERROR_HANDLE)\n                if errwrite is None:\n                    _, errwrite = _winapi.CreatePipe(None, 0)\n                    errwrite = Handle(errwrite)\n                    _winapi.CloseHandle(_)\n            elif stderr == PIPE:\n                errread, errwrite = _winapi.CreatePipe(None, 0)\n                errread, errwrite = Handle(errread), Handle(errwrite)\n            elif stderr == STDOUT:\n                errwrite = c2pwrite\n            elif stderr == DEVNULL:\n                errwrite = msvcrt.get_osfhandle(self._get_devnull())\n            elif isinstance(stderr, int):\n                errwrite = msvcrt.get_osfhandle(stderr)\n            else:\n                # Assuming file-like object\n                errwrite = msvcrt.get_osfhandle(stderr.fileno())\n            errwrite = self._make_inheritable(errwrite)\n\n            return (p2cread, p2cwrite,\n                    c2pread, c2pwrite,\n                    errread, errwrite)\n\n\n        def _make_inheritable(self, handle):\n            \"\"\"Return a duplicate of handle, which is inheritable\"\"\"\n            h = _winapi.DuplicateHandle(\n                _winapi.GetCurrentProcess(), handle,\n                _winapi.GetCurrentProcess(), 0, 1,\n                _winapi.DUPLICATE_SAME_ACCESS)\n            return Handle(h)\n\n\n        def _filter_handle_list(self, handle_list):\n            \"\"\"Filter out console handles that can't be used\n            in lpAttributeList[\"handle_list\"] and make sure the list\n            isn't empty. This also removes duplicate handles.\"\"\"\n            # An handle with it's lowest two bits set might be a special console\n            # handle that if passed in lpAttributeList[\"handle_list\"], will\n            # cause it to fail.\n            return list({handle for handle in handle_list\n                         if handle & 0x3 != 0x3\n                         or _winapi.GetFileType(handle) !=\n                            _winapi.FILE_TYPE_CHAR})\n\n\n        def _execute_child(self, args, executable, preexec_fn, close_fds,\n                           pass_fds, cwd, env,\n                           startupinfo, creationflags, shell,\n                           p2cread, p2cwrite,\n                           c2pread, c2pwrite,\n                           errread, errwrite,\n                           unused_restore_signals, unused_start_new_session):\n            \"\"\"Execute program (MS Windows version)\"\"\"\n\n            assert not pass_fds, \"pass_fds not supported on Windows.\"\n\n            if not isinstance(args, str):\n                args = list2cmdline(args)\n\n            # Process startup details\n            if startupinfo is None:\n                startupinfo = STARTUPINFO()\n            else:\n                # bpo-34044: Copy STARTUPINFO since it is modified above,\n                # so the caller can reuse it multiple times.\n                startupinfo = startupinfo._copy()\n\n            use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n            if use_std_handles:\n                startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n                startupinfo.hStdInput = p2cread\n                startupinfo.hStdOutput = c2pwrite\n                startupinfo.hStdError = errwrite\n\n            attribute_list = startupinfo.lpAttributeList\n            have_handle_list = bool(attribute_list and\n                                    \"handle_list\" in attribute_list and\n                                    attribute_list[\"handle_list\"])\n\n            # If we were given an handle_list or need to create one\n            if have_handle_list or (use_std_handles and close_fds):\n                if attribute_list is None:\n                    attribute_list = startupinfo.lpAttributeList = {}\n                handle_list = attribute_list[\"handle_list\"] = \\\n                    list(attribute_list.get(\"handle_list\", []))\n\n                if use_std_handles:\n                    handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n\n                handle_list[:] = self._filter_handle_list(handle_list)\n\n                if handle_list:\n                    if not close_fds:\n                        warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                      \"overriding close_fds\", RuntimeWarning)\n\n                    # When using the handle_list we always request to inherit\n                    # handles but the only handles that will be inherited are\n                    # the ones in the handle_list\n                    close_fds = False\n\n            if shell:\n                startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n                startupinfo.wShowWindow = _winapi.SW_HIDE\n                comspec = os.environ.get(\"COMSPEC\", \"cmd.exe\")\n                args = '{} /c \"{}\"'.format (comspec, args)\n\n            # Start the process\n            try:\n                hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                         # no special security\n                                         None, None,\n                                         int(not close_fds),\n                                         creationflags,\n                                         env,\n                                         os.fspath(cwd) if cwd is not None else None,\n                                         startupinfo)\n            finally:\n                # Child is launched. Close the parent's copy of those pipe\n                # handles that only the child should have open.  You need\n                # to make sure that no handles to the write end of the\n                # output pipe are maintained in this process or else the\n                # pipe will not close when the child process exits and the\n                # ReadFile will hang.\n                if p2cread != -1:\n                    p2cread.Close()\n                if c2pwrite != -1:\n                    c2pwrite.Close()\n                if errwrite != -1:\n                    errwrite.Close()\n                if hasattr(self, '_devnull'):\n                    os.close(self._devnull)\n                # Prevent a double close of these handles/fds from __init__\n                # on error.\n                self._closed_child_pipe_fds = True\n\n            # Retain the process handle, but close the thread handle\n            self._child_created = True\n            self._handle = Handle(hp)\n            self.pid = pid\n            _winapi.CloseHandle(ht)\n\n        def _internal_poll(self, _deadstate=None,\n                _WaitForSingleObject=_winapi.WaitForSingleObject,\n                _WAIT_OBJECT_0=_winapi.WAIT_OBJECT_0,\n                _GetExitCodeProcess=_winapi.GetExitCodeProcess):\n            \"\"\"Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it can only refer to objects\n            in its local scope.\n\n            \"\"\"\n            if self.returncode is None:\n                if _WaitForSingleObject(self._handle, 0) == _WAIT_OBJECT_0:\n                    self.returncode = _GetExitCodeProcess(self._handle)\n            return self.returncode\n\n\n        def _wait(self, timeout):\n            \"\"\"Internal implementation of wait() on Windows.\"\"\"\n            if timeout is None:\n                timeout_millis = _winapi.INFINITE\n            else:\n                timeout_millis = int(timeout * 1000)\n            if self.returncode is None:\n                # API note: Returns immediately if timeout_millis == 0.\n                result = _winapi.WaitForSingleObject(self._handle,\n                                                     timeout_millis)\n                if result == _winapi.WAIT_TIMEOUT:\n                    raise TimeoutExpired(self.args, timeout)\n                self.returncode = _winapi.GetExitCodeProcess(self._handle)\n            return self.returncode\n\n\n        def _readerthread(self, fh, buffer):\n            buffer.append(fh.read())\n            fh.close()\n\n\n        def _communicate(self, input, endtime, orig_timeout):\n            # Start reader threads feeding into a list hanging off of this\n            # object, unless they've already been started.\n            if self.stdout and not hasattr(self, \"_stdout_buff\"):\n                self._stdout_buff = []\n                self.stdout_thread = \\\n                        threading.Thread(target=self._readerthread,\n                                         args=(self.stdout, self._stdout_buff))\n                self.stdout_thread.daemon = True\n                self.stdout_thread.start()\n            if self.stderr and not hasattr(self, \"_stderr_buff\"):\n                self._stderr_buff = []\n                self.stderr_thread = \\\n                        threading.Thread(target=self._readerthread,\n                                         args=(self.stderr, self._stderr_buff))\n                self.stderr_thread.daemon = True\n                self.stderr_thread.start()\n\n            if self.stdin:\n                self._stdin_write(input)\n\n            # Wait for the reader threads, or time out.  If we time out, the\n            # threads remain reading and the fds left open in case the user\n            # calls communicate again.\n            if self.stdout is not None:\n                self.stdout_thread.join(self._remaining_time(endtime))\n                if self.stdout_thread.is_alive():\n                    raise TimeoutExpired(self.args, orig_timeout)\n            if self.stderr is not None:\n                self.stderr_thread.join(self._remaining_time(endtime))\n                if self.stderr_thread.is_alive():\n                    raise TimeoutExpired(self.args, orig_timeout)\n\n            # Collect the output from and close both pipes, now that we know\n            # both have been read successfully.\n            stdout = None\n            stderr = None\n            if self.stdout:\n                stdout = self._stdout_buff\n                self.stdout.close()\n            if self.stderr:\n                stderr = self._stderr_buff\n                self.stderr.close()\n\n            # All data exchanged.  Translate lists into strings.\n            if stdout is not None:\n                stdout = stdout[0]\n            if stderr is not None:\n                stderr = stderr[0]\n\n            return (stdout, stderr)\n\n        def send_signal(self, sig):\n            \"\"\"Send a signal to the process.\"\"\"\n            # Don't signal a process that we know has already died.\n            if self.returncode is not None:\n                return\n            if sig == signal.SIGTERM:\n                self.terminate()\n            elif sig == signal.CTRL_C_EVENT:\n                os.kill(self.pid, signal.CTRL_C_EVENT)\n            elif sig == signal.CTRL_BREAK_EVENT:\n                os.kill(self.pid, signal.CTRL_BREAK_EVENT)\n            else:\n                raise ValueError(\"Unsupported signal: {}\".format(sig))\n\n        def terminate(self):\n            \"\"\"Terminates the process.\"\"\"\n            # Don't terminate a process that we know has already died.\n            if self.returncode is not None:\n                return\n            try:\n                _winapi.TerminateProcess(self._handle, 1)\n            except PermissionError:\n                # ERROR_ACCESS_DENIED (winerror 5) is received when the\n                # process already died.\n                rc = _winapi.GetExitCodeProcess(self._handle)\n                if rc == _winapi.STILL_ACTIVE:\n                    raise\n                self.returncode = rc\n\n        kill = terminate\n\n    else:\n        #\n        # POSIX methods\n        #\n        def _get_handles(self, stdin, stdout, stderr):\n            \"\"\"Construct and return tuple with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            \"\"\"\n            p2cread, p2cwrite = -1, -1\n            c2pread, c2pwrite = -1, -1\n            errread, errwrite = -1, -1\n\n            if stdin is None:\n                pass\n            elif stdin == PIPE:\n                p2cread, p2cwrite = os.pipe()\n            elif stdin == DEVNULL:\n                p2cread = self._get_devnull()\n            elif isinstance(stdin, int):\n                p2cread = stdin\n            else:\n                # Assuming file-like object\n                p2cread = stdin.fileno()\n\n            if stdout is None:\n                pass\n            elif stdout == PIPE:\n                c2pread, c2pwrite = os.pipe()\n            elif stdout == DEVNULL:\n                c2pwrite = self._get_devnull()\n            elif isinstance(stdout, int):\n                c2pwrite = stdout\n            else:\n                # Assuming file-like object\n                c2pwrite = stdout.fileno()\n\n            if stderr is None:\n                pass\n            elif stderr == PIPE:\n                errread, errwrite = os.pipe()\n            elif stderr == STDOUT:\n                if c2pwrite != -1:\n                    errwrite = c2pwrite\n                else: # child's stdout is not set, use parent's stdout\n                    errwrite = sys.__stdout__.fileno()\n            elif stderr == DEVNULL:\n                errwrite = self._get_devnull()\n            elif isinstance(stderr, int):\n                errwrite = stderr\n            else:\n                # Assuming file-like object\n                errwrite = stderr.fileno()\n\n            return (p2cread, p2cwrite,\n                    c2pread, c2pwrite,\n                    errread, errwrite)\n\n\n        def _execute_child(self, args, executable, preexec_fn, close_fds,\n                           pass_fds, cwd, env,\n                           startupinfo, creationflags, shell,\n                           p2cread, p2cwrite,\n                           c2pread, c2pwrite,\n                           errread, errwrite,\n                           restore_signals, start_new_session):\n            \"\"\"Execute program (POSIX version)\"\"\"\n\n            if isinstance(args, (str, bytes)):\n                args = [args]\n            else:\n                args = list(args)\n\n            if shell:\n                # On Android the default shell is at '/system/bin/sh'.\n                unix_shell = ('/system/bin/sh' if\n                          hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n                args = [unix_shell, \"-c\"] + args\n                if executable:\n                    args[0] = executable\n\n            if executable is None:\n                executable = args[0]\n            orig_executable = executable\n\n            # For transferring possible exec failure from child to parent.\n            # Data format: \"exception name:hex errno:description\"\n            # Pickle is not used; it is complex and involves memory allocation.\n            errpipe_read, errpipe_write = os.pipe()\n            # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n            low_fds_to_close = []\n            while errpipe_write < 3:\n                low_fds_to_close.append(errpipe_write)\n                errpipe_write = os.dup(errpipe_write)\n            for low_fd in low_fds_to_close:\n                os.close(low_fd)\n            try:\n                try:\n                    # We must avoid complex work that could involve\n                    # malloc or free in the child process to avoid\n                    # potential deadlocks, thus we do all this here.\n                    # and pass it to fork_exec()\n\n                    if env is not None:\n                        env_list = []\n                        for k, v in env.items():\n                            k = os.fsencode(k)\n                            if b'=' in k:\n                                raise ValueError(\"illegal environment variable name\")\n                            env_list.append(k + b'=' + os.fsencode(v))\n                    else:\n                        env_list = None  # Use execv instead of execve.\n                    executable = os.fsencode(executable)\n                    if os.path.dirname(executable):\n                        executable_list = (executable,)\n                    else:\n                        # This matches the behavior of os._execvpe().\n                        executable_list = tuple(\n                            os.path.join(os.fsencode(dir), executable)\n                            for dir in os.get_exec_path(env))\n                    fds_to_keep = set(pass_fds)\n                    fds_to_keep.add(errpipe_write)\n                    self.pid = _posixsubprocess.fork_exec(\n                            args, executable_list,\n                            close_fds, tuple(sorted(map(int, fds_to_keep))),\n                            cwd, env_list,\n                            p2cread, p2cwrite, c2pread, c2pwrite,\n                            errread, errwrite,\n                            errpipe_read, errpipe_write,\n                            restore_signals, start_new_session, preexec_fn)\n                    self._child_created = True\n                finally:\n                    # be sure the FD is closed no matter what\n                    os.close(errpipe_write)\n\n                # self._devnull is not always defined.\n                devnull_fd = getattr(self, '_devnull', None)\n                if p2cread != -1 and p2cwrite != -1 and p2cread != devnull_fd:\n                    os.close(p2cread)\n                if c2pwrite != -1 and c2pread != -1 and c2pwrite != devnull_fd:\n                    os.close(c2pwrite)\n                if errwrite != -1 and errread != -1 and errwrite != devnull_fd:\n                    os.close(errwrite)\n                if devnull_fd is not None:\n                    os.close(devnull_fd)\n                # Prevent a double close of these fds from __init__ on error.\n                self._closed_child_pipe_fds = True\n\n                # Wait for exec to fail or succeed; possibly raising an\n                # exception (limited in size)\n                errpipe_data = bytearray()\n                while True:\n                    part = os.read(errpipe_read, 50000)\n                    errpipe_data += part\n                    if not part or len(errpipe_data) > 50000:\n                        break\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_read)\n\n            if errpipe_data:\n                try:\n                    pid, sts = os.waitpid(self.pid, 0)\n                    if pid == self.pid:\n                        self._handle_exitstatus(sts)\n                    else:\n                        self.returncode = sys.maxsize\n                except ChildProcessError:\n                    pass\n\n                try:\n                    exception_name, hex_errno, err_msg = (\n                            errpipe_data.split(b':', 2))\n                    # The encoding here should match the encoding\n                    # written in by the subprocess implementations\n                    # like _posixsubprocess\n                    err_msg = err_msg.decode()\n                except ValueError:\n                    exception_name = b'SubprocessError'\n                    hex_errno = b'0'\n                    err_msg = 'Bad exception data from child: {!r}'.format(\n                                  bytes(errpipe_data))\n                child_exception_type = getattr(\n                        builtins, exception_name.decode('ascii'),\n                        SubprocessError)\n                if issubclass(child_exception_type, OSError) and hex_errno:\n                    errno_num = int(hex_errno, 16)\n                    child_exec_never_called = (err_msg == \"noexec\")\n                    if child_exec_never_called:\n                        err_msg = \"\"\n                        # The error must be from chdir(cwd).\n                        err_filename = cwd\n                    else:\n                        err_filename = orig_executable\n                    if errno_num != 0:\n                        err_msg = os.strerror(errno_num)\n                        if errno_num == errno.ENOENT:\n                            err_msg += ': ' + repr(err_filename)\n                    raise child_exception_type(errno_num, err_msg, err_filename)\n                raise child_exception_type(err_msg)\n\n\n        def _handle_exitstatus(self, sts, _WIFSIGNALED=os.WIFSIGNALED,\n                _WTERMSIG=os.WTERMSIG, _WIFEXITED=os.WIFEXITED,\n                _WEXITSTATUS=os.WEXITSTATUS, _WIFSTOPPED=os.WIFSTOPPED,\n                _WSTOPSIG=os.WSTOPSIG):\n            \"\"\"All callers to this function MUST hold self._waitpid_lock.\"\"\"\n            # This method is called (indirectly) by __del__, so it cannot\n            # refer to anything outside of its local scope.\n            if _WIFSIGNALED(sts):\n                self.returncode = -_WTERMSIG(sts)\n            elif _WIFEXITED(sts):\n                self.returncode = _WEXITSTATUS(sts)\n            elif _WIFSTOPPED(sts):\n                self.returncode = -_WSTOPSIG(sts)\n            else:\n                # Should never happen\n                raise SubprocessError(\"Unknown child exit status!\")\n\n\n        def _internal_poll(self, _deadstate=None, _waitpid=os.waitpid,\n                _WNOHANG=os.WNOHANG, _ECHILD=errno.ECHILD):\n            \"\"\"Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it cannot reference anything\n            outside of the local scope (nor can any methods it calls).\n\n            \"\"\"\n            if self.returncode is None:\n                if not self._waitpid_lock.acquire(False):\n                    # Something else is busy calling waitpid.  Don't allow two\n                    # at once.  We know nothing yet.\n                    return None\n                try:\n                    if self.returncode is not None:\n                        return self.returncode  # Another thread waited.\n                    pid, sts = _waitpid(self.pid, _WNOHANG)\n                    if pid == self.pid:\n                        self._handle_exitstatus(sts)\n                except OSError as e:\n                    if _deadstate is not None:\n                        self.returncode = _deadstate\n                    elif e.errno == _ECHILD:\n                        # This happens if SIGCLD is set to be ignored or\n                        # waiting for child processes has otherwise been\n                        # disabled for our process.  This child is dead, we\n                        # can't get the status.\n                        # http://bugs.python.org/issue15756\n                        self.returncode = 0\n                finally:\n                    self._waitpid_lock.release()\n            return self.returncode\n\n\n        def _try_wait(self, wait_flags):\n            \"\"\"All callers to this function MUST hold self._waitpid_lock.\"\"\"\n            try:\n                (pid, sts) = os.waitpid(self.pid, wait_flags)\n            except ChildProcessError:\n                # This happens if SIGCLD is set to be ignored or waiting\n                # for child processes has otherwise been disabled for our\n                # process.  This child is dead, we can't get the status.\n                pid = self.pid\n                sts = 0\n            return (pid, sts)\n\n\n        def _wait(self, timeout):\n            \"\"\"Internal implementation of wait() on POSIX.\"\"\"\n            if self.returncode is not None:\n                return self.returncode\n\n            if timeout is not None:\n                endtime = _time() + timeout\n                # Enter a busy loop if we have a timeout.  This busy loop was\n                # cribbed from Lib/threading.py in Thread.wait() at r71065.\n                delay = 0.0005 # 500 us -> initial delay of 1 ms\n                while True:\n                    if self._waitpid_lock.acquire(False):\n                        try:\n                            if self.returncode is not None:\n                                break  # Another thread waited.\n                            (pid, sts) = self._try_wait(os.WNOHANG)\n                            assert pid == self.pid or pid == 0\n                            if pid == self.pid:\n                                self._handle_exitstatus(sts)\n                                break\n                        finally:\n                            self._waitpid_lock.release()\n                    remaining = self._remaining_time(endtime)\n                    if remaining <= 0:\n                        raise TimeoutExpired(self.args, timeout)\n                    delay = min(delay * 2, remaining, .05)\n                    time.sleep(delay)\n            else:\n                while self.returncode is None:\n                    with self._waitpid_lock:\n                        if self.returncode is not None:\n                            break  # Another thread waited.\n                        (pid, sts) = self._try_wait(0)\n                        # Check the pid and loop as waitpid has been known to\n                        # return 0 even without WNOHANG in odd situations.\n                        # http://bugs.python.org/issue14396.\n                        if pid == self.pid:\n                            self._handle_exitstatus(sts)\n            return self.returncode\n\n\n        def _communicate(self, input, endtime, orig_timeout):\n            if self.stdin and not self._communication_started:\n                # Flush stdio buffer.  This might block, if the user has\n                # been writing to .stdin in an uncontrolled fashion.\n                try:\n                    self.stdin.flush()\n                except BrokenPipeError:\n                    pass  # communicate() must ignore BrokenPipeError.\n                if not input:\n                    try:\n                        self.stdin.close()\n                    except BrokenPipeError:\n                        pass  # communicate() must ignore BrokenPipeError.\n\n            stdout = None\n            stderr = None\n\n            # Only create this mapping if we haven't already.\n            if not self._communication_started:\n                self._fileobj2output = {}\n                if self.stdout:\n                    self._fileobj2output[self.stdout] = []\n                if self.stderr:\n                    self._fileobj2output[self.stderr] = []\n\n            if self.stdout:\n                stdout = self._fileobj2output[self.stdout]\n            if self.stderr:\n                stderr = self._fileobj2output[self.stderr]\n\n            self._save_input(input)\n\n            if self._input:\n                input_view = memoryview(self._input)\n\n            with _PopenSelector() as selector:\n                if self.stdin and input:\n                    selector.register(self.stdin, selectors.EVENT_WRITE)\n                if self.stdout:\n                    selector.register(self.stdout, selectors.EVENT_READ)\n                if self.stderr:\n                    selector.register(self.stderr, selectors.EVENT_READ)\n\n                while selector.get_map():\n                    timeout = self._remaining_time(endtime)\n                    if timeout is not None and timeout < 0:\n                        raise TimeoutExpired(self.args, orig_timeout)\n\n                    ready = selector.select(timeout)\n                    self._check_timeout(endtime, orig_timeout)\n\n                    # XXX Rewrite these to use non-blocking I/O on the file\n                    # objects; they are no longer using C stdio!\n\n                    for key, events in ready:\n                        if key.fileobj is self.stdin:\n                            chunk = input_view[self._input_offset :\n                                               self._input_offset + _PIPE_BUF]\n                            try:\n                                self._input_offset += os.write(key.fd, chunk)\n                            except BrokenPipeError:\n                                selector.unregister(key.fileobj)\n                                key.fileobj.close()\n                            else:\n                                if self._input_offset >= len(self._input):\n                                    selector.unregister(key.fileobj)\n                                    key.fileobj.close()\n                        elif key.fileobj in (self.stdout, self.stderr):\n                            data = os.read(key.fd, 32768)\n                            if not data:\n                                selector.unregister(key.fileobj)\n                                key.fileobj.close()\n                            self._fileobj2output[key.fileobj].append(data)\n\n            self.wait(timeout=self._remaining_time(endtime))\n\n            # All data exchanged.  Translate lists into strings.\n            if stdout is not None:\n                stdout = b''.join(stdout)\n            if stderr is not None:\n                stderr = b''.join(stderr)\n\n            # Translate newlines, if requested.\n            # This also turns bytes into strings.\n            if self.text_mode:\n                if stdout is not None:\n                    stdout = self._translate_newlines(stdout,\n                                                      self.stdout.encoding,\n                                                      self.stdout.errors)\n                if stderr is not None:\n                    stderr = self._translate_newlines(stderr,\n                                                      self.stderr.encoding,\n                                                      self.stderr.errors)\n\n            return (stdout, stderr)\n\n\n        def _save_input(self, input):\n            # This method is called from the _communicate_with_*() methods\n            # so that if we time out while communicating, we can continue\n            # sending input if we retry.\n            if self.stdin and self._input is None:\n                self._input_offset = 0\n                self._input = input\n                if input is not None and self.text_mode:\n                    self._input = self._input.encode(self.stdin.encoding,\n                                                     self.stdin.errors)\n\n\n        def send_signal(self, sig):\n            \"\"\"Send a signal to the process.\"\"\"\n            # Skip signalling a process that we know has already died.\n            if self.returncode is None:\n                os.kill(self.pid, sig)\n\n        def terminate(self):\n            \"\"\"Terminate the process with SIGTERM\n            \"\"\"\n            self.send_signal(signal.SIGTERM)\n\n        def kill(self):\n            \"\"\"Kill the process with SIGKILL\n            \"\"\"\n            self.send_signal(signal.SIGKILL)\n", 1756], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_bootlocale.py": ["\"\"\"A minimal subset of the locale module used at interpreter startup\n(imported by the _io module), in order to reduce startup time.\n\nDon't import directly from third-party code; use the `locale` module instead!\n\"\"\"\n\nimport sys\nimport _locale\n\nif sys.platform.startswith(\"win\"):\n    def getpreferredencoding(do_setlocale=True):\n        if sys.flags.utf8_mode:\n            return 'UTF-8'\n        return _locale._getdefaultlocale()[1]\nelse:\n    try:\n        _locale.CODESET\n    except AttributeError:\n        if hasattr(sys, 'getandroidapilevel'):\n            # On Android langinfo.h and CODESET are missing, and UTF-8 is\n            # always used in mbstowcs() and wcstombs().\n            def getpreferredencoding(do_setlocale=True):\n                return 'UTF-8'\n        else:\n            def getpreferredencoding(do_setlocale=True):\n                if sys.flags.utf8_mode:\n                    return 'UTF-8'\n                # This path for legacy systems needs the more complex\n                # getdefaultlocale() function, import the full locale module.\n                import locale\n                return locale.getpreferredencoding(do_setlocale)\n    else:\n        def getpreferredencoding(do_setlocale=True):\n            assert not do_setlocale\n            if sys.flags.utf8_mode:\n                return 'UTF-8'\n            result = _locale.nl_langinfo(_locale.CODESET)\n            if not result and sys.platform == 'darwin':\n                # nl_langinfo can return an empty string\n                # when the setting has an invalid value.\n                # Default to UTF-8 in that case because\n                # UTF-8 is the default charset on OSX and\n                # returning nothing will crash the\n                # interpreter.\n                result = 'UTF-8'\n            return result\n", 46], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/heartrate/core.py": ["import inspect\nimport logging\nimport sys\nimport threading\nimport webbrowser\nfrom collections import defaultdict, deque, Counter\nfrom functools import lru_cache\nfrom itertools import islice, takewhile\n\nimport pygments\nfrom executing import Source\nfrom flask import Flask, render_template, jsonify, url_for, request\n# noinspection PyUnresolvedReferences\nfrom pygments.formatters import HtmlFormatter\n# noinspection PyUnresolvedReferences\nfrom pygments.lexers import PythonLexer, Python3Lexer\n\nfrom heartrate import files as files_filters\n\nlogging.getLogger('werkzeug').setLevel(logging.ERROR)\n\nlevels = 10\n\nlightnesses = [\n    int((i + 1) * 100 / (levels + 1))\n    for i in range(levels + 1)\n]\n\n\nlexer = Python3Lexer()\nformatter = HtmlFormatter(nowrap=True)\n\n\ndef highlight_python(code):\n    return pygments.highlight(\n        code,\n        lexer,\n        formatter,\n    )\n\n\ndef highlight_python_and_ranges(code):\n    return (highlight_python(code)\n            .replace(highlight_python(open_sentinel).rstrip('\\n'), \"<b>\")\n            .replace(highlight_python(close_sentinel).rstrip('\\n'), \"</b>\")\n            )\n\n\ndef highlight_stack_frame(frame):\n    executing = Source.executing(frame)\n    node = executing.node\n    source = executing.source\n    if node:\n        source.asttokens()\n        start = node.first_token.start[0]\n        end = node.last_token.end[0]\n    else:\n        start = end = frame.f_lineno\n    \n    highlighted = '\\n'.join(highlight_ranges(source, [frame]).splitlines()[start - 1:end])\n    return highlight_python_and_ranges(highlighted)\n\n\ndef trace(\n        files=files_filters.contains_regex(r'#\\s*heartrate'),\n        port=9999,\n        host='127.0.0.1',\n        browser=False,\n        daemon=False,\n):\n    calling_frame = inspect.currentframe().f_back\n    calling_file = calling_frame.f_code.co_filename\n\n    @lru_cache(maxsize=None)\n    def include_file(path):\n        try:\n            return path == calling_file or files(path)\n        except Exception:\n            return False\n\n    thread_ident = threading.get_ident()\n    queues = defaultdict(lambda: deque(maxlen=2 ** levels))\n    totals = defaultdict(Counter)\n\n    app = Flask(__name__)\n\n    host_is_local = host in [\"127.0.0.1\", \"localhost\"]\n    if host_is_local:\n        app.config[\"SERVER_NAME\"] = \"{host}:{port}\".format(host=host, port=port)\n\n    @app.route('/')\n    def index():\n        return render_template('index.html', files=sorted(queues.keys()))\n\n    @app.route('/file/')\n    def file_view():\n        return render_template(\"file.html\", **file_table_context())\n\n    def file_table_context():\n        filename = request.args['filename']\n        source = Source.for_filename(filename)\n        queue = queues[filename]\n\n        highlighted = highlight_ranges(source, frames_matching(filename))\n        highlighted = highlight_python_and_ranges(highlighted)\n        highlighted_lines = list(enumerate(highlighted.splitlines()))\n        \n        counters = [\n            queue_counter(queue, 2 ** i)\n            for i in range(levels + 1)\n        ]\n\n        ratios = [\n            [\n                counter[i + 1] / min(2 ** c, len(queue) or 1)\n                * (c + 1) / levels\n                for c, counter in enumerate(counters)\n            ]\n            for i, _ in highlighted_lines\n        ]\n\n        max_ratio = max(map(max, ratios)) or 1\n\n        rows = [\n            (\n                i + 1,\n                totals[filename][i + 1] or '',\n                reversed([\n\n                    int(round(ratio / max_ratio * 100))\n                    for ratio in ratios[i]\n                ]),\n                line,\n            )\n            for i, line in highlighted_lines\n        ]\n\n        return dict(\n            rows=rows,\n            zip=zip,\n            lightnesses=lightnesses,\n            filename=filename,\n            highlighted=highlighted,\n        )\n\n    @app.route('/table/')\n    def file_table_view():\n        return render_template('file_table.html', **file_table_context())\n\n    def current_frame():\n        return sys._current_frames()[thread_ident]\n\n    def frames_matching(filename):\n        frame = current_frame()\n        while frame:\n            if frame.f_code.co_filename == filename:\n                yield frame\n            frame = frame.f_back\n\n    @app.route('/stacktrace/')\n    def stacktrace():\n        def gen():\n            frame = current_frame()\n            while frame:\n                code = frame.f_code\n                filename = code.co_filename\n                name = Source.for_frame(frame).code_qualname(code)\n                yield (\n                    filename,\n                    frame.f_lineno,\n                    name,\n                    highlight_stack_frame(frame),\n                    include_file(filename)\n                )\n                frame = frame.f_back\n\n        return jsonify(list(takewhile(\n            lambda entry: not (\n                    'heartrate' in entry[0]\n                    and entry[2].endswith(trace_func.__name__)),\n            list(gen())[::-1]\n        )))\n\n    threading.Thread(\n        target=lambda: app.run(\n            debug=False,\n            host=host,\n            port=port,\n        ),\n        daemon=daemon,\n    ).start()\n\n\n\n    def trace_func(frame, event, _arg):\n        filename = frame.f_code.co_filename\n        if event == \"call\":\n            if include_file(filename):\n                return trace_func\n\n        elif event == \"line\":\n            lineno = frame.f_lineno\n            queues[filename].append(lineno)\n            totals[filename][lineno] += 1\n            Source.lazycache(frame)\n\n    calling_frame.f_trace = trace_func\n    sys.settrace(trace_func)\n    \n    if browser and host_is_local:\n        with app.app_context():\n            url = url_for(\n                'file_view',\n                filename=calling_file,\n            )\n        webbrowser.open_new_tab(url)\n\n\nopen_sentinel = \" $$heartrate_open$$ \"\nclose_sentinel = \" $$heartrate_close$$ \"\n\n\ndef highlight_ranges(source, frames):\n    text = source.text\n    ranges = set()\n    for frame in frames:\n        executing = Source.executing(frame)\n        if executing.node:\n            text_range = executing.text_range()\n            ranges.add(text_range)\n    \n    positions = []\n\n    for start, end in ranges:\n        positions.append((start, open_sentinel))\n        positions.append((end, close_sentinel))\n        while True:\n            start = text.find('\\n', start + 1, end)\n            if start == -1:\n                break\n            positions.append((start, close_sentinel))\n            positions.append((start + 1, open_sentinel))\n\n    # This just makes the loop below simpler\n    positions.append((len(text), ''))\n\n    positions.sort()\n\n    parts = []\n    start = 0\n    for position, part in positions:\n        parts.append(text[start:position])\n        parts.append(part)\n        start = position\n    return ''.join(parts)\n\n\ndef queue_counter(queue, n):\n    while True:\n        try:\n            return Counter(islice(queue, max(0, len(queue) - n), len(queue)))\n        except RuntimeError:\n            pass\n", 263], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py": ["import ast\nimport inspect\nimport os\nimport sys\nfrom itertools import chain\n\nimport six\nfrom cheap_repr import cheap_repr, try_register_repr\n\nPY34 = sys.version_info[:2] == (3, 4)\nNO_ASTTOKENS = PY34\nPYPY = 'pypy' in sys.version.lower()\nNO_BIRDSEYE = NO_ASTTOKENS or PYPY\n\npp_name_prefix = '__deep_pp_hidden__'\n\nfile_reading_errors = (\n    IOError,\n    OSError,\n    ValueError  # IronPython weirdness.\n)\n\n\ndef shitcode(s):\n    return ''.join(\n        (c if (0 < ord(c) < 256) else '?') for c in s\n    )\n\n\ndef truncate(seq, max_length, middle):\n    if len(seq) > max_length:\n        left = (max_length - len(middle)) // 2\n        right = max_length - len(middle) - left\n        seq = seq[:left] + middle + seq[-right:]\n    return seq\n\n\ndef truncate_string(string, max_length):\n    return truncate(string, max_length, '...')\n\n\ndef truncate_list(lst, max_length):\n    return truncate(lst, max_length, ['...'])\n\n\ndef ensure_tuple(x, split=False):\n    if split and isinstance(x, six.string_types):\n        x = x.replace(',', ' ').split()\n    if not isinstance(x, (list, set, tuple)):\n        x = (x,)\n    return tuple(x)\n\n\ndef short_filename(code):\n    result = os.path.basename(code.co_filename)\n    if result.endswith('.pyc'):\n        result = result[:-1]\n    return result\n\n\ndef is_comprehension_frame(frame):\n    return frame.f_code.co_name in ('<listcomp>', '<dictcomp>', '<setcomp>')\n\n\ndef needs_parentheses(source):\n    def code(s):\n        return compile(s.format(source), '<variable>', 'eval').co_code\n\n    try:\n        without_parens = code('{}.x')\n    except SyntaxError:\n        # Likely a multiline expression that needs parentheses to be valid\n        code('({})')\n        return True\n    else:\n        return without_parens != code('({}).x')\n\n\ndef with_needed_parentheses(source):\n    if needs_parentheses(source):\n        return '({})'.format(source)\n    else:\n        return source\n\n\nREPR_TARGET_LENGTH = 100\n\n\ndef my_cheap_repr(x):\n    return cheap_repr(x, target_length=REPR_TARGET_LENGTH)\n\n\nclass ArgDefaultDict(dict):\n    def __init__(self, factory):\n        super(ArgDefaultDict, self).__init__()\n        self.factory = factory\n\n    def __missing__(self, key):\n        result = self[key] = self.factory(key)\n        return result\n\n\ndef optional_numeric_label(i, lst):\n    if len(lst) == 1:\n        return ''\n    else:\n        return ' ' + str(i + 1)\n\n\ndef is_pathlike(x):\n    if hasattr(os, 'PathLike'):\n        return isinstance(x, os.PathLike)\n\n    return (\n            hasattr(x, '__fspath__') or\n            # Make a concession for older `pathlib` versions:\n            (hasattr(x, 'open') and\n             'path' in x.__class__.__name__.lower())\n    )\n\n\ntry:\n    iscoroutinefunction = inspect.iscoroutinefunction\nexcept AttributeError:\n    def iscoroutinefunction(_):\n        return False\n\ntry:\n    try_statement = ast.Try\nexcept AttributeError:\n    try_statement = ast.TryExcept\n\n\ntry:\n    builtins = __import__(\"__builtin__\")\nexcept ImportError:\n    builtins = __import__(\"builtins\")\n\n\ntry:\n    FormattedValue = ast.FormattedValue\nexcept:\n    class FormattedValue(object):\n        pass\n\n\ndef no_args_decorator(args, kwargs):\n    return len(args) == 1 and inspect.isfunction(args[0]) and not kwargs\n\n\ntry:\n    from functools import lru_cache\nexcept ImportError:\n    from backports.functools_lru_cache import lru_cache\n\n\nif six.PY2:\n    # noinspection PyUnresolvedReferences\n    from collections import Sequence, Mapping, Set\nelse:\n    # noinspection PyUnresolvedReferences,PyCompatibility\n    from collections.abc import Sequence, Mapping, Set\n\n\nclass DirectRepr(str):\n    def __repr__(self):\n        return self\n\n\ntry:\n    from django.db.models import QuerySet\nexcept ImportError:\n    class QuerySet(object):\n        pass\n\n\ndef _register_cheap_reprs():\n    def _sample_indices(length, max_length):\n        if length <= max_length + 2:\n            return range(length)\n        else:\n            return chain(range(max_length // 2),\n                         range(length - max_length // 2,\n                               length))\n\n    @try_register_repr('pandas', 'Series')\n    def _repr_series_one_line(x, helper):\n        n = len(x)\n        if n == 0:\n            return repr(x)\n        newlevel = helper.level - 1\n        pieces = []\n        maxparts = _repr_series_one_line.maxparts\n        for i in _sample_indices(n, maxparts):\n            try:\n                k = x.index[i:i + 1].format(sparsify=False)[0]\n            except TypeError:\n                k = x.index[i:i + 1].format()[0]\n            v = x.iloc[i]\n            pieces.append('%s = %s' % (k, cheap_repr(v, newlevel)))\n        if n > maxparts + 2:\n            pieces.insert(maxparts // 2, '...')\n        return '; '.join(pieces)\n\n\n_register_cheap_reprs()\n", 206], "/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py": ["import functools\nimport inspect\nimport os\nimport re\nimport sys\nimport threading\nfrom collections import OrderedDict\n\nimport six\n# noinspection PyUnresolvedReferences\nfrom cheap_repr import cheap_repr, find_repr_function, try_register_repr\n\nfrom snoop.utils import my_cheap_repr, ArgDefaultDict, iscoroutinefunction, \\\n    truncate_list, ensure_tuple, is_comprehension_frame, no_args_decorator, pp_name_prefix, NO_BIRDSEYE, \\\n    _register_cheap_reprs, PY34\nfrom .formatting import Event, Source\nfrom .variables import CommonVariable, Exploding, BaseVariable\n\nfind_repr_function(six.text_type).maxparts = 100\nfind_repr_function(six.binary_type).maxparts = 100\nfind_repr_function(object).maxparts = 100\nfind_repr_function(int).maxparts = 999999\ncheap_repr.suppression_threshold = 999999\n\n\nclass FrameInfo(object):\n    def __init__(self, frame):\n        self.frame = frame\n        self.local_reprs = {}\n        self.last_line_no = frame.f_lineno\n        self.comprehension_variables = OrderedDict()\n        self.source = Source.for_frame(frame)\n        code = frame.f_code\n        self.is_generator = code.co_flags & inspect.CO_GENERATOR\n        self.had_exception = False\n        if is_comprehension_frame(frame):\n            self.comprehension_type = (\n                    re.match(r'<(\\w+)comp>', code.co_name).group(1).title()\n                    + u' comprehension'\n            )\n        else:\n            self.comprehension_type = ''\n        self.is_ipython_cell = (\n                code.co_name == '<module>' and\n                code.co_filename.startswith('<ipython-input-')\n        )\n\n    def update_variables(self, watch, watch_extras, event, whitelist):\n        self.last_line_no = self.frame.f_lineno\n        old_local_reprs = self.local_reprs\n        self.local_reprs = OrderedDict(\n            (source, my_cheap_repr(value))\n            for source, value in\n            self.get_local_reprs(watch, watch_extras, whitelist)\n        )\n\n        if self.comprehension_type:\n            for name, value_repr in self.local_reprs.items():\n                values = self.comprehension_variables.setdefault(name, [])\n                if not values or values[-1] != value_repr:\n                    values.append(value_repr)\n                    values[:] = truncate_list(values, 11)\n            if event in ('return', 'exception'):\n                return [\n                    (name, ', '.join(values))\n                    for name, values in self.comprehension_variables.items()\n                ]\n            else:\n                return []\n\n        variables = []\n        for name, value_repr in self.local_reprs.items():\n            if name not in old_local_reprs or old_local_reprs[name] != value_repr:\n                variables.append((name, value_repr))\n        return variables\n\n    def get_local_reprs(self, watch, watch_extras, whitelist):\n        frame = self.frame\n        code = frame.f_code\n        var_names = [\n            key for key in frame.f_locals\n            if whitelist is None or key in whitelist\n            if not key.startswith(pp_name_prefix)\n        ]\n        vars_order = code.co_varnames + code.co_cellvars + code.co_freevars + tuple(var_names)\n        var_names.sort(key=vars_order.index)\n        result_items = [\n            (key, frame.f_locals[key])\n             for key in var_names\n        ]\n\n        for variable in watch:\n            result_items += sorted(variable.items(frame))\n\n        for source, value in result_items:\n            yield source, value\n            for extra in watch_extras:\n                try:\n                    pair = extra(source, value)\n                except Exception:\n                    pass\n                else:\n                    if pair is not None:\n                        assert len(pair) == 2, \"Watch extra must return pair or None\"\n                        yield pair\n\n\nthread_global = threading.local()\ninternal_directories = (os.path.dirname((lambda: 0).__code__.co_filename),)\n\ntry:\n    # noinspection PyUnresolvedReferences\n    import birdseye\nexcept ImportError:\n    pass\nelse:\n    internal_directories += (os.path.dirname(birdseye.__file__),)\n\n\nclass TracerMeta(type):\n    def __new__(mcs, *args, **kwargs):\n        result = super(TracerMeta, mcs).__new__(mcs, *args, **kwargs)\n        result.default = result()\n        return result\n\n    def __call__(cls, *args, **kwargs):\n        if no_args_decorator(args, kwargs):\n            return cls.default(args[0])\n        else:\n            return super(TracerMeta, cls).__call__(*args, **kwargs)\n\n    def __enter__(self):\n        return self.default.__enter__(context=1)\n\n    def __exit__(self, *args):\n        return self.default.__exit__(*args, context=1)\n\n\n@six.add_metaclass(TracerMeta)\nclass Tracer(object):\n    def __init__(\n            self,\n            watch=(),\n            watch_explode=(),\n            depth=1,\n    ):\n        self.watch = [\n            v if isinstance(v, BaseVariable) else CommonVariable(v)\n            for v in ensure_tuple(watch)\n        ] + [\n            v if isinstance(v, BaseVariable) else Exploding(v)\n            for v in ensure_tuple(watch_explode)\n        ]\n        self.frame_infos = ArgDefaultDict(FrameInfo)\n        self.depth = depth\n        assert self.depth >= 1\n        self.target_codes = set()\n        self.target_frames = set()\n        self.variable_whitelist = None\n\n    def __call__(self, function):\n        if iscoroutinefunction(function):\n            raise NotImplementedError(\"coroutines are not supported, sorry!\")\n\n        self.target_codes.add(function.__code__)\n\n        @functools.wraps(function)\n        def simple_wrapper(*args, **kwargs):\n            with self:\n                return function(*args, **kwargs)\n\n        @functools.wraps(function)\n        def generator_wrapper(*args, **kwargs):\n            gen = function(*args, **kwargs)\n            method, incoming = gen.send, None\n            while True:\n                with self:\n                    try:\n                        outgoing = method(incoming)\n                    except StopIteration:\n                        return\n                try:\n                    method, incoming = gen.send, (yield outgoing)\n                except Exception as e:\n                    method, incoming = gen.throw, e\n\n        if inspect.isgeneratorfunction(function):\n            return generator_wrapper\n        else:\n            return simple_wrapper\n\n    def __enter__(self, context=0):\n        if not self.config.enabled:\n            return\n\n        self.config.thread_local.__dict__.setdefault('depth', -1)\n\n        calling_frame = sys._getframe(context + 1)\n        if not self._is_internal_frame(calling_frame):\n            calling_frame.f_trace = self.trace\n            self.target_frames.add(calling_frame)\n            self.config.last_frame = calling_frame\n            self.trace(calling_frame, 'enter', None)\n\n        stack = thread_global.__dict__.setdefault('original_trace_functions', [])\n        stack.append(sys.gettrace())\n        sys.settrace(self.trace)\n\n    def __exit__(self, exc_type, exc_value, exc_traceback, context=0):\n        if not self.config.enabled:\n            return\n\n        previous_trace = thread_global.original_trace_functions.pop()\n        sys.settrace(previous_trace)\n        calling_frame = sys._getframe(context + 1)\n        if not (PY34 and previous_trace is None):\n            calling_frame.f_trace = previous_trace\n        self.trace(calling_frame, 'exit', None)\n        self.target_frames.discard(calling_frame)\n        self.frame_infos.pop(calling_frame, None)\n\n    def _is_internal_frame(self, frame):\n        return frame.f_code.co_filename.startswith(internal_directories)\n    \n    def _is_traced_frame(self, frame):\n        return frame.f_code in self.target_codes or frame in self.target_frames\n\n    def trace(self, frame, event, arg):\n        if not self._is_traced_frame(frame):\n            if (\n                    self.depth == 1\n                    or self._is_internal_frame(frame)\n            ) and not is_comprehension_frame(frame):\n                return None\n            else:\n                candidate = frame\n                i = 0\n                while True:\n                    if is_comprehension_frame(candidate):\n                        candidate = candidate.f_back\n                        continue\n                    i += 1\n                    if self._is_traced_frame(candidate):\n                        break\n                    candidate = candidate.f_back\n                    if i >= self.depth or candidate is None or self._is_internal_frame(candidate):\n                        return None\n\n        thread_local = self.config.thread_local\n        frame_info = self.frame_infos[frame]\n        if event in ('call', 'enter'):\n            thread_local.depth += 1\n        elif self.config.last_frame and self.config.last_frame is not frame:\n            line_no = frame_info.last_line_no\n            trace_event = Event(frame_info, event, arg, thread_local.depth, line_no=line_no)\n            line = self.config.formatter.format_line_only(trace_event)\n            self.config.write(line)\n\n        if event == 'exception':\n            frame_info.had_exception = True\n\n        self.config.last_frame = frame\n\n        trace_event = Event(frame_info, event, arg, thread_local.depth)\n        if not (frame.f_code.co_name == '<genexpr>' and event not in ('return', 'exception')):\n            trace_event.variables = frame_info.update_variables(\n                self.watch,\n                self.config.watch_extras,\n                event,\n                self.variable_whitelist,\n            )\n\n        if event in ('return', 'exit'):\n            del self.frame_infos[frame]\n            thread_local.depth -= 1\n\n        formatted = self.config.formatter.format(trace_event)\n        self.config.write(formatted)\n\n        return self.trace\n\n    @staticmethod\n    def load_ipython_extension(ipython_shell):\n        from snoop.ipython import SnoopMagics\n        ipython_shell.register_magics(SnoopMagics)\n\n\nclass Spy(object):\n    def __init__(self, config):\n        self.config = config\n\n    def __call__(self, *args, **kwargs):\n        if NO_BIRDSEYE:\n            raise Exception(\"birdseye doesn't support this version of Python\")\n\n        try:\n            import birdseye\n        except ImportError:\n            raise Exception(\"You must install birdseye separately to use spy: pip install birdseye\")\n\n        # Decorator without parentheses\n        if no_args_decorator(args, kwargs):\n            return self._trace(args[0])\n\n        # Decorator with parentheses and perhaps arguments\n        def decorator(func):\n            return self._trace(func, *args, **kwargs)\n\n        return decorator\n\n    def _trace(self, func, *args, **kwargs):\n        # noinspection PyUnresolvedReferences\n        from birdseye import eye\n\n        traced = eye(func)\n        traced = self.config.snoop(*args, **kwargs)(traced)\n\n        _register_cheap_reprs()  # Override birdseye in case it's outdated\n\n        @functools.wraps(func)\n        def wrapper(*func_args, **func_kwargs):\n            if self.config.enabled:\n                final_func = traced\n            else:\n                final_func = func\n\n            return final_func(*func_args, **func_kwargs)\n\n        return wrapper\n", 329], "/Users/rafsan/Desktop/pythonProject/main.py": ["from viztracer import VizTracer\nimport heartrate\nimport snoop\n\ntracer = VizTracer()\ntracer.start()\nheartrate.trace(browser='True')\n\n# Something happens here\n@snoop\ndef factorial(x):\n    if(x==1):\n        return 1\n    else:\n        return (x*factorial(x-1))\n\nif __name__==\"__main__\":\n    num=5\n    print(factorial(5))\ntracer.stop()\ntracer.save()", 20]}, "functions": {"currentframe (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:1507)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py", 1507], "lru_cache (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:458)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py", 458], "update_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:37)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py", 37], "decorating_function (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:492)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py", 492], "static_folder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:259)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 259], "static_url_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:290)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 290], "_get_sep (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:41)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py", 41], "isabs (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:64)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py", 64], "normpath (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:338)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py", 338], "abspath (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:376)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py", 376], "dirname (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:154)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py", 154], "get_root_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:705)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py", 705], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py:838)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py", 838], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py:1166)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py", 1166], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py:1461)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py", 1461], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py:1788)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/core.py", 1788], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:92)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 92], "find_spec (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/importlib/util.py:73)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/importlib/util.py", 73], "_find_package_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:784)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 784], "find_package (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:836)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 836], "name (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:525)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 525], "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/utils.py:90)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/utils.py", 90], "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:772)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py", 772], "join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:75)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py", 75], "auto_find_instance_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:630)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 630], "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:751)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py", 751], "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:673)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py", 673], "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:657)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py", 657], "get_env (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:29)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py", 29], "get_debug_flag (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:37)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py", 37], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/config.py:72)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/config.py", 72], "make_config (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:613)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 613], "copy (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/datastructures.py:1611)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/datastructures.py", 1611], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1464)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1464], "static_folder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:249)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 249], "has_static_folder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:266)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 266], "basename (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py:144)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/posixpath.py", 144], "static_url_path (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:274)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 274], "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:783)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 783], "_is_setup_finished (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:522)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 522], "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1061)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 1061], "<setcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:715)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 715], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:681)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 681], "get_rules (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:773)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 773], "parse_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:214)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 214], "_build_regex (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:839)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 839], "isstring (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:595)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 595], "__next (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:233)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 233], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:224)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 224], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:76)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 76], "tell (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:286)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 286], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:111)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 111], "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:254)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 254], "append (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:172)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 172], "__len__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:160)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 160], "__getitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:164)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 164], "match (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:249)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 249], "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:168)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 168], "_parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:475)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 475], "_uniq (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:408)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 408], "_parse_sub (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:417)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 417], "fix_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:903)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 903], "parse (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:919)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 919], "getwidth (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:174)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 174], "_get_iscased (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:453)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 453], "_get_literal_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:461)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 461], "_get_charset_prefix (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:492)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 492], "_compile_info (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:536)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 536], "_simple (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:423)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 423], "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:71)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 71], "_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:598)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 598], "groups (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:81)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 81], "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:759)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 759], "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:526)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py", 526], "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:284)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py", 284], "__and__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py:836)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/enum.py", 836], "_compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:271)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py", 271], "finditer (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:225)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py", 225], "escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:252)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py", 252], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1195)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1195], "get_converter (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:801)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 801], "_to_bytes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:96)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py", 96], "url_quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:547)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py", 547], "__hash__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:664)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 664], "_type_check (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:113)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 113], "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:772)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 772], "_is_dunder (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:590)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 590], "__setattr__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:704)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 704], "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:613)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 613], "_collect_type_vars (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:165)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 165], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:603)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 603], "copy_with (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:633)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 633], "__getitem_inner__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:760)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 760], "inner (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:248)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 248], "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:744)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 744], "__eq__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:317)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 317], "__eq__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:655)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 655], "<genexpr> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:629)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 629], "_check_generic (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:199)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 199], "<listcomp> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:176)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 176], "_subs_tvars (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:180)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 180], "__getitem__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:621)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 621], "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1006)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1006], "_parts (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1004)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1004], "parse (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:30)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py", 30], "iter_fields (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:172)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py", 172], "iter_child_nodes (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:184)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py", 184], "walk (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py:224)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ast.py", 224], "_prefix_names (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:534)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 534], "_convert (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:999)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 999], "_join (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1027)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1027], "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1037)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1037], "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1041)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1041], "_get_func_code (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:967)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 967], "_compile_builder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:974)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 974], "_escape (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:343)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 343], "getuntil (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:267)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 267], "opengroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:84)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 84], "closegroup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py:96)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_parse.py", 96], "_combine_flags (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:65)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 65], "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py:232)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/re.py", 232], "compile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:824)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 824], "bind (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:784)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 784], "add (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1533)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1533], "add_url_rule (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1037)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 1037], "wrapper_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:45)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 45], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:384)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 384], "route (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:413)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 413], "_endpoint_from_view_func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:751)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 751], "decorator (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py:437)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/scaffold.py", 437], "_newname (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:728)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 728], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:216)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 216], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:499)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 499], "add (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/_weakrefset.py:81)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/_weakrefset.py", 81], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:763)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 763], "is_set (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:507)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 507], "__enter__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:240)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 240], "_is_owned (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:255)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 255], "_release_save (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:249)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 249], "get_load_dotenv (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:51)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py", 51], "_acquire_restore (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:252)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 252], "wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:264)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 264], "__exit__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:243)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 243], "wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:534)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 534], "start (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:834)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 834], "isfile (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/genericpath.py:27)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/genericpath.py", 27], "load_dotenv (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/cli.py:610)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/cli.py", 610], "__contains__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py:664)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_collections_abc.py", 664], "templates_auto_reload (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:655)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 655], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/templating.py:51)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/templating.py", 51], "create_global_jinja_loader (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:709)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 709], "_postinit (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/utils.py:512)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/utils.py", 512], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/utils.py:506)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/utils.py", 506], "create_cache (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py:81)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py", 81], "load_extensions (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py:107)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py", 107], "_environment_config_check (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py:125)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py", 125], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py:291)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/jinja2/environment.py", 291], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/templating.py:39)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/templating.py", 39], "create_jinja_environment (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:674)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 674], "jinja_env (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:594)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 594], "debug (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:800)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 800], "__get__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/config.py:16)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/config.py", 16], "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:611)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 611], "get (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py:432)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py", 432], "_get_windows_console_stream (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:570)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 570], "_is_binary_writer (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:165)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 165], "cast (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py:893)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py", 893], "_is_compat_stream_attr (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:223)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 223], "_is_compatible_text_stream (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:232)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 232], "is_ascii_encoding (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:45)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 45], "_stream_is_misconfigured (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:214)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 214], "_force_correct_text_stream (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:243)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 243], "_force_correct_text_writer (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:305)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 305], "get_text_stdout (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:351)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 351], "__setitem__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py:408)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/weakref.py", 408], "func (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:592)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 592], "get_current_context (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:22)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py", 22], "resolve_color_default (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py:56)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/globals.py", 56], "isatty (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:580)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 580], "_is_jupyter_kernel_output (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:497)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 497], "should_strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:504)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 504], "strip_ansi (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py:493)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/_compat.py", 493], "echo (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/utils.py:204)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/utils.py", 204], "_interpret_color (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py:474)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py", 474], "style (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py:487)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py", 487], "secho (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py:628)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/click/termui.py", 628], "show_server_banner (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/cli.py:667)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/cli.py", 667], "select_address_family (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:608)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py", 608], "normalize_encoding (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/__init__.py:43)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/__init__.py", 43], "<module> (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/stringprep.py:6)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/stringprep.py", 6], "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:413)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 413], "_mk_bitmap (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:411)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 411], "_bytes_to_codes (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:416)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 416], "_optimize_charset (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:276)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 276], "_compile_charset (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py:249)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/sre_compile.py", 249], "Codec (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:146)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py", 146], "IncrementalEncoder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:218)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py", 218], "IncrementalDecoder (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:253)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py", 253], "StreamWriter (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:292)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py", 292], "StreamReader (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:295)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py", 295], "<module> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:3)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py", 3], "__new__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/codecs.py:94)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/codecs.py", 94], "getregentry (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:300)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py", 300], "search_function (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/__init__.py:71)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/__init__.py", 71], "encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py:147)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/encodings/idna.py", 147], "_intenum_converter (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:97)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py", 97], "getaddrinfo (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:731)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py", 731], "get_sockaddr (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:618)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py", 618], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:200)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py", 200], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:139)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py", 139], "server_bind (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:458)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py", 458], "getfqdn (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:663)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py", 663], "server_bind (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/server.py:135)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/http/server.py", 135], "server_activate (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:469)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py", 469], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:445)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py", 445], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:660)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py", 660], "make_server (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:765)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py", 765], "family (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py:432)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socket.py", 432], "_acquireLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:212)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 212], "_releaseLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:221)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 221], "getLogger (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1216)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 1216], "getLogger (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1925)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 1925], "getEffectiveLevel (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1600)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 1600], "<genexpr> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:181)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py", 181], "_has_level_handler (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:173)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py", 173], "find_spec (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/six.py:194)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/six.py", 194], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:716)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 716], "_checkLevel (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:187)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 187], "_addHandlerRef (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:783)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 783], "RLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:75)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 75], "_register_at_fork_reinit_lock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:242)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 242], "createLock (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:831)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 831], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:802)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 802], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:991)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 991], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:195)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py", 195], "addHandler (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1526)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 1526], "isEnabledFor (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1614)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 1614], "info (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1368)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py", 1368], "_log (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:206)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py", 206], "log_startup (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py:915)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/serving.py", 915], "clear (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py:524)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", 524], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:63)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py", 63], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:209)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py", 209], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:347)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py", 347], "__enter__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:199)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py", 199], "fileno (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py:485)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/socketserver.py", 485], "_fileobj_to_fd (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:21)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py", 21], "_fileobj_lookup (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:215)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py", 215], "register (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:234)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py", 234], "register (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py:351)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/selectors.py", 351], "_encode_idna (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:476)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py", 476], "_to_str (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py:131)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/_internal.py", 131], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1747)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1747], "bind (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1545)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1545], "create_url_adapter (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1751)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 1751], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:228)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py", 228], "app_context (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1950)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 1950], "__getattr__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:160)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py", 160], "__setattr__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:167)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py", 167], "push (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:231)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py", 231], "send (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/signals.py:25)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/signals.py", 25], "push (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:237)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py", 237], "__enter__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:256)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py", 256], "top (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:251)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py", 251], "inject_url_defaults (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1793)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 1793], "match_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1132)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1132], "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1731)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1731], "build_compare_key (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1160)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1160], "<lambda> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1733)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1733], "update (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1720)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1720], "suitable_for (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1099)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1099], "iter_multi_items (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/datastructures.py:23)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/datastructures.py", 23], "<listcomp> (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:534)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py", 534], "quote (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:533)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py", 533], "_fast_url_quote_plus (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:543)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py", 543], "_url_encode_impl (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:420)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py", 420], "url_encode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py:955)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/urls.py", 955], "_encode_query_vars (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:816)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 816], "build (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:1070)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 1070], "_partial_build (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:2162)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 2162], "get_host (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:2075)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 2075], "build (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py:2203)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/routing.py", 2203], "url_for (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py:194)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/helpers.py", 194], "do_teardown_appcontext (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py:1925)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/app.py", 1925], "__release_local__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:64)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py", 64], "__release_local__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:157)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py", 157], "release_local (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:93)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py", 93], "pop (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py:238)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/werkzeug/local.py", 238], "pop (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:243)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py", 243], "__exit__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py:260)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/flask/ctx.py", 260], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:642)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py", 642], "register (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:22)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py", 22], "register_standard_browsers (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:502)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py", 502], "get (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:37)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py", 37], "_cleanup (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:226)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 226], "_get_handles (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1329)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 1329], "fsencode (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:803)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py", 803], "_execute_child (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1383)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 1383], "__init__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:656)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 656], "getpreferredencoding (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_bootlocale.py:33)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/_bootlocale.py", 33], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/codecs.py:186)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/codecs.py", 186], "__init__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:1000)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py", 1000], "popen (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:977)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py", 977], "__getattr__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:1016)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py", 1016], "_try_wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1579)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 1579], "_handle_exitstatus (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1526)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 1526], "_wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1592)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 1592], "wait (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:985)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 985], "close (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py:1003)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/bin/../lib/python3.7/os.py", 1003], "open (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:645)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py", 645], "_internal_poll (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:1544)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 1544], "__del__ (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py:850)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", 850], "open (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:71)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py", 71], "open_new_tab (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py:85)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/webbrowser.py", 85], "trace (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/heartrate/core.py:64)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/heartrate/core.py", 64], "isfunction (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:158)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py", 158], "no_args_decorator (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py:147)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py", 147], "iscoroutinefunction (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:179)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py", 179], "wraps (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py:67)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/functools.py", 67], "isgeneratorfunction (/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py:171)": ["/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py", 171], "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:161)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py", 161], "__call__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:126)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py", 126], "_is_internal_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:222)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py", 222], "__enter__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:192)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py", 192], "factorial (/Users/rafsan/Desktop/pythonProject/main.py:10)": ["/Users/rafsan/Desktop/pythonProject/main.py", 10], "_is_traced_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:225)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py", 225], "is_comprehension_frame (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py:61)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/utils.py", 61], "trace (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:228)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py", 228], "__exit__ (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:209)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py", 209], "simple_wrapper (/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py:167)": ["/Users/rafsan/.local/share/virtualenvs/rafsan-7bhAsC_t/lib/python3.7/site-packages/snoop/tracer.py", 167]}}}